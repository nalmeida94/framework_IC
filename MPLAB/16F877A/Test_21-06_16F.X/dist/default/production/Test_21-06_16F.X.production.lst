

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Jun 21 17:07:48 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	intentry,global,class=CODE,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	dabs	1,0x7E,2
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  010F                     	;# 
   115  018C                     	;# 
   116  018D                     	;# 
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  000E                     	;# 
   133  000F                     	;# 
   134  0010                     	;# 
   135  0011                     	;# 
   136  0012                     	;# 
   137  0013                     	;# 
   138  0014                     	;# 
   139  0015                     	;# 
   140  0015                     	;# 
   141  0016                     	;# 
   142  0017                     	;# 
   143  0018                     	;# 
   144  0019                     	;# 
   145  001A                     	;# 
   146  001B                     	;# 
   147  001B                     	;# 
   148  001C                     	;# 
   149  001D                     	;# 
   150  001E                     	;# 
   151  001F                     	;# 
   152  0081                     	;# 
   153  0085                     	;# 
   154  0086                     	;# 
   155  0087                     	;# 
   156  0088                     	;# 
   157  0089                     	;# 
   158  008C                     	;# 
   159  008D                     	;# 
   160  008E                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0098                     	;# 
   166  0099                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  018C                     	;# 
   176  018D                     	;# 
   177  0000                     	;# 
   178  0001                     	;# 
   179  0002                     	;# 
   180  0003                     	;# 
   181  0004                     	;# 
   182  0005                     	;# 
   183  0006                     	;# 
   184  0007                     	;# 
   185  0008                     	;# 
   186  0009                     	;# 
   187  000A                     	;# 
   188  000B                     	;# 
   189  000C                     	;# 
   190  000D                     	;# 
   191  000E                     	;# 
   192  000E                     	;# 
   193  000F                     	;# 
   194  0010                     	;# 
   195  0011                     	;# 
   196  0012                     	;# 
   197  0013                     	;# 
   198  0014                     	;# 
   199  0015                     	;# 
   200  0015                     	;# 
   201  0016                     	;# 
   202  0017                     	;# 
   203  0018                     	;# 
   204  0019                     	;# 
   205  001A                     	;# 
   206  001B                     	;# 
   207  001B                     	;# 
   208  001C                     	;# 
   209  001D                     	;# 
   210  001E                     	;# 
   211  001F                     	;# 
   212  0081                     	;# 
   213  0085                     	;# 
   214  0086                     	;# 
   215  0087                     	;# 
   216  0088                     	;# 
   217  0089                     	;# 
   218  008C                     	;# 
   219  008D                     	;# 
   220  008E                     	;# 
   221  0091                     	;# 
   222  0092                     	;# 
   223  0093                     	;# 
   224  0094                     	;# 
   225  0098                     	;# 
   226  0099                     	;# 
   227  009C                     	;# 
   228  009D                     	;# 
   229  009E                     	;# 
   230  009F                     	;# 
   231  010C                     	;# 
   232  010D                     	;# 
   233  010E                     	;# 
   234  010F                     	;# 
   235  018C                     	;# 
   236  018D                     	;# 
   237  0000                     	;# 
   238  0001                     	;# 
   239  0002                     	;# 
   240  0003                     	;# 
   241  0004                     	;# 
   242  0005                     	;# 
   243  0006                     	;# 
   244  0007                     	;# 
   245  0008                     	;# 
   246  0009                     	;# 
   247  000A                     	;# 
   248  000B                     	;# 
   249  000C                     	;# 
   250  000D                     	;# 
   251  000E                     	;# 
   252  000E                     	;# 
   253  000F                     	;# 
   254  0010                     	;# 
   255  0011                     	;# 
   256  0012                     	;# 
   257  0013                     	;# 
   258  0014                     	;# 
   259  0015                     	;# 
   260  0015                     	;# 
   261  0016                     	;# 
   262  0017                     	;# 
   263  0018                     	;# 
   264  0019                     	;# 
   265  001A                     	;# 
   266  001B                     	;# 
   267  001B                     	;# 
   268  001C                     	;# 
   269  001D                     	;# 
   270  001E                     	;# 
   271  001F                     	;# 
   272  0081                     	;# 
   273  0085                     	;# 
   274  0086                     	;# 
   275  0087                     	;# 
   276  0088                     	;# 
   277  0089                     	;# 
   278  008C                     	;# 
   279  008D                     	;# 
   280  008E                     	;# 
   281  0091                     	;# 
   282  0092                     	;# 
   283  0093                     	;# 
   284  0094                     	;# 
   285  0098                     	;# 
   286  0099                     	;# 
   287  009C                     	;# 
   288  009D                     	;# 
   289  009E                     	;# 
   290  009F                     	;# 
   291  010C                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  010F                     	;# 
   295  018C                     	;# 
   296  018D                     	;# 
   297  0000                     	;# 
   298  0001                     	;# 
   299  0002                     	;# 
   300  0003                     	;# 
   301  0004                     	;# 
   302  0005                     	;# 
   303  0006                     	;# 
   304  0007                     	;# 
   305  0008                     	;# 
   306  0009                     	;# 
   307  000A                     	;# 
   308  000B                     	;# 
   309  000C                     	;# 
   310  000D                     	;# 
   311  000E                     	;# 
   312  000E                     	;# 
   313  000F                     	;# 
   314  0010                     	;# 
   315  0011                     	;# 
   316  0012                     	;# 
   317  0013                     	;# 
   318  0014                     	;# 
   319  0015                     	;# 
   320  0015                     	;# 
   321  0016                     	;# 
   322  0017                     	;# 
   323  0018                     	;# 
   324  0019                     	;# 
   325  001A                     	;# 
   326  001B                     	;# 
   327  001B                     	;# 
   328  001C                     	;# 
   329  001D                     	;# 
   330  001E                     	;# 
   331  001F                     	;# 
   332  0081                     	;# 
   333  0085                     	;# 
   334  0086                     	;# 
   335  0087                     	;# 
   336  0088                     	;# 
   337  0089                     	;# 
   338  008C                     	;# 
   339  008D                     	;# 
   340  008E                     	;# 
   341  0091                     	;# 
   342  0092                     	;# 
   343  0093                     	;# 
   344  0094                     	;# 
   345  0098                     	;# 
   346  0099                     	;# 
   347  009C                     	;# 
   348  009D                     	;# 
   349  009E                     	;# 
   350  009F                     	;# 
   351  010C                     	;# 
   352  010D                     	;# 
   353  010E                     	;# 
   354  010F                     	;# 
   355  018C                     	;# 
   356  018D                     	;# 
   357                           
   358                           	psect	idataBANK0
   359  07FA                     __pidataBANK0:	
   360                           
   361                           ;initializer for _randx
   362  07FA  3401               	retlw	1
   363  07FB  3400               	retlw	0
   364  07FC  3400               	retlw	0
   365  07FD  3400               	retlw	0
   366                           
   367                           ;initializer for _receivedData
   368  07FE  3458               	retlw	88
   369                           
   370                           	psect	idataBANK1
   371  0C08                     __pidataBANK1:	
   372                           
   373                           ;initializer for _channel
   374  0C08  3401               	retlw	1
   375                           
   376                           ;initializer for _id
   377  0C09  341C               	retlw	28
   378                           
   379                           ;initializer for _maxCont
   380  0C0A  340A               	retlw	10
   381                           
   382                           ;initializer for _minCont
   383  0C0B  3405               	retlw	5
   384                           
   385                           	psect	strings
   386  0800                     __pstrings:	
   387  0800                     stringtab:	
   388  0800                     __stringtab:	
   389  0800                     stringcode:	
   390                           ;	String table - string pointers are 1 byte each
   391                           
   392  0800                     stringdir:	
   393  0800  3008               	movlw	high stringdir
   394  0801  008A               	movwf	10
   395  0802  0804               	movf	4,w
   396  0803  0A84               	incf	4,f
   397  0804  0782               	addwf	2,f
   398  0805                     __stringbase:	
   399  0805  3400               	retlw	0
   400  0806                     __end_of__stringtab:	
   401  0806                     _dpowers:	
   402  0806  3401               	retlw	1
   403  0807  3400               	retlw	0
   404  0808  340A               	retlw	10
   405  0809  3400               	retlw	0
   406  080A  3464               	retlw	100
   407  080B  3400               	retlw	0
   408  080C  34E8               	retlw	232
   409  080D  3403               	retlw	3
   410  080E  3410               	retlw	16
   411  080F  3427               	retlw	39
   412  0810                     __end_of_dpowers:	
   413  0810                     _hexpowers:	
   414  0810  3401               	retlw	1
   415  0811  3400               	retlw	0
   416  0812  3410               	retlw	16
   417  0813  3400               	retlw	0
   418  0814  3400               	retlw	0
   419  0815  3401               	retlw	1
   420  0816  3400               	retlw	0
   421  0817  3410               	retlw	16
   422  0818                     __end_of_hexpowers:	
   423  001F                     _ADCON0bits	set	31
   424  001E                     _ADRESH	set	30
   425  000B                     _INTCONbits	set	11
   426  000C                     _PIR1bits	set	12
   427  0008                     _PORTDbits	set	8
   428  001A                     _RCREG	set	26
   429  0013                     _SSPBUF	set	19
   430  0001                     _TMR0	set	1
   431  0019                     _TXREG	set	25
   432  00FE                     _ADCS0	set	254
   433  00FF                     _ADCS1	set	255
   434  00A4                     _CKP	set	164
   435  00C4                     _CREN	set	196
   436  00C2                     _FERR	set	194
   437  005F                     _GIE	set	95
   438  00C1                     _OERR	set	193
   439  005E                     _PEIE	set	94
   440  0065                     _RCIF	set	101
   441  00C6                     _RX9	set	198
   442  00C7                     _SPEN	set	199
   443  00A5                     _SSPEN	set	165
   444  0063                     _SSPIF	set	99
   445  00A0                     _SSPM0	set	160
   446  00A1                     _SSPM1	set	161
   447  00A2                     _SSPM2	set	162
   448  00A3                     _SSPM3	set	163
   449  00A6                     _SSPOV	set	166
   450  0064                     _TXIF	set	100
   451  00A7                     _WCOL	set	167
   452  009F                     _ADCON1bits	set	159
   453  009E                     _ADRESL	set	158
   454  0081                     _OPTION_REGbits	set	129
   455  008C                     _PIE1bits	set	140
   456  0099                     _SPBRG	set	153
   457  0093                     _SSPADD	set	147
   458  0091                     _SSPCON2	set	145
   459  0091                     _SSPCON2bits	set	145
   460  0094                     _SSPSTAT	set	148
   461  0094                     _SSPSTATbits	set	148
   462  0088                     _TRISDbits	set	136
   463  04FE                     _ADCS2	set	1278
   464  04FF                     _ADFM	set	1279
   465  04C2                     _BRGH	set	1218
   466  04C7                     _CSRC	set	1223
   467  0465                     _RCIE	set	1125
   468  04C4                     _SYNC	set	1220
   469  043B                     _TRISC3	set	1083
   470  043C                     _TRISC4	set	1084
   471  04C6                     _TX9	set	1222
   472  04C5                     _TXEN	set	1221
   473  0464                     _TXIE	set	1124
   474  0818                     STR_2:	
   475  0818  3425               	retlw	37	;'%'
   476  0819  3475               	retlw	117	;'u'
   477  081A  3426               	retlw	38	;'&'
   478  081B  3425               	retlw	37	;'%'
   479  081C  3475               	retlw	117	;'u'
   480  081D  3426               	retlw	38	;'&'
   481  081E  3432               	retlw	50	;'2'
   482  081F  3430               	retlw	48	;'0'
   483  0820  3425               	retlw	37	;'%'
   484  0821  3430               	retlw	48	;'0'
   485  0822  3432               	retlw	50	;'2'
   486  0823  3458               	retlw	88	;'X'
   487  0824  342D               	retlw	45	;'-'
   488  0825  3425               	retlw	37	;'%'
   489  0826  3430               	retlw	48	;'0'
   490  0827  3432               	retlw	50	;'2'
   491  0828  3458               	retlw	88	;'X'
   492  0829  342D               	retlw	45	;'-'
   493  082A  3425               	retlw	37	;'%'
   494  082B  3430               	retlw	48	;'0'
   495  082C  3432               	retlw	50	;'2'
   496  082D  3458               	retlw	88	;'X'
   497  082E  3420               	retlw	32	;' '
   498  082F  3425               	retlw	37	;'%'
   499  0830  3430               	retlw	48	;'0'
   500  0831  3432               	retlw	50	;'2'
   501  0832  3458               	retlw	88	;'X'
   502  0833  343A               	retlw	58	;':'
   503  0834  3425               	retlw	37	;'%'
   504  0835  3430               	retlw	48	;'0'
   505  0836  3432               	retlw	50	;'2'
   506  0837  3458               	retlw	88	;'X'
   507  0838  343A               	retlw	58	;':'
   508  0839  3425               	retlw	37	;'%'
   509  083A  3430               	retlw	48	;'0'
   510  083B  3432               	retlw	50	;'2'
   511  083C  3458               	retlw	88	;'X'
   512  083D  3400               	retlw	0
   513  083E                     STR_4:	
   514  083E  3430               	retlw	48	;'0'
   515  083F  3431               	retlw	49	;'1'
   516  0840  3432               	retlw	50	;'2'
   517  0841  3433               	retlw	51	;'3'
   518  0842  3434               	retlw	52	;'4'
   519  0843  3435               	retlw	53	;'5'
   520  0844  3436               	retlw	54	;'6'
   521  0845  3437               	retlw	55	;'7'
   522  0846  3438               	retlw	56	;'8'
   523  0847  3439               	retlw	57	;'9'
   524  0848  3441               	retlw	65	;'A'
   525  0849  3442               	retlw	66	;'B'
   526  084A  3443               	retlw	67	;'C'
   527  084B  3444               	retlw	68	;'D'
   528  084C  3445               	retlw	69	;'E'
   529  084D  3446               	retlw	70	;'F'
   530  084E  3400               	retlw	0
   531  084F                     STR_1:	
   532  084F  340A               	retlw	10
   533  0850  340D               	retlw	13
   534  0851  3400               	retlw	0
   535  0852                     STR_3:	
   536  0852  340A               	retlw	10
   537  0853  3400               	retlw	0
   538                           
   539                           ; #config settings
   540  0000                     
   541                           	psect	cinit
   542  0015                     start_initialization:	
   543  0015                     __initialization:	
   544                           
   545                           ; Clear objects allocated to BITBANK0
   546  0015  01DA               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   547                           
   548                           ; Clear objects allocated to BANK0
   549  0016  01DB               	clrf	__pbssBANK0& (0+127)
   550                           
   551                           ; Clear objects allocated to BANK1
   552  0017  1383               	bcf	3,7	;select IRP bank0
   553  0018  30A0               	movlw	low __pbssBANK1
   554  0019  0084               	movwf	4
   555  001A  30C6               	movlw	low (__pbssBANK1+38)
   556  001B  120A  158A  2434  120A  118A  	fcall	clear_ram0
   557                           
   558                           ; Clear objects allocated to BANK3
   559  0020  1783               	bsf	3,7	;select IRP bank2
   560  0021  3090               	movlw	low __pbssBANK3
   561  0022  0084               	movwf	4
   562  0023  30AA               	movlw	low (__pbssBANK3+26)
   563  0024  120A  158A  2434  120A  118A  	fcall	clear_ram0
   564                           
   565                           ; Initialize objects allocated to BANK1
   566  0029  1383               	bcf	3,7	;select IRP bank0
   567  002A  30EC               	movlw	low (__pdataBANK1+4)
   568  002B  00FD               	movwf	btemp+-1
   569  002C  300C               	movlw	high __pidataBANK1
   570  002D  00FE               	movwf	btemp
   571  002E  3008               	movlw	low __pidataBANK1
   572  002F  00FF               	movwf	btemp+1
   573  0030  30E8               	movlw	low __pdataBANK1
   574  0031  0084               	movwf	4
   575  0032  120A  118A  27ED  120A  118A  	fcall	init_ram0
   576                           
   577                           ; Initialize objects allocated to BANK0
   578  0037  305A               	movlw	low (__pdataBANK0+5)
   579  0038  00FD               	movwf	btemp+-1
   580  0039  3007               	movlw	high __pidataBANK0
   581  003A  00FE               	movwf	btemp
   582  003B  30FA               	movlw	low __pidataBANK0
   583  003C  00FF               	movwf	btemp+1
   584  003D  3055               	movlw	low __pdataBANK0
   585  003E  0084               	movwf	4
   586  003F  120A  118A  27ED   	fcall	init_ram0
   587  0042                     end_of_initialization:	
   588                           ;End of C runtime variable initialization code
   589                           
   590  0042                     __end_of__initialization:	
   591  0042  0183               	clrf	3
   592  0043  120A  118A  2846   	ljmp	_main	;jump to C main() function
   593                           
   594                           	psect	bitbssBANK0
   595  02D0                     __pbitbssBANK0:	
   596  02D0                     _changing:	
   597  02D0                     	ds	1
   598  02D1                     _hasAnError:	
   599  02D1                     	ds	1
   600                           
   601                           	psect	bssBANK0
   602  005B                     __pbssBANK0:	
   603  005B                     _i:	
   604  005B                     	ds	1
   605                           
   606                           	psect	dataBANK0
   607  0055                     __pdataBANK0:	
   608  0055                     _randx:	
   609  0055                     	ds	4
   610  0059                     _receivedData:	
   611  0059                     	ds	1
   612                           
   613                           	psect	bssBANK1
   614  00A0                     __pbssBANK1:	
   615  00A0                     _data_ADC:	
   616  00A0                     	ds	2
   617  00A2                     _ano:	
   618  00A2                     	ds	1
   619  00A3                     _contLedRD4:	
   620  00A3                     	ds	1
   621  00A4                     _contTimer0:	
   622  00A4                     	ds	1
   623  00A5                     _dia:	
   624  00A5                     	ds	1
   625  00A6                     _hora:	
   626  00A6                     	ds	1
   627  00A7                     _leitura:	
   628  00A7                     	ds	1
   629  00A8                     _mes:	
   630  00A8                     	ds	1
   631  00A9                     _minuto:	
   632  00A9                     	ds	1
   633  00AA                     _segundo:	
   634  00AA                     	ds	1
   635  00AB                     _val:	
   636  00AB                     	ds	1
   637  00AC                     _string_aux:	
   638  00AC                     	ds	26
   639                           
   640                           	psect	dataBANK1
   641  00E8                     __pdataBANK1:	
   642  00E8                     _channel:	
   643  00E8                     	ds	1
   644  00E9                     _id:	
   645  00E9                     	ds	1
   646  00EA                     _maxCont:	
   647  00EA                     	ds	1
   648  00EB                     _minCont:	
   649  00EB                     	ds	1
   650                           
   651                           	psect	bssBANK3
   652  0190                     __pbssBANK3:	
   653  0190                     _string:	
   654  0190                     	ds	26
   655                           
   656                           	psect	clrtext
   657  0C34                     clear_ram0:	
   658                           ;	Called with FSR containing the base address, and
   659                           ;	W with the last address+1
   660                           
   661  0C34  0064               	clrwdt	;clear the watchdog before getting into this loop
   662  0C35                     clrloop0:	
   663  0C35  0180               	clrf	0	;clear RAM location pointed to by FSR
   664  0C36  0A84               	incf	4,f	;increment pointer
   665  0C37  0604               	xorwf	4,w	;XOR with final address
   666  0C38  1903               	btfsc	3,2	;have we reached the end yet?
   667  0C39  3400               	retlw	0	;all done for this memory range, return
   668  0C3A  0604               	xorwf	4,w	;XOR again to restore value
   669  0C3B  2C35               	goto	clrloop0	;do the next byte
   670                           
   671                           	psect	inittext
   672  07E9                     init_fetch0:	
   673                           ;	Called with low address in FSR and high address in W
   674                           
   675  07E9  087E               	movf	126,w
   676  07EA  008A               	movwf	10
   677  07EB  087F               	movf	127,w
   678  07EC  0082               	movwf	2
   679  07ED                     init_ram0:	
   680                           ;Called with:
   681                           ;	high address of idata address in btemp 
   682                           ;	low address of idata address in btemp+1 
   683                           ;	low address of data in FSR
   684                           ;	high address + 1 of data in btemp-1
   685                           
   686  07ED  27E9  120A  118A   	fcall	init_fetch0
   687  07F0  0080               	movwf	0
   688  07F1  0A84               	incf	4,f
   689  07F2  0804               	movf	4,w
   690  07F3  067D               	xorwf	125,w
   691  07F4  1903               	btfsc	3,2
   692  07F5  3400               	retlw	0
   693  07F6  0AFF               	incf	127,f
   694  07F7  1903               	btfsc	3,2
   695  07F8  0AFE               	incf	126,f
   696  07F9  2FED               	goto	init_ram0
   697                           
   698                           	psect	cstackBANK1
   699  00C6                     __pcstackBANK1:	
   700  00C6                     printf@idx:	
   701                           
   702                           ; 1 bytes @ 0x0
   703  00C6                     	ds	1
   704  00C7                     printf@ap:	
   705                           
   706                           ; 1 bytes @ 0x1
   707  00C7                     	ds	1
   708  00C8                     printf@prec:	
   709                           
   710                           ; 1 bytes @ 0x2
   711  00C8                     	ds	1
   712  00C9                     printf@val:	
   713                           
   714                           ; 2 bytes @ 0x3
   715  00C9                     	ds	2
   716  00CB                     printf@flag:	
   717                           
   718                           ; 1 bytes @ 0x5
   719  00CB                     	ds	1
   720  00CC                     printf@width:	
   721                           
   722                           ; 2 bytes @ 0x6
   723  00CC                     	ds	2
   724  00CE                     printf@f:	
   725                           
   726                           ; 1 bytes @ 0x8
   727  00CE                     	ds	1
   728  00CF                     printf@c:	
   729                           
   730                           ; 1 bytes @ 0x9
   731  00CF                     	ds	1
   732  00D0                     ??_main:	
   733                           
   734                           ; 0 bytes @ 0xA
   735  00D0                     	ds	14
   736  00DE                     main@i:	
   737                           
   738                           ; 2 bytes @ 0x18
   739  00DE                     	ds	2
   740  00E0                     main@i_579:	
   741                           
   742                           ; 2 bytes @ 0x1A
   743  00E0                     	ds	2
   744  00E2                     main@i_580:	
   745                           
   746                           ; 2 bytes @ 0x1C
   747  00E2                     	ds	2
   748  00E4                     main@i_581:	
   749                           
   750                           ; 2 bytes @ 0x1E
   751  00E4                     	ds	2
   752  00E6                     main@i_582:	
   753                           
   754                           ; 2 bytes @ 0x20
   755  00E6                     	ds	2
   756                           
   757                           	psect	cstackCOMMON
   758  0070                     __pcstackCOMMON:	
   759  0070                     ?_configTimer:	
   760  0070                     ?_configRS232:	
   761                           ; 0 bytes @ 0x0
   762                           
   763  0070                     ?_configUSARTInterrupts:	
   764                           ; 0 bytes @ 0x0
   765                           
   766  0070                     ?_isdigit:	
   767                           ; 0 bytes @ 0x0
   768                           
   769  0070                     ?_configADInterrupt:	
   770                           ; 1 bit 
   771                           
   772  0070                     ?_configAD:	
   773                           ; 0 bytes @ 0x0
   774                           
   775  0070                     ?_selectChanel:	
   776                           ; 0 bytes @ 0x0
   777                           
   778  0070                     ?_InitI2C_Master:	
   779                           ; 0 bytes @ 0x0
   780                           
   781  0070                     ?_I2C_Start:	
   782                           ; 0 bytes @ 0x0
   783                           
   784  0070                     ?_I2C_ReStart:	
   785                           ; 0 bytes @ 0x0
   786                           
   787  0070                     ?_I2C_Stop:	
   788                           ; 0 bytes @ 0x0
   789                           
   790  0070                     ?_I2C_Send_NACK:	
   791                           ; 0 bytes @ 0x0
   792                           
   793  0070                     ?_I2C_Write_Byte:	
   794                           ; 0 bytes @ 0x0
   795                           
   796  0070                     ?_I2C_Idle:	
   797                           ; 1 bit 
   798                           
   799  0070                     ?_interruptions:	
   800                           ; 0 bytes @ 0x0
   801                           
   802  0070                     ?_write_RTC_I2c:	
   803                           ; 0 bytes @ 0x0
   804                           
   805  0070                     ?_read_RTC_I2c:	
   806                           ; 0 bytes @ 0x0
   807                           
   808  0070                     ?_main:	
   809                           ; 0 bytes @ 0x0
   810                           
   811  0070                     ?_putch:	
   812                           ; 0 bytes @ 0x0
   813                           
   814  0070                     ?i1_putch:	
   815                           ; 0 bytes @ 0x0
   816                           
   817  0070                     ??i1_putch:	
   818                           ; 0 bytes @ 0x0
   819                           
   820  0070                     ?i1_isdigit:	
   821                           ; 0 bytes @ 0x0
   822                           
   823  0070                     ??i1_isdigit:	
   824                           ; 1 bit 
   825                           
   826  0070                     ?_strcpy:	
   827                           ; 0 bytes @ 0x0
   828                           
   829  0070                     ?_I2C_Read_Byte:	
   830                           ; 1 bytes @ 0x0
   831                           
   832  0070                     ?i1_printf:	
   833                           ; 1 bytes @ 0x0
   834                           
   835  0070                     ?i1___wmul:	
   836                           ; 2 bytes @ 0x0
   837                           
   838  0070                     ?i1___awmod:	
   839                           ; 2 bytes @ 0x0
   840                           
   841  0070                     ?i1___lwdiv:	
   842                           ; 2 bytes @ 0x0
   843                           
   844  0070                     strcpy@from:	
   845                           ; 2 bytes @ 0x0
   846                           
   847  0070                     i1putch@byte:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0070                     i1_isdigit$889:	
   851                           ; 1 bytes @ 0x0
   852                           
   853  0070                     i1___wmul@multiplier:	
   854                           ; 1 bytes @ 0x0
   855                           
   856  0070                     i1___awmod@divisor:	
   857                           ; 2 bytes @ 0x0
   858                           
   859  0070                     i1___lwdiv@divisor:	
   860                           ; 2 bytes @ 0x0
   861                           
   862                           
   863                           ; 2 bytes @ 0x0
   864  0070                     	ds	1
   865  0071                     ??_strcpy:	
   866  0071                     i1isdigit@c:	
   867                           ; 0 bytes @ 0x1
   868                           
   869                           
   870                           ; 1 bytes @ 0x1
   871  0071                     	ds	1
   872  0072                     strcpy@to:	
   873  0072                     i1___wmul@multiplicand:	
   874                           ; 1 bytes @ 0x2
   875                           
   876  0072                     i1___awmod@dividend:	
   877                           ; 2 bytes @ 0x2
   878                           
   879  0072                     i1___lwdiv@dividend:	
   880                           ; 2 bytes @ 0x2
   881                           
   882                           
   883                           ; 2 bytes @ 0x2
   884  0072                     	ds	1
   885  0073                     strcpy@cp:	
   886                           
   887                           ; 1 bytes @ 0x3
   888  0073                     	ds	1
   889  0074                     ??i1___wmul:	
   890  0074                     ??i1___awmod:	
   891                           ; 0 bytes @ 0x4
   892                           
   893  0074                     ??i1___lwdiv:	
   894                           ; 0 bytes @ 0x4
   895                           
   896  0074                     i1___wmul@product:	
   897                           ; 0 bytes @ 0x4
   898                           
   899                           
   900                           ; 2 bytes @ 0x4
   901  0074                     	ds	1
   902  0075                     i1___awmod@counter:	
   903  0075                     i1___lwdiv@quotient:	
   904                           ; 1 bytes @ 0x5
   905                           
   906                           
   907                           ; 2 bytes @ 0x5
   908  0075                     	ds	1
   909  0076                     i1___awmod@sign:	
   910                           
   911                           ; 1 bytes @ 0x6
   912  0076                     	ds	1
   913  0077                     i1___lwdiv@counter:	
   914                           
   915                           ; 1 bytes @ 0x7
   916  0077                     	ds	1
   917  0078                     ?i1___lwmod:	
   918  0078                     i1___lwmod@divisor:	
   919                           ; 2 bytes @ 0x8
   920                           
   921                           
   922                           ; 2 bytes @ 0x8
   923  0078                     	ds	2
   924  007A                     i1___lwmod@dividend:	
   925                           
   926                           ; 2 bytes @ 0xA
   927  007A                     	ds	2
   928  007C                     ??i1___lwmod:	
   929                           
   930                           ; 0 bytes @ 0xC
   931  007C                     	ds	1
   932  007D                     i1___lwmod@counter:	
   933                           
   934                           ; 1 bytes @ 0xD
   935  007D                     	ds	1
   936                           
   937                           	psect	cstackBANK0
   938  0020                     __pcstackBANK0:	
   939  0020                     ??i1_printf:	
   940                           
   941                           ; 0 bytes @ 0x0
   942  0020                     	ds	3
   943  0023                     i1printf@idx:	
   944                           
   945                           ; 1 bytes @ 0x3
   946  0023                     	ds	1
   947  0024                     i1printf@f:	
   948                           
   949                           ; 1 bytes @ 0x4
   950  0024                     	ds	1
   951  0025                     i1printf@ap:	
   952                           
   953                           ; 1 bytes @ 0x5
   954  0025                     	ds	1
   955  0026                     i1printf@prec:	
   956                           
   957                           ; 1 bytes @ 0x6
   958  0026                     	ds	1
   959  0027                     i1printf@flag:	
   960                           
   961                           ; 1 bytes @ 0x7
   962  0027                     	ds	1
   963  0028                     i1printf@val:	
   964                           
   965                           ; 2 bytes @ 0x8
   966  0028                     	ds	2
   967  002A                     i1printf@width:	
   968                           
   969                           ; 2 bytes @ 0xA
   970  002A                     	ds	2
   971  002C                     i1printf@c:	
   972                           
   973                           ; 1 bytes @ 0xC
   974  002C                     	ds	1
   975  002D                     ??_interruptions:	
   976                           
   977                           ; 0 bytes @ 0xD
   978  002D                     	ds	7
   979  0034                     ??_configTimer:	
   980  0034                     ??_configRS232:	
   981                           ; 0 bytes @ 0x14
   982                           
   983  0034                     ??_configUSARTInterrupts:	
   984                           ; 0 bytes @ 0x14
   985                           
   986  0034                     ?_srand:	
   987                           ; 0 bytes @ 0x14
   988                           
   989  0034                     ??_isdigit:	
   990                           ; 0 bytes @ 0x14
   991                           
   992  0034                     ??_configADInterrupt:	
   993                           ; 0 bytes @ 0x14
   994                           
   995  0034                     ??_configAD:	
   996                           ; 0 bytes @ 0x14
   997                           
   998  0034                     ??_selectChanel:	
   999                           ; 0 bytes @ 0x14
  1000                           
  1001  0034                     ??_InitI2C_Master:	
  1002                           ; 0 bytes @ 0x14
  1003                           
  1004  0034                     ??_I2C_Start:	
  1005                           ; 0 bytes @ 0x14
  1006                           
  1007  0034                     ??_I2C_ReStart:	
  1008                           ; 0 bytes @ 0x14
  1009                           
  1010  0034                     ??_I2C_Stop:	
  1011                           ; 0 bytes @ 0x14
  1012                           
  1013  0034                     ??_I2C_Send_NACK:	
  1014                           ; 0 bytes @ 0x14
  1015                           
  1016  0034                     ??_I2C_Write_Byte:	
  1017                           ; 0 bytes @ 0x14
  1018                           
  1019  0034                     ??_I2C_Read_Byte:	
  1020                           ; 0 bytes @ 0x14
  1021                           
  1022  0034                     ??_I2C_Idle:	
  1023                           ; 0 bytes @ 0x14
  1024                           
  1025  0034                     ??_putch:	
  1026                           ; 0 bytes @ 0x14
  1027                           
  1028  0034                     ?___wmul:	
  1029                           ; 0 bytes @ 0x14
  1030                           
  1031  0034                     ?___lwdiv:	
  1032                           ; 2 bytes @ 0x14
  1033                           
  1034  0034                     ?___lmul:	
  1035                           ; 2 bytes @ 0x14
  1036                           
  1037  0034                     selectChanel@channel:	
  1038                           ; 4 bytes @ 0x14
  1039                           
  1040  0034                     I2C_Write_Byte@Byte:	
  1041                           ; 1 bytes @ 0x14
  1042                           
  1043  0034                     putch@byte:	
  1044                           ; 1 bytes @ 0x14
  1045                           
  1046  0034                     _isdigit$889:	
  1047                           ; 1 bytes @ 0x14
  1048                           
  1049  0034                     ___wmul@multiplier:	
  1050                           ; 1 bytes @ 0x14
  1051                           
  1052  0034                     ___lwdiv@divisor:	
  1053                           ; 2 bytes @ 0x14
  1054                           
  1055  0034                     srand@x:	
  1056                           ; 2 bytes @ 0x14
  1057                           
  1058  0034                     ___lmul@multiplier:	
  1059                           ; 2 bytes @ 0x14
  1060                           
  1061                           
  1062                           ; 4 bytes @ 0x14
  1063  0034                     	ds	1
  1064  0035                     ??_write_RTC_I2c:	
  1065  0035                     ??_read_RTC_I2c:	
  1066                           ; 0 bytes @ 0x15
  1067                           
  1068  0035                     isdigit@c:	
  1069                           ; 0 bytes @ 0x15
  1070                           
  1071                           
  1072                           ; 1 bytes @ 0x15
  1073  0035                     	ds	1
  1074  0036                     ??_srand:	
  1075  0036                     read_RTC_I2c@pos_memoria:	
  1076                           ; 0 bytes @ 0x16
  1077                           
  1078  0036                     ___wmul@multiplicand:	
  1079                           ; 1 bytes @ 0x16
  1080                           
  1081  0036                     ___lwdiv@dividend:	
  1082                           ; 2 bytes @ 0x16
  1083                           
  1084                           
  1085                           ; 2 bytes @ 0x16
  1086  0036                     	ds	2
  1087  0038                     ??___wmul:	
  1088  0038                     ??___lwdiv:	
  1089                           ; 0 bytes @ 0x18
  1090                           
  1091  0038                     ___wmul@product:	
  1092                           ; 0 bytes @ 0x18
  1093                           
  1094  0038                     ___lmul@multiplicand:	
  1095                           ; 2 bytes @ 0x18
  1096                           
  1097                           
  1098                           ; 4 bytes @ 0x18
  1099  0038                     	ds	1
  1100  0039                     ___lwdiv@quotient:	
  1101                           
  1102                           ; 2 bytes @ 0x19
  1103  0039                     	ds	2
  1104  003B                     ___lwdiv@counter:	
  1105                           
  1106                           ; 1 bytes @ 0x1B
  1107  003B                     	ds	1
  1108  003C                     ??___lmul:	
  1109  003C                     ?___lwmod:	
  1110                           ; 0 bytes @ 0x1C
  1111                           
  1112  003C                     ___lwmod@divisor:	
  1113                           ; 2 bytes @ 0x1C
  1114                           
  1115                           
  1116                           ; 2 bytes @ 0x1C
  1117  003C                     	ds	1
  1118  003D                     ___lmul@product:	
  1119                           
  1120                           ; 4 bytes @ 0x1D
  1121  003D                     	ds	1
  1122  003E                     ___lwmod@dividend:	
  1123                           
  1124                           ; 2 bytes @ 0x1E
  1125  003E                     	ds	2
  1126  0040                     ??___lwmod:	
  1127                           
  1128                           ; 0 bytes @ 0x20
  1129  0040                     	ds	1
  1130  0041                     ?_rand:	
  1131  0041                     ___lwmod@counter:	
  1132                           ; 2 bytes @ 0x21
  1133                           
  1134                           
  1135                           ; 1 bytes @ 0x21
  1136  0041                     	ds	1
  1137  0042                     ?_printf:	
  1138                           
  1139                           ; 2 bytes @ 0x22
  1140  0042                     	ds	1
  1141  0043                     ??_rand:	
  1142                           
  1143                           ; 0 bytes @ 0x23
  1144  0043                     	ds	5
  1145  0048                     ?___awmod:	
  1146  0048                     ___awmod@divisor:	
  1147                           ; 2 bytes @ 0x28
  1148                           
  1149                           
  1150                           ; 2 bytes @ 0x28
  1151  0048                     	ds	2
  1152  004A                     ___awmod@dividend:	
  1153                           
  1154                           ; 2 bytes @ 0x2A
  1155  004A                     	ds	2
  1156  004C                     ??___awmod:	
  1157                           
  1158                           ; 0 bytes @ 0x2C
  1159  004C                     	ds	1
  1160  004D                     ___awmod@counter:	
  1161                           
  1162                           ; 1 bytes @ 0x2D
  1163  004D                     	ds	1
  1164  004E                     ___awmod@sign:	
  1165                           
  1166                           ; 1 bytes @ 0x2E
  1167  004E                     	ds	4
  1168  0052                     ??_printf:	
  1169                           
  1170                           ; 0 bytes @ 0x32
  1171  0052                     	ds	3
  1172                           
  1173                           	psect	maintext
  1174  0046                     __pmaintext:	
  1175 ;;
  1176 ;;Main: autosize = 0, tempsize = 14, incstack = 0, save=0
  1177 ;;
  1178 ;; *************** function _main *****************
  1179 ;; Defined at:
  1180 ;;		line 146 in file "main.c"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;		None
  1183 ;; Auto vars:     Size  Location     Type
  1184 ;;  i               2   32[BANK1 ] int 
  1185 ;;  i               2   30[BANK1 ] int 
  1186 ;;  i               2   28[BANK1 ] int 
  1187 ;;  i               2   26[BANK1 ] int 
  1188 ;;  i               2   24[BANK1 ] int 
  1189 ;; Return value:  Size  Location     Type
  1190 ;;		None               void
  1191 ;; Registers used:
  1192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1193 ;; Tracked objects:
  1194 ;;		On entry : B00/0
  1195 ;;		On exit  : 0/0
  1196 ;;		Unchanged: 0/0
  1197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1198 ;;      Params:         0       0       0       0       0
  1199 ;;      Locals:         0       0      10       0       0
  1200 ;;      Temps:          0       0      14       0       0
  1201 ;;      Totals:         0       0      24       0       0
  1202 ;;Total ram usage:       24 bytes
  1203 ;; Hardware stack levels required when called:    5
  1204 ;; This function calls:
  1205 ;;		_InitI2C_Master
  1206 ;;		___awmod
  1207 ;;		_configAD
  1208 ;;		_configADInterrupt
  1209 ;;		_configRS232
  1210 ;;		_configTimer
  1211 ;;		_configUSARTInterrupts
  1212 ;;		_printf
  1213 ;;		_rand
  1214 ;;		_read_RTC_I2c
  1215 ;;		_selectChanel
  1216 ;;		_srand
  1217 ;;		_write_RTC_I2c
  1218 ;; This function is called by:
  1219 ;;		Startup code after reset
  1220 ;; This function uses a non-reentrant model
  1221 ;;
  1222                           
  1223                           
  1224                           ;psect for function _main
  1225  0046                     _main:	
  1226                           
  1227                           ;main.c: 147: TRISDbits.TRISD3 = 0;
  1228                           
  1229                           ;incstack = 0
  1230                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1231  0046  1683               	bsf	3,5	;RP0=1, select bank1
  1232  0047  1303               	bcf	3,6	;RP1=0, select bank1
  1233  0048  1188               	bcf	8,3	;volatile
  1234                           
  1235                           ;main.c: 148: TRISDbits.TRISD4 = 0;
  1236  0049  1208               	bcf	8,4	;volatile
  1237                           
  1238                           ;main.c: 150: configTimer();
  1239  004A  120A  158A  2475  120A  118A  	fcall	_configTimer
  1240                           
  1241                           ;main.c: 153: configADInterrupt();
  1242  004F  120A  158A  243C  120A  118A  	fcall	_configADInterrupt
  1243                           
  1244                           ;main.c: 154: configAD();
  1245  0054  120A  158A  249F  120A  118A  	fcall	_configAD
  1246                           
  1247                           ;main.c: 157: configRS232();
  1248  0059  120A  158A  24BF  120A  118A  	fcall	_configRS232
  1249                           
  1250                           ;main.c: 158: configUSARTInterrupts();
  1251  005E  120A  158A  2490  120A  118A  	fcall	_configUSARTInterrupts
  1252                           
  1253                           ;main.c: 161: InitI2C_Master();
  1254  0063  120A  158A  24D0  120A  118A  	fcall	_InitI2C_Master
  1255                           
  1256                           ;main.c: 164: selectChanel(channel);
  1257  0068  1683               	bsf	3,5	;RP0=1, select bank1
  1258  0069  1303               	bcf	3,6	;RP1=0, select bank1
  1259  006A  0868               	movf	_channel^(0+128),w
  1260  006B  120A  158A  266A  120A  118A  	fcall	_selectChanel
  1261                           
  1262                           ;main.c: 166: for(int i = 0; i < 100; i++)
  1263  0070  1683               	bsf	3,5	;RP0=1, select bank1
  1264  0071  1303               	bcf	3,6	;RP1=0, select bank1
  1265  0072  01DE               	clrf	main@i^(0+128)
  1266  0073  01DF               	clrf	(main@i+1)^(0+128)
  1267  0074  085F               	movf	(main@i+1)^(0+128),w
  1268  0075  3A80               	xorlw	128
  1269  0076  00FF               	movwf	127
  1270  0077  3080               	movlw	128
  1271  0078  027F               	subwf	127,w
  1272  0079  1D03               	skipz
  1273  007A  287D               	goto	u2635
  1274  007B  3064               	movlw	100
  1275  007C  025E               	subwf	main@i^(0+128),w
  1276  007D                     u2635:	
  1277  007D  1803               	btfsc	3,0
  1278  007E  289D               	goto	l259
  1279  007F                     l2387:	
  1280                           
  1281                           ;main.c: 167: _delay((unsigned long)((10)*(20000000/4000.0)));
  1282  007F  3041               	movlw	65
  1283  0080  1683               	bsf	3,5	;RP0=1, select bank1
  1284  0081  1303               	bcf	3,6	;RP1=0, select bank1
  1285  0082  00D1               	movwf	(??_main^(0+128)+1)
  1286  0083  30EE               	movlw	238
  1287  0084  00D0               	movwf	??_main^(0+128)
  1288  0085                     u2777:	
  1289  0085  0BD0               	decfsz	??_main^(0+128),f
  1290  0086  2885               	goto	u2777
  1291  0087  0BD1               	decfsz	(??_main^(0+128)+1),f
  1292  0088  2885               	goto	u2777
  1293  0089  0000               	nop
  1294  008A  3001               	movlw	1
  1295  008B  1683               	bsf	3,5	;RP0=1, select bank1
  1296  008C  1303               	bcf	3,6	;RP1=0, select bank1
  1297  008D  07DE               	addwf	main@i^(0+128),f
  1298  008E  1803               	skipnc
  1299  008F  0ADF               	incf	(main@i+1)^(0+128),f
  1300  0090  3000               	movlw	0
  1301  0091  07DF               	addwf	(main@i+1)^(0+128),f
  1302  0092  085F               	movf	(main@i+1)^(0+128),w
  1303  0093  3A80               	xorlw	128
  1304  0094  00FF               	movwf	127
  1305  0095  3080               	movlw	128
  1306  0096  027F               	subwf	127,w
  1307  0097  1D03               	skipz
  1308  0098  289B               	goto	u2645
  1309  0099  3064               	movlw	100
  1310  009A  025E               	subwf	main@i^(0+128),w
  1311  009B                     u2645:	
  1312  009B  1C03               	skipc
  1313  009C  287F               	goto	l2387
  1314  009D                     l259:	
  1315                           
  1316                           ;main.c: 168: PORTDbits.RD4 = 0;
  1317  009D  1283               	bcf	3,5	;RP0=0, select bank0
  1318  009E  1303               	bcf	3,6	;RP1=0, select bank0
  1319  009F  1208               	bcf	8,4	;volatile
  1320                           
  1321                           ;main.c: 169: for(int i = 0; i < 100; i++)
  1322  00A0  1683               	bsf	3,5	;RP0=1, select bank1
  1323  00A1  1303               	bcf	3,6	;RP1=0, select bank1
  1324  00A2  01E0               	clrf	main@i_579^(0+128)
  1325  00A3  01E1               	clrf	(main@i_579+1)^(0+128)
  1326  00A4  0861               	movf	(main@i_579+1)^(0+128),w
  1327  00A5  3A80               	xorlw	128
  1328  00A6  00FF               	movwf	127
  1329  00A7  3080               	movlw	128
  1330  00A8  027F               	subwf	127,w
  1331  00A9  1D03               	skipz
  1332  00AA  28AD               	goto	u2655
  1333  00AB  3064               	movlw	100
  1334  00AC  0260               	subwf	main@i_579^(0+128),w
  1335  00AD                     u2655:	
  1336  00AD  1803               	btfsc	3,0
  1337  00AE  28CD               	goto	l261
  1338  00AF                     l2397:	
  1339                           
  1340                           ;main.c: 170: _delay((unsigned long)((10)*(20000000/4000.0)));
  1341  00AF  3041               	movlw	65
  1342  00B0  1683               	bsf	3,5	;RP0=1, select bank1
  1343  00B1  1303               	bcf	3,6	;RP1=0, select bank1
  1344  00B2  00D1               	movwf	(??_main^(0+128)+1)
  1345  00B3  30EE               	movlw	238
  1346  00B4  00D0               	movwf	??_main^(0+128)
  1347  00B5                     u2787:	
  1348  00B5  0BD0               	decfsz	??_main^(0+128),f
  1349  00B6  28B5               	goto	u2787
  1350  00B7  0BD1               	decfsz	(??_main^(0+128)+1),f
  1351  00B8  28B5               	goto	u2787
  1352  00B9  0000               	nop
  1353  00BA  3001               	movlw	1
  1354  00BB  1683               	bsf	3,5	;RP0=1, select bank1
  1355  00BC  1303               	bcf	3,6	;RP1=0, select bank1
  1356  00BD  07E0               	addwf	main@i_579^(0+128),f
  1357  00BE  1803               	skipnc
  1358  00BF  0AE1               	incf	(main@i_579+1)^(0+128),f
  1359  00C0  3000               	movlw	0
  1360  00C1  07E1               	addwf	(main@i_579+1)^(0+128),f
  1361  00C2  0861               	movf	(main@i_579+1)^(0+128),w
  1362  00C3  3A80               	xorlw	128
  1363  00C4  00FF               	movwf	127
  1364  00C5  3080               	movlw	128
  1365  00C6  027F               	subwf	127,w
  1366  00C7  1D03               	skipz
  1367  00C8  28CB               	goto	u2665
  1368  00C9  3064               	movlw	100
  1369  00CA  0260               	subwf	main@i_579^(0+128),w
  1370  00CB                     u2665:	
  1371  00CB  1C03               	skipc
  1372  00CC  28AF               	goto	l2397
  1373  00CD                     l261:	
  1374                           
  1375                           ;main.c: 171: PORTDbits.RD4 = 1;
  1376  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1377  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  1378  00CF  1608               	bsf	8,4	;volatile
  1379                           
  1380                           ;main.c: 172: for(int i = 0; i < 100; i++)
  1381  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  1382  00D1  1303               	bcf	3,6	;RP1=0, select bank1
  1383  00D2  01E2               	clrf	main@i_580^(0+128)
  1384  00D3  01E3               	clrf	(main@i_580+1)^(0+128)
  1385  00D4  0863               	movf	(main@i_580+1)^(0+128),w
  1386  00D5  3A80               	xorlw	128
  1387  00D6  00FF               	movwf	127
  1388  00D7  3080               	movlw	128
  1389  00D8  027F               	subwf	127,w
  1390  00D9  1D03               	skipz
  1391  00DA  28DD               	goto	u2675
  1392  00DB  3064               	movlw	100
  1393  00DC  0262               	subwf	main@i_580^(0+128),w
  1394  00DD                     u2675:	
  1395  00DD  1803               	btfsc	3,0
  1396  00DE  28FD               	goto	l263
  1397  00DF                     l2407:	
  1398                           
  1399                           ;main.c: 173: _delay((unsigned long)((10)*(20000000/4000.0)));
  1400  00DF  3041               	movlw	65
  1401  00E0  1683               	bsf	3,5	;RP0=1, select bank1
  1402  00E1  1303               	bcf	3,6	;RP1=0, select bank1
  1403  00E2  00D1               	movwf	(??_main^(0+128)+1)
  1404  00E3  30EE               	movlw	238
  1405  00E4  00D0               	movwf	??_main^(0+128)
  1406  00E5                     u2797:	
  1407  00E5  0BD0               	decfsz	??_main^(0+128),f
  1408  00E6  28E5               	goto	u2797
  1409  00E7  0BD1               	decfsz	(??_main^(0+128)+1),f
  1410  00E8  28E5               	goto	u2797
  1411  00E9  0000               	nop
  1412  00EA  3001               	movlw	1
  1413  00EB  1683               	bsf	3,5	;RP0=1, select bank1
  1414  00EC  1303               	bcf	3,6	;RP1=0, select bank1
  1415  00ED  07E2               	addwf	main@i_580^(0+128),f
  1416  00EE  1803               	skipnc
  1417  00EF  0AE3               	incf	(main@i_580+1)^(0+128),f
  1418  00F0  3000               	movlw	0
  1419  00F1  07E3               	addwf	(main@i_580+1)^(0+128),f
  1420  00F2  0863               	movf	(main@i_580+1)^(0+128),w
  1421  00F3  3A80               	xorlw	128
  1422  00F4  00FF               	movwf	127
  1423  00F5  3080               	movlw	128
  1424  00F6  027F               	subwf	127,w
  1425  00F7  1D03               	skipz
  1426  00F8  28FB               	goto	u2685
  1427  00F9  3064               	movlw	100
  1428  00FA  0262               	subwf	main@i_580^(0+128),w
  1429  00FB                     u2685:	
  1430  00FB  1C03               	skipc
  1431  00FC  28DF               	goto	l2407
  1432  00FD                     l263:	
  1433                           
  1434                           ;main.c: 174: PORTDbits.RD4 = 0;
  1435  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  1436  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  1437  00FF  1208               	bcf	8,4	;volatile
  1438                           
  1439                           ;main.c: 175: for(int i = 0; i < 100; i++)
  1440  0100  1683               	bsf	3,5	;RP0=1, select bank1
  1441  0101  1303               	bcf	3,6	;RP1=0, select bank1
  1442  0102  01E4               	clrf	main@i_581^(0+128)
  1443  0103  01E5               	clrf	(main@i_581+1)^(0+128)
  1444  0104  0865               	movf	(main@i_581+1)^(0+128),w
  1445  0105  3A80               	xorlw	128
  1446  0106  00FF               	movwf	127
  1447  0107  3080               	movlw	128
  1448  0108  027F               	subwf	127,w
  1449  0109  1D03               	skipz
  1450  010A  290D               	goto	u2695
  1451  010B  3064               	movlw	100
  1452  010C  0264               	subwf	main@i_581^(0+128),w
  1453  010D                     u2695:	
  1454  010D  1803               	btfsc	3,0
  1455  010E  292D               	goto	l265
  1456  010F                     l2417:	
  1457                           
  1458                           ;main.c: 176: _delay((unsigned long)((10)*(20000000/4000.0)));
  1459  010F  3041               	movlw	65
  1460  0110  1683               	bsf	3,5	;RP0=1, select bank1
  1461  0111  1303               	bcf	3,6	;RP1=0, select bank1
  1462  0112  00D1               	movwf	(??_main^(0+128)+1)
  1463  0113  30EE               	movlw	238
  1464  0114  00D0               	movwf	??_main^(0+128)
  1465  0115                     u2807:	
  1466  0115  0BD0               	decfsz	??_main^(0+128),f
  1467  0116  2915               	goto	u2807
  1468  0117  0BD1               	decfsz	(??_main^(0+128)+1),f
  1469  0118  2915               	goto	u2807
  1470  0119  0000               	nop
  1471  011A  3001               	movlw	1
  1472  011B  1683               	bsf	3,5	;RP0=1, select bank1
  1473  011C  1303               	bcf	3,6	;RP1=0, select bank1
  1474  011D  07E4               	addwf	main@i_581^(0+128),f
  1475  011E  1803               	skipnc
  1476  011F  0AE5               	incf	(main@i_581+1)^(0+128),f
  1477  0120  3000               	movlw	0
  1478  0121  07E5               	addwf	(main@i_581+1)^(0+128),f
  1479  0122  0865               	movf	(main@i_581+1)^(0+128),w
  1480  0123  3A80               	xorlw	128
  1481  0124  00FF               	movwf	127
  1482  0125  3080               	movlw	128
  1483  0126  027F               	subwf	127,w
  1484  0127  1D03               	skipz
  1485  0128  292B               	goto	u2705
  1486  0129  3064               	movlw	100
  1487  012A  0264               	subwf	main@i_581^(0+128),w
  1488  012B                     u2705:	
  1489  012B  1C03               	skipc
  1490  012C  290F               	goto	l2417
  1491  012D                     l265:	
  1492                           
  1493                           ;main.c: 177: PORTDbits.RD4 = 1;
  1494  012D  1283               	bcf	3,5	;RP0=0, select bank0
  1495  012E  1303               	bcf	3,6	;RP1=0, select bank0
  1496  012F  1608               	bsf	8,4	;volatile
  1497                           
  1498                           ;main.c: 178: for(int i = 0; i < 100; i++)
  1499  0130  1683               	bsf	3,5	;RP0=1, select bank1
  1500  0131  1303               	bcf	3,6	;RP1=0, select bank1
  1501  0132  01E6               	clrf	main@i_582^(0+128)
  1502  0133  01E7               	clrf	(main@i_582+1)^(0+128)
  1503  0134  0867               	movf	(main@i_582+1)^(0+128),w
  1504  0135  3A80               	xorlw	128
  1505  0136  00FF               	movwf	127
  1506  0137  3080               	movlw	128
  1507  0138  027F               	subwf	127,w
  1508  0139  1D03               	skipz
  1509  013A  293D               	goto	u2715
  1510  013B  3064               	movlw	100
  1511  013C  0266               	subwf	main@i_582^(0+128),w
  1512  013D                     u2715:	
  1513  013D  1803               	btfsc	3,0
  1514  013E  295D               	goto	l267
  1515  013F                     l2427:	
  1516                           
  1517                           ;main.c: 179: _delay((unsigned long)((10)*(20000000/4000.0)));
  1518  013F  3041               	movlw	65
  1519  0140  1683               	bsf	3,5	;RP0=1, select bank1
  1520  0141  1303               	bcf	3,6	;RP1=0, select bank1
  1521  0142  00D1               	movwf	(??_main^(0+128)+1)
  1522  0143  30EE               	movlw	238
  1523  0144  00D0               	movwf	??_main^(0+128)
  1524  0145                     u2817:	
  1525  0145  0BD0               	decfsz	??_main^(0+128),f
  1526  0146  2945               	goto	u2817
  1527  0147  0BD1               	decfsz	(??_main^(0+128)+1),f
  1528  0148  2945               	goto	u2817
  1529  0149  0000               	nop
  1530  014A  3001               	movlw	1
  1531  014B  1683               	bsf	3,5	;RP0=1, select bank1
  1532  014C  1303               	bcf	3,6	;RP1=0, select bank1
  1533  014D  07E6               	addwf	main@i_582^(0+128),f
  1534  014E  1803               	skipnc
  1535  014F  0AE7               	incf	(main@i_582+1)^(0+128),f
  1536  0150  3000               	movlw	0
  1537  0151  07E7               	addwf	(main@i_582+1)^(0+128),f
  1538  0152  0867               	movf	(main@i_582+1)^(0+128),w
  1539  0153  3A80               	xorlw	128
  1540  0154  00FF               	movwf	127
  1541  0155  3080               	movlw	128
  1542  0156  027F               	subwf	127,w
  1543  0157  1D03               	skipz
  1544  0158  295B               	goto	u2725
  1545  0159  3064               	movlw	100
  1546  015A  0266               	subwf	main@i_582^(0+128),w
  1547  015B                     u2725:	
  1548  015B  1C03               	skipc
  1549  015C  293F               	goto	l2427
  1550  015D                     l267:	
  1551                           
  1552                           ;main.c: 180: PORTDbits.RD4 = 0;
  1553  015D  1283               	bcf	3,5	;RP0=0, select bank0
  1554  015E  1303               	bcf	3,6	;RP1=0, select bank0
  1555  015F  1208               	bcf	8,4	;volatile
  1556                           
  1557                           ;main.c: 182: srand(TMR0);
  1558  0160  0801               	movf	1,w	;volatile
  1559  0161  1683               	bsf	3,5	;RP0=1, select bank1
  1560  0162  1303               	bcf	3,6	;RP1=0, select bank1
  1561  0163  00D0               	movwf	??_main^(0+128)
  1562  0164  01D1               	clrf	(??_main^(0+128)+1)
  1563  0165  0850               	movf	??_main^(0+128),w
  1564  0166  1283               	bcf	3,5	;RP0=0, select bank0
  1565  0167  1303               	bcf	3,6	;RP1=0, select bank0
  1566  0168  00B4               	movwf	srand@x
  1567  0169  1683               	bsf	3,5	;RP0=1, select bank1
  1568  016A  1303               	bcf	3,6	;RP1=0, select bank1
  1569  016B  0851               	movf	(??_main+1)^(0+128),w
  1570  016C  1283               	bcf	3,5	;RP0=0, select bank0
  1571  016D  1303               	bcf	3,6	;RP1=0, select bank0
  1572  016E  00B5               	movwf	srand@x+1
  1573  016F  120A  158A  2460  120A  118A  	fcall	_srand
  1574                           
  1575                           ;main.c: 184: contTimer0 = rand() % maxCont + minCont;
  1576  0174  1683               	bsf	3,5	;RP0=1, select bank1
  1577  0175  1303               	bcf	3,6	;RP1=0, select bank1
  1578  0176  086A               	movf	_maxCont^(0+128),w
  1579  0177  00D0               	movwf	??_main^(0+128)
  1580  0178  01D1               	clrf	(??_main^(0+128)+1)
  1581  0179  0850               	movf	??_main^(0+128),w
  1582  017A  1283               	bcf	3,5	;RP0=0, select bank0
  1583  017B  1303               	bcf	3,6	;RP1=0, select bank0
  1584  017C  00C8               	movwf	___awmod@divisor
  1585  017D  1683               	bsf	3,5	;RP0=1, select bank1
  1586  017E  1303               	bcf	3,6	;RP1=0, select bank1
  1587  017F  0851               	movf	(??_main+1)^(0+128),w
  1588  0180  1283               	bcf	3,5	;RP0=0, select bank0
  1589  0181  1303               	bcf	3,6	;RP1=0, select bank0
  1590  0182  00C9               	movwf	___awmod@divisor+1
  1591  0183  120A  158A  26AB  120A  118A  	fcall	_rand
  1592  0188  1283               	bcf	3,5	;RP0=0, select bank0
  1593  0189  1303               	bcf	3,6	;RP1=0, select bank0
  1594  018A  0842               	movf	?_rand+1,w
  1595  018B  00CB               	movwf	___awmod@dividend+1
  1596  018C  0841               	movf	?_rand,w
  1597  018D  00CA               	movwf	___awmod@dividend
  1598  018E  120A  158A  273D  120A  118A  	fcall	___awmod
  1599  0193  1283               	bcf	3,5	;RP0=0, select bank0
  1600  0194  1303               	bcf	3,6	;RP1=0, select bank0
  1601  0195  0848               	movf	?___awmod,w
  1602  0196  1683               	bsf	3,5	;RP0=1, select bank1
  1603  0197  1303               	bcf	3,6	;RP1=0, select bank1
  1604  0198  00D2               	movwf	(??_main+2)^(0+128)
  1605  0199  1283               	bcf	3,5	;RP0=0, select bank0
  1606  019A  1303               	bcf	3,6	;RP1=0, select bank0
  1607  019B  0849               	movf	?___awmod+1,w
  1608  019C  1683               	bsf	3,5	;RP0=1, select bank1
  1609  019D  1303               	bcf	3,6	;RP1=0, select bank1
  1610  019E  00D3               	movwf	((??_main+2)^(0+128)+1)
  1611  019F  086B               	movf	_minCont^(0+128),w
  1612  01A0  0752               	addwf	(??_main+2)^(0+128),w
  1613  01A1  00D4               	movwf	(??_main+4)^(0+128)
  1614  01A2  0854               	movf	(??_main+4)^(0+128),w
  1615  01A3  00A4               	movwf	_contTimer0^(0+128)
  1616                           
  1617                           ;main.c: 186: write_RTC_I2c();
  1618  01A4  120A  158A  278A  120A  118A  	fcall	_write_RTC_I2c
  1619  01A9                     l2433:	
  1620                           ;main.c: 187: while (1){
  1621                           
  1622                           
  1623                           ;main.c: 189: if(contLedRD4 == 76){
  1624  01A9  304C               	movlw	76
  1625  01AA  1683               	bsf	3,5	;RP0=1, select bank1
  1626  01AB  1303               	bcf	3,6	;RP1=0, select bank1
  1627  01AC  0623               	xorwf	_contLedRD4^(0+128),w
  1628  01AD  1D03               	btfss	3,2
  1629  01AE  29A9               	goto	l2433
  1630                           
  1631                           ;main.c: 190: val++;
  1632  01AF  3001               	movlw	1
  1633  01B0  00D0               	movwf	??_main^(0+128)
  1634  01B1  0850               	movf	??_main^(0+128),w
  1635  01B2  07AB               	addwf	_val^(0+128),f
  1636                           
  1637                           ;main.c: 191: if(val == contTimer0){
  1638  01B3  082B               	movf	_val^(0+128),w
  1639  01B4  0624               	xorwf	_contTimer0^(0+128),w
  1640  01B5  1D03               	skipz
  1641  01B6  2AEA               	goto	l2475
  1642                           
  1643                           ;main.c: 192: ADCON0bits.GO_DONE = 1;
  1644  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  1645  01B8  1303               	bcf	3,6	;RP1=0, select bank0
  1646  01B9  151F               	bsf	31,2	;volatile
  1647                           
  1648                           ;main.c: 194: read_RTC_I2c(0x04);
  1649  01BA  3004               	movlw	4
  1650  01BB  120A  118A  2790  120A  118A  	fcall	_read_RTC_I2c
  1651                           
  1652                           ;main.c: 195: dia = leitura;
  1653  01C0  1683               	bsf	3,5	;RP0=1, select bank1
  1654  01C1  1303               	bcf	3,6	;RP1=0, select bank1
  1655  01C2  0827               	movf	_leitura^(0+128),w
  1656  01C3  00D0               	movwf	??_main^(0+128)
  1657  01C4  0850               	movf	??_main^(0+128),w
  1658  01C5  00A5               	movwf	_dia^(0+128)
  1659                           
  1660                           ;main.c: 196: _delay((unsigned long)((10)*(20000000/4000.0)));
  1661  01C6  3041               	movlw	65
  1662  01C7  00D1               	movwf	(??_main^(0+128)+1)
  1663  01C8  30EE               	movlw	238
  1664  01C9  00D0               	movwf	??_main^(0+128)
  1665  01CA                     u2827:	
  1666  01CA  0BD0               	decfsz	??_main^(0+128),f
  1667  01CB  29CA               	goto	u2827
  1668  01CC  0BD1               	decfsz	(??_main^(0+128)+1),f
  1669  01CD  29CA               	goto	u2827
  1670  01CE  0000               	nop
  1671                           
  1672                           ;main.c: 199: read_RTC_I2c(0x05);
  1673  01CF  3005               	movlw	5
  1674  01D0  120A  118A  2790  120A  118A  	fcall	_read_RTC_I2c
  1675                           
  1676                           ;main.c: 200: mes = leitura;
  1677  01D5  1683               	bsf	3,5	;RP0=1, select bank1
  1678  01D6  1303               	bcf	3,6	;RP1=0, select bank1
  1679  01D7  0827               	movf	_leitura^(0+128),w
  1680  01D8  00D0               	movwf	??_main^(0+128)
  1681  01D9  0850               	movf	??_main^(0+128),w
  1682  01DA  00A8               	movwf	_mes^(0+128)
  1683                           
  1684                           ;main.c: 201: _delay((unsigned long)((10)*(20000000/4000.0)));
  1685  01DB  3041               	movlw	65
  1686  01DC  00D1               	movwf	(??_main^(0+128)+1)
  1687  01DD  30EE               	movlw	238
  1688  01DE  00D0               	movwf	??_main^(0+128)
  1689  01DF                     u2837:	
  1690  01DF  0BD0               	decfsz	??_main^(0+128),f
  1691  01E0  29DF               	goto	u2837
  1692  01E1  0BD1               	decfsz	(??_main^(0+128)+1),f
  1693  01E2  29DF               	goto	u2837
  1694  01E3  0000               	nop
  1695                           
  1696                           ;main.c: 204: read_RTC_I2c(0x06);
  1697  01E4  3006               	movlw	6
  1698  01E5  120A  118A  2790  120A  118A  	fcall	_read_RTC_I2c
  1699                           
  1700                           ;main.c: 205: ano = leitura;
  1701  01EA  1683               	bsf	3,5	;RP0=1, select bank1
  1702  01EB  1303               	bcf	3,6	;RP1=0, select bank1
  1703  01EC  0827               	movf	_leitura^(0+128),w
  1704  01ED  00D0               	movwf	??_main^(0+128)
  1705  01EE  0850               	movf	??_main^(0+128),w
  1706  01EF  00A2               	movwf	_ano^(0+128)
  1707                           
  1708                           ;main.c: 206: _delay((unsigned long)((10)*(20000000/4000.0)));
  1709  01F0  3041               	movlw	65
  1710  01F1  00D1               	movwf	(??_main^(0+128)+1)
  1711  01F2  30EE               	movlw	238
  1712  01F3  00D0               	movwf	??_main^(0+128)
  1713  01F4                     u2847:	
  1714  01F4  0BD0               	decfsz	??_main^(0+128),f
  1715  01F5  29F4               	goto	u2847
  1716  01F6  0BD1               	decfsz	(??_main^(0+128)+1),f
  1717  01F7  29F4               	goto	u2847
  1718  01F8  0000               	nop
  1719                           
  1720                           ;main.c: 209: read_RTC_I2c(0x02);
  1721  01F9  3002               	movlw	2
  1722  01FA  120A  118A  2790  120A  118A  	fcall	_read_RTC_I2c
  1723                           
  1724                           ;main.c: 210: hora = leitura;
  1725  01FF  1683               	bsf	3,5	;RP0=1, select bank1
  1726  0200  1303               	bcf	3,6	;RP1=0, select bank1
  1727  0201  0827               	movf	_leitura^(0+128),w
  1728  0202  00D0               	movwf	??_main^(0+128)
  1729  0203  0850               	movf	??_main^(0+128),w
  1730  0204  00A6               	movwf	_hora^(0+128)
  1731                           
  1732                           ;main.c: 211: _delay((unsigned long)((10)*(20000000/4000.0)));
  1733  0205  3041               	movlw	65
  1734  0206  00D1               	movwf	(??_main^(0+128)+1)
  1735  0207  30EE               	movlw	238
  1736  0208  00D0               	movwf	??_main^(0+128)
  1737  0209                     u2857:	
  1738  0209  0BD0               	decfsz	??_main^(0+128),f
  1739  020A  2A09               	goto	u2857
  1740  020B  0BD1               	decfsz	(??_main^(0+128)+1),f
  1741  020C  2A09               	goto	u2857
  1742  020D  0000               	nop
  1743                           
  1744                           ;main.c: 214: read_RTC_I2c(0x01);
  1745  020E  3001               	movlw	1
  1746  020F  120A  118A  2790  120A  118A  	fcall	_read_RTC_I2c
  1747                           
  1748                           ;main.c: 215: minuto = leitura;
  1749  0214  1683               	bsf	3,5	;RP0=1, select bank1
  1750  0215  1303               	bcf	3,6	;RP1=0, select bank1
  1751  0216  0827               	movf	_leitura^(0+128),w
  1752  0217  00D0               	movwf	??_main^(0+128)
  1753  0218  0850               	movf	??_main^(0+128),w
  1754  0219  00A9               	movwf	_minuto^(0+128)
  1755                           
  1756                           ;main.c: 216: _delay((unsigned long)((10)*(20000000/4000.0)));
  1757  021A  3041               	movlw	65
  1758  021B  00D1               	movwf	(??_main^(0+128)+1)
  1759  021C  30EE               	movlw	238
  1760  021D  00D0               	movwf	??_main^(0+128)
  1761  021E                     u2867:	
  1762  021E  0BD0               	decfsz	??_main^(0+128),f
  1763  021F  2A1E               	goto	u2867
  1764  0220  0BD1               	decfsz	(??_main^(0+128)+1),f
  1765  0221  2A1E               	goto	u2867
  1766  0222  0000               	nop
  1767                           
  1768                           ;main.c: 219: read_RTC_I2c(0x00);
  1769  0223  3000               	movlw	0
  1770  0224  120A  118A  2790  120A  118A  	fcall	_read_RTC_I2c
  1771                           
  1772                           ;main.c: 220: segundo = leitura;
  1773  0229  1683               	bsf	3,5	;RP0=1, select bank1
  1774  022A  1303               	bcf	3,6	;RP1=0, select bank1
  1775  022B  0827               	movf	_leitura^(0+128),w
  1776  022C  00D0               	movwf	??_main^(0+128)
  1777  022D  0850               	movf	??_main^(0+128),w
  1778  022E  00AA               	movwf	_segundo^(0+128)
  1779                           
  1780                           ;main.c: 224: printf("%u&%u&20%02X-%02X-%02X %02X:%02X:%02X", id, data_ADC, ano, mes, di
      +                          a, hora, minuto, segundo);
  1781  022F  0869               	movf	_id^(0+128),w
  1782  0230  00D0               	movwf	??_main^(0+128)
  1783  0231  01D1               	clrf	(??_main^(0+128)+1)
  1784  0232  0850               	movf	??_main^(0+128),w
  1785  0233  1283               	bcf	3,5	;RP0=0, select bank0
  1786  0234  1303               	bcf	3,6	;RP1=0, select bank0
  1787  0235  00C2               	movwf	?_printf
  1788  0236  1683               	bsf	3,5	;RP0=1, select bank1
  1789  0237  1303               	bcf	3,6	;RP1=0, select bank1
  1790  0238  0851               	movf	(??_main+1)^(0+128),w
  1791  0239  1283               	bcf	3,5	;RP0=0, select bank0
  1792  023A  1303               	bcf	3,6	;RP1=0, select bank0
  1793  023B  00C3               	movwf	?_printf+1
  1794  023C  1683               	bsf	3,5	;RP0=1, select bank1
  1795  023D  1303               	bcf	3,6	;RP1=0, select bank1
  1796  023E  0821               	movf	(_data_ADC+1)^(0+128),w
  1797  023F  1283               	bcf	3,5	;RP0=0, select bank0
  1798  0240  1303               	bcf	3,6	;RP1=0, select bank0
  1799  0241  00C5               	movwf	?_printf+3
  1800  0242  1683               	bsf	3,5	;RP0=1, select bank1
  1801  0243  1303               	bcf	3,6	;RP1=0, select bank1
  1802  0244  0820               	movf	_data_ADC^(0+128),w
  1803  0245  1283               	bcf	3,5	;RP0=0, select bank0
  1804  0246  1303               	bcf	3,6	;RP1=0, select bank0
  1805  0247  00C4               	movwf	?_printf+2
  1806  0248  1683               	bsf	3,5	;RP0=1, select bank1
  1807  0249  1303               	bcf	3,6	;RP1=0, select bank1
  1808  024A  0822               	movf	_ano^(0+128),w
  1809  024B  00D2               	movwf	(??_main+2)^(0+128)
  1810  024C  01D3               	clrf	((??_main+2)^(0+128)+1)
  1811  024D  0852               	movf	(??_main+2)^(0+128),w
  1812  024E  1283               	bcf	3,5	;RP0=0, select bank0
  1813  024F  1303               	bcf	3,6	;RP1=0, select bank0
  1814  0250  00C6               	movwf	?_printf+4
  1815  0251  1683               	bsf	3,5	;RP0=1, select bank1
  1816  0252  1303               	bcf	3,6	;RP1=0, select bank1
  1817  0253  0853               	movf	(??_main+3)^(0+128),w
  1818  0254  1283               	bcf	3,5	;RP0=0, select bank0
  1819  0255  1303               	bcf	3,6	;RP1=0, select bank0
  1820  0256  00C7               	movwf	?_printf+5
  1821  0257  1683               	bsf	3,5	;RP0=1, select bank1
  1822  0258  1303               	bcf	3,6	;RP1=0, select bank1
  1823  0259  0828               	movf	_mes^(0+128),w
  1824  025A  00D4               	movwf	(??_main+4)^(0+128)
  1825  025B  01D5               	clrf	((??_main+4)^(0+128)+1)
  1826  025C  0854               	movf	(??_main+4)^(0+128),w
  1827  025D  1283               	bcf	3,5	;RP0=0, select bank0
  1828  025E  1303               	bcf	3,6	;RP1=0, select bank0
  1829  025F  00C8               	movwf	?_printf+6
  1830  0260  1683               	bsf	3,5	;RP0=1, select bank1
  1831  0261  1303               	bcf	3,6	;RP1=0, select bank1
  1832  0262  0855               	movf	(??_main+5)^(0+128),w
  1833  0263  1283               	bcf	3,5	;RP0=0, select bank0
  1834  0264  1303               	bcf	3,6	;RP1=0, select bank0
  1835  0265  00C9               	movwf	?_printf+7
  1836  0266  1683               	bsf	3,5	;RP0=1, select bank1
  1837  0267  1303               	bcf	3,6	;RP1=0, select bank1
  1838  0268  0825               	movf	_dia^(0+128),w
  1839  0269  00D6               	movwf	(??_main+6)^(0+128)
  1840  026A  01D7               	clrf	((??_main+6)^(0+128)+1)
  1841  026B  0856               	movf	(??_main+6)^(0+128),w
  1842  026C  1283               	bcf	3,5	;RP0=0, select bank0
  1843  026D  1303               	bcf	3,6	;RP1=0, select bank0
  1844  026E  00CA               	movwf	?_printf+8
  1845  026F  1683               	bsf	3,5	;RP0=1, select bank1
  1846  0270  1303               	bcf	3,6	;RP1=0, select bank1
  1847  0271  0857               	movf	(??_main+7)^(0+128),w
  1848  0272  1283               	bcf	3,5	;RP0=0, select bank0
  1849  0273  1303               	bcf	3,6	;RP1=0, select bank0
  1850  0274  00CB               	movwf	?_printf+9
  1851  0275  1683               	bsf	3,5	;RP0=1, select bank1
  1852  0276  1303               	bcf	3,6	;RP1=0, select bank1
  1853  0277  0826               	movf	_hora^(0+128),w
  1854  0278  00D8               	movwf	(??_main+8)^(0+128)
  1855  0279  01D9               	clrf	((??_main+8)^(0+128)+1)
  1856  027A  0858               	movf	(??_main+8)^(0+128),w
  1857  027B  1283               	bcf	3,5	;RP0=0, select bank0
  1858  027C  1303               	bcf	3,6	;RP1=0, select bank0
  1859  027D  00CC               	movwf	?_printf+10
  1860  027E  1683               	bsf	3,5	;RP0=1, select bank1
  1861  027F  1303               	bcf	3,6	;RP1=0, select bank1
  1862  0280  0859               	movf	(??_main+9)^(0+128),w
  1863  0281  1283               	bcf	3,5	;RP0=0, select bank0
  1864  0282  1303               	bcf	3,6	;RP1=0, select bank0
  1865  0283  00CD               	movwf	?_printf+11
  1866  0284  1683               	bsf	3,5	;RP0=1, select bank1
  1867  0285  1303               	bcf	3,6	;RP1=0, select bank1
  1868  0286  0829               	movf	_minuto^(0+128),w
  1869  0287  00DA               	movwf	(??_main+10)^(0+128)
  1870  0288  01DB               	clrf	((??_main+10)^(0+128)+1)
  1871  0289  085A               	movf	(??_main+10)^(0+128),w
  1872  028A  1283               	bcf	3,5	;RP0=0, select bank0
  1873  028B  1303               	bcf	3,6	;RP1=0, select bank0
  1874  028C  00CE               	movwf	?_printf+12
  1875  028D  1683               	bsf	3,5	;RP0=1, select bank1
  1876  028E  1303               	bcf	3,6	;RP1=0, select bank1
  1877  028F  085B               	movf	(??_main+11)^(0+128),w
  1878  0290  1283               	bcf	3,5	;RP0=0, select bank0
  1879  0291  1303               	bcf	3,6	;RP1=0, select bank0
  1880  0292  00CF               	movwf	?_printf+13
  1881  0293  1683               	bsf	3,5	;RP0=1, select bank1
  1882  0294  1303               	bcf	3,6	;RP1=0, select bank1
  1883  0295  082A               	movf	_segundo^(0+128),w
  1884  0296  00DC               	movwf	(??_main+12)^(0+128)
  1885  0297  01DD               	clrf	((??_main+12)^(0+128)+1)
  1886  0298  085C               	movf	(??_main+12)^(0+128),w
  1887  0299  1283               	bcf	3,5	;RP0=0, select bank0
  1888  029A  1303               	bcf	3,6	;RP1=0, select bank0
  1889  029B  00D0               	movwf	?_printf+14
  1890  029C  1683               	bsf	3,5	;RP0=1, select bank1
  1891  029D  1303               	bcf	3,6	;RP1=0, select bank1
  1892  029E  085D               	movf	(??_main+13)^(0+128),w
  1893  029F  1283               	bcf	3,5	;RP0=0, select bank0
  1894  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  1895  02A1  00D1               	movwf	?_printf+15
  1896  02A2  3013               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1897  02A3  120A  118A  22F9  120A  118A  	fcall	_printf
  1898                           
  1899                           ;main.c: 226: _delay((unsigned long)((10)*(20000000/4000.0)));
  1900  02A8  3041               	movlw	65
  1901  02A9  1683               	bsf	3,5	;RP0=1, select bank1
  1902  02AA  1303               	bcf	3,6	;RP1=0, select bank1
  1903  02AB  00D1               	movwf	(??_main^(0+128)+1)
  1904  02AC  30EE               	movlw	238
  1905  02AD  00D0               	movwf	??_main^(0+128)
  1906  02AE                     u2877:	
  1907  02AE  0BD0               	decfsz	??_main^(0+128),f
  1908  02AF  2AAE               	goto	u2877
  1909  02B0  0BD1               	decfsz	(??_main^(0+128)+1),f
  1910  02B1  2AAE               	goto	u2877
  1911  02B2  0000               	nop
  1912                           
  1913                           ;main.c: 228: printf("\n");
  1914  02B3  304D               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1915  02B4  120A  118A  22F9  120A  118A  	fcall	_printf
  1916                           
  1917                           ;main.c: 230: val = 0;
  1918  02B9  1683               	bsf	3,5	;RP0=1, select bank1
  1919  02BA  1303               	bcf	3,6	;RP1=0, select bank1
  1920  02BB  01AB               	clrf	_val^(0+128)
  1921                           
  1922                           ;main.c: 231: contTimer0 = rand() % maxCont + minCont;
  1923  02BC  086A               	movf	_maxCont^(0+128),w
  1924  02BD  00D0               	movwf	??_main^(0+128)
  1925  02BE  01D1               	clrf	(??_main^(0+128)+1)
  1926  02BF  0850               	movf	??_main^(0+128),w
  1927  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  1928  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  1929  02C2  00C8               	movwf	___awmod@divisor
  1930  02C3  1683               	bsf	3,5	;RP0=1, select bank1
  1931  02C4  1303               	bcf	3,6	;RP1=0, select bank1
  1932  02C5  0851               	movf	(??_main+1)^(0+128),w
  1933  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  1934  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  1935  02C8  00C9               	movwf	___awmod@divisor+1
  1936  02C9  120A  158A  26AB  120A  118A  	fcall	_rand
  1937  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  1938  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  1939  02D0  0842               	movf	?_rand+1,w
  1940  02D1  00CB               	movwf	___awmod@dividend+1
  1941  02D2  0841               	movf	?_rand,w
  1942  02D3  00CA               	movwf	___awmod@dividend
  1943  02D4  120A  158A  273D  120A  118A  	fcall	___awmod
  1944  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  1945  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  1946  02DB  0848               	movf	?___awmod,w
  1947  02DC  1683               	bsf	3,5	;RP0=1, select bank1
  1948  02DD  1303               	bcf	3,6	;RP1=0, select bank1
  1949  02DE  00D2               	movwf	(??_main+2)^(0+128)
  1950  02DF  1283               	bcf	3,5	;RP0=0, select bank0
  1951  02E0  1303               	bcf	3,6	;RP1=0, select bank0
  1952  02E1  0849               	movf	?___awmod+1,w
  1953  02E2  1683               	bsf	3,5	;RP0=1, select bank1
  1954  02E3  1303               	bcf	3,6	;RP1=0, select bank1
  1955  02E4  00D3               	movwf	((??_main+2)^(0+128)+1)
  1956  02E5  086B               	movf	_minCont^(0+128),w
  1957  02E6  0752               	addwf	(??_main+2)^(0+128),w
  1958  02E7  00D4               	movwf	(??_main+4)^(0+128)
  1959  02E8  0854               	movf	(??_main+4)^(0+128),w
  1960  02E9  00A4               	movwf	_contTimer0^(0+128)
  1961  02EA                     l2475:	
  1962                           
  1963                           ;main.c: 232: }
  1964                           ;main.c: 233: PORTDbits.RD3 = changing;
  1965  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  1966  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  1967  02EC  1C5A               	btfss	_changing/(0+8),_changing& (0+7)
  1968  02ED  2AF2               	goto	u2750
  1969  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  1970  02EF  1303               	bcf	3,6	;RP1=0, select bank0
  1971  02F0  1588               	bsf	8,3	;volatile
  1972  02F1  2AF5               	goto	u2764
  1973  02F2                     u2750:	
  1974  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  1975  02F3  1303               	bcf	3,6	;RP1=0, select bank0
  1976  02F4  1188               	bcf	8,3	;volatile
  1977  02F5                     u2764:	
  1978                           
  1979                           ;main.c: 234: contLedRD4 = 0;
  1980  02F5  1683               	bsf	3,5	;RP0=1, select bank1
  1981  02F6  1303               	bcf	3,6	;RP1=0, select bank1
  1982  02F7  01A3               	clrf	_contLedRD4^(0+128)
  1983  02F8  29A9               	goto	l2433
  1984  02F9                     __end_of_main:	
  1985                           
  1986                           	psect	text1
  1987  0F8A                     __ptext1:	
  1988 ;; *************** function _write_RTC_I2c *****************
  1989 ;; Defined at:
  1990 ;;		line 92 in file "main.c"
  1991 ;; Parameters:    Size  Location     Type
  1992 ;;		None
  1993 ;; Auto vars:     Size  Location     Type
  1994 ;;		None
  1995 ;; Return value:  Size  Location     Type
  1996 ;;		None               void
  1997 ;; Registers used:
  1998 ;;		wreg, status,2, status,0, pclath, cstack
  1999 ;; Tracked objects:
  2000 ;;		On entry : 0/0
  2001 ;;		On exit  : 0/0
  2002 ;;		Unchanged: 0/0
  2003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2004 ;;      Params:         0       0       0       0       0
  2005 ;;      Locals:         0       0       0       0       0
  2006 ;;      Temps:          0       0       0       0       0
  2007 ;;      Totals:         0       0       0       0       0
  2008 ;;Total ram usage:        0 bytes
  2009 ;; Hardware stack levels used:    1
  2010 ;; Hardware stack levels required when called:    4
  2011 ;; This function calls:
  2012 ;;		_I2C_Idle
  2013 ;;		_I2C_Start
  2014 ;;		_I2C_Stop
  2015 ;;		_I2C_Write_Byte
  2016 ;; This function is called by:
  2017 ;;		_main
  2018 ;; This function uses a non-reentrant model
  2019 ;;
  2020                           
  2021                           
  2022                           ;psect for function _write_RTC_I2c
  2023  0F8A                     _write_RTC_I2c:	
  2024                           
  2025                           ;main.c: 94: I2C_Idle();
  2026                           
  2027                           ;incstack = 0
  2028                           ; Regs used in _write_RTC_I2c: [wreg+status,2+status,0+pclath+cstack]
  2029  0F8A  120A  158A  2445  120A  158A  	fcall	_I2C_Idle
  2030                           
  2031                           ;main.c: 95: I2C_Start();
  2032  0F8F  120A  158A  2424  120A  158A  	fcall	_I2C_Start
  2033                           
  2034                           ;main.c: 96: I2C_Idle();
  2035  0F94  120A  158A  2445  120A  158A  	fcall	_I2C_Idle
  2036                           
  2037                           ;main.c: 97: I2C_Write_Byte(0xD0);
  2038  0F99  30D0               	movlw	208
  2039  0F9A  120A  158A  2469  120A  158A  	fcall	_I2C_Write_Byte
  2040                           
  2041                           ;main.c: 98: I2C_Idle();
  2042  0F9F  120A  158A  2445  120A  158A  	fcall	_I2C_Idle
  2043                           
  2044                           ;main.c: 99: I2C_Write_Byte(0x00);
  2045  0FA4  3000               	movlw	0
  2046  0FA5  120A  158A  2469  120A  158A  	fcall	_I2C_Write_Byte
  2047                           
  2048                           ;main.c: 100: I2C_Idle();
  2049  0FAA  120A  158A  2445  120A  158A  	fcall	_I2C_Idle
  2050                           
  2051                           ;main.c: 103: I2C_Write_Byte(0x00);
  2052  0FAF  3000               	movlw	0
  2053  0FB0  120A  158A  2469  120A  158A  	fcall	_I2C_Write_Byte
  2054                           
  2055                           ;main.c: 104: I2C_Idle();
  2056  0FB5  120A  158A  2445  120A  158A  	fcall	_I2C_Idle
  2057                           
  2058                           ;main.c: 106: I2C_Write_Byte(0x30);
  2059  0FBA  3030               	movlw	48
  2060  0FBB  120A  158A  2469  120A  158A  	fcall	_I2C_Write_Byte
  2061                           
  2062                           ;main.c: 107: I2C_Idle();
  2063  0FC0  120A  158A  2445  120A  158A  	fcall	_I2C_Idle
  2064                           
  2065                           ;main.c: 109: I2C_Write_Byte(0x14);
  2066  0FC5  3014               	movlw	20
  2067  0FC6  120A  158A  2469  120A  158A  	fcall	_I2C_Write_Byte
  2068                           
  2069                           ;main.c: 110: I2C_Idle();
  2070  0FCB  120A  158A  2445  120A  158A  	fcall	_I2C_Idle
  2071                           
  2072                           ;main.c: 112: I2C_Write_Byte(0x04);
  2073  0FD0  3004               	movlw	4
  2074  0FD1  120A  158A  2469  120A  158A  	fcall	_I2C_Write_Byte
  2075                           
  2076                           ;main.c: 113: I2C_Idle();
  2077  0FD6  120A  158A  2445  120A  158A  	fcall	_I2C_Idle
  2078                           
  2079                           ;main.c: 115: I2C_Write_Byte(0x22);
  2080  0FDB  3022               	movlw	34
  2081  0FDC  120A  158A  2469  120A  158A  	fcall	_I2C_Write_Byte
  2082                           
  2083                           ;main.c: 116: I2C_Idle();
  2084  0FE1  120A  158A  2445  120A  158A  	fcall	_I2C_Idle
  2085                           
  2086                           ;main.c: 118: I2C_Write_Byte(0x01);
  2087  0FE6  3001               	movlw	1
  2088  0FE7  120A  158A  2469  120A  158A  	fcall	_I2C_Write_Byte
  2089                           
  2090                           ;main.c: 119: I2C_Idle();
  2091  0FEC  120A  158A  2445  120A  158A  	fcall	_I2C_Idle
  2092                           
  2093                           ;main.c: 121: I2C_Write_Byte(0x16);
  2094  0FF1  3016               	movlw	22
  2095  0FF2  120A  158A  2469  120A  158A  	fcall	_I2C_Write_Byte
  2096                           
  2097                           ;main.c: 122: I2C_Idle();
  2098  0FF7  120A  158A  2445  120A  158A  	fcall	_I2C_Idle
  2099                           
  2100                           ;main.c: 123: I2C_Stop();
  2101  0FFC  120A  158A  242C   	fcall	_I2C_Stop
  2102  0FFF  0008               	return
  2103  1000                     __end_of_write_RTC_I2c:	
  2104                           
  2105                           	psect	text2
  2106  0C60                     __ptext2:	
  2107 ;; *************** function _srand *****************
  2108 ;; Defined at:
  2109 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\rand.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;  x               2   20[BANK0 ] unsigned int 
  2112 ;; Auto vars:     Size  Location     Type
  2113 ;;		None
  2114 ;; Return value:  Size  Location     Type
  2115 ;;		None               void
  2116 ;; Registers used:
  2117 ;;		wreg
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2123 ;;      Params:         0       2       0       0       0
  2124 ;;      Locals:         0       0       0       0       0
  2125 ;;      Temps:          0       0       0       0       0
  2126 ;;      Totals:         0       2       0       0       0
  2127 ;;Total ram usage:        2 bytes
  2128 ;; Hardware stack levels used:    1
  2129 ;; Hardware stack levels required when called:    3
  2130 ;; This function calls:
  2131 ;;		Nothing
  2132 ;; This function is called by:
  2133 ;;		_main
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           
  2138                           ;psect for function _srand
  2139  0C60                     _srand:	
  2140                           
  2141                           ;incstack = 0
  2142                           ; Regs used in _srand: [wreg]
  2143  0C60  1283               	bcf	3,5	;RP0=0, select bank0
  2144  0C61  1303               	bcf	3,6	;RP1=0, select bank0
  2145  0C62  0834               	movf	srand@x,w
  2146  0C63  00D5               	movwf	_randx
  2147  0C64  0835               	movf	srand@x+1,w
  2148  0C65  00D6               	movwf	_randx+1
  2149  0C66  01D7               	clrf	_randx+2
  2150  0C67  01D8               	clrf	_randx+3
  2151  0C68  0008               	return
  2152  0C69                     __end_of_srand:	
  2153                           
  2154                           	psect	text3
  2155  0E6A                     __ptext3:	
  2156 ;; *************** function _selectChanel *****************
  2157 ;; Defined at:
  2158 ;;		line 53 in file "ad.c"
  2159 ;; Parameters:    Size  Location     Type
  2160 ;;  channel         1    wreg     unsigned char 
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;  channel         1   20[BANK0 ] unsigned char 
  2163 ;; Return value:  Size  Location     Type
  2164 ;;		None               void
  2165 ;; Registers used:
  2166 ;;		wreg, status,2, status,0
  2167 ;; Tracked objects:
  2168 ;;		On entry : 0/0
  2169 ;;		On exit  : 0/0
  2170 ;;		Unchanged: 0/0
  2171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2172 ;;      Params:         0       0       0       0       0
  2173 ;;      Locals:         0       1       0       0       0
  2174 ;;      Temps:          0       0       0       0       0
  2175 ;;      Totals:         0       1       0       0       0
  2176 ;;Total ram usage:        1 bytes
  2177 ;; Hardware stack levels used:    1
  2178 ;; Hardware stack levels required when called:    3
  2179 ;; This function calls:
  2180 ;;		Nothing
  2181 ;; This function is called by:
  2182 ;;		_main
  2183 ;; This function uses a non-reentrant model
  2184 ;;
  2185                           
  2186                           
  2187                           ;psect for function _selectChanel
  2188  0E6A                     _selectChanel:	
  2189                           
  2190                           ;incstack = 0
  2191                           ; Regs used in _selectChanel: [wreg+status,2+status,0]
  2192                           ;selectChanel@channel stored from wreg
  2193  0E6A  1283               	bcf	3,5	;RP0=0, select bank0
  2194  0E6B  1303               	bcf	3,6	;RP1=0, select bank0
  2195  0E6C  00B4               	movwf	selectChanel@channel
  2196                           
  2197                           ;ad.c: 54: if(channel == 0){
  2198  0E6D  0834               	movf	selectChanel@channel,w
  2199  0E6E  1D03               	btfss	3,2
  2200  0E6F  2E74               	goto	l1905
  2201                           
  2202                           ;ad.c: 55: ADCON0bits.CHS2 = 0;
  2203  0E70  129F               	bcf	31,5	;volatile
  2204                           
  2205                           ;ad.c: 56: ADCON0bits.CHS1 = 0;
  2206  0E71  121F               	bcf	31,4	;volatile
  2207                           
  2208                           ;ad.c: 57: ADCON0bits.CHS0 = 0;
  2209  0E72  119F               	bcf	31,3	;volatile
  2210                           
  2211                           ;ad.c: 58: }
  2212  0E73  0008               	return
  2213  0E74                     l1905:	
  2214                           
  2215                           ;ad.c: 59: else if(channel == 1){
  2216  0E74  0334               	decf	selectChanel@channel,w
  2217  0E75  1D03               	btfss	3,2
  2218  0E76  2E7B               	goto	l1909
  2219                           
  2220                           ;ad.c: 60: ADCON0bits.CHS2 = 0;
  2221  0E77  129F               	bcf	31,5	;volatile
  2222                           
  2223                           ;ad.c: 61: ADCON0bits.CHS1 = 0;
  2224  0E78  121F               	bcf	31,4	;volatile
  2225                           
  2226                           ;ad.c: 62: ADCON0bits.CHS0 = 1;
  2227  0E79  159F               	bsf	31,3	;volatile
  2228                           
  2229                           ;ad.c: 63: }
  2230  0E7A  0008               	return
  2231  0E7B                     l1909:	
  2232                           
  2233                           ;ad.c: 64: else if(channel == 2){
  2234  0E7B  3002               	movlw	2
  2235  0E7C  0634               	xorwf	selectChanel@channel,w
  2236  0E7D  1D03               	btfss	3,2
  2237  0E7E  2E83               	goto	l1913
  2238                           
  2239                           ;ad.c: 65: ADCON0bits.CHS2 = 0;
  2240  0E7F  129F               	bcf	31,5	;volatile
  2241                           
  2242                           ;ad.c: 66: ADCON0bits.CHS1 = 1;
  2243  0E80  161F               	bsf	31,4	;volatile
  2244                           
  2245                           ;ad.c: 67: ADCON0bits.CHS0 = 0;
  2246  0E81  119F               	bcf	31,3	;volatile
  2247                           
  2248                           ;ad.c: 68: }
  2249  0E82  0008               	return
  2250  0E83                     l1913:	
  2251                           
  2252                           ;ad.c: 69: else if(channel == 3){
  2253  0E83  3003               	movlw	3
  2254  0E84  0634               	xorwf	selectChanel@channel,w
  2255  0E85  1D03               	btfss	3,2
  2256  0E86  2E8B               	goto	l1917
  2257                           
  2258                           ;ad.c: 70: ADCON0bits.CHS2 = 0;
  2259  0E87  129F               	bcf	31,5	;volatile
  2260                           
  2261                           ;ad.c: 71: ADCON0bits.CHS1 = 1;
  2262  0E88  161F               	bsf	31,4	;volatile
  2263                           
  2264                           ;ad.c: 72: ADCON0bits.CHS0 = 1;
  2265  0E89  159F               	bsf	31,3	;volatile
  2266                           
  2267                           ;ad.c: 73: }
  2268  0E8A  0008               	return
  2269  0E8B                     l1917:	
  2270                           
  2271                           ;ad.c: 74: else if(channel == 4){
  2272  0E8B  3004               	movlw	4
  2273  0E8C  0634               	xorwf	selectChanel@channel,w
  2274  0E8D  1D03               	btfss	3,2
  2275  0E8E  2E93               	goto	l1921
  2276                           
  2277                           ;ad.c: 75: ADCON0bits.CHS2 = 1;
  2278  0E8F  169F               	bsf	31,5	;volatile
  2279                           
  2280                           ;ad.c: 76: ADCON0bits.CHS1 = 0;
  2281  0E90  121F               	bcf	31,4	;volatile
  2282                           
  2283                           ;ad.c: 77: ADCON0bits.CHS0 = 0;
  2284  0E91  119F               	bcf	31,3	;volatile
  2285                           
  2286                           ;ad.c: 78: }
  2287  0E92  0008               	return
  2288  0E93                     l1921:	
  2289                           
  2290                           ;ad.c: 79: else if(channel == 5){
  2291  0E93  3005               	movlw	5
  2292  0E94  0634               	xorwf	selectChanel@channel,w
  2293  0E95  1D03               	btfss	3,2
  2294  0E96  2E9B               	goto	l1925
  2295                           
  2296                           ;ad.c: 80: ADCON0bits.CHS2 = 1;
  2297  0E97  169F               	bsf	31,5	;volatile
  2298                           
  2299                           ;ad.c: 81: ADCON0bits.CHS1 = 0;
  2300  0E98  121F               	bcf	31,4	;volatile
  2301                           
  2302                           ;ad.c: 82: ADCON0bits.CHS0 = 1;
  2303  0E99  159F               	bsf	31,3	;volatile
  2304                           
  2305                           ;ad.c: 83: }
  2306  0E9A  0008               	return
  2307  0E9B                     l1925:	
  2308                           
  2309                           ;ad.c: 84: else if(channel == 6){
  2310  0E9B  3006               	movlw	6
  2311  0E9C  0634               	xorwf	selectChanel@channel,w
  2312  0E9D  1D03               	btfss	3,2
  2313  0E9E  2EA3               	goto	l1929
  2314                           
  2315                           ;ad.c: 85: ADCON0bits.CHS2 = 1;
  2316  0E9F  169F               	bsf	31,5	;volatile
  2317                           
  2318                           ;ad.c: 86: ADCON0bits.CHS1 = 1;
  2319  0EA0  161F               	bsf	31,4	;volatile
  2320                           
  2321                           ;ad.c: 87: ADCON0bits.CHS0 = 0;
  2322  0EA1  119F               	bcf	31,3	;volatile
  2323                           
  2324                           ;ad.c: 88: }
  2325  0EA2  0008               	return
  2326  0EA3                     l1929:	
  2327                           
  2328                           ;ad.c: 89: else if(channel == 7){
  2329  0EA3  3007               	movlw	7
  2330  0EA4  0634               	xorwf	selectChanel@channel,w
  2331  0EA5  1D03               	btfss	3,2
  2332  0EA6  0008               	return
  2333                           
  2334                           ;ad.c: 90: ADCON0bits.CHS2 = 1;
  2335  0EA7  169F               	bsf	31,5	;volatile
  2336                           
  2337                           ;ad.c: 91: ADCON0bits.CHS1 = 1;
  2338  0EA8  161F               	bsf	31,4	;volatile
  2339                           
  2340                           ;ad.c: 92: ADCON0bits.CHS0 = 1;
  2341  0EA9  159F               	bsf	31,3	;volatile
  2342  0EAA  0008               	return
  2343  0EAB                     __end_of_selectChanel:	
  2344                           
  2345                           	psect	text4
  2346  0790                     __ptext4:	
  2347 ;; *************** function _read_RTC_I2c *****************
  2348 ;; Defined at:
  2349 ;;		line 126 in file "main.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;  pos_memoria     1    wreg     unsigned char 
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;  pos_memoria     1   22[BANK0 ] unsigned char 
  2354 ;; Return value:  Size  Location     Type
  2355 ;;		None               void
  2356 ;; Registers used:
  2357 ;;		wreg, status,2, status,0, pclath, cstack
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2363 ;;      Params:         0       0       0       0       0
  2364 ;;      Locals:         0       1       0       0       0
  2365 ;;      Temps:          0       1       0       0       0
  2366 ;;      Totals:         0       2       0       0       0
  2367 ;;Total ram usage:        2 bytes
  2368 ;; Hardware stack levels used:    1
  2369 ;; Hardware stack levels required when called:    4
  2370 ;; This function calls:
  2371 ;;		_I2C_Idle
  2372 ;;		_I2C_ReStart
  2373 ;;		_I2C_Read_Byte
  2374 ;;		_I2C_Send_NACK
  2375 ;;		_I2C_Start
  2376 ;;		_I2C_Stop
  2377 ;;		_I2C_Write_Byte
  2378 ;; This function is called by:
  2379 ;;		_main
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           
  2384                           ;psect for function _read_RTC_I2c
  2385  0790                     _read_RTC_I2c:	
  2386                           
  2387                           ;incstack = 0
  2388                           ; Regs used in _read_RTC_I2c: [wreg+status,2+status,0+pclath+cstack]
  2389                           ;read_RTC_I2c@pos_memoria stored from wreg
  2390  0790  1283               	bcf	3,5	;RP0=0, select bank0
  2391  0791  1303               	bcf	3,6	;RP1=0, select bank0
  2392  0792  00B6               	movwf	read_RTC_I2c@pos_memoria
  2393                           
  2394                           ;main.c: 128: I2C_Idle();
  2395  0793  120A  158A  2445  120A  118A  	fcall	_I2C_Idle
  2396                           
  2397                           ;main.c: 129: I2C_Start();
  2398  0798  120A  158A  2424  120A  118A  	fcall	_I2C_Start
  2399                           
  2400                           ;main.c: 130: I2C_Idle();
  2401  079D  120A  158A  2445  120A  118A  	fcall	_I2C_Idle
  2402                           
  2403                           ;main.c: 131: I2C_Write_Byte(0xD0);
  2404  07A2  30D0               	movlw	208
  2405  07A3  120A  158A  2469  120A  118A  	fcall	_I2C_Write_Byte
  2406                           
  2407                           ;main.c: 132: I2C_Idle();
  2408  07A8  120A  158A  2445  120A  118A  	fcall	_I2C_Idle
  2409                           
  2410                           ;main.c: 133: I2C_Write_Byte(pos_memoria);
  2411  07AD  1283               	bcf	3,5	;RP0=0, select bank0
  2412  07AE  1303               	bcf	3,6	;RP1=0, select bank0
  2413  07AF  0836               	movf	read_RTC_I2c@pos_memoria,w
  2414  07B0  120A  158A  2469  120A  118A  	fcall	_I2C_Write_Byte
  2415                           
  2416                           ;main.c: 134: I2C_Idle();
  2417  07B5  120A  158A  2445  120A  118A  	fcall	_I2C_Idle
  2418                           
  2419                           ;main.c: 135: I2C_ReStart();
  2420  07BA  120A  158A  241C  120A  118A  	fcall	_I2C_ReStart
  2421                           
  2422                           ;main.c: 136: I2C_Idle();
  2423  07BF  120A  158A  2445  120A  118A  	fcall	_I2C_Idle
  2424                           
  2425                           ;main.c: 137: I2C_Write_Byte(0xD1);
  2426  07C4  30D1               	movlw	209
  2427  07C5  120A  158A  2469  120A  118A  	fcall	_I2C_Write_Byte
  2428                           
  2429                           ;main.c: 138: I2C_Idle();
  2430  07CA  120A  158A  2445  120A  118A  	fcall	_I2C_Idle
  2431                           
  2432                           ;main.c: 139: leitura = I2C_Read_Byte();
  2433  07CF  120A  158A  244E  120A  118A  	fcall	_I2C_Read_Byte
  2434  07D4  1283               	bcf	3,5	;RP0=0, select bank0
  2435  07D5  1303               	bcf	3,6	;RP1=0, select bank0
  2436  07D6  00B5               	movwf	??_read_RTC_I2c
  2437  07D7  0835               	movf	??_read_RTC_I2c,w
  2438  07D8  1683               	bsf	3,5	;RP0=1, select bank1
  2439  07D9  1303               	bcf	3,6	;RP1=0, select bank1
  2440  07DA  00A7               	movwf	_leitura^(0+128)
  2441                           
  2442                           ;main.c: 140: I2C_Idle();
  2443  07DB  120A  158A  2445  120A  118A  	fcall	_I2C_Idle
  2444                           
  2445                           ;main.c: 141: I2C_Send_NACK();
  2446  07E0  120A  158A  2457  120A  118A  	fcall	_I2C_Send_NACK
  2447                           
  2448                           ;main.c: 142: I2C_Stop();
  2449  07E5  120A  158A  242C   	fcall	_I2C_Stop
  2450  07E8  0008               	return
  2451  07E9                     __end_of_read_RTC_I2c:	
  2452                           
  2453                           	psect	text5
  2454  0C69                     __ptext5:	
  2455 ;; *************** function _I2C_Write_Byte *****************
  2456 ;; Defined at:
  2457 ;;		line 108 in file "i2c.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;  Byte            1    wreg     unsigned char 
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;  Byte            1   20[BANK0 ] unsigned char 
  2462 ;; Return value:  Size  Location     Type
  2463 ;;		None               void
  2464 ;; Registers used:
  2465 ;;		wreg
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2471 ;;      Params:         0       0       0       0       0
  2472 ;;      Locals:         0       1       0       0       0
  2473 ;;      Temps:          0       0       0       0       0
  2474 ;;      Totals:         0       1       0       0       0
  2475 ;;Total ram usage:        1 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    3
  2478 ;; This function calls:
  2479 ;;		Nothing
  2480 ;; This function is called by:
  2481 ;;		_write_RTC_I2c
  2482 ;;		_read_RTC_I2c
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           
  2487                           ;psect for function _I2C_Write_Byte
  2488  0C69                     _I2C_Write_Byte:	
  2489                           
  2490                           ;incstack = 0
  2491                           ; Regs used in _I2C_Write_Byte: [wreg]
  2492                           ;I2C_Write_Byte@Byte stored from wreg
  2493  0C69  1283               	bcf	3,5	;RP0=0, select bank0
  2494  0C6A  1303               	bcf	3,6	;RP1=0, select bank0
  2495  0C6B  00B4               	movwf	I2C_Write_Byte@Byte
  2496                           
  2497                           ;i2c.c: 110: SSPBUF = Byte;
  2498  0C6C  0834               	movf	I2C_Write_Byte@Byte,w
  2499  0C6D  0093               	movwf	19	;volatile
  2500  0C6E                     l115:	
  2501                           ;i2c.c: 111: while (!SSPIF);
  2502                           
  2503  0C6E  1D8C               	btfss	12,3	;volatile
  2504  0C6F  2C6E               	goto	l115
  2505                           
  2506                           ;i2c.c: 112: SSPIF = 0;
  2507  0C70  118C               	bcf	12,3	;volatile
  2508                           
  2509                           ;i2c.c: 113: return SSPCON2bits.ACKSTAT;
  2510                           ;	Return value of _I2C_Write_Byte is never used
  2511  0C71  1683               	bsf	3,5	;RP0=1, select bank1
  2512  0C72  1303               	bcf	3,6	;RP1=0, select bank1
  2513  0C73  0811               	movf	17,w	;volatile
  2514  0C74  0008               	return
  2515  0C75                     __end_of_I2C_Write_Byte:	
  2516                           
  2517                           	psect	text6
  2518  0C2C                     __ptext6:	
  2519 ;; *************** function _I2C_Stop *****************
  2520 ;; Defined at:
  2521 ;;		line 88 in file "i2c.c"
  2522 ;; Parameters:    Size  Location     Type
  2523 ;;		None
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;		None
  2526 ;; Return value:  Size  Location     Type
  2527 ;;		None               void
  2528 ;; Registers used:
  2529 ;;		None
  2530 ;; Tracked objects:
  2531 ;;		On entry : 0/0
  2532 ;;		On exit  : 0/0
  2533 ;;		Unchanged: 0/0
  2534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2535 ;;      Params:         0       0       0       0       0
  2536 ;;      Locals:         0       0       0       0       0
  2537 ;;      Temps:          0       0       0       0       0
  2538 ;;      Totals:         0       0       0       0       0
  2539 ;;Total ram usage:        0 bytes
  2540 ;; Hardware stack levels used:    1
  2541 ;; Hardware stack levels required when called:    3
  2542 ;; This function calls:
  2543 ;;		Nothing
  2544 ;; This function is called by:
  2545 ;;		_write_RTC_I2c
  2546 ;;		_read_RTC_I2c
  2547 ;; This function uses a non-reentrant model
  2548 ;;
  2549                           
  2550                           
  2551                           ;psect for function _I2C_Stop
  2552  0C2C                     _I2C_Stop:	
  2553                           
  2554                           ;i2c.c: 89: SSPCON2bits.PEN = 1;
  2555                           
  2556                           ;incstack = 0
  2557                           ; Regs used in _I2C_Stop: []
  2558  0C2C  1683               	bsf	3,5	;RP0=1, select bank1
  2559  0C2D  1303               	bcf	3,6	;RP1=0, select bank1
  2560  0C2E  1511               	bsf	17,2	;volatile
  2561  0C2F                     l97:	
  2562                           ;i2c.c: 90: while (!SSPIF);
  2563                           
  2564  0C2F  1283               	bcf	3,5	;RP0=0, select bank0
  2565  0C30  1D8C               	btfss	12,3	;volatile
  2566  0C31  2C2F               	goto	l97
  2567                           
  2568                           ;i2c.c: 91: SSPIF = 0;
  2569  0C32  118C               	bcf	12,3	;volatile
  2570  0C33  0008               	return
  2571  0C34                     __end_of_I2C_Stop:	
  2572                           
  2573                           	psect	text7
  2574  0C24                     __ptext7:	
  2575 ;; *************** function _I2C_Start *****************
  2576 ;; Defined at:
  2577 ;;		line 74 in file "i2c.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;		None
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;		None
  2582 ;; Return value:  Size  Location     Type
  2583 ;;		None               void
  2584 ;; Registers used:
  2585 ;;		None
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2591 ;;      Params:         0       0       0       0       0
  2592 ;;      Locals:         0       0       0       0       0
  2593 ;;      Temps:          0       0       0       0       0
  2594 ;;      Totals:         0       0       0       0       0
  2595 ;;Total ram usage:        0 bytes
  2596 ;; Hardware stack levels used:    1
  2597 ;; Hardware stack levels required when called:    3
  2598 ;; This function calls:
  2599 ;;		Nothing
  2600 ;; This function is called by:
  2601 ;;		_write_RTC_I2c
  2602 ;;		_read_RTC_I2c
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           
  2607                           ;psect for function _I2C_Start
  2608  0C24                     _I2C_Start:	
  2609                           
  2610                           ;i2c.c: 76: SSPCON2bits.SEN = 1;
  2611                           
  2612                           ;incstack = 0
  2613                           ; Regs used in _I2C_Start: []
  2614  0C24  1683               	bsf	3,5	;RP0=1, select bank1
  2615  0C25  1303               	bcf	3,6	;RP1=0, select bank1
  2616  0C26  1411               	bsf	17,0	;volatile
  2617  0C27                     l85:	
  2618                           ;i2c.c: 77: while (!SSPIF);
  2619                           
  2620  0C27  1283               	bcf	3,5	;RP0=0, select bank0
  2621  0C28  1D8C               	btfss	12,3	;volatile
  2622  0C29  2C27               	goto	l85
  2623                           
  2624                           ;i2c.c: 78: SSPIF = 0;
  2625  0C2A  118C               	bcf	12,3	;volatile
  2626  0C2B  0008               	return
  2627  0C2C                     __end_of_I2C_Start:	
  2628                           
  2629                           	psect	text8
  2630  0C57                     __ptext8:	
  2631 ;; *************** function _I2C_Send_NACK *****************
  2632 ;; Defined at:
  2633 ;;		line 101 in file "i2c.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;		None
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;		None
  2638 ;; Return value:  Size  Location     Type
  2639 ;;		None               void
  2640 ;; Registers used:
  2641 ;;		None
  2642 ;; Tracked objects:
  2643 ;;		On entry : 0/0
  2644 ;;		On exit  : 0/0
  2645 ;;		Unchanged: 0/0
  2646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2647 ;;      Params:         0       0       0       0       0
  2648 ;;      Locals:         0       0       0       0       0
  2649 ;;      Temps:          0       0       0       0       0
  2650 ;;      Totals:         0       0       0       0       0
  2651 ;;Total ram usage:        0 bytes
  2652 ;; Hardware stack levels used:    1
  2653 ;; Hardware stack levels required when called:    3
  2654 ;; This function calls:
  2655 ;;		Nothing
  2656 ;; This function is called by:
  2657 ;;		_read_RTC_I2c
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661                           
  2662                           ;psect for function _I2C_Send_NACK
  2663  0C57                     _I2C_Send_NACK:	
  2664                           
  2665                           ;i2c.c: 102: SSPCON2bits.ACKDT = 1;
  2666                           
  2667                           ;incstack = 0
  2668                           ; Regs used in _I2C_Send_NACK: []
  2669  0C57  1683               	bsf	3,5	;RP0=1, select bank1
  2670  0C58  1303               	bcf	3,6	;RP1=0, select bank1
  2671  0C59  1691               	bsf	17,5	;volatile
  2672                           
  2673                           ;i2c.c: 103: SSPCON2bits.ACKEN = 1;
  2674  0C5A  1611               	bsf	17,4	;volatile
  2675  0C5B                     l109:	
  2676                           ;i2c.c: 104: while (!SSPIF);
  2677                           
  2678  0C5B  1283               	bcf	3,5	;RP0=0, select bank0
  2679  0C5C  1D8C               	btfss	12,3	;volatile
  2680  0C5D  2C5B               	goto	l109
  2681                           
  2682                           ;i2c.c: 105: SSPIF = 0;
  2683  0C5E  118C               	bcf	12,3	;volatile
  2684  0C5F  0008               	return
  2685  0C60                     __end_of_I2C_Send_NACK:	
  2686                           
  2687                           	psect	text9
  2688  0C4E                     __ptext9:	
  2689 ;; *************** function _I2C_Read_Byte *****************
  2690 ;; Defined at:
  2691 ;;		line 116 in file "i2c.c"
  2692 ;; Parameters:    Size  Location     Type
  2693 ;;		None
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;		None
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  1    wreg      unsigned char 
  2698 ;; Registers used:
  2699 ;;		wreg
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2705 ;;      Params:         0       0       0       0       0
  2706 ;;      Locals:         0       0       0       0       0
  2707 ;;      Temps:          0       0       0       0       0
  2708 ;;      Totals:         0       0       0       0       0
  2709 ;;Total ram usage:        0 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:    3
  2712 ;; This function calls:
  2713 ;;		Nothing
  2714 ;; This function is called by:
  2715 ;;		_read_RTC_I2c
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           
  2720                           ;psect for function _I2C_Read_Byte
  2721  0C4E                     _I2C_Read_Byte:	
  2722                           
  2723                           ;i2c.c: 118: SSPCON2bits.RCEN = 1;
  2724                           
  2725                           ;incstack = 0
  2726                           ; Regs used in _I2C_Read_Byte: [wreg]
  2727  0C4E  1683               	bsf	3,5	;RP0=1, select bank1
  2728  0C4F  1303               	bcf	3,6	;RP1=0, select bank1
  2729  0C50  1591               	bsf	17,3	;volatile
  2730  0C51                     l121:	
  2731                           ;i2c.c: 119: while (!SSPIF);
  2732                           
  2733  0C51  1283               	bcf	3,5	;RP0=0, select bank0
  2734  0C52  1D8C               	btfss	12,3	;volatile
  2735  0C53  2C51               	goto	l121
  2736                           
  2737                           ;i2c.c: 120: SSPIF = 0;
  2738  0C54  118C               	bcf	12,3	;volatile
  2739                           
  2740                           ;i2c.c: 122: return SSPBUF;
  2741  0C55  0813               	movf	19,w	;volatile
  2742  0C56  0008               	return
  2743  0C57                     __end_of_I2C_Read_Byte:	
  2744                           
  2745                           	psect	text10
  2746  0C1C                     __ptext10:	
  2747 ;; *************** function _I2C_ReStart *****************
  2748 ;; Defined at:
  2749 ;;		line 81 in file "i2c.c"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;		None
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;		None
  2754 ;; Return value:  Size  Location     Type
  2755 ;;		None               void
  2756 ;; Registers used:
  2757 ;;		None
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/0
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2763 ;;      Params:         0       0       0       0       0
  2764 ;;      Locals:         0       0       0       0       0
  2765 ;;      Temps:          0       0       0       0       0
  2766 ;;      Totals:         0       0       0       0       0
  2767 ;;Total ram usage:        0 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; Hardware stack levels required when called:    3
  2770 ;; This function calls:
  2771 ;;		Nothing
  2772 ;; This function is called by:
  2773 ;;		_read_RTC_I2c
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           
  2778                           ;psect for function _I2C_ReStart
  2779  0C1C                     _I2C_ReStart:	
  2780                           
  2781                           ;i2c.c: 83: SSPCON2bits.RSEN = 1;
  2782                           
  2783                           ;incstack = 0
  2784                           ; Regs used in _I2C_ReStart: []
  2785  0C1C  1683               	bsf	3,5	;RP0=1, select bank1
  2786  0C1D  1303               	bcf	3,6	;RP1=0, select bank1
  2787  0C1E  1491               	bsf	17,1	;volatile
  2788  0C1F                     l91:	
  2789                           ;i2c.c: 84: while (!SSPIF);
  2790                           
  2791  0C1F  1283               	bcf	3,5	;RP0=0, select bank0
  2792  0C20  1D8C               	btfss	12,3	;volatile
  2793  0C21  2C1F               	goto	l91
  2794                           
  2795                           ;i2c.c: 85: SSPIF = 0;
  2796  0C22  118C               	bcf	12,3	;volatile
  2797  0C23  0008               	return
  2798  0C24                     __end_of_I2C_ReStart:	
  2799                           
  2800                           	psect	text11
  2801  0C45                     __ptext11:	
  2802 ;; *************** function _I2C_Idle *****************
  2803 ;; Defined at:
  2804 ;;		line 125 in file "i2c.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;		None
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;		None
  2809 ;; Return value:  Size  Location     Type
  2810 ;;		None               void
  2811 ;; Registers used:
  2812 ;;		wreg, status,2
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2818 ;;      Params:         0       0       0       0       0
  2819 ;;      Locals:         0       0       0       0       0
  2820 ;;      Temps:          0       0       0       0       0
  2821 ;;      Totals:         0       0       0       0       0
  2822 ;;Total ram usage:        0 bytes
  2823 ;; Hardware stack levels used:    1
  2824 ;; Hardware stack levels required when called:    3
  2825 ;; This function calls:
  2826 ;;		Nothing
  2827 ;; This function is called by:
  2828 ;;		_write_RTC_I2c
  2829 ;;		_read_RTC_I2c
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           
  2834                           ;psect for function _I2C_Idle
  2835  0C45                     _I2C_Idle:	
  2836  0C45                     l1723:	
  2837                           ;i2c.c: 128: continue;
  2838                           
  2839                           ;i2c.c: 127: while ( ( SSPCON2 & 0x1F ) || ( SSPSTATbits.R_W ) )
  2840                           
  2841                           ;incstack = 0
  2842                           ; Regs used in _I2C_Idle: [wreg+status,2]
  2843                           
  2844  0C45  1683               	bsf	3,5	;RP0=1, select bank1
  2845  0C46  1303               	bcf	3,6	;RP1=0, select bank1
  2846  0C47  0811               	movf	17,w	;volatile
  2847  0C48  391F               	andlw	31
  2848  0C49  1D03               	btfss	3,2
  2849  0C4A  2C45               	goto	l1723
  2850  0C4B  1D14               	btfss	20,2	;volatile
  2851  0C4C  0008               	return
  2852  0C4D  2C45               	goto	l1723
  2853  0C4E                     __end_of_I2C_Idle:	
  2854                           
  2855                           	psect	text12
  2856  0EAB                     __ptext12:	
  2857 ;; *************** function _rand *****************
  2858 ;; Defined at:
  2859 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\rand.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;		None
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;		None
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  2   33[BANK0 ] int 
  2866 ;; Registers used:
  2867 ;;		wreg, status,2, status,0, pclath, cstack
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2873 ;;      Params:         0       2       0       0       0
  2874 ;;      Locals:         0       0       0       0       0
  2875 ;;      Temps:          0       5       0       0       0
  2876 ;;      Totals:         0       7       0       0       0
  2877 ;;Total ram usage:        7 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    4
  2880 ;; This function calls:
  2881 ;;		___lmul
  2882 ;; This function is called by:
  2883 ;;		_main
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           
  2888                           ;psect for function _rand
  2889  0EAB                     _rand:	
  2890                           
  2891                           ;incstack = 0
  2892                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  2893  0EAB  1283               	bcf	3,5	;RP0=0, select bank0
  2894  0EAC  1303               	bcf	3,6	;RP1=0, select bank0
  2895  0EAD  0858               	movf	_randx+3,w
  2896  0EAE  00B7               	movwf	___lmul@multiplier+3
  2897  0EAF  0857               	movf	_randx+2,w
  2898  0EB0  00B6               	movwf	___lmul@multiplier+2
  2899  0EB1  0856               	movf	_randx+1,w
  2900  0EB2  00B5               	movwf	___lmul@multiplier+1
  2901  0EB3  0855               	movf	_randx,w
  2902  0EB4  00B4               	movwf	___lmul@multiplier
  2903  0EB5  3041               	movlw	65
  2904  0EB6  00BB               	movwf	___lmul@multiplicand+3
  2905  0EB7  30C6               	movlw	198
  2906  0EB8  00BA               	movwf	___lmul@multiplicand+2
  2907  0EB9  304E               	movlw	78
  2908  0EBA  00B9               	movwf	___lmul@multiplicand+1
  2909  0EBB  306D               	movlw	109
  2910  0EBC  00B8               	movwf	___lmul@multiplicand
  2911  0EBD  120A  158A  2629  120A  158A  	fcall	___lmul
  2912  0EC2  1283               	bcf	3,5	;RP0=0, select bank0
  2913  0EC3  1303               	bcf	3,6	;RP1=0, select bank0
  2914  0EC4  0837               	movf	?___lmul+3,w
  2915  0EC5  00D8               	movwf	_randx+3
  2916  0EC6  0836               	movf	?___lmul+2,w
  2917  0EC7  00D7               	movwf	_randx+2
  2918  0EC8  0835               	movf	?___lmul+1,w
  2919  0EC9  00D6               	movwf	_randx+1
  2920  0ECA  0834               	movf	?___lmul,w
  2921  0ECB  00D5               	movwf	_randx
  2922  0ECC  3039               	movlw	57
  2923  0ECD  07D5               	addwf	_randx,f
  2924  0ECE  3030               	movlw	48
  2925  0ECF  1803               	skipnc
  2926  0ED0  3031               	movlw	49
  2927  0ED1  07D6               	addwf	_randx+1,f
  2928  0ED2  3000               	movlw	0
  2929  0ED3  1803               	skipnc
  2930  0ED4  3001               	movlw	1
  2931  0ED5  07D7               	addwf	_randx+2,f
  2932  0ED6  3000               	movlw	0
  2933  0ED7  1803               	skipnc
  2934  0ED8  3001               	movlw	1
  2935  0ED9  07D8               	addwf	_randx+3,f
  2936  0EDA  0855               	movf	_randx,w
  2937  0EDB  00C3               	movwf	??_rand
  2938  0EDC  0856               	movf	_randx+1,w
  2939  0EDD  00C4               	movwf	??_rand+1
  2940  0EDE  0857               	movf	_randx+2,w
  2941  0EDF  00C5               	movwf	??_rand+2
  2942  0EE0  0858               	movf	_randx+3,w
  2943  0EE1  00C6               	movwf	??_rand+3
  2944  0EE2  3010               	movlw	16
  2945  0EE3  00C7               	movwf	??_rand+4
  2946  0EE4                     u2195:	
  2947  0EE4  0D46               	rlf	??_rand+3,w
  2948  0EE5  0CC6               	rrf	??_rand+3,f
  2949  0EE6  0CC5               	rrf	??_rand+2,f
  2950  0EE7  0CC4               	rrf	??_rand+1,f
  2951  0EE8  0CC3               	rrf	??_rand,f
  2952  0EE9  0BC7               	decfsz	??_rand+4,f
  2953  0EEA  2EE4               	goto	u2195
  2954  0EEB  30FF               	movlw	255
  2955  0EEC  0543               	andwf	??_rand,w
  2956  0EED  00C1               	movwf	?_rand
  2957  0EEE  307F               	movlw	127
  2958  0EEF  0544               	andwf	??_rand+1,w
  2959  0EF0  00C2               	movwf	?_rand+1
  2960  0EF1  0008               	return
  2961  0EF2                     __end_of_rand:	
  2962                           
  2963                           	psect	text13
  2964  0E29                     __ptext13:	
  2965 ;; *************** function ___lmul *****************
  2966 ;; Defined at:
  2967 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul32.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;  multiplier      4   20[BANK0 ] unsigned long 
  2970 ;;  multiplicand    4   24[BANK0 ] unsigned long 
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;  product         4   29[BANK0 ] unsigned long 
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  4   20[BANK0 ] unsigned long 
  2975 ;; Registers used:
  2976 ;;		wreg, status,2, status,0
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2982 ;;      Params:         0       8       0       0       0
  2983 ;;      Locals:         0       4       0       0       0
  2984 ;;      Temps:          0       1       0       0       0
  2985 ;;      Totals:         0      13       0       0       0
  2986 ;;Total ram usage:       13 bytes
  2987 ;; Hardware stack levels used:    1
  2988 ;; Hardware stack levels required when called:    3
  2989 ;; This function calls:
  2990 ;;		Nothing
  2991 ;; This function is called by:
  2992 ;;		_rand
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996                           
  2997                           ;psect for function ___lmul
  2998  0E29                     ___lmul:	
  2999                           
  3000                           ;incstack = 0
  3001                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3002  0E29  3000               	movlw	0
  3003  0E2A  1283               	bcf	3,5	;RP0=0, select bank0
  3004  0E2B  1303               	bcf	3,6	;RP1=0, select bank0
  3005  0E2C  00C0               	movwf	___lmul@product+3
  3006  0E2D  3000               	movlw	0
  3007  0E2E  00BF               	movwf	___lmul@product+2
  3008  0E2F  3000               	movlw	0
  3009  0E30  00BE               	movwf	___lmul@product+1
  3010  0E31  3000               	movlw	0
  3011  0E32  00BD               	movwf	___lmul@product
  3012  0E33                     l1759:	
  3013  0E33  1C34               	btfss	___lmul@multiplier,0
  3014  0E34  2E49               	goto	l1763
  3015  0E35  0838               	movf	___lmul@multiplicand,w
  3016  0E36  07BD               	addwf	___lmul@product,f
  3017  0E37  0839               	movf	___lmul@multiplicand+1,w
  3018  0E38  1103               	clrz
  3019  0E39  1803               	skipnc
  3020  0E3A  3E01               	addlw	1
  3021  0E3B  1D03               	btfss	3,2
  3022  0E3C  07BE               	addwf	___lmul@product+1,f
  3023  0E3D  083A               	movf	___lmul@multiplicand+2,w
  3024  0E3E  1103               	clrz
  3025  0E3F  1803               	skipnc
  3026  0E40  3E01               	addlw	1
  3027  0E41  1D03               	btfss	3,2
  3028  0E42  07BF               	addwf	___lmul@product+2,f
  3029  0E43  083B               	movf	___lmul@multiplicand+3,w
  3030  0E44  1103               	clrz
  3031  0E45  1803               	skipnc
  3032  0E46  3E01               	addlw	1
  3033  0E47  1D03               	btfss	3,2
  3034  0E48  07C0               	addwf	___lmul@product+3,f
  3035  0E49                     l1763:	
  3036  0E49  3001               	movlw	1
  3037  0E4A  00BC               	movwf	??___lmul
  3038  0E4B                     u1575:	
  3039  0E4B  1003               	clrc
  3040  0E4C  0DB8               	rlf	___lmul@multiplicand,f
  3041  0E4D  0DB9               	rlf	___lmul@multiplicand+1,f
  3042  0E4E  0DBA               	rlf	___lmul@multiplicand+2,f
  3043  0E4F  0DBB               	rlf	___lmul@multiplicand+3,f
  3044  0E50  0BBC               	decfsz	??___lmul,f
  3045  0E51  2E4B               	goto	u1575
  3046  0E52  3001               	movlw	1
  3047  0E53                     u1585:	
  3048  0E53  1003               	clrc
  3049  0E54  0CB7               	rrf	___lmul@multiplier+3,f
  3050  0E55  0CB6               	rrf	___lmul@multiplier+2,f
  3051  0E56  0CB5               	rrf	___lmul@multiplier+1,f
  3052  0E57  0CB4               	rrf	___lmul@multiplier,f
  3053  0E58  3EFF               	addlw	-1
  3054  0E59  1D03               	skipz
  3055  0E5A  2E53               	goto	u1585
  3056  0E5B  0837               	movf	___lmul@multiplier+3,w
  3057  0E5C  0436               	iorwf	___lmul@multiplier+2,w
  3058  0E5D  0435               	iorwf	___lmul@multiplier+1,w
  3059  0E5E  0434               	iorwf	___lmul@multiplier,w
  3060  0E5F  1D03               	skipz
  3061  0E60  2E33               	goto	l1759
  3062  0E61  0840               	movf	___lmul@product+3,w
  3063  0E62  00B7               	movwf	?___lmul+3
  3064  0E63  083F               	movf	___lmul@product+2,w
  3065  0E64  00B6               	movwf	?___lmul+2
  3066  0E65  083E               	movf	___lmul@product+1,w
  3067  0E66  00B5               	movwf	?___lmul+1
  3068  0E67  083D               	movf	___lmul@product,w
  3069  0E68  00B4               	movwf	?___lmul
  3070  0E69  0008               	return
  3071  0E6A                     __end_of___lmul:	
  3072                           
  3073                           	psect	text14
  3074  02F9                     __ptext14:	
  3075 ;; *************** function _printf *****************
  3076 ;; Defined at:
  3077 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;  f               1    wreg     PTR const unsigned char 
  3080 ;;		 -> STR_3(2), STR_2(38), STR_1(3), 
  3081 ;; Auto vars:     Size  Location     Type
  3082 ;;  f               1    8[BANK1 ] PTR const unsigned char 
  3083 ;;		 -> STR_3(2), STR_2(38), STR_1(3), 
  3084 ;;  idx             1    0[BANK1 ] unsigned char 
  3085 ;;  tmpval          4    0        struct .
  3086 ;;  width           2    6[BANK1 ] int 
  3087 ;;  val             2    3[BANK1 ] unsigned int 
  3088 ;;  cp              2    0        PTR const unsigned char 
  3089 ;;  len             2    0        unsigned int 
  3090 ;;  c               1    9[BANK1 ] char 
  3091 ;;  flag            1    5[BANK1 ] unsigned char 
  3092 ;;  prec            1    2[BANK1 ] char 
  3093 ;;  ap              1    1[BANK1 ] PTR void [1]
  3094 ;;		 -> ?i1_printf(2), ?_printf(2), 
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  2   34[BANK0 ] int 
  3097 ;; Registers used:
  3098 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3104 ;;      Params:         0      16       0       0       0
  3105 ;;      Locals:         0       0      10       0       0
  3106 ;;      Temps:          0       3       0       0       0
  3107 ;;      Totals:         0      19      10       0       0
  3108 ;;Total ram usage:       29 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; Hardware stack levels required when called:    4
  3111 ;; This function calls:
  3112 ;;		___lwdiv
  3113 ;;		___lwmod
  3114 ;;		___wmul
  3115 ;;		_isdigit
  3116 ;;		_putch
  3117 ;; This function is called by:
  3118 ;;		_main
  3119 ;; This function uses a non-reentrant model
  3120 ;;
  3121                           
  3122                           
  3123                           ;psect for function _printf
  3124  02F9                     _printf:	
  3125                           
  3126                           ;incstack = 0
  3127                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3128                           ;printf@f stored from wreg
  3129  02F9  1683               	bsf	3,5	;RP0=1, select bank1
  3130  02FA  1303               	bcf	3,6	;RP1=0, select bank1
  3131  02FB  00CE               	movwf	printf@f^(0+128)
  3132                           
  3133                           ;doprnt.c: 466: va_list ap;
  3134                           ;doprnt.c: 499: signed char c;
  3135                           ;doprnt.c: 501: int width;
  3136                           ;doprnt.c: 506: signed char prec;
  3137                           ;doprnt.c: 508: unsigned char flag;
  3138                           ;doprnt.c: 523: union {
  3139                           ;doprnt.c: 524: unsigned long vd;
  3140                           ;doprnt.c: 525: double integ;
  3141                           ;doprnt.c: 526: } tmpval;
  3142                           ;doprnt.c: 528: unsigned int val;
  3143                           ;doprnt.c: 529: unsigned len;
  3144                           ;doprnt.c: 530: const char * cp;
  3145                           ;doprnt.c: 533: *ap = __va_start();
  3146  02FC  3042               	movlw	(low (?_printf| 0))& (0+255)
  3147  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  3148  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  3149  02FF  00D2               	movwf	??_printf
  3150  0300  0852               	movf	??_printf,w
  3151  0301  1683               	bsf	3,5	;RP0=1, select bank1
  3152  0302  1303               	bcf	3,6	;RP1=0, select bank1
  3153  0303  00C7               	movwf	printf@ap^(0+128)
  3154  0304                     l2065:	
  3155                           ;doprnt.c: 536: while(c = *f++) {
  3156                           
  3157  0304  3001               	movlw	1
  3158  0305  1683               	bsf	3,5	;RP0=1, select bank1
  3159  0306  1303               	bcf	3,6	;RP1=0, select bank1
  3160  0307  07CE               	addwf	printf@f^(0+128),f
  3161  0308  30FF               	movlw	-1
  3162  0309  074E               	addwf	printf@f^(0+128),w
  3163  030A  0084               	movwf	4
  3164  030B  120A  158A  2000  120A  118A  	fcall	stringdir
  3165  0310  1283               	bcf	3,5	;RP0=0, select bank0
  3166  0311  1303               	bcf	3,6	;RP1=0, select bank0
  3167  0312  00D2               	movwf	??_printf
  3168  0313  0852               	movf	??_printf,w
  3169  0314  1683               	bsf	3,5	;RP0=1, select bank1
  3170  0315  1303               	bcf	3,6	;RP1=0, select bank1
  3171  0316  00CF               	movwf	printf@c^(0+128)
  3172  0317  084F               	movf	printf@c^(0+128),w
  3173  0318  1903               	btfsc	3,2
  3174  0319  0008               	return
  3175                           
  3176                           ;doprnt.c: 538: if(c != '%')
  3177  031A  3025               	movlw	37
  3178  031B  064F               	xorwf	printf@c^(0+128),w
  3179  031C  1903               	btfsc	3,2
  3180  031D  2B25               	goto	l1975
  3181                           
  3182                           ;doprnt.c: 540: {
  3183                           ;doprnt.c: 541: (putch(c) );
  3184  031E  084F               	movf	printf@c^(0+128),w
  3185  031F  120A  158A  2414  120A  118A  	fcall	_putch
  3186                           
  3187                           ;doprnt.c: 542: continue;
  3188  0324  2B04               	goto	l2065
  3189  0325                     l1975:	
  3190                           
  3191                           ;doprnt.c: 543: }
  3192                           ;doprnt.c: 546: width = 0;
  3193  0325  1683               	bsf	3,5	;RP0=1, select bank1
  3194  0326  1303               	bcf	3,6	;RP1=0, select bank1
  3195  0327  01CC               	clrf	printf@width^(0+128)
  3196  0328  01CD               	clrf	(printf@width+1)^(0+128)
  3197                           
  3198                           ;doprnt.c: 548: flag = 0;
  3199  0329  01CB               	clrf	printf@flag^(0+128)
  3200                           
  3201                           ;doprnt.c: 551: switch(*f) {
  3202                           
  3203                           ;doprnt.c: 550: for(;;) {
  3204  032A  2B34               	goto	l1981
  3205  032B                     l355:	
  3206                           ;doprnt.c: 579: case '0':
  3207                           
  3208                           
  3209                           ;doprnt.c: 580: flag |= 0x04;
  3210  032B  154B               	bsf	printf@flag^(0+128),2
  3211                           
  3212                           ;doprnt.c: 581: f++;
  3213  032C  3001               	movlw	1
  3214  032D  1283               	bcf	3,5	;RP0=0, select bank0
  3215  032E  1303               	bcf	3,6	;RP1=0, select bank0
  3216  032F  00D2               	movwf	??_printf
  3217  0330  0852               	movf	??_printf,w
  3218  0331  1683               	bsf	3,5	;RP0=1, select bank1
  3219  0332  1303               	bcf	3,6	;RP1=0, select bank1
  3220  0333  07CE               	addwf	printf@f^(0+128),f
  3221  0334                     l1981:	
  3222                           ;doprnt.c: 584: }
  3223                           
  3224                           ;doprnt.c: 582: continue;
  3225                           
  3226  0334  084E               	movf	printf@f^(0+128),w
  3227  0335  0084               	movwf	4
  3228  0336  120A  158A  2000  120A  118A  	fcall	stringdir
  3229                           
  3230                           ; Switch size 1, requested type "space"
  3231                           ; Number of cases is 1, Range of values is 48 to 48
  3232                           ; switch strategies available:
  3233                           ; Name         Instructions Cycles
  3234                           ; simple_byte            4     3 (average)
  3235                           ; direct_byte           14    11 (fixed)
  3236                           ; jumptable            263     9 (fixed)
  3237                           ;	Chosen strategy is simple_byte
  3238  033B  3A30               	xorlw	48	; case 48
  3239  033C  1903               	skipnz
  3240  033D  2B2B               	goto	l355
  3241  033E  2B3F               	goto	l1983
  3242  033F                     l1983:	
  3243                           ;doprnt.c: 586: }
  3244                           
  3245                           ;doprnt.c: 585: break;
  3246                           
  3247                           
  3248                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3249  033F  084E               	movf	printf@f^(0+128),w
  3250  0340  0084               	movwf	4
  3251  0341  120A  158A  2000  120A  118A  	fcall	stringdir
  3252  0346  120A  158A  24AF  120A  118A  	fcall	_isdigit
  3253  034B  1C03               	btfss	3,0
  3254  034C  2BB3               	goto	l1999
  3255                           
  3256                           ;doprnt.c: 598: width = 0;
  3257  034D  1683               	bsf	3,5	;RP0=1, select bank1
  3258  034E  1303               	bcf	3,6	;RP1=0, select bank1
  3259  034F  01CC               	clrf	printf@width^(0+128)
  3260  0350  01CD               	clrf	(printf@width+1)^(0+128)
  3261  0351                     l1987:	
  3262                           ;doprnt.c: 599: do {
  3263                           
  3264                           
  3265                           ;doprnt.c: 600: width *= 10;
  3266  0351  300A               	movlw	10
  3267  0352  1283               	bcf	3,5	;RP0=0, select bank0
  3268  0353  1303               	bcf	3,6	;RP1=0, select bank0
  3269  0354  00B4               	movwf	___wmul@multiplier
  3270  0355  3000               	movlw	0
  3271  0356  00B5               	movwf	___wmul@multiplier+1
  3272  0357  1683               	bsf	3,5	;RP0=1, select bank1
  3273  0358  1303               	bcf	3,6	;RP1=0, select bank1
  3274  0359  084D               	movf	(printf@width+1)^(0+128),w
  3275  035A  1283               	bcf	3,5	;RP0=0, select bank0
  3276  035B  1303               	bcf	3,6	;RP1=0, select bank0
  3277  035C  00B7               	movwf	___wmul@multiplicand+1
  3278  035D  1683               	bsf	3,5	;RP0=1, select bank1
  3279  035E  1303               	bcf	3,6	;RP1=0, select bank1
  3280  035F  084C               	movf	printf@width^(0+128),w
  3281  0360  1283               	bcf	3,5	;RP0=0, select bank0
  3282  0361  1303               	bcf	3,6	;RP1=0, select bank0
  3283  0362  00B6               	movwf	___wmul@multiplicand
  3284  0363  120A  158A  2526  120A  118A  	fcall	___wmul
  3285  0368  1283               	bcf	3,5	;RP0=0, select bank0
  3286  0369  1303               	bcf	3,6	;RP1=0, select bank0
  3287  036A  0835               	movf	?___wmul+1,w
  3288  036B  1683               	bsf	3,5	;RP0=1, select bank1
  3289  036C  1303               	bcf	3,6	;RP1=0, select bank1
  3290  036D  00CD               	movwf	(printf@width+1)^(0+128)
  3291  036E  1283               	bcf	3,5	;RP0=0, select bank0
  3292  036F  1303               	bcf	3,6	;RP1=0, select bank0
  3293  0370  0834               	movf	?___wmul,w
  3294  0371  1683               	bsf	3,5	;RP0=1, select bank1
  3295  0372  1303               	bcf	3,6	;RP1=0, select bank1
  3296  0373  00CC               	movwf	printf@width^(0+128)
  3297                           
  3298                           ;doprnt.c: 601: width += *f++ - '0';
  3299  0374  084E               	movf	printf@f^(0+128),w
  3300  0375  0084               	movwf	4
  3301  0376  120A  158A  2000  120A  118A  	fcall	stringdir
  3302  037B  3ED0               	addlw	208
  3303  037C  1283               	bcf	3,5	;RP0=0, select bank0
  3304  037D  1303               	bcf	3,6	;RP1=0, select bank0
  3305  037E  00D2               	movwf	??_printf
  3306  037F  30FF               	movlw	255
  3307  0380  1803               	skipnc
  3308  0381  3000               	movlw	0
  3309  0382  00D3               	movwf	??_printf+1
  3310  0383  0852               	movf	??_printf,w
  3311  0384  1683               	bsf	3,5	;RP0=1, select bank1
  3312  0385  1303               	bcf	3,6	;RP1=0, select bank1
  3313  0386  07CC               	addwf	printf@width^(0+128),f
  3314  0387  1803               	skipnc
  3315  0388  0ACD               	incf	(printf@width+1)^(0+128),f
  3316  0389  1283               	bcf	3,5	;RP0=0, select bank0
  3317  038A  1303               	bcf	3,6	;RP1=0, select bank0
  3318  038B  0853               	movf	??_printf+1,w
  3319  038C  1683               	bsf	3,5	;RP0=1, select bank1
  3320  038D  1303               	bcf	3,6	;RP1=0, select bank1
  3321  038E  07CD               	addwf	(printf@width+1)^(0+128),f
  3322  038F  3001               	movlw	1
  3323  0390  1283               	bcf	3,5	;RP0=0, select bank0
  3324  0391  1303               	bcf	3,6	;RP1=0, select bank0
  3325  0392  00D2               	movwf	??_printf
  3326  0393  0852               	movf	??_printf,w
  3327  0394  1683               	bsf	3,5	;RP0=1, select bank1
  3328  0395  1303               	bcf	3,6	;RP1=0, select bank1
  3329  0396  07CE               	addwf	printf@f^(0+128),f
  3330                           
  3331                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3332  0397  084E               	movf	printf@f^(0+128),w
  3333  0398  0084               	movwf	4
  3334  0399  120A  158A  2000  120A  118A  	fcall	stringdir
  3335  039E  120A  158A  24AF  120A  118A  	fcall	_isdigit
  3336  03A3  1C03               	btfss	3,0
  3337  03A4  2BB3               	goto	l1999
  3338  03A5  2B51               	goto	l1987
  3339  03A6                     l366:	
  3340                           ;doprnt.c: 712: case 'X':
  3341                           
  3342                           ;doprnt.c: 638: goto alldone;
  3343                           
  3344                           ;doprnt.c: 637: case 0:
  3345                           
  3346                           ;doprnt.c: 608: }
  3347                           ;doprnt.c: 635: switch(c = *f++) {
  3348                           
  3349                           
  3350                           ;doprnt.c: 718: case 'x':
  3351                           ;doprnt.c: 721: flag |= 0x80;
  3352  03A6  1683               	bsf	3,5	;RP0=1, select bank1
  3353  03A7  1303               	bcf	3,6	;RP1=0, select bank1
  3354  03A8  17CB               	bsf	printf@flag^(0+128),7
  3355                           
  3356                           ;doprnt.c: 723: break;
  3357  03A9  2BCD               	goto	l2001
  3358  03AA                     l1995:	
  3359                           ;doprnt.c: 817: case 'u':
  3360                           
  3361                           ;doprnt.c: 813: continue;
  3362                           
  3363                           ;doprnt.c: 802: default:
  3364                           
  3365                           
  3366                           ;doprnt.c: 818: flag |= 0xC0;
  3367  03AA  30C0               	movlw	192
  3368  03AB  1283               	bcf	3,5	;RP0=0, select bank0
  3369  03AC  1303               	bcf	3,6	;RP1=0, select bank0
  3370  03AD  00D2               	movwf	??_printf
  3371  03AE  0852               	movf	??_printf,w
  3372  03AF  1683               	bsf	3,5	;RP0=1, select bank1
  3373  03B0  1303               	bcf	3,6	;RP1=0, select bank1
  3374  03B1  04CB               	iorwf	printf@flag^(0+128),f
  3375                           
  3376                           ;doprnt.c: 822: }
  3377                           
  3378                           ;doprnt.c: 819: break;
  3379  03B2  2BCD               	goto	l2001
  3380  03B3                     l1999:	
  3381  03B3  3001               	movlw	1
  3382  03B4  1683               	bsf	3,5	;RP0=1, select bank1
  3383  03B5  1303               	bcf	3,6	;RP1=0, select bank1
  3384  03B6  07CE               	addwf	printf@f^(0+128),f
  3385  03B7  30FF               	movlw	-1
  3386  03B8  074E               	addwf	printf@f^(0+128),w
  3387  03B9  0084               	movwf	4
  3388  03BA  120A  158A  2000  120A  118A  	fcall	stringdir
  3389  03BF  00CF               	movwf	printf@c^(0+128)
  3390                           
  3391                           ; Switch size 1, requested type "space"
  3392                           ; Number of cases is 4, Range of values is 0 to 120
  3393                           ; switch strategies available:
  3394                           ; Name         Instructions Cycles
  3395                           ; simple_byte           13     7 (average)
  3396                           ; jumptable            260     6 (fixed)
  3397                           ;	Chosen strategy is simple_byte
  3398  03C0  3A00               	xorlw	0	; case 0
  3399  03C1  1903               	skipnz
  3400  03C2  2D45               	goto	l398
  3401  03C3  3A58               	xorlw	88	; case 88
  3402  03C4  1903               	skipnz
  3403  03C5  2BA6               	goto	l366
  3404  03C6  3A2D               	xorlw	45	; case 117
  3405  03C7  1903               	skipnz
  3406  03C8  2BAA               	goto	l1995
  3407  03C9  3A0D               	xorlw	13	; case 120
  3408  03CA  1903               	skipnz
  3409  03CB  2BA6               	goto	l366
  3410  03CC  2B04               	goto	l2065
  3411  03CD                     l2001:	
  3412                           
  3413                           ;doprnt.c: 1273: {
  3414                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3415  03CD  0847               	movf	printf@ap^(0+128),w
  3416  03CE  0084               	movwf	4
  3417  03CF  1383               	bcf	3,7	;select IRP bank0
  3418  03D0  0800               	movf	0,w
  3419  03D1  00C9               	movwf	printf@val^(0+128)
  3420  03D2  0A84               	incf	4,f
  3421  03D3  0800               	movf	0,w
  3422  03D4  00CA               	movwf	(printf@val+1)^(0+128)
  3423  03D5  3002               	movlw	2
  3424  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  3425  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  3426  03D8  00D2               	movwf	??_printf
  3427  03D9  0852               	movf	??_printf,w
  3428  03DA  1683               	bsf	3,5	;RP0=1, select bank1
  3429  03DB  1303               	bcf	3,6	;RP1=0, select bank1
  3430  03DC  07C7               	addwf	printf@ap^(0+128),f
  3431                           
  3432                           ;doprnt.c: 1287: }
  3433                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  3434  03DD  2C3E               	goto	l2027
  3435  03DE                     l371:	
  3436                           ;doprnt.c: 1302: case 0xC0:
  3437                           
  3438                           
  3439                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3440  03DE  01CF               	clrf	printf@c^(0+128)
  3441  03DF  0ACF               	incf	printf@c^(0+128),f
  3442  03E0                     L3:	
  3443  03E0  3005               	movlw	5
  3444  03E1  064F               	xorwf	printf@c^(0+128),w
  3445  03E2  1903               	btfsc	3,2
  3446  03E3  2C47               	goto	l2029
  3447                           
  3448                           ;doprnt.c: 1306: if(val < dpowers[c])
  3449  03E4  084F               	movf	printf@c^(0+128),w
  3450  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  3451  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  3452  03E7  00D2               	movwf	??_printf
  3453  03E8  0752               	addwf	??_printf,w
  3454  03E9  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3455  03EA  0084               	movwf	4
  3456  03EB  120A  158A  2000  120A  118A  	fcall	stringdir
  3457  03F0  00D3               	movwf	??_printf+1
  3458  03F1  120A  158A  2000  120A  118A  	fcall	stringdir
  3459  03F6  00D4               	movwf	??_printf+2
  3460  03F7  0854               	movf	??_printf+2,w
  3461  03F8  1683               	bsf	3,5	;RP0=1, select bank1
  3462  03F9  1303               	bcf	3,6	;RP1=0, select bank1
  3463  03FA  024A               	subwf	(printf@val+1)^(0+128),w
  3464  03FB  1D03               	skipz
  3465  03FC  2C03               	goto	u2065
  3466  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  3467  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  3468  03FF  0853               	movf	??_printf+1,w
  3469  0400  1683               	bsf	3,5	;RP0=1, select bank1
  3470  0401  1303               	bcf	3,6	;RP1=0, select bank1
  3471  0402  0249               	subwf	printf@val^(0+128),w
  3472  0403                     u2065:	
  3473  0403  1C03               	btfss	3,0
  3474  0404  2C47               	goto	l2029
  3475                           
  3476                           ;doprnt.c: 1307: break;
  3477  0405  3001               	movlw	1
  3478  0406  1283               	bcf	3,5	;RP0=0, select bank0
  3479  0407  1303               	bcf	3,6	;RP1=0, select bank0
  3480  0408  00D2               	movwf	??_printf
  3481  0409  0852               	movf	??_printf,w
  3482  040A  1683               	bsf	3,5	;RP0=1, select bank1
  3483  040B  1303               	bcf	3,6	;RP1=0, select bank1
  3484  040C  07CF               	addwf	printf@c^(0+128),f
  3485  040D  2BE0               	goto	L3
  3486  040E                     l376:	
  3487                           ;doprnt.c: 1314: case 0x80:
  3488                           
  3489                           ;doprnt.c: 1309: break;
  3490                           
  3491                           
  3492                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3493  040E  01CF               	clrf	printf@c^(0+128)
  3494  040F  0ACF               	incf	printf@c^(0+128),f
  3495  0410                     L4:	
  3496  0410  3004               	movlw	4
  3497  0411  064F               	xorwf	printf@c^(0+128),w
  3498  0412  1903               	btfsc	3,2
  3499  0413  2C47               	goto	l2029
  3500                           
  3501                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3502  0414  084F               	movf	printf@c^(0+128),w
  3503  0415  1283               	bcf	3,5	;RP0=0, select bank0
  3504  0416  1303               	bcf	3,6	;RP1=0, select bank0
  3505  0417  00D2               	movwf	??_printf
  3506  0418  0752               	addwf	??_printf,w
  3507  0419  3E0B               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  3508  041A  0084               	movwf	4
  3509  041B  120A  158A  2000  120A  118A  	fcall	stringdir
  3510  0420  00D3               	movwf	??_printf+1
  3511  0421  120A  158A  2000  120A  118A  	fcall	stringdir
  3512  0426  00D4               	movwf	??_printf+2
  3513  0427  0854               	movf	??_printf+2,w
  3514  0428  1683               	bsf	3,5	;RP0=1, select bank1
  3515  0429  1303               	bcf	3,6	;RP1=0, select bank1
  3516  042A  024A               	subwf	(printf@val+1)^(0+128),w
  3517  042B  1D03               	skipz
  3518  042C  2C33               	goto	u2095
  3519  042D  1283               	bcf	3,5	;RP0=0, select bank0
  3520  042E  1303               	bcf	3,6	;RP1=0, select bank0
  3521  042F  0853               	movf	??_printf+1,w
  3522  0430  1683               	bsf	3,5	;RP0=1, select bank1
  3523  0431  1303               	bcf	3,6	;RP1=0, select bank1
  3524  0432  0249               	subwf	printf@val^(0+128),w
  3525  0433                     u2095:	
  3526  0433  1C03               	btfss	3,0
  3527  0434  2C47               	goto	l2029
  3528                           
  3529                           ;doprnt.c: 1318: break;
  3530  0435  3001               	movlw	1
  3531  0436  1283               	bcf	3,5	;RP0=0, select bank0
  3532  0437  1303               	bcf	3,6	;RP1=0, select bank0
  3533  0438  00D2               	movwf	??_printf
  3534  0439  0852               	movf	??_printf,w
  3535  043A  1683               	bsf	3,5	;RP0=1, select bank1
  3536  043B  1303               	bcf	3,6	;RP1=0, select bank1
  3537  043C  07CF               	addwf	printf@c^(0+128),f
  3538  043D  2C10               	goto	L4
  3539  043E                     l2027:	
  3540                           ;doprnt.c: 1336: }
  3541                           
  3542                           ;doprnt.c: 1320: break;
  3543                           
  3544  043E  084B               	movf	printf@flag^(0+128),w
  3545  043F  39C0               	andlw	192
  3546                           
  3547                           ; Switch size 1, requested type "space"
  3548                           ; Number of cases is 2, Range of values is 128 to 192
  3549                           ; switch strategies available:
  3550                           ; Name         Instructions Cycles
  3551                           ; simple_byte            7     4 (average)
  3552                           ; direct_byte          206    11 (fixed)
  3553                           ; jumptable            263     9 (fixed)
  3554                           ;	Chosen strategy is simple_byte
  3555  0440  3A80               	xorlw	128	; case 128
  3556  0441  1903               	skipnz
  3557  0442  2C0E               	goto	l376
  3558  0443  3A40               	xorlw	64	; case 192
  3559  0444  1903               	skipnz
  3560  0445  2BDE               	goto	l371
  3561  0446  2C47               	goto	l2029
  3562  0447                     l2029:	
  3563                           
  3564                           ;doprnt.c: 1381: if(width > c)
  3565  0447  084F               	movf	printf@c^(0+128),w
  3566  0448  1283               	bcf	3,5	;RP0=0, select bank0
  3567  0449  1303               	bcf	3,6	;RP1=0, select bank0
  3568  044A  00D2               	movwf	??_printf
  3569  044B  01D3               	clrf	??_printf+1
  3570  044C  1BD2               	btfsc	??_printf,7
  3571  044D  03D3               	decf	??_printf+1,f
  3572  044E  0853               	movf	??_printf+1,w
  3573  044F  3A80               	xorlw	128
  3574  0450  00D4               	movwf	??_printf+2
  3575  0451  1683               	bsf	3,5	;RP0=1, select bank1
  3576  0452  1303               	bcf	3,6	;RP1=0, select bank1
  3577  0453  084D               	movf	(printf@width+1)^(0+128),w
  3578  0454  3A80               	xorlw	128
  3579  0455  1283               	bcf	3,5	;RP0=0, select bank0
  3580  0456  1303               	bcf	3,6	;RP1=0, select bank0
  3581  0457  0254               	subwf	??_printf+2,w
  3582  0458  1D03               	skipz
  3583  0459  2C60               	goto	u2115
  3584  045A  1683               	bsf	3,5	;RP0=1, select bank1
  3585  045B  1303               	bcf	3,6	;RP1=0, select bank1
  3586  045C  084C               	movf	printf@width^(0+128),w
  3587  045D  1283               	bcf	3,5	;RP0=0, select bank0
  3588  045E  1303               	bcf	3,6	;RP1=0, select bank0
  3589  045F  0252               	subwf	??_printf,w
  3590  0460                     u2115:	
  3591  0460  1803               	skipnc
  3592  0461  2C78               	goto	l2033
  3593                           
  3594                           ;doprnt.c: 1382: width -= c;
  3595  0462  1683               	bsf	3,5	;RP0=1, select bank1
  3596  0463  1303               	bcf	3,6	;RP1=0, select bank1
  3597  0464  084F               	movf	printf@c^(0+128),w
  3598  0465  1283               	bcf	3,5	;RP0=0, select bank0
  3599  0466  1303               	bcf	3,6	;RP1=0, select bank0
  3600  0467  00D2               	movwf	??_printf
  3601  0468  01D3               	clrf	??_printf+1
  3602  0469  1BD2               	btfsc	??_printf,7
  3603  046A  03D3               	decf	??_printf+1,f
  3604  046B  0852               	movf	??_printf,w
  3605  046C  1683               	bsf	3,5	;RP0=1, select bank1
  3606  046D  1303               	bcf	3,6	;RP1=0, select bank1
  3607  046E  02CC               	subwf	printf@width^(0+128),f
  3608  046F  1283               	bcf	3,5	;RP0=0, select bank0
  3609  0470  1303               	bcf	3,6	;RP1=0, select bank0
  3610  0471  0853               	movf	??_printf+1,w
  3611  0472  1683               	bsf	3,5	;RP0=1, select bank1
  3612  0473  1303               	bcf	3,6	;RP1=0, select bank1
  3613  0474  1C03               	skipc
  3614  0475  03CD               	decf	(printf@width+1)^(0+128),f
  3615  0476  02CD               	subwf	(printf@width+1)^(0+128),f
  3616  0477  2C7C               	goto	l2035
  3617  0478                     l2033:	
  3618                           
  3619                           ;doprnt.c: 1383: else
  3620                           ;doprnt.c: 1384: width = 0;
  3621  0478  1683               	bsf	3,5	;RP0=1, select bank1
  3622  0479  1303               	bcf	3,6	;RP1=0, select bank1
  3623  047A  01CC               	clrf	printf@width^(0+128)
  3624  047B  01CD               	clrf	(printf@width+1)^(0+128)
  3625  047C                     l2035:	
  3626                           
  3627                           ;doprnt.c: 1387: if(flag & 0x04) {
  3628  047C  1D4B               	btfss	printf@flag^(0+128),2
  3629  047D  2C91               	goto	l2043
  3630  047E                     L5:	
  3631                           
  3632                           ;doprnt.c: 1415: if(width)
  3633  047E  084C               	movf	printf@width^(0+128),w
  3634  047F  044D               	iorwf	(printf@width+1)^(0+128),w
  3635  0480  1903               	btfsc	3,2
  3636  0481  2CA7               	goto	l2049
  3637                           
  3638                           ;doprnt.c: 1417: (putch('0') );
  3639                           
  3640                           ;doprnt.c: 1416: do
  3641  0482  3030               	movlw	48
  3642  0483  120A  158A  2414  120A  118A  	fcall	_putch
  3643                           
  3644                           ;doprnt.c: 1418: while(--width);
  3645  0488  30FF               	movlw	255
  3646  0489  1683               	bsf	3,5	;RP0=1, select bank1
  3647  048A  1303               	bcf	3,6	;RP1=0, select bank1
  3648  048B  07CC               	addwf	printf@width^(0+128),f
  3649  048C  1803               	skipnc
  3650  048D  0ACD               	incf	(printf@width+1)^(0+128),f
  3651  048E  30FF               	movlw	255
  3652  048F  07CD               	addwf	(printf@width+1)^(0+128),f
  3653  0490  2C7E               	goto	L5
  3654  0491                     l2043:	
  3655                           ;doprnt.c: 1420: } else
  3656                           
  3657                           
  3658                           ;doprnt.c: 1422: {
  3659                           ;doprnt.c: 1424: if(width
  3660                           ;doprnt.c: 1428: )
  3661  0491  084C               	movf	printf@width^(0+128),w
  3662  0492  044D               	iorwf	(printf@width+1)^(0+128),w
  3663  0493  1903               	btfsc	3,2
  3664  0494  2CA7               	goto	l2049
  3665  0495                     l2045:	
  3666                           ;doprnt.c: 1429: do
  3667                           
  3668                           
  3669                           ;doprnt.c: 1430: (putch(' ') );
  3670  0495  3020               	movlw	32
  3671  0496  120A  158A  2414  120A  118A  	fcall	_putch
  3672                           
  3673                           ;doprnt.c: 1431: while(--width);
  3674  049B  30FF               	movlw	255
  3675  049C  1683               	bsf	3,5	;RP0=1, select bank1
  3676  049D  1303               	bcf	3,6	;RP1=0, select bank1
  3677  049E  07CC               	addwf	printf@width^(0+128),f
  3678  049F  1803               	skipnc
  3679  04A0  0ACD               	incf	(printf@width+1)^(0+128),f
  3680  04A1  30FF               	movlw	255
  3681  04A2  07CD               	addwf	(printf@width+1)^(0+128),f
  3682  04A3  084C               	movf	printf@width^(0+128),w
  3683  04A4  044D               	iorwf	(printf@width+1)^(0+128),w
  3684  04A5  1D03               	btfss	3,2
  3685  04A6  2C95               	goto	l2045
  3686  04A7                     l2049:	
  3687                           
  3688                           ;doprnt.c: 1469: }
  3689                           ;doprnt.c: 1472: prec = c;
  3690  04A7  084F               	movf	printf@c^(0+128),w
  3691  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  3692  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  3693  04AA  00D2               	movwf	??_printf
  3694  04AB  0852               	movf	??_printf,w
  3695  04AC  1683               	bsf	3,5	;RP0=1, select bank1
  3696  04AD  1303               	bcf	3,6	;RP1=0, select bank1
  3697  04AE  00C8               	movwf	printf@prec^(0+128)
  3698                           
  3699                           ;doprnt.c: 1474: while(prec--) {
  3700  04AF  2D30               	goto	l2063
  3701  04B0                     l2051:	
  3702                           ;doprnt.c: 1478: {
  3703                           ;doprnt.c: 1486: case 0xC0:
  3704                           
  3705                           ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
  3706                           
  3707                           
  3708                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3709  04B0  300A               	movlw	10
  3710  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  3711  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  3712  04B3  00BC               	movwf	___lwmod@divisor
  3713  04B4  3000               	movlw	0
  3714  04B5  00BD               	movwf	___lwmod@divisor+1
  3715  04B6  1683               	bsf	3,5	;RP0=1, select bank1
  3716  04B7  1303               	bcf	3,6	;RP1=0, select bank1
  3717  04B8  0848               	movf	printf@prec^(0+128),w
  3718  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  3719  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  3720  04BB  00D2               	movwf	??_printf
  3721  04BC  0752               	addwf	??_printf,w
  3722  04BD  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3723  04BE  0084               	movwf	4
  3724  04BF  120A  158A  2000  120A  118A  	fcall	stringdir
  3725  04C4  00B4               	movwf	___lwdiv@divisor
  3726  04C5  120A  158A  2000  120A  118A  	fcall	stringdir
  3727  04CA  00B5               	movwf	___lwdiv@divisor+1
  3728  04CB  1683               	bsf	3,5	;RP0=1, select bank1
  3729  04CC  1303               	bcf	3,6	;RP1=0, select bank1
  3730  04CD  084A               	movf	(printf@val+1)^(0+128),w
  3731  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  3732  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  3733  04D0  00B7               	movwf	___lwdiv@dividend+1
  3734  04D1  1683               	bsf	3,5	;RP0=1, select bank1
  3735  04D2  1303               	bcf	3,6	;RP1=0, select bank1
  3736  04D3  0849               	movf	printf@val^(0+128),w
  3737  04D4  1283               	bcf	3,5	;RP0=0, select bank0
  3738  04D5  1303               	bcf	3,6	;RP1=0, select bank0
  3739  04D6  00B6               	movwf	___lwdiv@dividend
  3740  04D7  120A  158A  25EB  120A  118A  	fcall	___lwdiv
  3741  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  3742  04DD  1303               	bcf	3,6	;RP1=0, select bank0
  3743  04DE  0835               	movf	?___lwdiv+1,w
  3744  04DF  00BF               	movwf	___lwmod@dividend+1
  3745  04E0  0834               	movf	?___lwdiv,w
  3746  04E1  00BE               	movwf	___lwmod@dividend
  3747  04E2  120A  158A  257B  120A  118A  	fcall	___lwmod
  3748  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  3749  04E8  1303               	bcf	3,6	;RP1=0, select bank0
  3750  04E9  083C               	movf	?___lwmod,w
  3751  04EA  3E30               	addlw	48
  3752  04EB  00D3               	movwf	??_printf+1
  3753  04EC  0853               	movf	??_printf+1,w
  3754  04ED  2D27               	goto	L2
  3755  04EE                     l2053:	
  3756                           ;doprnt.c: 1497: case 0x80:
  3757                           
  3758                           ;doprnt.c: 1491: break;
  3759                           
  3760                           
  3761                           ;doprnt.c: 1499: {
  3762                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3763  04EE  0848               	movf	printf@prec^(0+128),w
  3764  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  3765  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  3766  04F1  00D2               	movwf	??_printf
  3767  04F2  0752               	addwf	??_printf,w
  3768  04F3  3E0B               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  3769  04F4  0084               	movwf	4
  3770  04F5  120A  158A  2000  120A  118A  	fcall	stringdir
  3771  04FA  00B4               	movwf	___lwdiv@divisor
  3772  04FB  120A  158A  2000  120A  118A  	fcall	stringdir
  3773  0500  00B5               	movwf	___lwdiv@divisor+1
  3774  0501  1683               	bsf	3,5	;RP0=1, select bank1
  3775  0502  1303               	bcf	3,6	;RP1=0, select bank1
  3776  0503  084A               	movf	(printf@val+1)^(0+128),w
  3777  0504  1283               	bcf	3,5	;RP0=0, select bank0
  3778  0505  1303               	bcf	3,6	;RP1=0, select bank0
  3779  0506  00B7               	movwf	___lwdiv@dividend+1
  3780  0507  1683               	bsf	3,5	;RP0=1, select bank1
  3781  0508  1303               	bcf	3,6	;RP1=0, select bank1
  3782  0509  0849               	movf	printf@val^(0+128),w
  3783  050A  1283               	bcf	3,5	;RP0=0, select bank0
  3784  050B  1303               	bcf	3,6	;RP1=0, select bank0
  3785  050C  00B6               	movwf	___lwdiv@dividend
  3786  050D  120A  158A  25EB  120A  118A  	fcall	___lwdiv
  3787  0512  1283               	bcf	3,5	;RP0=0, select bank0
  3788  0513  1303               	bcf	3,6	;RP1=0, select bank0
  3789  0514  0834               	movf	?___lwdiv,w
  3790  0515  390F               	andlw	15
  3791  0516  00D3               	movwf	??_printf+1
  3792  0517  0853               	movf	??_printf+1,w
  3793  0518  1683               	bsf	3,5	;RP0=1, select bank1
  3794  0519  1303               	bcf	3,6	;RP1=0, select bank1
  3795  051A  00C6               	movwf	printf@idx^(0+128)
  3796                           
  3797                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  3798  051B  0846               	movf	printf@idx^(0+128),w
  3799  051C  3E39               	addlw	low ((STR_4-__stringbase)| (0+32768))
  3800  051D  0084               	movwf	4
  3801  051E  120A  158A  2000  120A  118A  	fcall	stringdir
  3802  0523  1283               	bcf	3,5	;RP0=0, select bank0
  3803  0524  1303               	bcf	3,6	;RP1=0, select bank0
  3804  0525  00D2               	movwf	??_printf
  3805  0526  0852               	movf	??_printf,w
  3806  0527                     L2:	
  3807  0527  1683               	bsf	3,5	;RP0=1, select bank1
  3808  0528  1303               	bcf	3,6	;RP1=0, select bank1
  3809  0529  00CF               	movwf	printf@c^(0+128)
  3810  052A                     l2061:	
  3811                           ;doprnt.c: 1523: }
  3812                           
  3813                           ;doprnt.c: 1508: }
  3814                           ;doprnt.c: 1510: break;
  3815                           
  3816                           
  3817                           ;doprnt.c: 1524: (putch(c) );
  3818  052A  084F               	movf	printf@c^(0+128),w
  3819  052B  120A  158A  2414  120A  118A  	fcall	_putch
  3820  0530                     l2063:	
  3821  0530  30FF               	movlw	255
  3822  0531  1283               	bcf	3,5	;RP0=0, select bank0
  3823  0532  1303               	bcf	3,6	;RP1=0, select bank0
  3824  0533  00D2               	movwf	??_printf
  3825  0534  0852               	movf	??_printf,w
  3826  0535  1683               	bsf	3,5	;RP0=1, select bank1
  3827  0536  1303               	bcf	3,6	;RP1=0, select bank1
  3828  0537  07C8               	addwf	printf@prec^(0+128),f
  3829  0538  0A48               	incf	printf@prec^(0+128),w
  3830  0539  1903               	btfsc	3,2
  3831  053A  2B04               	goto	l2065
  3832  053B  084B               	movf	printf@flag^(0+128),w
  3833  053C  39C0               	andlw	192
  3834                           
  3835                           ; Switch size 1, requested type "space"
  3836                           ; Number of cases is 2, Range of values is 128 to 192
  3837                           ; switch strategies available:
  3838                           ; Name         Instructions Cycles
  3839                           ; simple_byte            7     4 (average)
  3840                           ; direct_byte          206    11 (fixed)
  3841                           ; jumptable            263     9 (fixed)
  3842                           ;	Chosen strategy is simple_byte
  3843  053D  3A80               	xorlw	128	; case 128
  3844  053E  1903               	skipnz
  3845  053F  2CEE               	goto	l2053
  3846  0540  3A40               	xorlw	64	; case 192
  3847  0541  1903               	skipnz
  3848  0542  2CB0               	goto	l2051
  3849  0543  2D2A               	goto	l2061
  3850  0544  2D2A               	goto	l2061
  3851  0545                     l398:	
  3852                           ;doprnt.c: 1540: return 0;
  3853                           ;	Return value of _printf is never used
  3854                           
  3855                           ;doprnt.c: 1525: }
  3856                           ;doprnt.c: 1533: }
  3857                           ;doprnt.c: 1535: alldone:
  3858                           
  3859  0545  0008               	return
  3860  0546                     __end_of_printf:	
  3861                           
  3862                           	psect	text15
  3863  0C14                     __ptext15:	
  3864 ;; *************** function _putch *****************
  3865 ;; Defined at:
  3866 ;;		line 46 in file "usart.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;  byte            1    wreg     unsigned char 
  3869 ;; Auto vars:     Size  Location     Type
  3870 ;;  byte            1   20[BANK0 ] unsigned char 
  3871 ;; Return value:  Size  Location     Type
  3872 ;;		None               void
  3873 ;; Registers used:
  3874 ;;		wreg
  3875 ;; Tracked objects:
  3876 ;;		On entry : 0/0
  3877 ;;		On exit  : 0/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3880 ;;      Params:         0       0       0       0       0
  3881 ;;      Locals:         0       1       0       0       0
  3882 ;;      Temps:          0       0       0       0       0
  3883 ;;      Totals:         0       1       0       0       0
  3884 ;;Total ram usage:        1 bytes
  3885 ;; Hardware stack levels used:    1
  3886 ;; Hardware stack levels required when called:    3
  3887 ;; This function calls:
  3888 ;;		Nothing
  3889 ;; This function is called by:
  3890 ;;		_printf
  3891 ;;		_getche
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           
  3896                           ;psect for function _putch
  3897  0C14                     _putch:	
  3898                           
  3899                           ;incstack = 0
  3900                           ; Regs used in _putch: [wreg]
  3901                           ;putch@byte stored from wreg
  3902  0C14  1283               	bcf	3,5	;RP0=0, select bank0
  3903  0C15  1303               	bcf	3,6	;RP1=0, select bank0
  3904  0C16  00B4               	movwf	putch@byte
  3905  0C17                     l323:	
  3906                           ;usart.c: 49: continue;
  3907                           
  3908                           ;usart.c: 48: while (!TXIF)
  3909                           
  3910  0C17  1E0C               	btfss	12,4	;volatile
  3911  0C18  2C17               	goto	l323
  3912                           
  3913                           ;usart.c: 50: TXREG = byte;
  3914  0C19  0834               	movf	putch@byte,w
  3915  0C1A  0099               	movwf	25	;volatile
  3916  0C1B  0008               	return
  3917  0C1C                     __end_of_putch:	
  3918                           
  3919                           	psect	text16
  3920  0CAF                     __ptext16:	
  3921 ;; *************** function _isdigit *****************
  3922 ;; Defined at:
  3923 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;  c               1    wreg     unsigned char 
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;  c               1   21[BANK0 ] unsigned char 
  3928 ;; Return value:  Size  Location     Type
  3929 ;;		None               void
  3930 ;; Registers used:
  3931 ;;		wreg, status,2, status,0
  3932 ;; Tracked objects:
  3933 ;;		On entry : 0/0
  3934 ;;		On exit  : 0/0
  3935 ;;		Unchanged: 0/0
  3936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3937 ;;      Params:         0       0       0       0       0
  3938 ;;      Locals:         0       2       0       0       0
  3939 ;;      Temps:          0       0       0       0       0
  3940 ;;      Totals:         0       2       0       0       0
  3941 ;;Total ram usage:        2 bytes
  3942 ;; Hardware stack levels used:    1
  3943 ;; Hardware stack levels required when called:    3
  3944 ;; This function calls:
  3945 ;;		Nothing
  3946 ;; This function is called by:
  3947 ;;		_printf
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           
  3952                           ;psect for function _isdigit
  3953  0CAF                     _isdigit:	
  3954                           
  3955                           ;incstack = 0
  3956                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3957                           ;isdigit@c stored from wreg
  3958  0CAF  1283               	bcf	3,5	;RP0=0, select bank0
  3959  0CB0  1303               	bcf	3,6	;RP1=0, select bank0
  3960  0CB1  00B5               	movwf	isdigit@c
  3961  0CB2  01B4               	clrf	_isdigit$889
  3962  0CB3  303A               	movlw	58
  3963  0CB4  0235               	subwf	isdigit@c,w
  3964  0CB5  1803               	skipnc
  3965  0CB6  2CBD               	goto	l1739
  3966  0CB7  3030               	movlw	48
  3967  0CB8  0235               	subwf	isdigit@c,w
  3968  0CB9  1C03               	skipc
  3969  0CBA  2CBD               	goto	l1739
  3970  0CBB  01B4               	clrf	_isdigit$889
  3971  0CBC  0AB4               	incf	_isdigit$889,f
  3972  0CBD                     l1739:	
  3973  0CBD  0C34               	rrf	_isdigit$889,w
  3974  0CBE  0008               	return
  3975  0CBF                     __end_of_isdigit:	
  3976                           
  3977                           	psect	text17
  3978  0D26                     __ptext17:	
  3979 ;; *************** function ___wmul *****************
  3980 ;; Defined at:
  3981 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;  multiplier      2   20[BANK0 ] unsigned int 
  3984 ;;  multiplicand    2   22[BANK0 ] unsigned int 
  3985 ;; Auto vars:     Size  Location     Type
  3986 ;;  product         2   24[BANK0 ] unsigned int 
  3987 ;; Return value:  Size  Location     Type
  3988 ;;                  2   20[BANK0 ] unsigned int 
  3989 ;; Registers used:
  3990 ;;		wreg, status,2, status,0
  3991 ;; Tracked objects:
  3992 ;;		On entry : 0/0
  3993 ;;		On exit  : 0/0
  3994 ;;		Unchanged: 0/0
  3995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3996 ;;      Params:         0       4       0       0       0
  3997 ;;      Locals:         0       2       0       0       0
  3998 ;;      Temps:          0       0       0       0       0
  3999 ;;      Totals:         0       6       0       0       0
  4000 ;;Total ram usage:        6 bytes
  4001 ;; Hardware stack levels used:    1
  4002 ;; Hardware stack levels required when called:    3
  4003 ;; This function calls:
  4004 ;;		Nothing
  4005 ;; This function is called by:
  4006 ;;		_printf
  4007 ;; This function uses a non-reentrant model
  4008 ;;
  4009                           
  4010                           
  4011                           ;psect for function ___wmul
  4012  0D26                     ___wmul:	
  4013                           
  4014                           ;incstack = 0
  4015                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4016  0D26  1283               	bcf	3,5	;RP0=0, select bank0
  4017  0D27  1303               	bcf	3,6	;RP1=0, select bank0
  4018  0D28  01B8               	clrf	___wmul@product
  4019  0D29  01B9               	clrf	___wmul@product+1
  4020  0D2A                     l1745:	
  4021  0D2A  1C34               	btfss	___wmul@multiplier,0
  4022  0D2B  2D32               	goto	l482
  4023  0D2C  0836               	movf	___wmul@multiplicand,w
  4024  0D2D  07B8               	addwf	___wmul@product,f
  4025  0D2E  1803               	skipnc
  4026  0D2F  0AB9               	incf	___wmul@product+1,f
  4027  0D30  0837               	movf	___wmul@multiplicand+1,w
  4028  0D31  07B9               	addwf	___wmul@product+1,f
  4029  0D32                     l482:	
  4030  0D32  3001               	movlw	1
  4031  0D33                     u1525:	
  4032  0D33  1003               	clrc
  4033  0D34  0DB6               	rlf	___wmul@multiplicand,f
  4034  0D35  0DB7               	rlf	___wmul@multiplicand+1,f
  4035  0D36  3EFF               	addlw	-1
  4036  0D37  1D03               	skipz
  4037  0D38  2D33               	goto	u1525
  4038  0D39  3001               	movlw	1
  4039  0D3A                     u1535:	
  4040  0D3A  1003               	clrc
  4041  0D3B  0CB5               	rrf	___wmul@multiplier+1,f
  4042  0D3C  0CB4               	rrf	___wmul@multiplier,f
  4043  0D3D  3EFF               	addlw	-1
  4044  0D3E  1D03               	skipz
  4045  0D3F  2D3A               	goto	u1535
  4046  0D40  0834               	movf	___wmul@multiplier,w
  4047  0D41  0435               	iorwf	___wmul@multiplier+1,w
  4048  0D42  1D03               	btfss	3,2
  4049  0D43  2D2A               	goto	l1745
  4050  0D44  0839               	movf	___wmul@product+1,w
  4051  0D45  00B5               	movwf	?___wmul+1
  4052  0D46  0838               	movf	___wmul@product,w
  4053  0D47  00B4               	movwf	?___wmul
  4054  0D48  0008               	return
  4055  0D49                     __end_of___wmul:	
  4056                           
  4057                           	psect	text18
  4058  0D7B                     __ptext18:	
  4059 ;; *************** function ___lwmod *****************
  4060 ;; Defined at:
  4061 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  4062 ;; Parameters:    Size  Location     Type
  4063 ;;  divisor         2   28[BANK0 ] unsigned int 
  4064 ;;  dividend        2   30[BANK0 ] unsigned int 
  4065 ;; Auto vars:     Size  Location     Type
  4066 ;;  counter         1   33[BANK0 ] unsigned char 
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  2   28[BANK0 ] unsigned int 
  4069 ;; Registers used:
  4070 ;;		wreg, status,2, status,0
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4076 ;;      Params:         0       4       0       0       0
  4077 ;;      Locals:         0       1       0       0       0
  4078 ;;      Temps:          0       1       0       0       0
  4079 ;;      Totals:         0       6       0       0       0
  4080 ;;Total ram usage:        6 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; Hardware stack levels required when called:    3
  4083 ;; This function calls:
  4084 ;;		Nothing
  4085 ;; This function is called by:
  4086 ;;		_printf
  4087 ;; This function uses a non-reentrant model
  4088 ;;
  4089                           
  4090                           
  4091                           ;psect for function ___lwmod
  4092  0D7B                     ___lwmod:	
  4093                           
  4094                           ;incstack = 0
  4095                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4096  0D7B  1283               	bcf	3,5	;RP0=0, select bank0
  4097  0D7C  1303               	bcf	3,6	;RP1=0, select bank0
  4098  0D7D  083C               	movf	___lwmod@divisor,w
  4099  0D7E  043D               	iorwf	___lwmod@divisor+1,w
  4100  0D7F  1903               	btfsc	3,2
  4101  0D80  2DAA               	goto	l1815
  4102  0D81  01C1               	clrf	___lwmod@counter
  4103  0D82  0AC1               	incf	___lwmod@counter,f
  4104  0D83                     l1805:	
  4105  0D83  1BBD               	btfsc	___lwmod@divisor+1,7
  4106  0D84  2D91               	goto	l1807
  4107  0D85  3001               	movlw	1
  4108  0D86                     u1685:	
  4109  0D86  1003               	clrc
  4110  0D87  0DBC               	rlf	___lwmod@divisor,f
  4111  0D88  0DBD               	rlf	___lwmod@divisor+1,f
  4112  0D89  3EFF               	addlw	-1
  4113  0D8A  1D03               	skipz
  4114  0D8B  2D86               	goto	u1685
  4115  0D8C  3001               	movlw	1
  4116  0D8D  00C0               	movwf	??___lwmod
  4117  0D8E  0840               	movf	??___lwmod,w
  4118  0D8F  07C1               	addwf	___lwmod@counter,f
  4119  0D90  2D83               	goto	l1805
  4120  0D91                     l1807:	
  4121  0D91  083D               	movf	___lwmod@divisor+1,w
  4122  0D92  023F               	subwf	___lwmod@dividend+1,w
  4123  0D93  1D03               	skipz
  4124  0D94  2D97               	goto	u1705
  4125  0D95  083C               	movf	___lwmod@divisor,w
  4126  0D96  023E               	subwf	___lwmod@dividend,w
  4127  0D97                     u1705:	
  4128  0D97  1C03               	skipc
  4129  0D98  2D9F               	goto	l1811
  4130  0D99  083C               	movf	___lwmod@divisor,w
  4131  0D9A  02BE               	subwf	___lwmod@dividend,f
  4132  0D9B  083D               	movf	___lwmod@divisor+1,w
  4133  0D9C  1C03               	skipc
  4134  0D9D  03BF               	decf	___lwmod@dividend+1,f
  4135  0D9E  02BF               	subwf	___lwmod@dividend+1,f
  4136  0D9F                     l1811:	
  4137  0D9F  3001               	movlw	1
  4138  0DA0                     u1715:	
  4139  0DA0  1003               	clrc
  4140  0DA1  0CBD               	rrf	___lwmod@divisor+1,f
  4141  0DA2  0CBC               	rrf	___lwmod@divisor,f
  4142  0DA3  3EFF               	addlw	-1
  4143  0DA4  1D03               	skipz
  4144  0DA5  2DA0               	goto	u1715
  4145  0DA6  3001               	movlw	1
  4146  0DA7  02C1               	subwf	___lwmod@counter,f
  4147  0DA8  1D03               	btfss	3,2
  4148  0DA9  2D91               	goto	l1807
  4149  0DAA                     l1815:	
  4150  0DAA  083F               	movf	___lwmod@dividend+1,w
  4151  0DAB  00BD               	movwf	?___lwmod+1
  4152  0DAC  083E               	movf	___lwmod@dividend,w
  4153  0DAD  00BC               	movwf	?___lwmod
  4154  0DAE  0008               	return
  4155  0DAF                     __end_of___lwmod:	
  4156                           
  4157                           	psect	text19
  4158  0DEB                     __ptext19:	
  4159 ;; *************** function ___lwdiv *****************
  4160 ;; Defined at:
  4161 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;  divisor         2   20[BANK0 ] unsigned int 
  4164 ;;  dividend        2   22[BANK0 ] unsigned int 
  4165 ;; Auto vars:     Size  Location     Type
  4166 ;;  quotient        2   25[BANK0 ] unsigned int 
  4167 ;;  counter         1   27[BANK0 ] unsigned char 
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  2   20[BANK0 ] unsigned int 
  4170 ;; Registers used:
  4171 ;;		wreg, status,2, status,0
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4177 ;;      Params:         0       4       0       0       0
  4178 ;;      Locals:         0       3       0       0       0
  4179 ;;      Temps:          0       1       0       0       0
  4180 ;;      Totals:         0       8       0       0       0
  4181 ;;Total ram usage:        8 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:    3
  4184 ;; This function calls:
  4185 ;;		Nothing
  4186 ;; This function is called by:
  4187 ;;		_printf
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           
  4192                           ;psect for function ___lwdiv
  4193  0DEB                     ___lwdiv:	
  4194                           
  4195                           ;incstack = 0
  4196                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4197  0DEB  1283               	bcf	3,5	;RP0=0, select bank0
  4198  0DEC  1303               	bcf	3,6	;RP1=0, select bank0
  4199  0DED  01B9               	clrf	___lwdiv@quotient
  4200  0DEE  01BA               	clrf	___lwdiv@quotient+1
  4201  0DEF  0834               	movf	___lwdiv@divisor,w
  4202  0DF0  0435               	iorwf	___lwdiv@divisor+1,w
  4203  0DF1  1903               	btfsc	3,2
  4204  0DF2  2E24               	goto	l1793
  4205  0DF3  01BB               	clrf	___lwdiv@counter
  4206  0DF4  0ABB               	incf	___lwdiv@counter,f
  4207  0DF5                     l1781:	
  4208  0DF5  1BB5               	btfsc	___lwdiv@divisor+1,7
  4209  0DF6  2E03               	goto	l1783
  4210  0DF7  3001               	movlw	1
  4211  0DF8                     u1615:	
  4212  0DF8  1003               	clrc
  4213  0DF9  0DB4               	rlf	___lwdiv@divisor,f
  4214  0DFA  0DB5               	rlf	___lwdiv@divisor+1,f
  4215  0DFB  3EFF               	addlw	-1
  4216  0DFC  1D03               	skipz
  4217  0DFD  2DF8               	goto	u1615
  4218  0DFE  3001               	movlw	1
  4219  0DFF  00B8               	movwf	??___lwdiv
  4220  0E00  0838               	movf	??___lwdiv,w
  4221  0E01  07BB               	addwf	___lwdiv@counter,f
  4222  0E02  2DF5               	goto	l1781
  4223  0E03                     l1783:	
  4224  0E03  3001               	movlw	1
  4225  0E04                     u1635:	
  4226  0E04  1003               	clrc
  4227  0E05  0DB9               	rlf	___lwdiv@quotient,f
  4228  0E06  0DBA               	rlf	___lwdiv@quotient+1,f
  4229  0E07  3EFF               	addlw	-1
  4230  0E08  1D03               	skipz
  4231  0E09  2E04               	goto	u1635
  4232  0E0A  0835               	movf	___lwdiv@divisor+1,w
  4233  0E0B  0237               	subwf	___lwdiv@dividend+1,w
  4234  0E0C  1D03               	skipz
  4235  0E0D  2E10               	goto	u1645
  4236  0E0E  0834               	movf	___lwdiv@divisor,w
  4237  0E0F  0236               	subwf	___lwdiv@dividend,w
  4238  0E10                     u1645:	
  4239  0E10  1C03               	skipc
  4240  0E11  2E19               	goto	l1789
  4241  0E12  0834               	movf	___lwdiv@divisor,w
  4242  0E13  02B6               	subwf	___lwdiv@dividend,f
  4243  0E14  0835               	movf	___lwdiv@divisor+1,w
  4244  0E15  1C03               	skipc
  4245  0E16  03B7               	decf	___lwdiv@dividend+1,f
  4246  0E17  02B7               	subwf	___lwdiv@dividend+1,f
  4247  0E18  1439               	bsf	___lwdiv@quotient,0
  4248  0E19                     l1789:	
  4249  0E19  3001               	movlw	1
  4250  0E1A                     u1655:	
  4251  0E1A  1003               	clrc
  4252  0E1B  0CB5               	rrf	___lwdiv@divisor+1,f
  4253  0E1C  0CB4               	rrf	___lwdiv@divisor,f
  4254  0E1D  3EFF               	addlw	-1
  4255  0E1E  1D03               	skipz
  4256  0E1F  2E1A               	goto	u1655
  4257  0E20  3001               	movlw	1
  4258  0E21  02BB               	subwf	___lwdiv@counter,f
  4259  0E22  1D03               	btfss	3,2
  4260  0E23  2E03               	goto	l1783
  4261  0E24                     l1793:	
  4262  0E24  083A               	movf	___lwdiv@quotient+1,w
  4263  0E25  00B5               	movwf	?___lwdiv+1
  4264  0E26  0839               	movf	___lwdiv@quotient,w
  4265  0E27  00B4               	movwf	?___lwdiv
  4266  0E28  0008               	return
  4267  0E29                     __end_of___lwdiv:	
  4268                           
  4269                           	psect	text20
  4270  0C90                     __ptext20:	
  4271 ;; *************** function _configUSARTInterrupts *****************
  4272 ;; Defined at:
  4273 ;;		line 32 in file "usart.c"
  4274 ;; Parameters:    Size  Location     Type
  4275 ;;		None
  4276 ;; Auto vars:     Size  Location     Type
  4277 ;;		None
  4278 ;; Return value:  Size  Location     Type
  4279 ;;		None               void
  4280 ;; Registers used:
  4281 ;;		None
  4282 ;; Tracked objects:
  4283 ;;		On entry : 0/0
  4284 ;;		On exit  : 0/0
  4285 ;;		Unchanged: 0/0
  4286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4287 ;;      Params:         0       0       0       0       0
  4288 ;;      Locals:         0       0       0       0       0
  4289 ;;      Temps:          0       0       0       0       0
  4290 ;;      Totals:         0       0       0       0       0
  4291 ;;Total ram usage:        0 bytes
  4292 ;; Hardware stack levels used:    1
  4293 ;; Hardware stack levels required when called:    3
  4294 ;; This function calls:
  4295 ;;		Nothing
  4296 ;; This function is called by:
  4297 ;;		_main
  4298 ;; This function uses a non-reentrant model
  4299 ;;
  4300                           
  4301                           
  4302                           ;psect for function _configUSARTInterrupts
  4303  0C90                     _configUSARTInterrupts:	
  4304                           
  4305                           ;usart.c: 35: TXIE = 0;
  4306                           
  4307                           ;incstack = 0
  4308                           ; Regs used in _configUSARTInterrupts: []
  4309  0C90  1683               	bsf	3,5	;RP0=1, select bank1
  4310  0C91  1303               	bcf	3,6	;RP1=0, select bank1
  4311  0C92  120C               	bcf	12,4	;volatile
  4312                           
  4313                           ;usart.c: 36: TXIF = 0;
  4314  0C93  1283               	bcf	3,5	;RP0=0, select bank0
  4315  0C94  1303               	bcf	3,6	;RP1=0, select bank0
  4316  0C95  120C               	bcf	12,4	;volatile
  4317                           
  4318                           ;usart.c: 39: RCIE = 1;
  4319  0C96  1683               	bsf	3,5	;RP0=1, select bank1
  4320  0C97  1303               	bcf	3,6	;RP1=0, select bank1
  4321  0C98  168C               	bsf	12,5	;volatile
  4322                           
  4323                           ;usart.c: 40: RCIF = 0;
  4324  0C99  1283               	bcf	3,5	;RP0=0, select bank0
  4325  0C9A  1303               	bcf	3,6	;RP1=0, select bank0
  4326  0C9B  128C               	bcf	12,5	;volatile
  4327                           
  4328                           ;usart.c: 42: PEIE = 1;
  4329  0C9C  170B               	bsf	11,6	;volatile
  4330                           
  4331                           ;usart.c: 43: GIE = 1;
  4332  0C9D  178B               	bsf	11,7	;volatile
  4333  0C9E  0008               	return
  4334  0C9F                     __end_of_configUSARTInterrupts:	
  4335                           
  4336                           	psect	text21
  4337  0C75                     __ptext21:	
  4338 ;; *************** function _configTimer *****************
  4339 ;; Defined at:
  4340 ;;		line 17 in file "timer0.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;		None
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;		None
  4345 ;; Return value:  Size  Location     Type
  4346 ;;		None               void
  4347 ;; Registers used:
  4348 ;;		None
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4354 ;;      Params:         0       0       0       0       0
  4355 ;;      Locals:         0       0       0       0       0
  4356 ;;      Temps:          0       0       0       0       0
  4357 ;;      Totals:         0       0       0       0       0
  4358 ;;Total ram usage:        0 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    3
  4361 ;; This function calls:
  4362 ;;		Nothing
  4363 ;; This function is called by:
  4364 ;;		_main
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           
  4369                           ;psect for function _configTimer
  4370  0C75                     _configTimer:	
  4371                           
  4372                           ;timer0.c: 18: OPTION_REGbits.T0CS = 0;
  4373                           
  4374                           ;incstack = 0
  4375                           ; Regs used in _configTimer: []
  4376  0C75  1683               	bsf	3,5	;RP0=1, select bank1
  4377  0C76  1303               	bcf	3,6	;RP1=0, select bank1
  4378  0C77  1281               	bcf	1,5	;volatile
  4379                           
  4380                           ;timer0.c: 19: OPTION_REGbits.T0SE = 0;
  4381  0C78  1201               	bcf	1,4	;volatile
  4382                           
  4383                           ;timer0.c: 20: OPTION_REGbits.PSA = 0;
  4384  0C79  1181               	bcf	1,3	;volatile
  4385                           
  4386                           ;timer0.c: 24: OPTION_REGbits.PS2 = 1;
  4387  0C7A  1501               	bsf	1,2	;volatile
  4388                           
  4389                           ;timer0.c: 25: OPTION_REGbits.PS1 = 1;
  4390  0C7B  1481               	bsf	1,1	;volatile
  4391                           
  4392                           ;timer0.c: 26: OPTION_REGbits.PS0 = 1;
  4393  0C7C  1401               	bsf	1,0	;volatile
  4394                           
  4395                           ;timer0.c: 28: INTCONbits.TMR0IF = 0;
  4396  0C7D  110B               	bcf	11,2	;volatile
  4397                           
  4398                           ;timer0.c: 29: INTCONbits.TMR0IE = 1;
  4399  0C7E  168B               	bsf	11,5	;volatile
  4400                           
  4401                           ;timer0.c: 30: INTCONbits.GIE = 1;
  4402  0C7F  178B               	bsf	11,7	;volatile
  4403                           
  4404                           ;timer0.c: 31: INTCONbits.PEIE = 1;
  4405  0C80  170B               	bsf	11,6	;volatile
  4406  0C81  0008               	return
  4407  0C82                     __end_of_configTimer:	
  4408                           
  4409                           	psect	text22
  4410  0CBF                     __ptext22:	
  4411 ;; *************** function _configRS232 *****************
  4412 ;; Defined at:
  4413 ;;		line 9 in file "usart.c"
  4414 ;; Parameters:    Size  Location     Type
  4415 ;;		None
  4416 ;; Auto vars:     Size  Location     Type
  4417 ;;		None
  4418 ;; Return value:  Size  Location     Type
  4419 ;;		None               void
  4420 ;; Registers used:
  4421 ;;		wreg
  4422 ;; Tracked objects:
  4423 ;;		On entry : 0/0
  4424 ;;		On exit  : 0/0
  4425 ;;		Unchanged: 0/0
  4426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4427 ;;      Params:         0       0       0       0       0
  4428 ;;      Locals:         0       0       0       0       0
  4429 ;;      Temps:          0       0       0       0       0
  4430 ;;      Totals:         0       0       0       0       0
  4431 ;;Total ram usage:        0 bytes
  4432 ;; Hardware stack levels used:    1
  4433 ;; Hardware stack levels required when called:    3
  4434 ;; This function calls:
  4435 ;;		Nothing
  4436 ;; This function is called by:
  4437 ;;		_main
  4438 ;; This function uses a non-reentrant model
  4439 ;;
  4440                           
  4441                           
  4442                           ;psect for function _configRS232
  4443  0CBF                     _configRS232:	
  4444                           
  4445                           ;usart.c: 12: CSRC = 0;
  4446                           
  4447                           ;incstack = 0
  4448                           ; Regs used in _configRS232: [wreg]
  4449  0CBF  1683               	bsf	3,5	;RP0=1, select bank1
  4450  0CC0  1303               	bcf	3,6	;RP1=0, select bank1
  4451  0CC1  1398               	bcf	24,7	;volatile
  4452                           
  4453                           ;usart.c: 13: TX9 = 0;
  4454  0CC2  1318               	bcf	24,6	;volatile
  4455                           
  4456                           ;usart.c: 14: TXEN = 1;
  4457  0CC3  1698               	bsf	24,5	;volatile
  4458                           
  4459                           ;usart.c: 15: SYNC = 0;
  4460  0CC4  1218               	bcf	24,4	;volatile
  4461                           
  4462                           ;usart.c: 16: BRGH = 1;
  4463  0CC5  1518               	bsf	24,2	;volatile
  4464                           
  4465                           ;usart.c: 19: SPEN = 1;
  4466  0CC6  1283               	bcf	3,5	;RP0=0, select bank0
  4467  0CC7  1303               	bcf	3,6	;RP1=0, select bank0
  4468  0CC8  1798               	bsf	24,7	;volatile
  4469                           
  4470                           ;usart.c: 20: RX9 = 0;
  4471  0CC9  1318               	bcf	24,6	;volatile
  4472                           
  4473                           ;usart.c: 21: CREN = 1;
  4474  0CCA  1618               	bsf	24,4	;volatile
  4475                           
  4476                           ;usart.c: 27: SPBRG = 129;
  4477  0CCB  3081               	movlw	129
  4478  0CCC  1683               	bsf	3,5	;RP0=1, select bank1
  4479  0CCD  1303               	bcf	3,6	;RP1=0, select bank1
  4480  0CCE  0099               	movwf	25	;volatile
  4481  0CCF  0008               	return
  4482  0CD0                     __end_of_configRS232:	
  4483                           
  4484                           	psect	text23
  4485  0C3C                     __ptext23:	
  4486 ;; *************** function _configADInterrupt *****************
  4487 ;; Defined at:
  4488 ;;		line 11 in file "ad.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;		None
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;		None
  4493 ;; Return value:  Size  Location     Type
  4494 ;;		None               void
  4495 ;; Registers used:
  4496 ;;		None
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4502 ;;      Params:         0       0       0       0       0
  4503 ;;      Locals:         0       0       0       0       0
  4504 ;;      Temps:          0       0       0       0       0
  4505 ;;      Totals:         0       0       0       0       0
  4506 ;;Total ram usage:        0 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; Hardware stack levels required when called:    3
  4509 ;; This function calls:
  4510 ;;		Nothing
  4511 ;; This function is called by:
  4512 ;;		_main
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           
  4517                           ;psect for function _configADInterrupt
  4518  0C3C                     _configADInterrupt:	
  4519                           
  4520                           ;ad.c: 12: PIR1bits.ADIF = 0;
  4521                           
  4522                           ;incstack = 0
  4523                           ; Regs used in _configADInterrupt: []
  4524  0C3C  1283               	bcf	3,5	;RP0=0, select bank0
  4525  0C3D  1303               	bcf	3,6	;RP1=0, select bank0
  4526  0C3E  130C               	bcf	12,6	;volatile
  4527                           
  4528                           ;ad.c: 13: PIE1bits.ADIE = 1;
  4529  0C3F  1683               	bsf	3,5	;RP0=1, select bank1
  4530  0C40  1303               	bcf	3,6	;RP1=0, select bank1
  4531  0C41  170C               	bsf	12,6	;volatile
  4532                           
  4533                           ;ad.c: 15: INTCONbits.GIE = 1;
  4534  0C42  178B               	bsf	11,7	;volatile
  4535                           
  4536                           ;ad.c: 16: INTCONbits.PEIE = 1;
  4537  0C43  170B               	bsf	11,6	;volatile
  4538  0C44  0008               	return
  4539  0C45                     __end_of_configADInterrupt:	
  4540                           
  4541                           	psect	text24
  4542  0C9F                     __ptext24:	
  4543 ;; *************** function _configAD *****************
  4544 ;; Defined at:
  4545 ;;		line 19 in file "ad.c"
  4546 ;; Parameters:    Size  Location     Type
  4547 ;;		None
  4548 ;; Auto vars:     Size  Location     Type
  4549 ;;		None
  4550 ;; Return value:  Size  Location     Type
  4551 ;;		None               void
  4552 ;; Registers used:
  4553 ;;		None
  4554 ;; Tracked objects:
  4555 ;;		On entry : 0/0
  4556 ;;		On exit  : 0/0
  4557 ;;		Unchanged: 0/0
  4558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4559 ;;      Params:         0       0       0       0       0
  4560 ;;      Locals:         0       0       0       0       0
  4561 ;;      Temps:          0       0       0       0       0
  4562 ;;      Totals:         0       0       0       0       0
  4563 ;;Total ram usage:        0 bytes
  4564 ;; Hardware stack levels used:    1
  4565 ;; Hardware stack levels required when called:    3
  4566 ;; This function calls:
  4567 ;;		Nothing
  4568 ;; This function is called by:
  4569 ;;		_main
  4570 ;; This function uses a non-reentrant model
  4571 ;;
  4572                           
  4573                           
  4574                           ;psect for function _configAD
  4575  0C9F                     _configAD:	
  4576                           
  4577                           ;ad.c: 20: ADCON0bits.ADON = 1;
  4578                           
  4579                           ;incstack = 0
  4580                           ; Regs used in _configAD: []
  4581  0C9F  1283               	bcf	3,5	;RP0=0, select bank0
  4582  0CA0  1303               	bcf	3,6	;RP1=0, select bank0
  4583  0CA1  141F               	bsf	31,0	;volatile
  4584                           
  4585                           ;ad.c: 24: ADFM = 1;
  4586  0CA2  1683               	bsf	3,5	;RP0=1, select bank1
  4587  0CA3  1303               	bcf	3,6	;RP1=0, select bank1
  4588  0CA4  179F               	bsf	31,7	;volatile
  4589                           
  4590                           ;ad.c: 27: ADCON1bits.PCFG3 = 0;
  4591  0CA5  119F               	bcf	31,3	;volatile
  4592                           
  4593                           ;ad.c: 28: ADCON1bits.PCFG2 = 1;
  4594  0CA6  151F               	bsf	31,2	;volatile
  4595                           
  4596                           ;ad.c: 29: ADCON1bits.PCFG1 = 0;
  4597  0CA7  109F               	bcf	31,1	;volatile
  4598                           
  4599                           ;ad.c: 30: ADCON1bits.PCFG0 = 1;
  4600  0CA8  141F               	bsf	31,0	;volatile
  4601                           
  4602                           ;ad.c: 41: ADCS2 = 0;
  4603  0CA9  131F               	bcf	31,6	;volatile
  4604                           
  4605                           ;ad.c: 42: ADCS1 = 1;
  4606  0CAA  1283               	bcf	3,5	;RP0=0, select bank0
  4607  0CAB  1303               	bcf	3,6	;RP1=0, select bank0
  4608  0CAC  179F               	bsf	31,7	;volatile
  4609                           
  4610                           ;ad.c: 43: ADCS0 = 0;
  4611  0CAD  131F               	bcf	31,6	;volatile
  4612  0CAE  0008               	return
  4613  0CAF                     __end_of_configAD:	
  4614                           
  4615                           	psect	text25
  4616  0F3D                     __ptext25:	
  4617 ;; *************** function ___awmod *****************
  4618 ;; Defined at:
  4619 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;  divisor         2   40[BANK0 ] int 
  4622 ;;  dividend        2   42[BANK0 ] int 
  4623 ;; Auto vars:     Size  Location     Type
  4624 ;;  sign            1   46[BANK0 ] unsigned char 
  4625 ;;  counter         1   45[BANK0 ] unsigned char 
  4626 ;; Return value:  Size  Location     Type
  4627 ;;                  2   40[BANK0 ] int 
  4628 ;; Registers used:
  4629 ;;		wreg, status,2, status,0
  4630 ;; Tracked objects:
  4631 ;;		On entry : 0/0
  4632 ;;		On exit  : 0/0
  4633 ;;		Unchanged: 0/0
  4634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4635 ;;      Params:         0       4       0       0       0
  4636 ;;      Locals:         0       2       0       0       0
  4637 ;;      Temps:          0       1       0       0       0
  4638 ;;      Totals:         0       7       0       0       0
  4639 ;;Total ram usage:        7 bytes
  4640 ;; Hardware stack levels used:    1
  4641 ;; Hardware stack levels required when called:    3
  4642 ;; This function calls:
  4643 ;;		Nothing
  4644 ;; This function is called by:
  4645 ;;		_main
  4646 ;; This function uses a non-reentrant model
  4647 ;;
  4648                           
  4649                           
  4650                           ;psect for function ___awmod
  4651  0F3D                     ___awmod:	
  4652                           
  4653                           ;incstack = 0
  4654                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4655  0F3D  1283               	bcf	3,5	;RP0=0, select bank0
  4656  0F3E  1303               	bcf	3,6	;RP1=0, select bank0
  4657  0F3F  01CE               	clrf	___awmod@sign
  4658  0F40  1FCB               	btfss	___awmod@dividend+1,7
  4659  0F41  2F49               	goto	l2163
  4660  0F42  09CA               	comf	___awmod@dividend,f
  4661  0F43  09CB               	comf	___awmod@dividend+1,f
  4662  0F44  0ACA               	incf	___awmod@dividend,f
  4663  0F45  1903               	skipnz
  4664  0F46  0ACB               	incf	___awmod@dividend+1,f
  4665  0F47  01CE               	clrf	___awmod@sign
  4666  0F48  0ACE               	incf	___awmod@sign,f
  4667  0F49                     l2163:	
  4668  0F49  1FC9               	btfss	___awmod@divisor+1,7
  4669  0F4A  2F50               	goto	l2167
  4670  0F4B  09C8               	comf	___awmod@divisor,f
  4671  0F4C  09C9               	comf	___awmod@divisor+1,f
  4672  0F4D  0AC8               	incf	___awmod@divisor,f
  4673  0F4E  1903               	skipnz
  4674  0F4F  0AC9               	incf	___awmod@divisor+1,f
  4675  0F50                     l2167:	
  4676  0F50  0848               	movf	___awmod@divisor,w
  4677  0F51  0449               	iorwf	___awmod@divisor+1,w
  4678  0F52  1903               	btfsc	3,2
  4679  0F53  2F7D               	goto	l2185
  4680  0F54  01CD               	clrf	___awmod@counter
  4681  0F55  0ACD               	incf	___awmod@counter,f
  4682  0F56                     l2175:	
  4683  0F56  1BC9               	btfsc	___awmod@divisor+1,7
  4684  0F57  2F64               	goto	l2177
  4685  0F58  3001               	movlw	1
  4686  0F59                     u2235:	
  4687  0F59  1003               	clrc
  4688  0F5A  0DC8               	rlf	___awmod@divisor,f
  4689  0F5B  0DC9               	rlf	___awmod@divisor+1,f
  4690  0F5C  3EFF               	addlw	-1
  4691  0F5D  1D03               	skipz
  4692  0F5E  2F59               	goto	u2235
  4693  0F5F  3001               	movlw	1
  4694  0F60  00CC               	movwf	??___awmod
  4695  0F61  084C               	movf	??___awmod,w
  4696  0F62  07CD               	addwf	___awmod@counter,f
  4697  0F63  2F56               	goto	l2175
  4698  0F64                     l2177:	
  4699  0F64  0849               	movf	___awmod@divisor+1,w
  4700  0F65  024B               	subwf	___awmod@dividend+1,w
  4701  0F66  1D03               	skipz
  4702  0F67  2F6A               	goto	u2255
  4703  0F68  0848               	movf	___awmod@divisor,w
  4704  0F69  024A               	subwf	___awmod@dividend,w
  4705  0F6A                     u2255:	
  4706  0F6A  1C03               	skipc
  4707  0F6B  2F72               	goto	l2181
  4708  0F6C  0848               	movf	___awmod@divisor,w
  4709  0F6D  02CA               	subwf	___awmod@dividend,f
  4710  0F6E  0849               	movf	___awmod@divisor+1,w
  4711  0F6F  1C03               	skipc
  4712  0F70  03CB               	decf	___awmod@dividend+1,f
  4713  0F71  02CB               	subwf	___awmod@dividend+1,f
  4714  0F72                     l2181:	
  4715  0F72  3001               	movlw	1
  4716  0F73                     u2265:	
  4717  0F73  1003               	clrc
  4718  0F74  0CC9               	rrf	___awmod@divisor+1,f
  4719  0F75  0CC8               	rrf	___awmod@divisor,f
  4720  0F76  3EFF               	addlw	-1
  4721  0F77  1D03               	skipz
  4722  0F78  2F73               	goto	u2265
  4723  0F79  3001               	movlw	1
  4724  0F7A  02CD               	subwf	___awmod@counter,f
  4725  0F7B  1D03               	btfss	3,2
  4726  0F7C  2F64               	goto	l2177
  4727  0F7D                     l2185:	
  4728  0F7D  084E               	movf	___awmod@sign,w
  4729  0F7E  1903               	btfsc	3,2
  4730  0F7F  2F85               	goto	l2189
  4731  0F80  09CA               	comf	___awmod@dividend,f
  4732  0F81  09CB               	comf	___awmod@dividend+1,f
  4733  0F82  0ACA               	incf	___awmod@dividend,f
  4734  0F83  1903               	skipnz
  4735  0F84  0ACB               	incf	___awmod@dividend+1,f
  4736  0F85                     l2189:	
  4737  0F85  084B               	movf	___awmod@dividend+1,w
  4738  0F86  00C9               	movwf	?___awmod+1
  4739  0F87  084A               	movf	___awmod@dividend,w
  4740  0F88  00C8               	movwf	?___awmod
  4741  0F89  0008               	return
  4742  0F8A                     __end_of___awmod:	
  4743                           
  4744                           	psect	text26
  4745  0CD0                     __ptext26:	
  4746 ;; *************** function _InitI2C_Master *****************
  4747 ;; Defined at:
  4748 ;;		line 12 in file "i2c.c"
  4749 ;; Parameters:    Size  Location     Type
  4750 ;;		None
  4751 ;; Auto vars:     Size  Location     Type
  4752 ;;		None
  4753 ;; Return value:  Size  Location     Type
  4754 ;;		None               void
  4755 ;; Registers used:
  4756 ;;		wreg, status,2
  4757 ;; Tracked objects:
  4758 ;;		On entry : 0/0
  4759 ;;		On exit  : 0/0
  4760 ;;		Unchanged: 0/0
  4761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4762 ;;      Params:         0       0       0       0       0
  4763 ;;      Locals:         0       0       0       0       0
  4764 ;;      Temps:          0       0       0       0       0
  4765 ;;      Totals:         0       0       0       0       0
  4766 ;;Total ram usage:        0 bytes
  4767 ;; Hardware stack levels used:    1
  4768 ;; Hardware stack levels required when called:    3
  4769 ;; This function calls:
  4770 ;;		Nothing
  4771 ;; This function is called by:
  4772 ;;		_main
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           
  4777                           ;psect for function _InitI2C_Master
  4778  0CD0                     _InitI2C_Master:	
  4779                           
  4780                           ;i2c.c: 14: TRISC4 = 1;
  4781                           
  4782                           ;incstack = 0
  4783                           ; Regs used in _InitI2C_Master: [wreg+status,2]
  4784  0CD0  1683               	bsf	3,5	;RP0=1, select bank1
  4785  0CD1  1303               	bcf	3,6	;RP1=0, select bank1
  4786  0CD2  1607               	bsf	7,4	;volatile
  4787                           
  4788                           ;i2c.c: 15: TRISC3 = 1;
  4789  0CD3  1587               	bsf	7,3	;volatile
  4790                           
  4791                           ;i2c.c: 17: SSPADD = ( 20000000 / (4*100000) ) - 1;
  4792  0CD4  3031               	movlw	49
  4793  0CD5  0093               	movwf	19	;volatile
  4794                           
  4795                           ;i2c.c: 20: SSPIF = 0;
  4796  0CD6  1283               	bcf	3,5	;RP0=0, select bank0
  4797  0CD7  1303               	bcf	3,6	;RP1=0, select bank0
  4798  0CD8  118C               	bcf	12,3	;volatile
  4799                           
  4800                           ;i2c.c: 23: SSPSTAT = 0;
  4801  0CD9  1683               	bsf	3,5	;RP0=1, select bank1
  4802  0CDA  1303               	bcf	3,6	;RP1=0, select bank1
  4803  0CDB  0194               	clrf	20	;volatile
  4804                           
  4805                           ;i2c.c: 24: SSPSTATbits.SMP = 1;
  4806  0CDC  1794               	bsf	20,7	;volatile
  4807                           
  4808                           ;i2c.c: 25: SSPSTATbits.CKE = 0;
  4809  0CDD  1314               	bcf	20,6	;volatile
  4810                           
  4811                           ;i2c.c: 29: WCOL = 0;
  4812  0CDE  1283               	bcf	3,5	;RP0=0, select bank0
  4813  0CDF  1303               	bcf	3,6	;RP1=0, select bank0
  4814  0CE0  1394               	bcf	20,7	;volatile
  4815                           
  4816                           ;i2c.c: 30: SSPOV = 0;
  4817  0CE1  1314               	bcf	20,6	;volatile
  4818                           
  4819                           ;i2c.c: 31: SSPEN = 0;
  4820  0CE2  1294               	bcf	20,5	;volatile
  4821                           
  4822                           ;i2c.c: 32: CKP = 0;
  4823  0CE3  1214               	bcf	20,4	;volatile
  4824                           
  4825                           ;i2c.c: 34: SSPM3 = 1;
  4826  0CE4  1594               	bsf	20,3	;volatile
  4827                           
  4828                           ;i2c.c: 35: SSPM2 = 0;
  4829  0CE5  1114               	bcf	20,2	;volatile
  4830                           
  4831                           ;i2c.c: 36: SSPM1 = 0;
  4832  0CE6  1094               	bcf	20,1	;volatile
  4833                           
  4834                           ;i2c.c: 37: SSPM0 = 0;
  4835  0CE7  1014               	bcf	20,0	;volatile
  4836                           
  4837                           ;i2c.c: 39: SSPEN = 1;
  4838  0CE8  1694               	bsf	20,5	;volatile
  4839  0CE9  0008               	return
  4840  0CEA                     __end_of_InitI2C_Master:	
  4841                           
  4842                           	psect	text27
  4843  0715                     __ptext27:	
  4844 ;; *************** function _interruptions *****************
  4845 ;; Defined at:
  4846 ;;		line 47 in file "main.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;		None
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;		None
  4851 ;; Return value:  Size  Location     Type
  4852 ;;		None               void
  4853 ;; Registers used:
  4854 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4860 ;;      Params:         0       0       0       0       0
  4861 ;;      Locals:         0       0       0       0       0
  4862 ;;      Temps:          0       7       0       0       0
  4863 ;;      Totals:         0       7       0       0       0
  4864 ;;Total ram usage:        7 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; Hardware stack levels required when called:    2
  4867 ;; This function calls:
  4868 ;;		_strcpy
  4869 ;;		i1___awmod
  4870 ;;		i1_printf
  4871 ;; This function is called by:
  4872 ;;		Interrupt level 1
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           
  4877                           ;psect for function _interruptions
  4878  0715                     _interruptions:	
  4879                           
  4880                           ;main.c: 49: if (RCIF){
  4881  0715  1E8C               	btfss	12,5	;volatile
  4882  0716  2F6D               	goto	i1l2359
  4883                           
  4884                           ;main.c: 50: if (FERR || OERR)
  4885  0717  1918               	btfsc	24,2	;volatile
  4886  0718  2F1B               	goto	i1l242
  4887  0719  1C98               	btfss	24,1	;volatile
  4888  071A  2F1E               	goto	i1l2335
  4889  071B                     i1l242:	
  4890                           
  4891                           ;main.c: 51: {
  4892                           ;main.c: 52: CREN = 0;
  4893  071B  1218               	bcf	24,4	;volatile
  4894                           
  4895                           ;main.c: 53: hasAnError = 1;
  4896  071C  14DA               	bsf	_hasAnError/(0+8),_hasAnError& (0+7)
  4897                           
  4898                           ;main.c: 54: CREN = 1;
  4899  071D  1618               	bsf	24,4	;volatile
  4900  071E                     i1l2335:	
  4901                           
  4902                           ;main.c: 55: }
  4903                           ;main.c: 57: receivedData = RCREG;
  4904  071E  081A               	movf	26,w	;volatile
  4905  071F  00AD               	movwf	??_interruptions
  4906  0720  082D               	movf	??_interruptions,w
  4907  0721  00D9               	movwf	_receivedData
  4908                           
  4909                           ;main.c: 59: if(receivedData == '\r')
  4910  0722  300D               	movlw	13
  4911  0723  0659               	xorwf	_receivedData,w
  4912  0724  1D03               	btfss	3,2
  4913  0725  2F3F               	goto	i1l2347
  4914                           
  4915                           ;main.c: 60: {
  4916                           ;main.c: 61: string_aux[i] = '\0';
  4917  0726  085B               	movf	_i,w
  4918  0727  3EAC               	addlw	(low (_string_aux| 0))& (0+255)
  4919  0728  0084               	movwf	4
  4920  0729  1383               	bcf	3,7	;select IRP bank1
  4921  072A  0180               	clrf	0
  4922                           
  4923                           ;main.c: 62: strcpy(string,string_aux);
  4924  072B  30AC               	movlw	(low (_string_aux| 0))& (0+255)
  4925  072C  00AD               	movwf	??_interruptions
  4926  072D  082D               	movf	??_interruptions,w
  4927  072E  00F0               	movwf	strcpy@from
  4928  072F  3090               	movlw	(low (_string| (0+256)))& (0+255)
  4929  0730  120A  158A  24EA  120A  118A  	fcall	_strcpy
  4930                           
  4931                           ;main.c: 63: printf("\n\r");
  4932  0735  304A               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  4933  0736  120A  118A  2546  120A  118A  	fcall	i1_printf
  4934                           
  4935                           ;main.c: 64: i = 0;
  4936  073B  1283               	bcf	3,5	;RP0=0, select bank0
  4937  073C  1303               	bcf	3,6	;RP1=0, select bank0
  4938  073D  01DB               	clrf	_i
  4939                           
  4940                           ;main.c: 65: }else
  4941  073E  2F6D               	goto	i1l2359
  4942  073F                     i1l2347:	
  4943                           
  4944                           ;main.c: 66: {
  4945                           ;main.c: 67: if(i < 25)
  4946  073F  3019               	movlw	25
  4947  0740  025B               	subwf	_i,w
  4948  0741  1803               	skipnc
  4949  0742  2F65               	goto	i1l2355
  4950                           
  4951                           ;main.c: 68: {
  4952                           ;main.c: 69: i = i%25;
  4953  0743  3019               	movlw	25
  4954  0744  00F0               	movwf	i1___awmod@divisor
  4955  0745  3000               	movlw	0
  4956  0746  00F1               	movwf	i1___awmod@divisor+1
  4957  0747  085B               	movf	_i,w
  4958  0748  00AD               	movwf	??_interruptions
  4959  0749  01AE               	clrf	??_interruptions+1
  4960  074A  082D               	movf	??_interruptions,w
  4961  074B  00F2               	movwf	i1___awmod@dividend
  4962  074C  082E               	movf	??_interruptions+1,w
  4963  074D  00F3               	movwf	i1___awmod@dividend+1
  4964  074E  120A  158A  26F2  120A  118A  	fcall	i1___awmod
  4965  0753  0870               	movf	?i1___awmod,w
  4966  0754  1283               	bcf	3,5	;RP0=0, select bank0
  4967  0755  1303               	bcf	3,6	;RP1=0, select bank0
  4968  0756  00AF               	movwf	??_interruptions+2
  4969  0757  082F               	movf	??_interruptions+2,w
  4970  0758  00DB               	movwf	_i
  4971                           
  4972                           ;main.c: 70: string_aux[i] = receivedData;
  4973  0759  0859               	movf	_receivedData,w
  4974  075A  00AD               	movwf	??_interruptions
  4975  075B  085B               	movf	_i,w
  4976  075C  3EAC               	addlw	(low (_string_aux| 0))& (0+255)
  4977  075D  0084               	movwf	4
  4978  075E  082D               	movf	??_interruptions,w
  4979  075F  1383               	bcf	3,7	;select IRP bank1
  4980  0760  0080               	movwf	0
  4981                           
  4982                           ;main.c: 71: i++;
  4983  0761  3001               	movlw	1
  4984  0762  00AD               	movwf	??_interruptions
  4985  0763  082D               	movf	??_interruptions,w
  4986  0764  07DB               	addwf	_i,f
  4987  0765                     i1l2355:	
  4988                           
  4989                           ;main.c: 72: }
  4990                           ;main.c: 73: if(i == 25)
  4991  0765  3019               	movlw	25
  4992  0766  065B               	xorwf	_i,w
  4993  0767  1D03               	btfss	3,2
  4994  0768  2F6D               	goto	i1l2359
  4995                           
  4996                           ;main.c: 74: i++;
  4997  0769  3001               	movlw	1
  4998  076A  00AD               	movwf	??_interruptions
  4999  076B  082D               	movf	??_interruptions,w
  5000  076C  07DB               	addwf	_i,f
  5001  076D                     i1l2359:	
  5002                           
  5003                           ;main.c: 75: }
  5004                           ;main.c: 76: }
  5005                           ;main.c: 78: if(PIR1bits.ADIF){
  5006  076D  1F0C               	btfss	12,6	;volatile
  5007  076E  2F78               	goto	i1l2365
  5008                           
  5009                           ;main.c: 79: data_ADC = ((ADRESH<<8) + ADRESL);
  5010  076F  081E               	movf	30,w	;volatile
  5011  0770  1683               	bsf	3,5	;RP0=1, select bank1
  5012  0771  1303               	bcf	3,6	;RP1=0, select bank1
  5013  0772  00A1               	movwf	(_data_ADC+1)^(0+128)
  5014  0773  081E               	movf	30,w	;volatile
  5015  0774  00A0               	movwf	_data_ADC^(0+128)
  5016                           
  5017                           ;main.c: 81: PIR1bits.ADIF = 0;
  5018  0775  1283               	bcf	3,5	;RP0=0, select bank0
  5019  0776  1303               	bcf	3,6	;RP1=0, select bank0
  5020  0777  130C               	bcf	12,6	;volatile
  5021  0778                     i1l2365:	
  5022                           
  5023                           ;main.c: 82: }
  5024                           ;main.c: 84: if(INTCONbits.TMR0IF){
  5025  0778  1D0B               	btfss	11,2	;volatile
  5026  0779  2F85               	goto	i1l249
  5027                           
  5028                           ;main.c: 85: contLedRD4++;
  5029  077A  3001               	movlw	1
  5030  077B  00AD               	movwf	??_interruptions
  5031  077C  082D               	movf	??_interruptions,w
  5032  077D  1683               	bsf	3,5	;RP0=1, select bank1
  5033  077E  1303               	bcf	3,6	;RP1=0, select bank1
  5034  077F  07A3               	addwf	_contLedRD4^(0+128),f
  5035                           
  5036                           ;main.c: 86: changing = ~changing;
  5037  0780  3001               	movlw	(0+1) shl (_changing& (0+7))
  5038  0781  1283               	bcf	3,5	;RP0=0, select bank0
  5039  0782  1303               	bcf	3,6	;RP1=0, select bank0
  5040  0783  06DA               	xorwf	_changing/(0+8),f
  5041                           
  5042                           ;main.c: 87: INTCONbits.TMR0IF = 0;
  5043  0784  110B               	bcf	11,2	;volatile
  5044  0785                     i1l249:	
  5045  0785  0833               	movf	??_interruptions+6,w
  5046  0786  00FF               	movwf	127
  5047  0787  0832               	movf	??_interruptions+5,w
  5048  0788  008A               	movwf	10
  5049  0789  0831               	movf	??_interruptions+4,w
  5050  078A  0084               	movwf	4
  5051  078B  0E30               	swapf	(??_interruptions+3)^0,w
  5052  078C  0083               	movwf	3
  5053  078D  0EFE               	swapf	126,f
  5054  078E  0E7E               	swapf	126,w
  5055  078F  0009               	retfie
  5056  0790                     __end_of_interruptions:	
  5057                           
  5058                           	psect	intentry
  5059  0004                     __pintentry:	
  5060                           ;incstack = 0
  5061                           ; Regs used in _interruptions: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5062                           
  5063  0004                     interrupt_function:	
  5064  007E                     saved_w	set	btemp
  5065  0004  00FE               	movwf	btemp
  5066  0005  0E03               	swapf	3,w
  5067  0006  1283               	bcf	3,5	;RP0=0, select bank0
  5068  0007  1303               	bcf	3,6	;RP1=0, select bank0
  5069  0008  00B0               	movwf	??_interruptions+3
  5070  0009  0804               	movf	4,w
  5071  000A  00B1               	movwf	??_interruptions+4
  5072  000B  080A               	movf	10,w
  5073  000C  00B2               	movwf	??_interruptions+5
  5074  000D  087F               	movf	btemp+1,w
  5075  000E  00B3               	movwf	??_interruptions+6
  5076  000F  120A  118A  2F15   	ljmp	_interruptions
  5077                           
  5078                           	psect	text28
  5079  0546                     __ptext28:	
  5080 ;; *************** function i1_printf *****************
  5081 ;; Defined at:
  5082 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  5083 ;; Parameters:    Size  Location     Type
  5084 ;;  f               1    wreg     PTR const unsigned char 
  5085 ;;		 -> STR_3(2), STR_2(38), STR_1(3), 
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;  f               1    4[BANK0 ] PTR const unsigned char 
  5088 ;;		 -> STR_3(2), STR_2(38), STR_1(3), 
  5089 ;;  printf          4    0        struct .
  5090 ;;  printf          2   10[BANK0 ] int 
  5091 ;;  printf          2    8[BANK0 ] unsigned int 
  5092 ;;  printf          2    0        PTR const unsigned char 
  5093 ;;  printf          2    0        unsigned int 
  5094 ;;  printf          1   12[BANK0 ] char 
  5095 ;;  printf          1    7[BANK0 ] unsigned char 
  5096 ;;  printf          1    6[BANK0 ] char 
  5097 ;;  printf          1    5[BANK0 ] PTR void [1]
  5098 ;;		 -> ?i1_printf(2), ?_printf(2), 
  5099 ;;  printf          1    3[BANK0 ] unsigned char 
  5100 ;; Return value:  Size  Location     Type
  5101 ;;                  2    0[None  ] int 
  5102 ;; Registers used:
  5103 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5104 ;; Tracked objects:
  5105 ;;		On entry : 0/0
  5106 ;;		On exit  : 0/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5109 ;;      Params:         0       0       0       0       0
  5110 ;;      Locals:         0      10       0       0       0
  5111 ;;      Temps:          0       3       0       0       0
  5112 ;;      Totals:         0      13       0       0       0
  5113 ;;Total ram usage:       13 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; Hardware stack levels required when called:    1
  5116 ;; This function calls:
  5117 ;;		i1___lwdiv
  5118 ;;		i1___lwmod
  5119 ;;		i1___wmul
  5120 ;;		i1_isdigit
  5121 ;;		i1_putch
  5122 ;; This function is called by:
  5123 ;;		_interruptions
  5124 ;; This function uses a non-reentrant model
  5125 ;;
  5126                           
  5127                           
  5128                           ;psect for function i1_printf
  5129  0546                     i1_printf:	
  5130                           
  5131                           ;incstack = 0
  5132                           ; Regs used in i1_printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5133                           ;i1printf@f stored from wreg
  5134  0546  1283               	bcf	3,5	;RP0=0, select bank0
  5135  0547  1303               	bcf	3,6	;RP1=0, select bank0
  5136  0548  00A4               	movwf	i1printf@f
  5137                           
  5138                           ;doprnt.c: 466: va_list ap;
  5139                           ;doprnt.c: 499: signed char c;
  5140                           ;doprnt.c: 501: int width;
  5141                           ;doprnt.c: 506: signed char prec;
  5142                           ;doprnt.c: 508: unsigned char flag;
  5143                           ;doprnt.c: 523: union {
  5144                           ;doprnt.c: 524: unsigned long vd;
  5145                           ;doprnt.c: 525: double integ;
  5146                           ;doprnt.c: 526: } tmpval;
  5147                           ;doprnt.c: 528: unsigned int val;
  5148                           ;doprnt.c: 529: unsigned len;
  5149                           ;doprnt.c: 530: const char * cp;
  5150                           ;doprnt.c: 533: *ap = __va_start();
  5151  0549  3070               	movlw	(low (?i1_printf| 0))& (0+255)
  5152  054A  00A0               	movwf	??i1_printf
  5153  054B  0820               	movf	??i1_printf,w
  5154  054C  00A5               	movwf	i1printf@ap
  5155  054D                     i1l2289:	
  5156                           ;doprnt.c: 536: while(c = *f++) {
  5157                           
  5158  054D  3001               	movlw	1
  5159  054E  1283               	bcf	3,5	;RP0=0, select bank0
  5160  054F  1303               	bcf	3,6	;RP1=0, select bank0
  5161  0550  07A4               	addwf	i1printf@f,f
  5162  0551  30FF               	movlw	-1
  5163  0552  0724               	addwf	i1printf@f,w
  5164  0553  0084               	movwf	4
  5165  0554  120A  158A  2000  120A  118A  	fcall	stringdir
  5166  0559  00A0               	movwf	??i1_printf
  5167  055A  0820               	movf	??i1_printf,w
  5168  055B  00AC               	movwf	i1printf@c
  5169  055C  082C               	movf	i1printf@c,w
  5170  055D  1903               	btfsc	3,2
  5171  055E  0008               	return
  5172                           
  5173                           ;doprnt.c: 538: if(c != '%')
  5174  055F  3025               	movlw	37
  5175  0560  062C               	xorwf	i1printf@c,w
  5176  0561  1903               	btfsc	3,2
  5177  0562  2D6A               	goto	i1l2199
  5178                           
  5179                           ;doprnt.c: 540: {
  5180                           ;doprnt.c: 541: (putch(c) );
  5181  0563  082C               	movf	i1printf@c,w
  5182  0564  120A  158A  240C  120A  118A  	fcall	i1_putch
  5183                           
  5184                           ;doprnt.c: 542: continue;
  5185  0569  2D4D               	goto	i1l2289
  5186  056A                     i1l2199:	
  5187                           
  5188                           ;doprnt.c: 543: }
  5189                           ;doprnt.c: 546: width = 0;
  5190  056A  1283               	bcf	3,5	;RP0=0, select bank0
  5191  056B  1303               	bcf	3,6	;RP1=0, select bank0
  5192  056C  01AA               	clrf	i1printf@width
  5193  056D  01AB               	clrf	i1printf@width+1
  5194                           
  5195                           ;doprnt.c: 548: flag = 0;
  5196  056E  01A7               	clrf	i1printf@flag
  5197                           
  5198                           ;doprnt.c: 551: switch(*f) {
  5199                           
  5200                           ;doprnt.c: 550: for(;;) {
  5201  056F  2D75               	goto	i1l2205
  5202  0570                     i1l355:	
  5203                           ;doprnt.c: 579: case '0':
  5204                           
  5205                           
  5206                           ;doprnt.c: 580: flag |= 0x04;
  5207  0570  1527               	bsf	i1printf@flag,2
  5208                           
  5209                           ;doprnt.c: 581: f++;
  5210  0571  3001               	movlw	1
  5211  0572  00A0               	movwf	??i1_printf
  5212  0573  0820               	movf	??i1_printf,w
  5213  0574  07A4               	addwf	i1printf@f,f
  5214  0575                     i1l2205:	
  5215                           ;doprnt.c: 584: }
  5216                           
  5217                           ;doprnt.c: 582: continue;
  5218                           
  5219  0575  0824               	movf	i1printf@f,w
  5220  0576  0084               	movwf	4
  5221  0577  120A  158A  2000  120A  118A  	fcall	stringdir
  5222                           
  5223                           ; Switch size 1, requested type "space"
  5224                           ; Number of cases is 1, Range of values is 48 to 48
  5225                           ; switch strategies available:
  5226                           ; Name         Instructions Cycles
  5227                           ; simple_byte            4     3 (average)
  5228                           ; direct_byte           14    11 (fixed)
  5229                           ; jumptable            263     9 (fixed)
  5230                           ;	Chosen strategy is simple_byte
  5231  057C  3A30               	xorlw	48	; case 48
  5232  057D  1903               	skipnz
  5233  057E  2D70               	goto	i1l355
  5234  057F  2D80               	goto	i1l2207
  5235  0580                     i1l2207:	
  5236                           ;doprnt.c: 586: }
  5237                           
  5238                           ;doprnt.c: 585: break;
  5239                           
  5240                           
  5241                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5242  0580  0824               	movf	i1printf@f,w
  5243  0581  0084               	movwf	4
  5244  0582  120A  158A  2000  120A  118A  	fcall	stringdir
  5245  0587  120A  158A  2482  120A  118A  	fcall	i1_isdigit
  5246  058C  1C03               	btfss	3,0
  5247  058D  2DD6               	goto	i1l2223
  5248                           
  5249                           ;doprnt.c: 598: width = 0;
  5250  058E  1283               	bcf	3,5	;RP0=0, select bank0
  5251  058F  1303               	bcf	3,6	;RP1=0, select bank0
  5252  0590  01AA               	clrf	i1printf@width
  5253  0591  01AB               	clrf	i1printf@width+1
  5254  0592                     i1l2211:	
  5255                           ;doprnt.c: 599: do {
  5256                           
  5257                           
  5258                           ;doprnt.c: 600: width *= 10;
  5259  0592  300A               	movlw	10
  5260  0593  00F0               	movwf	i1___wmul@multiplier
  5261  0594  3000               	movlw	0
  5262  0595  00F1               	movwf	i1___wmul@multiplier+1
  5263  0596  1283               	bcf	3,5	;RP0=0, select bank0
  5264  0597  1303               	bcf	3,6	;RP1=0, select bank0
  5265  0598  082B               	movf	i1printf@width+1,w
  5266  0599  00F3               	movwf	i1___wmul@multiplicand+1
  5267  059A  082A               	movf	i1printf@width,w
  5268  059B  00F2               	movwf	i1___wmul@multiplicand
  5269  059C  120A  158A  2505  120A  118A  	fcall	i1___wmul
  5270  05A1  0871               	movf	?i1___wmul+1,w
  5271  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  5272  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  5273  05A4  00AB               	movwf	i1printf@width+1
  5274  05A5  0870               	movf	?i1___wmul,w
  5275  05A6  00AA               	movwf	i1printf@width
  5276                           
  5277                           ;doprnt.c: 601: width += *f++ - '0';
  5278  05A7  0824               	movf	i1printf@f,w
  5279  05A8  0084               	movwf	4
  5280  05A9  120A  158A  2000  120A  118A  	fcall	stringdir
  5281  05AE  3ED0               	addlw	208
  5282  05AF  00A0               	movwf	??i1_printf
  5283  05B0  30FF               	movlw	255
  5284  05B1  1803               	skipnc
  5285  05B2  3000               	movlw	0
  5286  05B3  00A1               	movwf	??i1_printf+1
  5287  05B4  0820               	movf	??i1_printf,w
  5288  05B5  07AA               	addwf	i1printf@width,f
  5289  05B6  1803               	skipnc
  5290  05B7  0AAB               	incf	i1printf@width+1,f
  5291  05B8  0821               	movf	??i1_printf+1,w
  5292  05B9  07AB               	addwf	i1printf@width+1,f
  5293  05BA  3001               	movlw	1
  5294  05BB  00A0               	movwf	??i1_printf
  5295  05BC  0820               	movf	??i1_printf,w
  5296  05BD  07A4               	addwf	i1printf@f,f
  5297                           
  5298                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5299  05BE  0824               	movf	i1printf@f,w
  5300  05BF  0084               	movwf	4
  5301  05C0  120A  158A  2000  120A  118A  	fcall	stringdir
  5302  05C5  120A  158A  2482  120A  118A  	fcall	i1_isdigit
  5303  05CA  1C03               	btfss	3,0
  5304  05CB  2DD6               	goto	i1l2223
  5305  05CC  2D92               	goto	i1l2211
  5306  05CD                     i1l366:	
  5307                           ;doprnt.c: 712: case 'X':
  5308                           
  5309                           ;doprnt.c: 638: goto alldone;
  5310                           
  5311                           ;doprnt.c: 637: case 0:
  5312                           
  5313                           ;doprnt.c: 608: }
  5314                           ;doprnt.c: 635: switch(c = *f++) {
  5315                           
  5316                           
  5317                           ;doprnt.c: 718: case 'x':
  5318                           ;doprnt.c: 721: flag |= 0x80;
  5319  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  5320  05CE  1303               	bcf	3,6	;RP1=0, select bank0
  5321  05CF  17A7               	bsf	i1printf@flag,7
  5322                           
  5323                           ;doprnt.c: 723: break;
  5324  05D0  2DF0               	goto	i1l2225
  5325  05D1                     i1l2219:	
  5326                           ;doprnt.c: 817: case 'u':
  5327                           
  5328                           ;doprnt.c: 813: continue;
  5329                           
  5330                           ;doprnt.c: 802: default:
  5331                           
  5332                           
  5333                           ;doprnt.c: 818: flag |= 0xC0;
  5334  05D1  30C0               	movlw	192
  5335  05D2  00A0               	movwf	??i1_printf
  5336  05D3  0820               	movf	??i1_printf,w
  5337  05D4  04A7               	iorwf	i1printf@flag,f
  5338                           
  5339                           ;doprnt.c: 822: }
  5340                           
  5341                           ;doprnt.c: 819: break;
  5342  05D5  2DF0               	goto	i1l2225
  5343  05D6                     i1l2223:	
  5344  05D6  3001               	movlw	1
  5345  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  5346  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  5347  05D9  07A4               	addwf	i1printf@f,f
  5348  05DA  30FF               	movlw	-1
  5349  05DB  0724               	addwf	i1printf@f,w
  5350  05DC  0084               	movwf	4
  5351  05DD  120A  158A  2000  120A  118A  	fcall	stringdir
  5352  05E2  00AC               	movwf	i1printf@c
  5353                           
  5354                           ; Switch size 1, requested type "space"
  5355                           ; Number of cases is 4, Range of values is 0 to 120
  5356                           ; switch strategies available:
  5357                           ; Name         Instructions Cycles
  5358                           ; simple_byte           13     7 (average)
  5359                           ; jumptable            260     6 (fixed)
  5360                           ;	Chosen strategy is simple_byte
  5361  05E3  3A00               	xorlw	0	; case 0
  5362  05E4  1903               	skipnz
  5363  05E5  2F14               	goto	i1l398
  5364  05E6  3A58               	xorlw	88	; case 88
  5365  05E7  1903               	skipnz
  5366  05E8  2DCD               	goto	i1l366
  5367  05E9  3A2D               	xorlw	45	; case 117
  5368  05EA  1903               	skipnz
  5369  05EB  2DD1               	goto	i1l2219
  5370  05EC  3A0D               	xorlw	13	; case 120
  5371  05ED  1903               	skipnz
  5372  05EE  2DCD               	goto	i1l366
  5373  05EF  2D4D               	goto	i1l2289
  5374  05F0                     i1l2225:	
  5375                           
  5376                           ;doprnt.c: 1273: {
  5377                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5378  05F0  0825               	movf	i1printf@ap,w
  5379  05F1  0084               	movwf	4
  5380  05F2  1383               	bcf	3,7	;select IRP bank0
  5381  05F3  0800               	movf	0,w
  5382  05F4  00A8               	movwf	i1printf@val
  5383  05F5  0A84               	incf	4,f
  5384  05F6  0800               	movf	0,w
  5385  05F7  00A9               	movwf	i1printf@val+1
  5386  05F8  3002               	movlw	2
  5387  05F9  00A0               	movwf	??i1_printf
  5388  05FA  0820               	movf	??i1_printf,w
  5389  05FB  07A5               	addwf	i1printf@ap,f
  5390                           
  5391                           ;doprnt.c: 1287: }
  5392                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  5393  05FC  2E45               	goto	i1l2251
  5394  05FD                     i1l371:	
  5395                           ;doprnt.c: 1302: case 0xC0:
  5396                           
  5397                           
  5398                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5399  05FD  01AC               	clrf	i1printf@c
  5400  05FE  0AAC               	incf	i1printf@c,f
  5401  05FF                     L8:	
  5402  05FF  3005               	movlw	5
  5403  0600  062C               	xorwf	i1printf@c,w
  5404  0601  1903               	btfsc	3,2
  5405  0602  2E4E               	goto	i1l2253
  5406                           
  5407                           ;doprnt.c: 1306: if(val < dpowers[c])
  5408  0603  082C               	movf	i1printf@c,w
  5409  0604  00A0               	movwf	??i1_printf
  5410  0605  0720               	addwf	??i1_printf,w
  5411  0606  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5412  0607  0084               	movwf	4
  5413  0608  120A  158A  2000  120A  118A  	fcall	stringdir
  5414  060D  00A1               	movwf	??i1_printf+1
  5415  060E  120A  158A  2000  120A  118A  	fcall	stringdir
  5416  0613  00A2               	movwf	??i1_printf+2
  5417  0614  0822               	movf	??i1_printf+2,w
  5418  0615  0229               	subwf	i1printf@val+1,w
  5419  0616  1D03               	skipz
  5420  0617  2E1A               	goto	u233_25
  5421  0618  0821               	movf	??i1_printf+1,w
  5422  0619  0228               	subwf	i1printf@val,w
  5423  061A                     u233_25:	
  5424  061A  1C03               	btfss	3,0
  5425  061B  2E4E               	goto	i1l2253
  5426                           
  5427                           ;doprnt.c: 1307: break;
  5428  061C  3001               	movlw	1
  5429  061D  00A0               	movwf	??i1_printf
  5430  061E  0820               	movf	??i1_printf,w
  5431  061F  07AC               	addwf	i1printf@c,f
  5432  0620  2DFF               	goto	L8
  5433  0621                     i1l376:	
  5434                           ;doprnt.c: 1314: case 0x80:
  5435                           
  5436                           ;doprnt.c: 1309: break;
  5437                           
  5438                           
  5439                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5440  0621  01AC               	clrf	i1printf@c
  5441  0622  0AAC               	incf	i1printf@c,f
  5442  0623                     L9:	
  5443  0623  3004               	movlw	4
  5444  0624  062C               	xorwf	i1printf@c,w
  5445  0625  1903               	btfsc	3,2
  5446  0626  2E4E               	goto	i1l2253
  5447                           
  5448                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5449  0627  082C               	movf	i1printf@c,w
  5450  0628  00A0               	movwf	??i1_printf
  5451  0629  0720               	addwf	??i1_printf,w
  5452  062A  3E0B               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  5453  062B  0084               	movwf	4
  5454  062C  120A  158A  2000  120A  118A  	fcall	stringdir
  5455  0631  00A1               	movwf	??i1_printf+1
  5456  0632  120A  158A  2000  120A  118A  	fcall	stringdir
  5457  0637  00A2               	movwf	??i1_printf+2
  5458  0638  0822               	movf	??i1_printf+2,w
  5459  0639  0229               	subwf	i1printf@val+1,w
  5460  063A  1D03               	skipz
  5461  063B  2E3E               	goto	u236_25
  5462  063C  0821               	movf	??i1_printf+1,w
  5463  063D  0228               	subwf	i1printf@val,w
  5464  063E                     u236_25:	
  5465  063E  1C03               	btfss	3,0
  5466  063F  2E4E               	goto	i1l2253
  5467                           
  5468                           ;doprnt.c: 1318: break;
  5469  0640  3001               	movlw	1
  5470  0641  00A0               	movwf	??i1_printf
  5471  0642  0820               	movf	??i1_printf,w
  5472  0643  07AC               	addwf	i1printf@c,f
  5473  0644  2E23               	goto	L9
  5474  0645                     i1l2251:	
  5475                           ;doprnt.c: 1336: }
  5476                           
  5477                           ;doprnt.c: 1320: break;
  5478                           
  5479  0645  0827               	movf	i1printf@flag,w
  5480  0646  39C0               	andlw	192
  5481                           
  5482                           ; Switch size 1, requested type "space"
  5483                           ; Number of cases is 2, Range of values is 128 to 192
  5484                           ; switch strategies available:
  5485                           ; Name         Instructions Cycles
  5486                           ; simple_byte            7     4 (average)
  5487                           ; direct_byte          206    11 (fixed)
  5488                           ; jumptable            263     9 (fixed)
  5489                           ;	Chosen strategy is simple_byte
  5490  0647  3A80               	xorlw	128	; case 128
  5491  0648  1903               	skipnz
  5492  0649  2E21               	goto	i1l376
  5493  064A  3A40               	xorlw	64	; case 192
  5494  064B  1903               	skipnz
  5495  064C  2DFD               	goto	i1l371
  5496  064D  2E4E               	goto	i1l2253
  5497  064E                     i1l2253:	
  5498                           
  5499                           ;doprnt.c: 1381: if(width > c)
  5500  064E  082C               	movf	i1printf@c,w
  5501  064F  00A0               	movwf	??i1_printf
  5502  0650  01A1               	clrf	??i1_printf+1
  5503  0651  1BA0               	btfsc	??i1_printf,7
  5504  0652  03A1               	decf	??i1_printf+1,f
  5505  0653  0821               	movf	??i1_printf+1,w
  5506  0654  3A80               	xorlw	128
  5507  0655  00A2               	movwf	??i1_printf+2
  5508  0656  082B               	movf	i1printf@width+1,w
  5509  0657  3A80               	xorlw	128
  5510  0658  0222               	subwf	??i1_printf+2,w
  5511  0659  1D03               	skipz
  5512  065A  2E5D               	goto	u238_25
  5513  065B  082A               	movf	i1printf@width,w
  5514  065C  0220               	subwf	??i1_printf,w
  5515  065D                     u238_25:	
  5516  065D  1803               	skipnc
  5517  065E  2E6D               	goto	i1l2257
  5518                           
  5519                           ;doprnt.c: 1382: width -= c;
  5520  065F  1283               	bcf	3,5	;RP0=0, select bank0
  5521  0660  1303               	bcf	3,6	;RP1=0, select bank0
  5522  0661  082C               	movf	i1printf@c,w
  5523  0662  00A0               	movwf	??i1_printf
  5524  0663  01A1               	clrf	??i1_printf+1
  5525  0664  1BA0               	btfsc	??i1_printf,7
  5526  0665  03A1               	decf	??i1_printf+1,f
  5527  0666  0820               	movf	??i1_printf,w
  5528  0667  02AA               	subwf	i1printf@width,f
  5529  0668  0821               	movf	??i1_printf+1,w
  5530  0669  1C03               	skipc
  5531  066A  03AB               	decf	i1printf@width+1,f
  5532  066B  02AB               	subwf	i1printf@width+1,f
  5533  066C  2E71               	goto	i1l2259
  5534  066D                     i1l2257:	
  5535                           
  5536                           ;doprnt.c: 1383: else
  5537                           ;doprnt.c: 1384: width = 0;
  5538  066D  1283               	bcf	3,5	;RP0=0, select bank0
  5539  066E  1303               	bcf	3,6	;RP1=0, select bank0
  5540  066F  01AA               	clrf	i1printf@width
  5541  0670  01AB               	clrf	i1printf@width+1
  5542  0671                     i1l2259:	
  5543                           
  5544                           ;doprnt.c: 1387: if(flag & 0x04) {
  5545  0671  1D27               	btfss	i1printf@flag,2
  5546  0672  2E86               	goto	i1l2267
  5547  0673                     L10:	
  5548                           
  5549                           ;doprnt.c: 1415: if(width)
  5550  0673  082A               	movf	i1printf@width,w
  5551  0674  042B               	iorwf	i1printf@width+1,w
  5552  0675  1903               	btfsc	3,2
  5553  0676  2E9C               	goto	i1l2273
  5554                           
  5555                           ;doprnt.c: 1417: (putch('0') );
  5556                           
  5557                           ;doprnt.c: 1416: do
  5558  0677  3030               	movlw	48
  5559  0678  120A  158A  240C  120A  118A  	fcall	i1_putch
  5560                           
  5561                           ;doprnt.c: 1418: while(--width);
  5562  067D  30FF               	movlw	255
  5563  067E  1283               	bcf	3,5	;RP0=0, select bank0
  5564  067F  1303               	bcf	3,6	;RP1=0, select bank0
  5565  0680  07AA               	addwf	i1printf@width,f
  5566  0681  1803               	skipnc
  5567  0682  0AAB               	incf	i1printf@width+1,f
  5568  0683  30FF               	movlw	255
  5569  0684  07AB               	addwf	i1printf@width+1,f
  5570  0685  2E73               	goto	L10
  5571  0686                     i1l2267:	
  5572                           ;doprnt.c: 1420: } else
  5573                           
  5574                           
  5575                           ;doprnt.c: 1422: {
  5576                           ;doprnt.c: 1424: if(width
  5577                           ;doprnt.c: 1428: )
  5578  0686  082A               	movf	i1printf@width,w
  5579  0687  042B               	iorwf	i1printf@width+1,w
  5580  0688  1903               	btfsc	3,2
  5581  0689  2E9C               	goto	i1l2273
  5582  068A                     i1l2269:	
  5583                           ;doprnt.c: 1429: do
  5584                           
  5585                           
  5586                           ;doprnt.c: 1430: (putch(' ') );
  5587  068A  3020               	movlw	32
  5588  068B  120A  158A  240C  120A  118A  	fcall	i1_putch
  5589                           
  5590                           ;doprnt.c: 1431: while(--width);
  5591  0690  30FF               	movlw	255
  5592  0691  1283               	bcf	3,5	;RP0=0, select bank0
  5593  0692  1303               	bcf	3,6	;RP1=0, select bank0
  5594  0693  07AA               	addwf	i1printf@width,f
  5595  0694  1803               	skipnc
  5596  0695  0AAB               	incf	i1printf@width+1,f
  5597  0696  30FF               	movlw	255
  5598  0697  07AB               	addwf	i1printf@width+1,f
  5599  0698  082A               	movf	i1printf@width,w
  5600  0699  042B               	iorwf	i1printf@width+1,w
  5601  069A  1D03               	btfss	3,2
  5602  069B  2E8A               	goto	i1l2269
  5603  069C                     i1l2273:	
  5604                           
  5605                           ;doprnt.c: 1469: }
  5606                           ;doprnt.c: 1472: prec = c;
  5607  069C  082C               	movf	i1printf@c,w
  5608  069D  00A0               	movwf	??i1_printf
  5609  069E  0820               	movf	??i1_printf,w
  5610  069F  00A6               	movwf	i1printf@prec
  5611                           
  5612                           ;doprnt.c: 1474: while(prec--) {
  5613  06A0  2F01               	goto	i1l2287
  5614  06A1                     i1l2275:	
  5615                           ;doprnt.c: 1478: {
  5616                           ;doprnt.c: 1486: case 0xC0:
  5617                           
  5618                           ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
  5619                           
  5620                           
  5621                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5622  06A1  300A               	movlw	10
  5623  06A2  00F8               	movwf	i1___lwmod@divisor
  5624  06A3  3000               	movlw	0
  5625  06A4  00F9               	movwf	i1___lwmod@divisor+1
  5626  06A5  0826               	movf	i1printf@prec,w
  5627  06A6  00A0               	movwf	??i1_printf
  5628  06A7  0720               	addwf	??i1_printf,w
  5629  06A8  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5630  06A9  0084               	movwf	4
  5631  06AA  120A  158A  2000  120A  118A  	fcall	stringdir
  5632  06AF  00F0               	movwf	i1___lwdiv@divisor
  5633  06B0  120A  158A  2000  120A  118A  	fcall	stringdir
  5634  06B5  00F1               	movwf	i1___lwdiv@divisor+1
  5635  06B6  0829               	movf	i1printf@val+1,w
  5636  06B7  00F3               	movwf	i1___lwdiv@dividend+1
  5637  06B8  0828               	movf	i1printf@val,w
  5638  06B9  00F2               	movwf	i1___lwdiv@dividend
  5639  06BA  120A  158A  25AF  120A  118A  	fcall	i1___lwdiv
  5640  06BF  0871               	movf	?i1___lwdiv+1,w
  5641  06C0  00FB               	movwf	i1___lwmod@dividend+1
  5642  06C1  0870               	movf	?i1___lwdiv,w
  5643  06C2  00FA               	movwf	i1___lwmod@dividend
  5644  06C3  120A  158A  2549  120A  118A  	fcall	i1___lwmod
  5645  06C8  0878               	movf	?i1___lwmod,w
  5646  06C9  3E30               	addlw	48
  5647  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  5648  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  5649  06CC  00A1               	movwf	??i1_printf+1
  5650  06CD  0821               	movf	??i1_printf+1,w
  5651  06CE  2EFA               	goto	L7
  5652  06CF                     i1l2277:	
  5653                           ;doprnt.c: 1497: case 0x80:
  5654                           
  5655                           ;doprnt.c: 1491: break;
  5656                           
  5657                           
  5658                           ;doprnt.c: 1499: {
  5659                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5660  06CF  0826               	movf	i1printf@prec,w
  5661  06D0  00A0               	movwf	??i1_printf
  5662  06D1  0720               	addwf	??i1_printf,w
  5663  06D2  3E0B               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  5664  06D3  0084               	movwf	4
  5665  06D4  120A  158A  2000  120A  118A  	fcall	stringdir
  5666  06D9  00F0               	movwf	i1___lwdiv@divisor
  5667  06DA  120A  158A  2000  120A  118A  	fcall	stringdir
  5668  06DF  00F1               	movwf	i1___lwdiv@divisor+1
  5669  06E0  0829               	movf	i1printf@val+1,w
  5670  06E1  00F3               	movwf	i1___lwdiv@dividend+1
  5671  06E2  0828               	movf	i1printf@val,w
  5672  06E3  00F2               	movwf	i1___lwdiv@dividend
  5673  06E4  120A  158A  25AF  120A  118A  	fcall	i1___lwdiv
  5674  06E9  0870               	movf	?i1___lwdiv,w
  5675  06EA  390F               	andlw	15
  5676  06EB  1283               	bcf	3,5	;RP0=0, select bank0
  5677  06EC  1303               	bcf	3,6	;RP1=0, select bank0
  5678  06ED  00A1               	movwf	??i1_printf+1
  5679  06EE  0821               	movf	??i1_printf+1,w
  5680  06EF  00A3               	movwf	i1printf@idx
  5681                           
  5682                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  5683  06F0  0823               	movf	i1printf@idx,w
  5684  06F1  3E39               	addlw	low ((STR_4-__stringbase)| (0+32768))
  5685  06F2  0084               	movwf	4
  5686  06F3  120A  158A  2000  120A  118A  	fcall	stringdir
  5687  06F8  00A0               	movwf	??i1_printf
  5688  06F9  0820               	movf	??i1_printf,w
  5689  06FA                     L7:	
  5690  06FA  00AC               	movwf	i1printf@c
  5691  06FB                     i1l2285:	
  5692                           ;doprnt.c: 1523: }
  5693                           
  5694                           ;doprnt.c: 1508: }
  5695                           ;doprnt.c: 1510: break;
  5696                           
  5697                           
  5698                           ;doprnt.c: 1524: (putch(c) );
  5699  06FB  082C               	movf	i1printf@c,w
  5700  06FC  120A  158A  240C  120A  118A  	fcall	i1_putch
  5701  0701                     i1l2287:	
  5702  0701  30FF               	movlw	255
  5703  0702  1283               	bcf	3,5	;RP0=0, select bank0
  5704  0703  1303               	bcf	3,6	;RP1=0, select bank0
  5705  0704  00A0               	movwf	??i1_printf
  5706  0705  0820               	movf	??i1_printf,w
  5707  0706  07A6               	addwf	i1printf@prec,f
  5708  0707  0A26               	incf	i1printf@prec,w
  5709  0708  1903               	btfsc	3,2
  5710  0709  2D4D               	goto	i1l2289
  5711  070A  0827               	movf	i1printf@flag,w
  5712  070B  39C0               	andlw	192
  5713                           
  5714                           ; Switch size 1, requested type "space"
  5715                           ; Number of cases is 2, Range of values is 128 to 192
  5716                           ; switch strategies available:
  5717                           ; Name         Instructions Cycles
  5718                           ; simple_byte            7     4 (average)
  5719                           ; direct_byte          206    11 (fixed)
  5720                           ; jumptable            263     9 (fixed)
  5721                           ;	Chosen strategy is simple_byte
  5722  070C  3A80               	xorlw	128	; case 128
  5723  070D  1903               	skipnz
  5724  070E  2ECF               	goto	i1l2277
  5725  070F  3A40               	xorlw	64	; case 192
  5726  0710  1903               	skipnz
  5727  0711  2EA1               	goto	i1l2275
  5728  0712  2EFB               	goto	i1l2285
  5729  0713  2EFB               	goto	i1l2285
  5730  0714                     i1l398:	
  5731                           ;doprnt.c: 1540: return 0;
  5732                           ;	Return value of i1_printf is never used
  5733                           
  5734                           ;doprnt.c: 1525: }
  5735                           ;doprnt.c: 1533: }
  5736                           ;doprnt.c: 1535: alldone:
  5737                           
  5738  0714  0008               	return
  5739  0715                     __end_ofi1_printf:	
  5740                           
  5741                           	psect	text29
  5742  0C0C                     __ptext29:	
  5743 ;; *************** function i1_putch *****************
  5744 ;; Defined at:
  5745 ;;		line 46 in file "usart.c"
  5746 ;; Parameters:    Size  Location     Type
  5747 ;;  byte            1    wreg     unsigned char 
  5748 ;; Auto vars:     Size  Location     Type
  5749 ;;  byte            1    0[COMMON] unsigned char 
  5750 ;; Return value:  Size  Location     Type
  5751 ;;		None               void
  5752 ;; Registers used:
  5753 ;;		wreg
  5754 ;; Tracked objects:
  5755 ;;		On entry : 0/0
  5756 ;;		On exit  : 0/0
  5757 ;;		Unchanged: 0/0
  5758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5759 ;;      Params:         0       0       0       0       0
  5760 ;;      Locals:         1       0       0       0       0
  5761 ;;      Temps:          0       0       0       0       0
  5762 ;;      Totals:         1       0       0       0       0
  5763 ;;Total ram usage:        1 bytes
  5764 ;; Hardware stack levels used:    1
  5765 ;; This function calls:
  5766 ;;		Nothing
  5767 ;; This function is called by:
  5768 ;;		i1_printf
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           
  5773                           ;psect for function i1_putch
  5774  0C0C                     i1_putch:	
  5775                           
  5776                           ;incstack = 0
  5777                           ; Regs used in i1_putch: [wreg]
  5778                           ;i1putch@byte stored from wreg
  5779  0C0C  00F0               	movwf	i1putch@byte
  5780  0C0D                     i1l323:	
  5781                           ;usart.c: 49: continue;
  5782                           
  5783                           ;usart.c: 48: while (!TXIF)
  5784                           
  5785  0C0D  1283               	bcf	3,5	;RP0=0, select bank0
  5786  0C0E  1303               	bcf	3,6	;RP1=0, select bank0
  5787  0C0F  1E0C               	btfss	12,4	;volatile
  5788  0C10  2C0D               	goto	i1l323
  5789                           
  5790                           ;usart.c: 50: TXREG = byte;
  5791  0C11  0870               	movf	i1putch@byte,w
  5792  0C12  0099               	movwf	25	;volatile
  5793  0C13  0008               	return
  5794  0C14                     __end_ofi1_putch:	
  5795                           
  5796                           	psect	text30
  5797  0C82                     __ptext30:	
  5798 ;; *************** function i1_isdigit *****************
  5799 ;; Defined at:
  5800 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  5801 ;; Parameters:    Size  Location     Type
  5802 ;;  c               1    wreg     unsigned char 
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;  c               1    1[COMMON] unsigned char 
  5805 ;; Return value:  Size  Location     Type
  5806 ;;		None               void
  5807 ;; Registers used:
  5808 ;;		wreg, status,2, status,0
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5814 ;;      Params:         0       0       0       0       0
  5815 ;;      Locals:         2       0       0       0       0
  5816 ;;      Temps:          0       0       0       0       0
  5817 ;;      Totals:         2       0       0       0       0
  5818 ;;Total ram usage:        2 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; This function calls:
  5821 ;;		Nothing
  5822 ;; This function is called by:
  5823 ;;		i1_printf
  5824 ;; This function uses a non-reentrant model
  5825 ;;
  5826                           
  5827                           
  5828                           ;psect for function i1_isdigit
  5829  0C82                     i1_isdigit:	
  5830                           
  5831                           ;incstack = 0
  5832                           ; Regs used in i1_isdigit: [wreg+status,2+status,0]
  5833                           ;i1isdigit@c stored from wreg
  5834  0C82  00F1               	movwf	i1isdigit@c
  5835  0C83  01F0               	clrf	i1_isdigit$889
  5836  0C84  303A               	movlw	58
  5837  0C85  0271               	subwf	i1isdigit@c,w
  5838  0C86  1803               	skipnc
  5839  0C87  2C8E               	goto	i1l1845
  5840  0C88  3030               	movlw	48
  5841  0C89  0271               	subwf	i1isdigit@c,w
  5842  0C8A  1C03               	skipc
  5843  0C8B  2C8E               	goto	i1l1845
  5844  0C8C  01F0               	clrf	i1_isdigit$889
  5845  0C8D  0AF0               	incf	i1_isdigit$889,f
  5846  0C8E                     i1l1845:	
  5847  0C8E  0C70               	rrf	i1_isdigit$889,w
  5848  0C8F  0008               	return
  5849  0C90                     __end_ofi1_isdigit:	
  5850                           
  5851                           	psect	text31
  5852  0D05                     __ptext31:	
  5853 ;; *************** function i1___wmul *****************
  5854 ;; Defined at:
  5855 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;  multiplier      2    0[COMMON] unsigned int 
  5858 ;;  multiplicand    2    2[COMMON] unsigned int 
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;  __wmul          2    4[COMMON] unsigned int 
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  2    0[COMMON] unsigned int 
  5863 ;; Registers used:
  5864 ;;		wreg, status,2, status,0
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5870 ;;      Params:         4       0       0       0       0
  5871 ;;      Locals:         2       0       0       0       0
  5872 ;;      Temps:          0       0       0       0       0
  5873 ;;      Totals:         6       0       0       0       0
  5874 ;;Total ram usage:        6 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; This function calls:
  5877 ;;		Nothing
  5878 ;; This function is called by:
  5879 ;;		i1_printf
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882                           
  5883                           
  5884                           ;psect for function i1___wmul
  5885  0D05                     i1___wmul:	
  5886                           
  5887                           ;incstack = 0
  5888                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  5889  0D05  01F4               	clrf	i1___wmul@product
  5890  0D06  01F5               	clrf	i1___wmul@product+1
  5891  0D07                     i1l1825:	
  5892  0D07  1C70               	btfss	i1___wmul@multiplier,0
  5893  0D08  2D0F               	goto	i1l482
  5894  0D09  0872               	movf	i1___wmul@multiplicand,w
  5895  0D0A  07F4               	addwf	i1___wmul@product,f
  5896  0D0B  1803               	skipnc
  5897  0D0C  0AF5               	incf	i1___wmul@product+1,f
  5898  0D0D  0873               	movf	i1___wmul@multiplicand+1,w
  5899  0D0E  07F5               	addwf	i1___wmul@product+1,f
  5900  0D0F                     i1l482:	
  5901  0D0F  3001               	movlw	1
  5902  0D10                     u175_25:	
  5903  0D10  1003               	clrc
  5904  0D11  0DF2               	rlf	i1___wmul@multiplicand,f
  5905  0D12  0DF3               	rlf	i1___wmul@multiplicand+1,f
  5906  0D13  3EFF               	addlw	-1
  5907  0D14  1D03               	skipz
  5908  0D15  2D10               	goto	u175_25
  5909  0D16  3001               	movlw	1
  5910  0D17                     u176_25:	
  5911  0D17  1003               	clrc
  5912  0D18  0CF1               	rrf	i1___wmul@multiplier+1,f
  5913  0D19  0CF0               	rrf	i1___wmul@multiplier,f
  5914  0D1A  3EFF               	addlw	-1
  5915  0D1B  1D03               	skipz
  5916  0D1C  2D17               	goto	u176_25
  5917  0D1D  0870               	movf	i1___wmul@multiplier,w
  5918  0D1E  0471               	iorwf	i1___wmul@multiplier+1,w
  5919  0D1F  1D03               	btfss	3,2
  5920  0D20  2D07               	goto	i1l1825
  5921  0D21  0875               	movf	i1___wmul@product+1,w
  5922  0D22  00F1               	movwf	?i1___wmul+1
  5923  0D23  0874               	movf	i1___wmul@product,w
  5924  0D24  00F0               	movwf	?i1___wmul
  5925  0D25  0008               	return
  5926  0D26                     __end_ofi1___wmul:	
  5927                           
  5928                           	psect	text32
  5929  0D49                     __ptext32:	
  5930 ;; *************** function i1___lwmod *****************
  5931 ;; Defined at:
  5932 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5933 ;; Parameters:    Size  Location     Type
  5934 ;;  divisor         2    8[COMMON] unsigned int 
  5935 ;;  dividend        2   10[COMMON] unsigned int 
  5936 ;; Auto vars:     Size  Location     Type
  5937 ;;  __lwmod         1   13[COMMON] unsigned char 
  5938 ;; Return value:  Size  Location     Type
  5939 ;;                  2    8[COMMON] unsigned int 
  5940 ;; Registers used:
  5941 ;;		wreg, status,2, status,0
  5942 ;; Tracked objects:
  5943 ;;		On entry : 0/0
  5944 ;;		On exit  : 0/0
  5945 ;;		Unchanged: 0/0
  5946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5947 ;;      Params:         4       0       0       0       0
  5948 ;;      Locals:         1       0       0       0       0
  5949 ;;      Temps:          1       0       0       0       0
  5950 ;;      Totals:         6       0       0       0       0
  5951 ;;Total ram usage:        6 bytes
  5952 ;; Hardware stack levels used:    1
  5953 ;; This function calls:
  5954 ;;		Nothing
  5955 ;; This function is called by:
  5956 ;;		i1_printf
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960                           
  5961                           ;psect for function i1___lwmod
  5962  0D49                     i1___lwmod:	
  5963                           
  5964                           ;incstack = 0
  5965                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
  5966  0D49  0878               	movf	i1___lwmod@divisor,w
  5967  0D4A  0479               	iorwf	i1___lwmod@divisor+1,w
  5968  0D4B  1903               	btfsc	3,2
  5969  0D4C  2D76               	goto	i1l1893
  5970  0D4D  01FD               	clrf	i1___lwmod@counter
  5971  0D4E  0AFD               	incf	i1___lwmod@counter,f
  5972  0D4F                     i1l1883:	
  5973  0D4F  1BF9               	btfsc	i1___lwmod@divisor+1,7
  5974  0D50  2D5D               	goto	i1l1885
  5975  0D51  3001               	movlw	1
  5976  0D52                     u188_25:	
  5977  0D52  1003               	clrc
  5978  0D53  0DF8               	rlf	i1___lwmod@divisor,f
  5979  0D54  0DF9               	rlf	i1___lwmod@divisor+1,f
  5980  0D55  3EFF               	addlw	-1
  5981  0D56  1D03               	skipz
  5982  0D57  2D52               	goto	u188_25
  5983  0D58  3001               	movlw	1
  5984  0D59  00FC               	movwf	??i1___lwmod
  5985  0D5A  087C               	movf	??i1___lwmod,w
  5986  0D5B  07FD               	addwf	i1___lwmod@counter,f
  5987  0D5C  2D4F               	goto	i1l1883
  5988  0D5D                     i1l1885:	
  5989  0D5D  0879               	movf	i1___lwmod@divisor+1,w
  5990  0D5E  027B               	subwf	i1___lwmod@dividend+1,w
  5991  0D5F  1D03               	skipz
  5992  0D60  2D63               	goto	u190_25
  5993  0D61  0878               	movf	i1___lwmod@divisor,w
  5994  0D62  027A               	subwf	i1___lwmod@dividend,w
  5995  0D63                     u190_25:	
  5996  0D63  1C03               	skipc
  5997  0D64  2D6B               	goto	i1l1889
  5998  0D65  0878               	movf	i1___lwmod@divisor,w
  5999  0D66  02FA               	subwf	i1___lwmod@dividend,f
  6000  0D67  0879               	movf	i1___lwmod@divisor+1,w
  6001  0D68  1C03               	skipc
  6002  0D69  03FB               	decf	i1___lwmod@dividend+1,f
  6003  0D6A  02FB               	subwf	i1___lwmod@dividend+1,f
  6004  0D6B                     i1l1889:	
  6005  0D6B  3001               	movlw	1
  6006  0D6C                     u191_25:	
  6007  0D6C  1003               	clrc
  6008  0D6D  0CF9               	rrf	i1___lwmod@divisor+1,f
  6009  0D6E  0CF8               	rrf	i1___lwmod@divisor,f
  6010  0D6F  3EFF               	addlw	-1
  6011  0D70  1D03               	skipz
  6012  0D71  2D6C               	goto	u191_25
  6013  0D72  3001               	movlw	1
  6014  0D73  02FD               	subwf	i1___lwmod@counter,f
  6015  0D74  1D03               	btfss	3,2
  6016  0D75  2D5D               	goto	i1l1885
  6017  0D76                     i1l1893:	
  6018  0D76  087B               	movf	i1___lwmod@dividend+1,w
  6019  0D77  00F9               	movwf	?i1___lwmod+1
  6020  0D78  087A               	movf	i1___lwmod@dividend,w
  6021  0D79  00F8               	movwf	?i1___lwmod
  6022  0D7A  0008               	return
  6023  0D7B                     __end_ofi1___lwmod:	
  6024                           
  6025                           	psect	text33
  6026  0DAF                     __ptext33:	
  6027 ;; *************** function i1___lwdiv *****************
  6028 ;; Defined at:
  6029 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  6030 ;; Parameters:    Size  Location     Type
  6031 ;;  divisor         2    0[COMMON] unsigned int 
  6032 ;;  dividend        2    2[COMMON] unsigned int 
  6033 ;; Auto vars:     Size  Location     Type
  6034 ;;  __lwdiv         2    5[COMMON] unsigned int 
  6035 ;;  __lwdiv         1    7[COMMON] unsigned char 
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  2    0[COMMON] unsigned int 
  6038 ;; Registers used:
  6039 ;;		wreg, status,2, status,0
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6045 ;;      Params:         4       0       0       0       0
  6046 ;;      Locals:         3       0       0       0       0
  6047 ;;      Temps:          1       0       0       0       0
  6048 ;;      Totals:         8       0       0       0       0
  6049 ;;Total ram usage:        8 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; This function calls:
  6052 ;;		Nothing
  6053 ;; This function is called by:
  6054 ;;		i1_printf
  6055 ;; This function uses a non-reentrant model
  6056 ;;
  6057                           
  6058                           
  6059                           ;psect for function i1___lwdiv
  6060  0DAF                     i1___lwdiv:	
  6061                           
  6062                           ;incstack = 0
  6063                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
  6064  0DAF  01F5               	clrf	i1___lwdiv@quotient
  6065  0DB0  01F6               	clrf	i1___lwdiv@quotient+1
  6066  0DB1  0870               	movf	i1___lwdiv@divisor,w
  6067  0DB2  0471               	iorwf	i1___lwdiv@divisor+1,w
  6068  0DB3  1903               	btfsc	3,2
  6069  0DB4  2DE6               	goto	i1l1871
  6070  0DB5  01F7               	clrf	i1___lwdiv@counter
  6071  0DB6  0AF7               	incf	i1___lwdiv@counter,f
  6072  0DB7                     i1l1859:	
  6073  0DB7  1BF1               	btfsc	i1___lwdiv@divisor+1,7
  6074  0DB8  2DC5               	goto	i1l1861
  6075  0DB9  3001               	movlw	1
  6076  0DBA                     u181_25:	
  6077  0DBA  1003               	clrc
  6078  0DBB  0DF0               	rlf	i1___lwdiv@divisor,f
  6079  0DBC  0DF1               	rlf	i1___lwdiv@divisor+1,f
  6080  0DBD  3EFF               	addlw	-1
  6081  0DBE  1D03               	skipz
  6082  0DBF  2DBA               	goto	u181_25
  6083  0DC0  3001               	movlw	1
  6084  0DC1  00F4               	movwf	??i1___lwdiv
  6085  0DC2  0874               	movf	??i1___lwdiv,w
  6086  0DC3  07F7               	addwf	i1___lwdiv@counter,f
  6087  0DC4  2DB7               	goto	i1l1859
  6088  0DC5                     i1l1861:	
  6089  0DC5  3001               	movlw	1
  6090  0DC6                     u183_25:	
  6091  0DC6  1003               	clrc
  6092  0DC7  0DF5               	rlf	i1___lwdiv@quotient,f
  6093  0DC8  0DF6               	rlf	i1___lwdiv@quotient+1,f
  6094  0DC9  3EFF               	addlw	-1
  6095  0DCA  1D03               	skipz
  6096  0DCB  2DC6               	goto	u183_25
  6097  0DCC  0871               	movf	i1___lwdiv@divisor+1,w
  6098  0DCD  0273               	subwf	i1___lwdiv@dividend+1,w
  6099  0DCE  1D03               	skipz
  6100  0DCF  2DD2               	goto	u184_25
  6101  0DD0  0870               	movf	i1___lwdiv@divisor,w
  6102  0DD1  0272               	subwf	i1___lwdiv@dividend,w
  6103  0DD2                     u184_25:	
  6104  0DD2  1C03               	skipc
  6105  0DD3  2DDB               	goto	i1l1867
  6106  0DD4  0870               	movf	i1___lwdiv@divisor,w
  6107  0DD5  02F2               	subwf	i1___lwdiv@dividend,f
  6108  0DD6  0871               	movf	i1___lwdiv@divisor+1,w
  6109  0DD7  1C03               	skipc
  6110  0DD8  03F3               	decf	i1___lwdiv@dividend+1,f
  6111  0DD9  02F3               	subwf	i1___lwdiv@dividend+1,f
  6112  0DDA  1475               	bsf	i1___lwdiv@quotient,0
  6113  0DDB                     i1l1867:	
  6114  0DDB  3001               	movlw	1
  6115  0DDC                     u185_25:	
  6116  0DDC  1003               	clrc
  6117  0DDD  0CF1               	rrf	i1___lwdiv@divisor+1,f
  6118  0DDE  0CF0               	rrf	i1___lwdiv@divisor,f
  6119  0DDF  3EFF               	addlw	-1
  6120  0DE0  1D03               	skipz
  6121  0DE1  2DDC               	goto	u185_25
  6122  0DE2  3001               	movlw	1
  6123  0DE3  02F7               	subwf	i1___lwdiv@counter,f
  6124  0DE4  1D03               	btfss	3,2
  6125  0DE5  2DC5               	goto	i1l1861
  6126  0DE6                     i1l1871:	
  6127  0DE6  0876               	movf	i1___lwdiv@quotient+1,w
  6128  0DE7  00F1               	movwf	?i1___lwdiv+1
  6129  0DE8  0875               	movf	i1___lwdiv@quotient,w
  6130  0DE9  00F0               	movwf	?i1___lwdiv
  6131  0DEA  0008               	return
  6132  0DEB                     __end_ofi1___lwdiv:	
  6133                           
  6134                           	psect	text34
  6135  0EF2                     __ptext34:	
  6136 ;; *************** function i1___awmod *****************
  6137 ;; Defined at:
  6138 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  6139 ;; Parameters:    Size  Location     Type
  6140 ;;  divisor         2    0[COMMON] int 
  6141 ;;  dividend        2    2[COMMON] int 
  6142 ;; Auto vars:     Size  Location     Type
  6143 ;;  __awmod         1    6[COMMON] unsigned char 
  6144 ;;  __awmod         1    5[COMMON] unsigned char 
  6145 ;; Return value:  Size  Location     Type
  6146 ;;                  2    0[COMMON] int 
  6147 ;; Registers used:
  6148 ;;		wreg, status,2, status,0
  6149 ;; Tracked objects:
  6150 ;;		On entry : 0/0
  6151 ;;		On exit  : 0/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6154 ;;      Params:         4       0       0       0       0
  6155 ;;      Locals:         2       0       0       0       0
  6156 ;;      Temps:          1       0       0       0       0
  6157 ;;      Totals:         7       0       0       0       0
  6158 ;;Total ram usage:        7 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; This function calls:
  6161 ;;		Nothing
  6162 ;; This function is called by:
  6163 ;;		_interruptions
  6164 ;; This function uses a non-reentrant model
  6165 ;;
  6166                           
  6167                           
  6168                           ;psect for function i1___awmod
  6169  0EF2                     i1___awmod:	
  6170                           
  6171                           ;incstack = 0
  6172                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  6173  0EF2  01F6               	clrf	i1___awmod@sign
  6174  0EF3  1FF3               	btfss	i1___awmod@dividend+1,7
  6175  0EF4  2EFC               	goto	i1l2299
  6176  0EF5  09F2               	comf	i1___awmod@dividend,f
  6177  0EF6  09F3               	comf	i1___awmod@dividend+1,f
  6178  0EF7  0AF2               	incf	i1___awmod@dividend,f
  6179  0EF8  1903               	skipnz
  6180  0EF9  0AF3               	incf	i1___awmod@dividend+1,f
  6181  0EFA  01F6               	clrf	i1___awmod@sign
  6182  0EFB  0AF6               	incf	i1___awmod@sign,f
  6183  0EFC                     i1l2299:	
  6184  0EFC  1FF1               	btfss	i1___awmod@divisor+1,7
  6185  0EFD  2F03               	goto	i1l2303
  6186  0EFE  09F0               	comf	i1___awmod@divisor,f
  6187  0EFF  09F1               	comf	i1___awmod@divisor+1,f
  6188  0F00  0AF0               	incf	i1___awmod@divisor,f
  6189  0F01  1903               	skipnz
  6190  0F02  0AF1               	incf	i1___awmod@divisor+1,f
  6191  0F03                     i1l2303:	
  6192  0F03  0870               	movf	i1___awmod@divisor,w
  6193  0F04  0471               	iorwf	i1___awmod@divisor+1,w
  6194  0F05  1903               	btfsc	3,2
  6195  0F06  2F30               	goto	i1l2321
  6196  0F07  01F5               	clrf	i1___awmod@counter
  6197  0F08  0AF5               	incf	i1___awmod@counter,f
  6198  0F09                     i1l2311:	
  6199  0F09  1BF1               	btfsc	i1___awmod@divisor+1,7
  6200  0F0A  2F17               	goto	i1l2313
  6201  0F0B  3001               	movlw	1
  6202  0F0C                     u249_25:	
  6203  0F0C  1003               	clrc
  6204  0F0D  0DF0               	rlf	i1___awmod@divisor,f
  6205  0F0E  0DF1               	rlf	i1___awmod@divisor+1,f
  6206  0F0F  3EFF               	addlw	-1
  6207  0F10  1D03               	skipz
  6208  0F11  2F0C               	goto	u249_25
  6209  0F12  3001               	movlw	1
  6210  0F13  00F4               	movwf	??i1___awmod
  6211  0F14  0874               	movf	??i1___awmod,w
  6212  0F15  07F5               	addwf	i1___awmod@counter,f
  6213  0F16  2F09               	goto	i1l2311
  6214  0F17                     i1l2313:	
  6215  0F17  0871               	movf	i1___awmod@divisor+1,w
  6216  0F18  0273               	subwf	i1___awmod@dividend+1,w
  6217  0F19  1D03               	skipz
  6218  0F1A  2F1D               	goto	u251_25
  6219  0F1B  0870               	movf	i1___awmod@divisor,w
  6220  0F1C  0272               	subwf	i1___awmod@dividend,w
  6221  0F1D                     u251_25:	
  6222  0F1D  1C03               	skipc
  6223  0F1E  2F25               	goto	i1l2317
  6224  0F1F  0870               	movf	i1___awmod@divisor,w
  6225  0F20  02F2               	subwf	i1___awmod@dividend,f
  6226  0F21  0871               	movf	i1___awmod@divisor+1,w
  6227  0F22  1C03               	skipc
  6228  0F23  03F3               	decf	i1___awmod@dividend+1,f
  6229  0F24  02F3               	subwf	i1___awmod@dividend+1,f
  6230  0F25                     i1l2317:	
  6231  0F25  3001               	movlw	1
  6232  0F26                     u252_25:	
  6233  0F26  1003               	clrc
  6234  0F27  0CF1               	rrf	i1___awmod@divisor+1,f
  6235  0F28  0CF0               	rrf	i1___awmod@divisor,f
  6236  0F29  3EFF               	addlw	-1
  6237  0F2A  1D03               	skipz
  6238  0F2B  2F26               	goto	u252_25
  6239  0F2C  3001               	movlw	1
  6240  0F2D  02F5               	subwf	i1___awmod@counter,f
  6241  0F2E  1D03               	btfss	3,2
  6242  0F2F  2F17               	goto	i1l2313
  6243  0F30                     i1l2321:	
  6244  0F30  0876               	movf	i1___awmod@sign,w
  6245  0F31  1903               	btfsc	3,2
  6246  0F32  2F38               	goto	i1l2325
  6247  0F33  09F2               	comf	i1___awmod@dividend,f
  6248  0F34  09F3               	comf	i1___awmod@dividend+1,f
  6249  0F35  0AF2               	incf	i1___awmod@dividend,f
  6250  0F36  1903               	skipnz
  6251  0F37  0AF3               	incf	i1___awmod@dividend+1,f
  6252  0F38                     i1l2325:	
  6253  0F38  0873               	movf	i1___awmod@dividend+1,w
  6254  0F39  00F1               	movwf	?i1___awmod+1
  6255  0F3A  0872               	movf	i1___awmod@dividend,w
  6256  0F3B  00F0               	movwf	?i1___awmod
  6257  0F3C  0008               	return
  6258  0F3D                     __end_ofi1___awmod:	
  6259                           
  6260                           	psect	text35
  6261  0CEA                     __ptext35:	
  6262 ;; *************** function _strcpy *****************
  6263 ;; Defined at:
  6264 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strcpy.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;  to              1    wreg     PTR unsigned char 
  6267 ;;		 -> string(26), 
  6268 ;;  from            1    0[COMMON] PTR const unsigned char 
  6269 ;;		 -> string_aux(26), 
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;  to              1    2[COMMON] PTR unsigned char 
  6272 ;;		 -> string(26), 
  6273 ;;  cp              1    3[COMMON] PTR unsigned char 
  6274 ;;		 -> string(26), 
  6275 ;; Return value:  Size  Location     Type
  6276 ;;                  1    wreg      PTR unsigned char 
  6277 ;; Registers used:
  6278 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6279 ;; Tracked objects:
  6280 ;;		On entry : 0/0
  6281 ;;		On exit  : 0/0
  6282 ;;		Unchanged: 0/0
  6283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6284 ;;      Params:         1       0       0       0       0
  6285 ;;      Locals:         2       0       0       0       0
  6286 ;;      Temps:          1       0       0       0       0
  6287 ;;      Totals:         4       0       0       0       0
  6288 ;;Total ram usage:        4 bytes
  6289 ;; Hardware stack levels used:    1
  6290 ;; This function calls:
  6291 ;;		Nothing
  6292 ;; This function is called by:
  6293 ;;		_interruptions
  6294 ;; This function uses a non-reentrant model
  6295 ;;
  6296                           
  6297                           
  6298                           ;psect for function _strcpy
  6299  0CEA                     _strcpy:	
  6300                           
  6301                           ;incstack = 0
  6302                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0]
  6303                           ;strcpy@to stored from wreg
  6304  0CEA  00F2               	movwf	strcpy@to
  6305  0CEB  0872               	movf	strcpy@to,w
  6306  0CEC  00F1               	movwf	??_strcpy
  6307  0CED  0871               	movf	??_strcpy,w
  6308  0CEE  00F3               	movwf	strcpy@cp
  6309  0CEF                     i1l1967:	
  6310  0CEF  0870               	movf	strcpy@from,w
  6311  0CF0  0084               	movwf	4
  6312  0CF1  1383               	bcf	3,7	;select IRP bank0
  6313  0CF2  0800               	movf	0,w
  6314  0CF3  00F1               	movwf	??_strcpy
  6315  0CF4  0873               	movf	strcpy@cp,w
  6316  0CF5  0084               	movwf	4
  6317  0CF6  0871               	movf	??_strcpy,w
  6318  0CF7  1783               	bsf	3,7	;select IRP bank2
  6319  0CF8  0080               	movwf	0
  6320  0CF9  0800               	movf	0,w
  6321  0CFA  1903               	btfsc	3,2
  6322  0CFB  0008               	return
  6323  0CFC  3001               	movlw	1
  6324  0CFD  00F1               	movwf	??_strcpy
  6325  0CFE  0871               	movf	??_strcpy,w
  6326  0CFF  07F3               	addwf	strcpy@cp,f
  6327  0D00  3001               	movlw	1
  6328  0D01  00F1               	movwf	??_strcpy
  6329  0D02  0871               	movf	??_strcpy,w
  6330  0D03  07F0               	addwf	strcpy@from,f
  6331  0D04  2CEF               	goto	i1l1967
  6332  0D05                     __end_of_strcpy:	
  6333                           ;	Return value of _strcpy is never used
  6334                           
  6335  007E                     btemp	set	126	;btemp
  6336  007E                     wtemp	set	126
  6337  007E                     wtemp0	set	126
  6338  0080                     wtemp1	set	128
  6339  0082                     wtemp2	set	130
  6340  0084                     wtemp3	set	132
  6341  0086                     wtemp4	set	134
  6342  0088                     wtemp5	set	136
  6343  007F                     wtemp6	set	127
  6344  007E                     ttemp	set	126
  6345  007E                     ttemp0	set	126
  6346  0081                     ttemp1	set	129
  6347  0084                     ttemp2	set	132
  6348  0087                     ttemp3	set	135
  6349  007F                     ttemp4	set	127
  6350  007E                     ltemp	set	126
  6351  007E                     ltemp0	set	126
  6352  0082                     ltemp1	set	130
  6353  0086                     ltemp2	set	134
  6354  0080                     ltemp3	set	128


Data Sizes:
    Strings     60
    Constant    18
    Data        9
    BSS         65
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     53      60
    BANK1            80     34      76
    BANK3            96      0      26
    BANK2            96      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(1) Largest target is 26
		 -> string_aux(BANK1[26]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 26
		 -> string(BANK3[26]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 26
		 -> string(BANK3[26]), 

    printf@f	PTR const unsigned char  size(1) Largest target is 38
		 -> STR_3(CODE[2]), STR_2(CODE[38]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?i1_printf(COMMON[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 26
		 -> string(BANK3[26]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _interruptions in COMMON

    i1_printf->i1___lwmod
    i1___lwmod->i1___lwdiv

Critical Paths under _main in BANK0

    _main->_printf
    _write_RTC_I2c->_I2C_Write_Byte
    _read_RTC_I2c->_I2C_Write_Byte
    _rand->___lmul
    _printf->___lwmod
    ___lwmod->___lwdiv
    ___awmod->_rand

Critical Paths under _interruptions in BANK0

    _interruptions->i1_printf

Critical Paths under _main in BANK1

    _main->_printf

Critical Paths under _interruptions in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptions in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptions in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0    3328
                                             10 BANK1     24    24      0
                     _InitI2C_Master
                            ___awmod
                           _configAD
                  _configADInterrupt
                        _configRS232
                        _configTimer
              _configUSARTInterrupts
                             _printf
                               _rand
                       _read_RTC_I2c
                       _selectChanel
                              _srand
                      _write_RTC_I2c
 ---------------------------------------------------------------------------------
 (1) _write_RTC_I2c                                        0     0      0      22
                           _I2C_Idle
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2      86
                                             20 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _selectChanel                                         1     1      0     176
                                             20 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_RTC_I2c                                         2     2      0      44
                                             21 BANK0      2     2      0
                           _I2C_Idle
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Byte                                       1     1      0      22
                                             20 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Send_NACK                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Read_Byte                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Idle                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rand                                                 7     5      2     220
                                             33 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     220
                                             20 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    21     16    1922
                                             34 BANK0     19     3     16
                                              0 BANK1     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             20 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                             20 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                             20 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                             28 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                             20 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _configUSARTInterrupts                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configRS232                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configADInterrupt                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configAD                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     628
                                             40 BANK0      7     3      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitI2C_Master                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _interruptions                                        7     7      0    2045
                                             13 BANK0      7     7      0
                             _strcpy
                          i1___awmod
                           i1_printf
 ---------------------------------------------------------------------------------
 (4) i1_printf                                            21    21      0    1528
                                              0 BANK0     13    13      0
                          i1___lwdiv
                          i1___lwmod
                           i1___wmul
                          i1_isdigit
                            i1_putch
 ---------------------------------------------------------------------------------
 (5) i1_putch                                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) i1_isdigit                                            2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) i1___wmul                                             6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (5) i1___lwmod                                            6     2      4     211
                                              8 COMMON     6     2      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) i1___lwdiv                                            8     4      4     266
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) i1___awmod                                            7     3      4     348
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               4     3      1     169
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitI2C_Master
   ___awmod
     _rand (ARG)
       ___lmul
   _configAD
   _configADInterrupt
   _configRS232
   _configTimer
   _configUSARTInterrupts
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _rand
     ___lmul
   _read_RTC_I2c
     _I2C_Idle
     _I2C_ReStart
     _I2C_Read_Byte
     _I2C_Send_NACK
     _I2C_Start
     _I2C_Stop
     _I2C_Write_Byte
   _selectChanel
   _srand
   _write_RTC_I2c
     _I2C_Idle
     _I2C_Start
     _I2C_Stop
     _I2C_Write_Byte

 _interruptions (ROOT)
   _strcpy
   i1___awmod
   i1_printf
     i1___lwdiv
     i1___lwmod
       i1___lwdiv (ARG)
     i1___wmul
     i1_isdigit
     i1_putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      1A       9       27.1%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      4C       7       95.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     35      3C       5       75.0%
BITBANK0            50      0       1       4        1.3%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B0      12        0.0%
ABS                  0      0      B0       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Jun 21 17:07:48 2016

                             _i 005B                               pc 0002              __size_of_I2C_Start 0008  
                   __CFG_CP$OFF 0000                     _SSPSTATbits 0094                              l91 0C1F  
                            l85 0C27                              l97 0C2F           __end_of_interruptions 0790  
                            _id 00E9                              fsr 0004             ___wmul@multiplicand 0036  
              i1___wmul@product 0074                             l121 0C51                             l115 0C6E  
                           l109 0C5B                             l323 0C17                             l261 00CD  
                           l263 00FD                             l265 012D                             l371 03DE  
                           l355 032B                             l267 015D                             l259 009D  
                           l366 03A6                             l376 040E                             l482 0D32  
                           l398 0545                             _CKP 00A4                             _GIE 005F  
                  __CFG_CPD$OFF 0000                             _RX9 00C6                             _TX9 04C6  
                           _dia 00A5                             _ano 00A2            __size_of_I2C_ReStart 0008  
                           _mes 00A8                             _val 00AB                             fsr0 0004  
                           indf 0000                    ___awmod@sign 004E              I2C_Write_Byte@Byte 0034  
                  __CFG_FOSC$HS 0000                    __CFG_LVP$OFF 0000                            l2001 03CD  
                          l2033 0478                            l2051 04B0                            l2043 0491  
                          l2035 047C                            l2027 043E                            l2053 04EE  
                          l2061 052A                            l2045 0495                            l2029 0447  
                          l2063 0530                            l2049 04A7                            l2065 0304  
                          l2163 0F49                            l2181 0F72                            l2175 0F56  
                          l2167 0F50                            l2407 00DF                            l2177 0F64  
                          l2185 0F7D                            l2433 01A9                            l2417 010F  
                          l1811 0D9F                            l1723 0C45                            l2427 013F  
                          l2189 0F85                            l1805 0D83                            l1807 0D91  
                          l1815 0DAA                            l1745 0D2A                            l1921 0E93  
                          l1913 0E83                            l1905 0E74                            l1739 0CBD  
                          l1763 0E49                            l2475 02EA                            l2387 007F  
                          l1781 0DF5                            l1925 0E9B                            l1917 0E8B  
                          l1909 0E7B                            l2397 00AF                            l1783 0E03  
                          l1759 0E33                            l1793 0E24                            l1929 0EA3  
                          l1789 0E19                            l1981 0334                            l1983 033F  
                          l1975 0325                            l1995 03AA                            l1987 0351  
                          l1999 03B3                            _ADFM 04FF                            STR_1 084F  
                          STR_2 0818                            STR_3 0852                            STR_4 083E  
                          _BRGH 04C2                            _CREN 00C4                            _FERR 00C2  
                          u2115 0460                            _CSRC 04C7                            u2065 0403  
                          u2235 0F59                            u1525 0D33                            u2255 0F6A  
                          u1615 0DF8                            u1535 0D3A                            u2095 0433  
                          u2265 0F73                            u1705 0D97                            u1635 0E04  
                          u1715 0DA0                            u2195 0EE4                            u1645 0E10  
                          u1655 0E1A                            u1575 0E4B                            u1585 0E53  
                          u2705 012B                            u2715 013D                            u2635 007D  
                          u1685 0D86                            u2725 015B                            u2645 009B  
                          u2750 02F2                            u2807 0115                            u2655 00AD  
                          u2817 0145                            u2665 00CB                            u2827 01CA  
                          u2675 00DD                            _PEIE 005E                            u2764 02F5  
                          u2837 01DF                            u2685 00FB                            u2847 01F4  
                          u2695 010D                            u2857 0209                            u2777 0085  
                          u2867 021E                            u2787 00B5                            _RCIE 0465  
                          _RCIF 0065                            u2877 02AE                            u2797 00E5  
                          _OERR 00C1                            _TMR0 0001                            _WCOL 00A7  
                          _SPEN 00C7                            _TXIE 0464                            _TXEN 04C5  
                          _TXIF 0064                            _SYNC 04C4                    __CFG_WRT$OFF 0000  
                          _main 0046                            _hora 00A6                __end_of_I2C_Idle 0C4E  
                          _rand 0EAB                            btemp 007E                __end_of_I2C_Stop 0C34  
                          ltemp 007E                   i1printf@width 002A                            start 0012  
                          ttemp 007E                            wtemp 007E                 __end_ofi1_putch 0C14  
    __size_of_configADInterrupt 0009                           _ADCS0 00FE                           _ADCS1 00FF  
                         _ADCS2 04FE                           ?_main 0070                           ?_rand 0041  
                 __CFG_WDTE$OFF 0000                 __end_of___awmod 0F8A                 __end_of___lwdiv 0E29  
                         i1l242 071B                           i1l323 0C0D                           i1l249 0785  
               __end_of___lwmod 0DAF                           i1l371 05FD                           i1l355 0570  
                         i1l366 05CD                           i1l376 0621                           i1l482 0D0F  
                         i1l398 0714                           _RCREG 001A                           _SPBRG 0099  
                         _SSPM0 00A0                           _SSPM1 00A1                           _SSPM2 00A2  
                         _SSPM3 00A3                           _SSPIF 0063                           _SSPEN 00A5  
                         _SSPOV 00A6                           _TXREG 0019                      i1isdigit@c 0071  
           ___lmul@multiplicand 0038              i1___lwmod@dividend 007A                  i1___awmod@sign 0076  
               __end_of_dpowers 0810          __size_of_I2C_Read_Byte 0009                 __end_of_isdigit 0CBF  
                         _randx 0055                           _srand 0C60                           _putch 0C14  
                         main@i 00DE               __end_of_I2C_Start 0C2C                  __CFG_BOREN$OFF 0000  
                         pclath 000A                __end_ofi1___wmul 0D26                           ltemp0 007E  
                         ltemp1 0082                           ltemp2 0086                           ltemp3 0080  
                         ttemp0 007E                           ttemp1 0081                           ttemp2 0084  
                         ttemp3 0087                           ttemp4 007F          __size_of_I2C_Send_NACK 0009  
                         status 0003             i1___wmul@multiplier 0070                           wtemp0 007E  
                         wtemp1 0080                           wtemp2 0082                           wtemp3 0084  
                         wtemp4 0086                           wtemp5 0088                           wtemp6 007F  
            __size_ofi1___awmod 004B              __size_ofi1___lwdiv 003C              __size_ofi1___lwmod 0032  
              __end_ofi1_printf 0715                ??_InitI2C_Master 0034                      i1printf@ap 0025  
               __initialization 0015                    __end_of_main 02F9                    __end_of_rand 0EF2  
            __size_ofi1_isdigit 000E                   ?_read_RTC_I2c 0070                          ??_main 00D0  
                        ??_rand 0043           _configUSARTInterrupts 0C90                          _ADRESH 001E  
                        _ADRESL 009E                          ?_srand 0034                          ?_putch 0070  
                        i1l2211 0592                          i1l2205 0575                          i1l2311 0F09  
                        i1l2303 0F03                          i1l2223 05D6                          i1l2207 0580  
                        i1l2313 0F17                          i1l2321 0F30                          i1l2225 05F0  
                        i1l2251 0645                          i1l2219 05D1                          i1l2325 0F38  
                        i1l2317 0F25                          i1l2253 064E                          i1l2335 071E  
                        i1l2273 069C                          i1l2257 066D                          i1l2275 06A1  
                        i1l2267 0686                          i1l2259 0671                          i1l2355 0765  
                        i1l2347 073F                          i1l2277 06CF                          i1l2285 06FB  
                        i1l2269 068A                          i1l2365 0778                          i1l2287 0701  
                        i1l2199 056A                          i1l2359 076D                          i1l1825 0D07  
                        i1l2289 054D                          i1l2299 0EFC                          i1l1861 0DC5  
                        i1l1845 0C8E                          i1l1871 0DE6                          i1l1867 0DDB  
                        i1l1859 0DB7                          i1l1883 0D4F                          i1l1885 0D5D  
                        i1l1893 0D76                          i1l1967 0CEF                          i1l1889 0D6B  
                        u233_25 061A                          u251_25 0F1D                          u252_25 0F26  
                        u236_25 063E                          u181_25 0DBA                          u190_25 0D63  
                        u238_25 065D                          u183_25 0DC6                          u191_25 0D6C  
                        u175_25 0D10                          u184_25 0DD2                          u176_25 0D17  
                        u249_25 0F0C                          u185_25 0DDC                          u188_25 0D52  
                     ??i1_putch 0070                          _SSPADD 0093                          _TRISC3 043B  
                        _TRISC4 043C                          _SSPBUF 0013            __size_of_configRS232 0011  
                __CFG_PWRTE$OFF 0000                __end_of_configAD 0CAF            __size_of_configTimer 000D  
                 _I2C_Read_Byte 0C4E                          ___lmul 0E29                          ___wmul 0D26  
                     ??___awmod 004C                       ??___lwdiv 0038                       ??___lwmod 0040  
                ??_read_RTC_I2c 0035                          _minuto 00A9                 ___awmod@divisor 0048  
                 _I2C_Send_NACK 0C57                 ___awmod@counter 004D                          _printf 02F9  
                        _strcpy 0CEA                          _string 0190               __end_ofi1___awmod 0F3D  
                     ?_I2C_Idle 0070               __end_ofi1___lwdiv 0DEB               __end_ofi1___lwmod 0D7B  
                     ??_isdigit 0034                       ?_I2C_Stop 0070                          saved_w 007E  
                        srand@x 0034          __size_of_write_RTC_I2c 0076               __end_ofi1_isdigit 0C90  
       __end_of__initialization 0042                     i1printf@idx 0023                     i1printf@val 0028  
                ?_I2C_Read_Byte 0070                  __pcstackCOMMON 0070                    __pidataBANK0 07FA  
                  __pidataBANK1 0C08                     i1putch@byte 0070                   __end_of_srand 0C69  
                 __end_of_putch 0C1C                  ?_I2C_Send_NACK 0070          ?_configUSARTInterrupts 0070  
                     ?i1___wmul 0070                      ??_I2C_Idle 0034                  _OPTION_REGbits 0081  
                    ??_I2C_Stop 0034                       ?i1_printf 0070                         ??_srand 0036  
                       ??_putch 0034                      __pbssBANK0 005B                      __pbssBANK1 00A0  
                    __pbssBANK3 0190                      _hasAnError 02D1                   ?_selectChanel 0070  
                    __pmaintext 0046                         ?___lmul 0034                         ?___wmul 0034  
                 _write_RTC_I2c 0F8A                      __pintentry 0004         __size_of_I2C_Write_Byte 000C  
                ___lmul@product 003D                   ??_I2C_ReStart 0034                         ?_printf 0042  
                    ??i1___wmul 0074                         ?_strcpy 0070                   i1_isdigit$889 0070  
                    _contLedRD4 00A3                      ??i1_printf 0020                      _contTimer0 00A4  
                     ?_configAD 0070                         _SSPCON2 0091                         _SSPSTAT 0094  
                    __stringtab 0800            __end_of_read_RTC_I2c 07E9                         i1_putch 0C0C  
        __size_of_interruptions 007B                       _I2C_Start 0C24                 ??_I2C_Read_Byte 0034  
                ??_selectChanel 0034         read_RTC_I2c@pos_memoria 0036                  ?_write_RTC_I2c 0070  
               ??_I2C_Send_NACK 0034                 __size_of___lmul 0041                         ___awmod 0F3D  
               __size_of___wmul 0023                         ___lwdiv 0DEB                         ___lwmod 0D7B  
                       _channel 00E8                         __ptext1 0F8A                         __ptext2 0C60  
                       __ptext3 0E6A                         __ptext4 0790                         __ptext5 0C69  
                       __ptext6 0C2C                         __ptext7 0C24                         __ptext8 0C57  
                       __ptext9 0C4E                 __size_of_printf 024D                         _maxCont 00EA  
               __size_of_strcpy 001B               __end_of_hexpowers 0818                         _minCont 00EB  
                       _dpowers 0806               i1___lwdiv@divisor 0070                         _leitura 00A7  
                       _isdigit 0CAF               i1___lwdiv@counter 0077                ___awmod@dividend 004A  
                       _segundo 00AA             __end_of_I2C_ReStart 0C24                      ??_configAD 0034  
                       clrloop0 0C35            end_of_initialization 0042                      ?_I2C_Start 0070  
                       printf@c 00CF                         printf@f 00CE           i1___wmul@multiplicand 0072  
                 _interruptions 0715                       _PORTDbits 0008                       _TRISDbits 0088  
             __size_of_I2C_Idle 0009                       i1___awmod 0EF2               __size_of_I2C_Stop 0008  
                     i1___lwdiv 0DAF                       i1___lwmod 0D49                   ??_configRS232 0034  
                   printf@width 00CC                       i1_isdigit 0C82                   ??_configTimer 0034  
                  i1printf@flag 0027                    i1printf@prec 0026                 ??_write_RTC_I2c 0035  
                    _string_aux 00AC         ??_configUSARTInterrupts 0034                  _I2C_Write_Byte 0C69  
                __end_of___lmul 0E6A                  ?_interruptions 0070                  __end_of___wmul 0D49  
                   _I2C_ReStart 0C1C               i1___lwmod@divisor 0078         __size_of_InitI2C_Master 001A  
                 __pbitbssBANK0 02D0               i1___lwmod@counter 007D                  __end_of_printf 0546  
                __end_of_strcpy 0D05             start_initialization 0015               __size_ofi1___wmul 0021  
          __end_of_selectChanel 0EAB                       i1printf@c 002C                       i1printf@f 0024  
         __size_of_read_RTC_I2c 0059                      ?i1___awmod 0070                      ?i1___lwdiv 0070  
                    ?i1___lwmod 0078               __size_ofi1_printf 01CF                      ?i1_isdigit 0070  
                   ??_I2C_Start 0034             __end_of_configRS232 0CD0          __end_of_I2C_Write_Byte 0C75  
                      ??___lmul 003C                        ??___wmul 0038                      init_fetch0 07E9  
                   __pdataBANK0 0055                     __pdataBANK1 00E8             __end_of_configTimer 0C82  
            i1___awmod@dividend 0072                    _read_RTC_I2c 0790                        ??_printf 0052  
                      ??_strcpy 0071                       ___latbits 0002                   __pcstackBANK0 0020  
                 __pcstackBANK1 00C6               __size_of_configAD 0010                        ?i1_putch 0070  
              ___lwdiv@dividend 0036                 ?_I2C_Write_Byte 0070                 ??_interruptions 002D  
                      ?___awmod 0048                        ?___lwdiv 0034                        ?___lwmod 003C  
                     __pstrings 0800                        _I2C_Idle 0C45                        ?_isdigit 0070  
                      _I2C_Stop 0C2C                     ??i1___awmod 0074                       _hexpowers 0810  
              ___lwdiv@quotient 0039                     ??i1___lwdiv 0074                     ??i1___lwmod 007C  
                __size_of_srand 0009                  __size_of_putch 0008                    _receivedData 0059  
             interrupt_function 0004                     _configRS232 0CBF                  ___wmul@product 0038  
                   ??i1_isdigit 0070                       clear_ram0 0C34                        _PIE1bits 008C  
                   _configTimer 0C75                        _PIR1bits 000C           __end_of_I2C_Read_Byte 0C57  
         __end_of_I2C_Send_NACK 0C60           __size_of_selectChanel 0041                  _InitI2C_Master 0CD0  
                    _ADCON0bits 001F                     __stringbase 0805                      _ADCON1bits 009F  
                     main@i_580 00E2                       main@i_581 00E4                       main@i_582 00E6  
                     main@i_579 00E0               ___wmul@multiplier 0034                        i1___wmul 0D05  
                    printf@flag 00CB                      printf@prec 00C8                        i1_printf 0546  
           selectChanel@channel 0034               ___lmul@multiplier 0034                __size_ofi1_putch 0008  
                  _selectChanel 0E6A               i1___awmod@divisor 0070          __end_of_InitI2C_Master 0CEA  
             i1___awmod@counter 0075                __size_of___awmod 004D                __size_of___lwdiv 003E  
__size_of_configUSARTInterrupts 000F                __size_of___lwmod 0034   __end_of_configUSARTInterrupts 0C9F  
                  ?_I2C_ReStart 0070              __end_of__stringtab 0806                     _isdigit$889 0034  
                      _data_ADC 00A0                        _changing 02D0                __size_of_isdigit 0010  
               ___lwdiv@divisor 0034                 ___lwdiv@counter 003B                        __ptext10 0C1C  
                      __ptext11 0C45                        __ptext20 0C90                        __ptext12 0EAB  
                      __ptext21 0C75                        __ptext13 0E29                        __ptext30 0C82  
                      __ptext22 0CBF                        __ptext14 02F9                        __ptext31 0D05  
                      __ptext23 0C3C                        __ptext15 0C14                        __ptext32 0D49  
                      __ptext24 0C9F                        __ptext16 0CAF                        __ptext33 0DAF  
                      __ptext25 0F3D                        __ptext17 0D26                        __ptext34 0EF2  
                      __ptext26 0CD0                        __ptext18 0D7B                        __ptext35 0CEA  
                      __ptext27 0715                        __ptext19 0DEB                        __ptext28 0546  
                      __ptext29 0C0C                        _configAD 0C9F              i1___lwdiv@dividend 0072  
                    strcpy@from 0070                   __size_of_main 02B3                   __size_of_rand 0047  
         __end_of_write_RTC_I2c 1000               _configADInterrupt 0C3C                 ?_InitI2C_Master 0070  
                     printf@idx 00C6                       printf@val 00C9              ?_configADInterrupt 0070  
            i1___lwdiv@quotient 0075                       putch@byte 0034                      _INTCONbits 000B  
           ??_configADInterrupt 0034                        init_ram0 07ED                        isdigit@c 0035  
                      intlevel1 0000                ___lwmod@dividend 003E                ??_I2C_Write_Byte 0034  
                     stringcode 0800       __end_of_configADInterrupt 0C45                        printf@ap 00C7  
               ___lwmod@divisor 003C                        strcpy@cp 0073                        strcpy@to 0072  
               ___lwmod@counter 0041                        stringdir 0800                        stringtab 0800  
                   _SSPCON2bits 0091                    ?_configRS232 0070                    ?_configTimer 0070  
