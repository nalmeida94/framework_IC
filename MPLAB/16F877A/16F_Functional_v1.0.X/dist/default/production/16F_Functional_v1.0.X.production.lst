

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri Jun 03 10:11:15 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	dabs	1,0x7E,2
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0008                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  0087                     	;# 
    89  0088                     	;# 
    90  0089                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0094                     	;# 
    98  0098                     	;# 
    99  0099                     	;# 
   100  009C                     	;# 
   101  009D                     	;# 
   102  009E                     	;# 
   103  009F                     	;# 
   104  010C                     	;# 
   105  010D                     	;# 
   106  010E                     	;# 
   107  010F                     	;# 
   108  018C                     	;# 
   109  018D                     	;# 
   110  0000                     	;# 
   111  0001                     	;# 
   112  0002                     	;# 
   113  0003                     	;# 
   114  0004                     	;# 
   115  0005                     	;# 
   116  0006                     	;# 
   117  0007                     	;# 
   118  0008                     	;# 
   119  0009                     	;# 
   120  000A                     	;# 
   121  000B                     	;# 
   122  000C                     	;# 
   123  000D                     	;# 
   124  000E                     	;# 
   125  000E                     	;# 
   126  000F                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  0019                     	;# 
   138  001A                     	;# 
   139  001B                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001D                     	;# 
   143  001E                     	;# 
   144  001F                     	;# 
   145  0081                     	;# 
   146  0085                     	;# 
   147  0086                     	;# 
   148  0087                     	;# 
   149  0088                     	;# 
   150  0089                     	;# 
   151  008C                     	;# 
   152  008D                     	;# 
   153  008E                     	;# 
   154  0091                     	;# 
   155  0092                     	;# 
   156  0093                     	;# 
   157  0094                     	;# 
   158  0098                     	;# 
   159  0099                     	;# 
   160  009C                     	;# 
   161  009D                     	;# 
   162  009E                     	;# 
   163  009F                     	;# 
   164  010C                     	;# 
   165  010D                     	;# 
   166  010E                     	;# 
   167  010F                     	;# 
   168  018C                     	;# 
   169  018D                     	;# 
   170  0000                     	;# 
   171  0001                     	;# 
   172  0002                     	;# 
   173  0003                     	;# 
   174  0004                     	;# 
   175  0005                     	;# 
   176  0006                     	;# 
   177  0007                     	;# 
   178  0008                     	;# 
   179  0009                     	;# 
   180  000A                     	;# 
   181  000B                     	;# 
   182  000C                     	;# 
   183  000D                     	;# 
   184  000E                     	;# 
   185  000E                     	;# 
   186  000F                     	;# 
   187  0010                     	;# 
   188  0011                     	;# 
   189  0012                     	;# 
   190  0013                     	;# 
   191  0014                     	;# 
   192  0015                     	;# 
   193  0015                     	;# 
   194  0016                     	;# 
   195  0017                     	;# 
   196  0018                     	;# 
   197  0019                     	;# 
   198  001A                     	;# 
   199  001B                     	;# 
   200  001B                     	;# 
   201  001C                     	;# 
   202  001D                     	;# 
   203  001E                     	;# 
   204  001F                     	;# 
   205  0081                     	;# 
   206  0085                     	;# 
   207  0086                     	;# 
   208  0087                     	;# 
   209  0088                     	;# 
   210  0089                     	;# 
   211  008C                     	;# 
   212  008D                     	;# 
   213  008E                     	;# 
   214  0091                     	;# 
   215  0092                     	;# 
   216  0093                     	;# 
   217  0094                     	;# 
   218  0098                     	;# 
   219  0099                     	;# 
   220  009C                     	;# 
   221  009D                     	;# 
   222  009E                     	;# 
   223  009F                     	;# 
   224  010C                     	;# 
   225  010D                     	;# 
   226  010E                     	;# 
   227  010F                     	;# 
   228  018C                     	;# 
   229  018D                     	;# 
   230  0000                     	;# 
   231  0001                     	;# 
   232  0002                     	;# 
   233  0003                     	;# 
   234  0004                     	;# 
   235  0005                     	;# 
   236  0006                     	;# 
   237  0007                     	;# 
   238  0008                     	;# 
   239  0009                     	;# 
   240  000A                     	;# 
   241  000B                     	;# 
   242  000C                     	;# 
   243  000D                     	;# 
   244  000E                     	;# 
   245  000E                     	;# 
   246  000F                     	;# 
   247  0010                     	;# 
   248  0011                     	;# 
   249  0012                     	;# 
   250  0013                     	;# 
   251  0014                     	;# 
   252  0015                     	;# 
   253  0015                     	;# 
   254  0016                     	;# 
   255  0017                     	;# 
   256  0018                     	;# 
   257  0019                     	;# 
   258  001A                     	;# 
   259  001B                     	;# 
   260  001B                     	;# 
   261  001C                     	;# 
   262  001D                     	;# 
   263  001E                     	;# 
   264  001F                     	;# 
   265  0081                     	;# 
   266  0085                     	;# 
   267  0086                     	;# 
   268  0087                     	;# 
   269  0088                     	;# 
   270  0089                     	;# 
   271  008C                     	;# 
   272  008D                     	;# 
   273  008E                     	;# 
   274  0091                     	;# 
   275  0092                     	;# 
   276  0093                     	;# 
   277  0094                     	;# 
   278  0098                     	;# 
   279  0099                     	;# 
   280  009C                     	;# 
   281  009D                     	;# 
   282  009E                     	;# 
   283  009F                     	;# 
   284  010C                     	;# 
   285  010D                     	;# 
   286  010E                     	;# 
   287  010F                     	;# 
   288  018C                     	;# 
   289  018D                     	;# 
   290  0000                     	;# 
   291  0001                     	;# 
   292  0002                     	;# 
   293  0003                     	;# 
   294  0004                     	;# 
   295  0005                     	;# 
   296  0006                     	;# 
   297  0007                     	;# 
   298  0008                     	;# 
   299  0009                     	;# 
   300  000A                     	;# 
   301  000B                     	;# 
   302  000C                     	;# 
   303  000D                     	;# 
   304  000E                     	;# 
   305  000E                     	;# 
   306  000F                     	;# 
   307  0010                     	;# 
   308  0011                     	;# 
   309  0012                     	;# 
   310  0013                     	;# 
   311  0014                     	;# 
   312  0015                     	;# 
   313  0015                     	;# 
   314  0016                     	;# 
   315  0017                     	;# 
   316  0018                     	;# 
   317  0019                     	;# 
   318  001A                     	;# 
   319  001B                     	;# 
   320  001B                     	;# 
   321  001C                     	;# 
   322  001D                     	;# 
   323  001E                     	;# 
   324  001F                     	;# 
   325  0081                     	;# 
   326  0085                     	;# 
   327  0086                     	;# 
   328  0087                     	;# 
   329  0088                     	;# 
   330  0089                     	;# 
   331  008C                     	;# 
   332  008D                     	;# 
   333  008E                     	;# 
   334  0091                     	;# 
   335  0092                     	;# 
   336  0093                     	;# 
   337  0094                     	;# 
   338  0098                     	;# 
   339  0099                     	;# 
   340  009C                     	;# 
   341  009D                     	;# 
   342  009E                     	;# 
   343  009F                     	;# 
   344  010C                     	;# 
   345  010D                     	;# 
   346  010E                     	;# 
   347  010F                     	;# 
   348  018C                     	;# 
   349  018D                     	;# 
   350                           
   351                           	psect	idataBANK0
   352  07FD                     __pidataBANK0:	
   353                           
   354                           ;initializer for _channel
   355  07FD  3401               	retlw	1
   356                           
   357                           ;initializer for _id
   358  07FE  341C               	retlw	28
   359                           
   360                           ;initializer for _receivedData
   361  07FF  3458               	retlw	88
   362                           
   363                           	psect	strings
   364  070C                     __pstrings:	
   365  070C                     stringtab:	
   366  070C                     __stringtab:	
   367  070C                     stringcode:	
   368                           ;	String table - string pointers are 1 byte each
   369                           
   370  070C                     stringdir:	
   371  070C  3007               	movlw	high stringdir
   372  070D  008A               	movwf	10
   373  070E  0804               	movf	4,w
   374  070F  0A84               	incf	4,f
   375  0710  0782               	addwf	2,f
   376  0711                     __stringbase:	
   377  0711  3400               	retlw	0
   378  0712                     __end_of__stringtab:	
   379  0712                     _dpowers:	
   380  0712  3401               	retlw	1
   381  0713  3400               	retlw	0
   382  0714  340A               	retlw	10
   383  0715  3400               	retlw	0
   384  0716  3464               	retlw	100
   385  0717  3400               	retlw	0
   386  0718  34E8               	retlw	232
   387  0719  3403               	retlw	3
   388  071A  3410               	retlw	16
   389  071B  3427               	retlw	39
   390  071C                     __end_of_dpowers:	
   391  071C                     _hexpowers:	
   392  071C  3401               	retlw	1
   393  071D  3400               	retlw	0
   394  071E  3410               	retlw	16
   395  071F  3400               	retlw	0
   396  0720  3400               	retlw	0
   397  0721  3401               	retlw	1
   398  0722  3400               	retlw	0
   399  0723  3410               	retlw	16
   400  0724                     __end_of_hexpowers:	
   401  001F                     _ADCON0bits	set	31
   402  001E                     _ADRESH	set	30
   403  000B                     _INTCONbits	set	11
   404  000C                     _PIR1bits	set	12
   405  0008                     _PORTDbits	set	8
   406  001A                     _RCREG	set	26
   407  0013                     _SSPBUF	set	19
   408  0019                     _TXREG	set	25
   409  00FE                     _ADCS0	set	254
   410  00FF                     _ADCS1	set	255
   411  00A4                     _CKP	set	164
   412  00C4                     _CREN	set	196
   413  00C2                     _FERR	set	194
   414  005F                     _GIE	set	95
   415  00C1                     _OERR	set	193
   416  005E                     _PEIE	set	94
   417  0065                     _RCIF	set	101
   418  00C6                     _RX9	set	198
   419  00C7                     _SPEN	set	199
   420  00A5                     _SSPEN	set	165
   421  0063                     _SSPIF	set	99
   422  00A0                     _SSPM0	set	160
   423  00A1                     _SSPM1	set	161
   424  00A2                     _SSPM2	set	162
   425  00A3                     _SSPM3	set	163
   426  00A6                     _SSPOV	set	166
   427  0064                     _TXIF	set	100
   428  00A7                     _WCOL	set	167
   429  009F                     _ADCON1bits	set	159
   430  009E                     _ADRESL	set	158
   431  0081                     _OPTION_REGbits	set	129
   432  008C                     _PIE1bits	set	140
   433  0099                     _SPBRG	set	153
   434  0093                     _SSPADD	set	147
   435  0091                     _SSPCON2	set	145
   436  0091                     _SSPCON2bits	set	145
   437  0094                     _SSPSTAT	set	148
   438  0094                     _SSPSTATbits	set	148
   439  0088                     _TRISDbits	set	136
   440  04FE                     _ADCS2	set	1278
   441  04FF                     _ADFM	set	1279
   442  04C2                     _BRGH	set	1218
   443  04C7                     _CSRC	set	1223
   444  0465                     _RCIE	set	1125
   445  04C4                     _SYNC	set	1220
   446  043B                     _TRISC3	set	1083
   447  043C                     _TRISC4	set	1084
   448  04C6                     _TX9	set	1222
   449  04C5                     _TXEN	set	1221
   450  0464                     _TXIE	set	1124
   451  0724                     STR_2:	
   452  0724  3425               	retlw	37	;'%'
   453  0725  3475               	retlw	117	;'u'
   454  0726  3426               	retlw	38	;'&'
   455  0727  3425               	retlw	37	;'%'
   456  0728  3475               	retlw	117	;'u'
   457  0729  3426               	retlw	38	;'&'
   458  072A  3432               	retlw	50	;'2'
   459  072B  3430               	retlw	48	;'0'
   460  072C  3425               	retlw	37	;'%'
   461  072D  3430               	retlw	48	;'0'
   462  072E  3432               	retlw	50	;'2'
   463  072F  3458               	retlw	88	;'X'
   464  0730  342D               	retlw	45	;'-'
   465  0731  3425               	retlw	37	;'%'
   466  0732  3430               	retlw	48	;'0'
   467  0733  3432               	retlw	50	;'2'
   468  0734  3458               	retlw	88	;'X'
   469  0735  342D               	retlw	45	;'-'
   470  0736  3425               	retlw	37	;'%'
   471  0737  3430               	retlw	48	;'0'
   472  0738  3432               	retlw	50	;'2'
   473  0739  3458               	retlw	88	;'X'
   474  073A  3420               	retlw	32	;' '
   475  073B  3425               	retlw	37	;'%'
   476  073C  3430               	retlw	48	;'0'
   477  073D  3432               	retlw	50	;'2'
   478  073E  3458               	retlw	88	;'X'
   479  073F  343A               	retlw	58	;':'
   480  0740  3425               	retlw	37	;'%'
   481  0741  3430               	retlw	48	;'0'
   482  0742  3432               	retlw	50	;'2'
   483  0743  3458               	retlw	88	;'X'
   484  0744  343A               	retlw	58	;':'
   485  0745  3425               	retlw	37	;'%'
   486  0746  3430               	retlw	48	;'0'
   487  0747  3432               	retlw	50	;'2'
   488  0748  3458               	retlw	88	;'X'
   489  0749  3400               	retlw	0
   490  074A                     STR_4:	
   491  074A  3430               	retlw	48	;'0'
   492  074B  3431               	retlw	49	;'1'
   493  074C  3432               	retlw	50	;'2'
   494  074D  3433               	retlw	51	;'3'
   495  074E  3434               	retlw	52	;'4'
   496  074F  3435               	retlw	53	;'5'
   497  0750  3436               	retlw	54	;'6'
   498  0751  3437               	retlw	55	;'7'
   499  0752  3438               	retlw	56	;'8'
   500  0753  3439               	retlw	57	;'9'
   501  0754  3441               	retlw	65	;'A'
   502  0755  3442               	retlw	66	;'B'
   503  0756  3443               	retlw	67	;'C'
   504  0757  3444               	retlw	68	;'D'
   505  0758  3445               	retlw	69	;'E'
   506  0759  3446               	retlw	70	;'F'
   507  075A  3400               	retlw	0
   508  075B                     STR_1:	
   509  075B  340A               	retlw	10
   510  075C  340D               	retlw	13
   511  075D  3400               	retlw	0
   512  075E                     STR_3:	
   513  075E  340A               	retlw	10
   514  075F  3400               	retlw	0
   515                           
   516                           ; #config settings
   517  0000                     
   518                           	psect	cinit
   519  0015                     start_initialization:	
   520  0015                     __initialization:	
   521                           
   522                           ; Clear objects allocated to BITBANK0
   523  0015  01D3               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   524                           
   525                           ; Clear objects allocated to BANK0
   526  0016  1383               	bcf	3,7	;select IRP bank0
   527  0017  3045               	movlw	low __pbssBANK0
   528  0018  0084               	movwf	4
   529  0019  3050               	movlw	low (__pbssBANK0+11)
   530  001A  120A  158A  2626  120A  118A  	fcall	clear_ram0
   531                           
   532                           ; Clear objects allocated to BANK1
   533  001F  30A0               	movlw	low __pbssBANK1
   534  0020  0084               	movwf	4
   535  0021  30D4               	movlw	low (__pbssBANK1+52)
   536  0022  120A  158A  2626  120A  118A  	fcall	clear_ram0
   537                           
   538                           ; Initialize objects allocated to BANK0
   539  0027  120A  118A  27FD  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   540  002C  00D0               	movwf	__pdataBANK0& (0+127)
   541  002D  120A  118A  27FE  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   542  0032  00D1               	movwf	(__pdataBANK0+1)& (0+127)
   543  0033  120A  118A  27FF   	fcall	__pidataBANK0+2	;fetch initializer
   544  0036  00D2               	movwf	(__pdataBANK0+2)& (0+127)
   545  0037                     end_of_initialization:	
   546                           ;End of C runtime variable initialization code
   547                           
   548  0037                     __end_of__initialization:	
   549  0037  0183               	clrf	3
   550  0038  120A  118A  2C57   	ljmp	_main	;jump to C main() function
   551                           
   552                           	psect	bitbssBANK0
   553  0298                     __pbitbssBANK0:	
   554  0298                     _changing:	
   555  0298                     	ds	1
   556  0299                     _hasAnError:	
   557  0299                     	ds	1
   558                           
   559                           	psect	bssBANK0
   560  0045                     __pbssBANK0:	
   561  0045                     _data_ADC:	
   562  0045                     	ds	2
   563  0047                     _ano:	
   564  0047                     	ds	1
   565  0048                     _contLedRD4:	
   566  0048                     	ds	1
   567  0049                     _dia:	
   568  0049                     	ds	1
   569  004A                     _hora:	
   570  004A                     	ds	1
   571  004B                     _i:	
   572  004B                     	ds	1
   573  004C                     _leitura:	
   574  004C                     	ds	1
   575  004D                     _mes:	
   576  004D                     	ds	1
   577  004E                     _minuto:	
   578  004E                     	ds	1
   579  004F                     _segundo:	
   580  004F                     	ds	1
   581                           
   582                           	psect	dataBANK0
   583  0050                     __pdataBANK0:	
   584  0050                     _channel:	
   585  0050                     	ds	1
   586  0051                     _id:	
   587  0051                     	ds	1
   588  0052                     _receivedData:	
   589  0052                     	ds	1
   590                           
   591                           	psect	bssBANK1
   592  00A0                     __pbssBANK1:	
   593  00A0                     _string:	
   594  00A0                     	ds	26
   595  00BA                     _string_aux:	
   596  00BA                     	ds	26
   597                           
   598                           	psect	clrtext
   599  0E26                     clear_ram0:	
   600                           ;	Called with FSR containing the base address, and
   601                           ;	W with the last address+1
   602                           
   603  0E26  0064               	clrwdt	;clear the watchdog before getting into this loop
   604  0E27                     clrloop0:	
   605  0E27  0180               	clrf	0	;clear RAM location pointed to by FSR
   606  0E28  0A84               	incf	4,f	;increment pointer
   607  0E29  0604               	xorwf	4,w	;XOR with final address
   608  0E2A  1903               	btfsc	3,2	;have we reached the end yet?
   609  0E2B  3400               	retlw	0	;all done for this memory range, return
   610  0E2C  0604               	xorwf	4,w	;XOR again to restore value
   611  0E2D  2E27               	goto	clrloop0	;do the next byte
   612                           
   613                           	psect	cstackBANK3
   614  0190                     __pcstackBANK3:	
   615  0190                     ??_main:	
   616                           
   617                           ; 0 bytes @ 0x0
   618  0190                     	ds	14
   619                           
   620                           	psect	cstackBANK1
   621  00D4                     __pcstackBANK1:	
   622  00D4                     ?_printf:	
   623                           
   624                           ; 2 bytes @ 0x0
   625  00D4                     	ds	16
   626  00E4                     printf@idx:	
   627                           
   628                           ; 1 bytes @ 0x10
   629  00E4                     	ds	1
   630  00E5                     printf@ap:	
   631                           
   632                           ; 1 bytes @ 0x11
   633  00E5                     	ds	1
   634  00E6                     printf@prec:	
   635                           
   636                           ; 1 bytes @ 0x12
   637  00E6                     	ds	1
   638  00E7                     printf@val:	
   639                           
   640                           ; 2 bytes @ 0x13
   641  00E7                     	ds	2
   642  00E9                     printf@flag:	
   643                           
   644                           ; 1 bytes @ 0x15
   645  00E9                     	ds	1
   646  00EA                     printf@f:	
   647                           
   648                           ; 1 bytes @ 0x16
   649  00EA                     	ds	1
   650  00EB                     printf@width:	
   651                           
   652                           ; 2 bytes @ 0x17
   653  00EB                     	ds	2
   654  00ED                     printf@c:	
   655                           
   656                           ; 1 bytes @ 0x19
   657  00ED                     	ds	1
   658                           
   659                           	psect	cstackCOMMON
   660  0070                     __pcstackCOMMON:	
   661  0070                     ?_isdigit:	
   662  0070                     ?_configADInterrupt:	
   663                           ; 1 bit 
   664                           
   665  0070                     ?_configAD:	
   666                           ; 0 bytes @ 0x0
   667                           
   668  0070                     ?_selectChanel:	
   669                           ; 0 bytes @ 0x0
   670                           
   671  0070                     ?_InitI2C_Master:	
   672                           ; 0 bytes @ 0x0
   673                           
   674  0070                     ?_I2C_Start:	
   675                           ; 0 bytes @ 0x0
   676                           
   677  0070                     ?_I2C_ReStart:	
   678                           ; 0 bytes @ 0x0
   679                           
   680  0070                     ?_I2C_Stop:	
   681                           ; 0 bytes @ 0x0
   682                           
   683  0070                     ?_I2C_Send_NACK:	
   684                           ; 0 bytes @ 0x0
   685                           
   686  0070                     ?_I2C_Write_Byte:	
   687                           ; 0 bytes @ 0x0
   688                           
   689  0070                     ?_I2C_Idle:	
   690                           ; 1 bit 
   691                           
   692  0070                     ?_configTimer:	
   693                           ; 0 bytes @ 0x0
   694                           
   695  0070                     ?_configRS232:	
   696                           ; 0 bytes @ 0x0
   697                           
   698  0070                     ?_configUSARTInterrupts:	
   699                           ; 0 bytes @ 0x0
   700                           
   701  0070                     ?_putch:	
   702                           ; 0 bytes @ 0x0
   703                           
   704  0070                     ?_interruptions:	
   705                           ; 0 bytes @ 0x0
   706                           
   707  0070                     ?_write_RTC_I2c:	
   708                           ; 0 bytes @ 0x0
   709                           
   710  0070                     ?_read_RTC_I2c:	
   711                           ; 0 bytes @ 0x0
   712                           
   713  0070                     ?_main:	
   714                           ; 0 bytes @ 0x0
   715                           
   716  0070                     ?i1_putch:	
   717                           ; 0 bytes @ 0x0
   718                           
   719  0070                     ??i1_putch:	
   720                           ; 0 bytes @ 0x0
   721                           
   722  0070                     ?i1_isdigit:	
   723                           ; 0 bytes @ 0x0
   724                           
   725  0070                     ??i1_isdigit:	
   726                           ; 1 bit 
   727                           
   728  0070                     ?_strcpy:	
   729                           ; 0 bytes @ 0x0
   730                           
   731  0070                     ?_I2C_Read_Byte:	
   732                           ; 1 bytes @ 0x0
   733                           
   734  0070                     ?___awmod:	
   735                           ; 1 bytes @ 0x0
   736                           
   737  0070                     ?i1_printf:	
   738                           ; 2 bytes @ 0x0
   739                           
   740  0070                     ?i1___wmul:	
   741                           ; 2 bytes @ 0x0
   742                           
   743  0070                     ?i1___lwdiv:	
   744                           ; 2 bytes @ 0x0
   745                           
   746  0070                     strcpy@from:	
   747                           ; 2 bytes @ 0x0
   748                           
   749  0070                     i1putch@byte:	
   750                           ; 1 bytes @ 0x0
   751                           
   752  0070                     i1_isdigit$864:	
   753                           ; 1 bytes @ 0x0
   754                           
   755  0070                     ___awmod@divisor:	
   756                           ; 1 bytes @ 0x0
   757                           
   758  0070                     i1___wmul@multiplier:	
   759                           ; 2 bytes @ 0x0
   760                           
   761  0070                     i1___lwdiv@divisor:	
   762                           ; 2 bytes @ 0x0
   763                           
   764                           
   765                           ; 2 bytes @ 0x0
   766  0070                     	ds	1
   767  0071                     ??_strcpy:	
   768  0071                     i1isdigit@c:	
   769                           ; 0 bytes @ 0x1
   770                           
   771                           
   772                           ; 1 bytes @ 0x1
   773  0071                     	ds	1
   774  0072                     strcpy@to:	
   775  0072                     ___awmod@dividend:	
   776                           ; 1 bytes @ 0x2
   777                           
   778  0072                     i1___wmul@multiplicand:	
   779                           ; 2 bytes @ 0x2
   780                           
   781  0072                     i1___lwdiv@dividend:	
   782                           ; 2 bytes @ 0x2
   783                           
   784                           
   785                           ; 2 bytes @ 0x2
   786  0072                     	ds	1
   787  0073                     strcpy@cp:	
   788                           
   789                           ; 1 bytes @ 0x3
   790  0073                     	ds	1
   791  0074                     ??___awmod:	
   792  0074                     ??i1___wmul:	
   793                           ; 0 bytes @ 0x4
   794                           
   795  0074                     ??i1___lwdiv:	
   796                           ; 0 bytes @ 0x4
   797                           
   798  0074                     i1___wmul@product:	
   799                           ; 0 bytes @ 0x4
   800                           
   801                           
   802                           ; 2 bytes @ 0x4
   803  0074                     	ds	1
   804  0075                     ___awmod@counter:	
   805  0075                     i1___lwdiv@quotient:	
   806                           ; 1 bytes @ 0x5
   807                           
   808                           
   809                           ; 2 bytes @ 0x5
   810  0075                     	ds	1
   811  0076                     ___awmod@sign:	
   812                           
   813                           ; 1 bytes @ 0x6
   814  0076                     	ds	1
   815  0077                     i1___lwdiv@counter:	
   816                           
   817                           ; 1 bytes @ 0x7
   818  0077                     	ds	1
   819  0078                     ?i1___lwmod:	
   820  0078                     i1___lwmod@divisor:	
   821                           ; 2 bytes @ 0x8
   822                           
   823                           
   824                           ; 2 bytes @ 0x8
   825  0078                     	ds	2
   826  007A                     i1___lwmod@dividend:	
   827                           
   828                           ; 2 bytes @ 0xA
   829  007A                     	ds	2
   830  007C                     ??i1___lwmod:	
   831                           
   832                           ; 0 bytes @ 0xC
   833  007C                     	ds	1
   834  007D                     i1___lwmod@counter:	
   835                           
   836                           ; 1 bytes @ 0xD
   837  007D                     	ds	1
   838                           
   839                           	psect	cstackBANK0
   840  0020                     __pcstackBANK0:	
   841  0020                     ??i1_printf:	
   842                           
   843                           ; 0 bytes @ 0x0
   844  0020                     	ds	3
   845  0023                     i1printf@idx:	
   846                           
   847                           ; 1 bytes @ 0x3
   848  0023                     	ds	1
   849  0024                     i1printf@f:	
   850                           
   851                           ; 1 bytes @ 0x4
   852  0024                     	ds	1
   853  0025                     i1printf@ap:	
   854                           
   855                           ; 1 bytes @ 0x5
   856  0025                     	ds	1
   857  0026                     i1printf@prec:	
   858                           
   859                           ; 1 bytes @ 0x6
   860  0026                     	ds	1
   861  0027                     i1printf@flag:	
   862                           
   863                           ; 1 bytes @ 0x7
   864  0027                     	ds	1
   865  0028                     i1printf@val:	
   866                           
   867                           ; 2 bytes @ 0x8
   868  0028                     	ds	2
   869  002A                     i1printf@width:	
   870                           
   871                           ; 2 bytes @ 0xA
   872  002A                     	ds	2
   873  002C                     i1printf@c:	
   874                           
   875                           ; 1 bytes @ 0xC
   876  002C                     	ds	1
   877  002D                     ??_interruptions:	
   878                           
   879                           ; 0 bytes @ 0xD
   880  002D                     	ds	7
   881  0034                     ??_isdigit:	
   882  0034                     ??_configADInterrupt:	
   883                           ; 0 bytes @ 0x14
   884                           
   885  0034                     ??_configAD:	
   886                           ; 0 bytes @ 0x14
   887                           
   888  0034                     ??_selectChanel:	
   889                           ; 0 bytes @ 0x14
   890                           
   891  0034                     ??_InitI2C_Master:	
   892                           ; 0 bytes @ 0x14
   893                           
   894  0034                     ??_I2C_Start:	
   895                           ; 0 bytes @ 0x14
   896                           
   897  0034                     ??_I2C_ReStart:	
   898                           ; 0 bytes @ 0x14
   899                           
   900  0034                     ??_I2C_Stop:	
   901                           ; 0 bytes @ 0x14
   902                           
   903  0034                     ??_I2C_Send_NACK:	
   904                           ; 0 bytes @ 0x14
   905                           
   906  0034                     ??_I2C_Write_Byte:	
   907                           ; 0 bytes @ 0x14
   908                           
   909  0034                     ??_I2C_Read_Byte:	
   910                           ; 0 bytes @ 0x14
   911                           
   912  0034                     ??_I2C_Idle:	
   913                           ; 0 bytes @ 0x14
   914                           
   915  0034                     ??_configTimer:	
   916                           ; 0 bytes @ 0x14
   917                           
   918  0034                     ??_configRS232:	
   919                           ; 0 bytes @ 0x14
   920                           
   921  0034                     ??_configUSARTInterrupts:	
   922                           ; 0 bytes @ 0x14
   923                           
   924  0034                     ??_putch:	
   925                           ; 0 bytes @ 0x14
   926                           
   927  0034                     ?___wmul:	
   928                           ; 0 bytes @ 0x14
   929                           
   930  0034                     ?___lwdiv:	
   931                           ; 2 bytes @ 0x14
   932                           
   933  0034                     selectChanel@channel:	
   934                           ; 2 bytes @ 0x14
   935                           
   936  0034                     I2C_Write_Byte@Byte:	
   937                           ; 1 bytes @ 0x14
   938                           
   939  0034                     putch@byte:	
   940                           ; 1 bytes @ 0x14
   941                           
   942  0034                     _isdigit$864:	
   943                           ; 1 bytes @ 0x14
   944                           
   945  0034                     ___wmul@multiplier:	
   946                           ; 1 bytes @ 0x14
   947                           
   948  0034                     ___lwdiv@divisor:	
   949                           ; 2 bytes @ 0x14
   950                           
   951                           
   952                           ; 2 bytes @ 0x14
   953  0034                     	ds	1
   954  0035                     ??_write_RTC_I2c:	
   955  0035                     ??_read_RTC_I2c:	
   956                           ; 0 bytes @ 0x15
   957                           
   958  0035                     isdigit@c:	
   959                           ; 0 bytes @ 0x15
   960                           
   961                           
   962                           ; 1 bytes @ 0x15
   963  0035                     	ds	1
   964  0036                     read_RTC_I2c@pos_memoria:	
   965  0036                     ___wmul@multiplicand:	
   966                           ; 1 bytes @ 0x16
   967                           
   968  0036                     ___lwdiv@dividend:	
   969                           ; 2 bytes @ 0x16
   970                           
   971                           
   972                           ; 2 bytes @ 0x16
   973  0036                     	ds	2
   974  0038                     ??___wmul:	
   975  0038                     ??___lwdiv:	
   976                           ; 0 bytes @ 0x18
   977                           
   978  0038                     ___wmul@product:	
   979                           ; 0 bytes @ 0x18
   980                           
   981                           
   982                           ; 2 bytes @ 0x18
   983  0038                     	ds	1
   984  0039                     ___lwdiv@quotient:	
   985                           
   986                           ; 2 bytes @ 0x19
   987  0039                     	ds	2
   988  003B                     ___lwdiv@counter:	
   989                           
   990                           ; 1 bytes @ 0x1B
   991  003B                     	ds	1
   992  003C                     ?___lwmod:	
   993  003C                     ___lwmod@divisor:	
   994                           ; 2 bytes @ 0x1C
   995                           
   996                           
   997                           ; 2 bytes @ 0x1C
   998  003C                     	ds	2
   999  003E                     ___lwmod@dividend:	
  1000                           
  1001                           ; 2 bytes @ 0x1E
  1002  003E                     	ds	2
  1003  0040                     ??___lwmod:	
  1004                           
  1005                           ; 0 bytes @ 0x20
  1006  0040                     	ds	1
  1007  0041                     ___lwmod@counter:	
  1008                           
  1009                           ; 1 bytes @ 0x21
  1010  0041                     	ds	1
  1011  0042                     ??_printf:	
  1012                           
  1013                           ; 0 bytes @ 0x22
  1014  0042                     	ds	3
  1015                           
  1016                           	psect	maintext
  1017  0457                     __pmaintext:	
  1018 ;;
  1019 ;;Main: autosize = 0, tempsize = 14, incstack = 0, save=0
  1020 ;;
  1021 ;; *************** function _main *****************
  1022 ;; Defined at:
  1023 ;;		line 138 in file "main.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;		None
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;		None
  1028 ;; Return value:  Size  Location     Type
  1029 ;;		None               void
  1030 ;; Registers used:
  1031 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1032 ;; Tracked objects:
  1033 ;;		On entry : B00/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1037 ;;      Params:         0       0       0       0       0
  1038 ;;      Locals:         0       0       0       0       0
  1039 ;;      Temps:          0       0       0      14       0
  1040 ;;      Totals:         0       0       0      14       0
  1041 ;;Total ram usage:       14 bytes
  1042 ;; Hardware stack levels required when called:    5
  1043 ;; This function calls:
  1044 ;;		_InitI2C_Master
  1045 ;;		_configAD
  1046 ;;		_configADInterrupt
  1047 ;;		_configRS232
  1048 ;;		_configTimer
  1049 ;;		_configUSARTInterrupts
  1050 ;;		_printf
  1051 ;;		_read_RTC_I2c
  1052 ;;		_selectChanel
  1053 ;;		_write_RTC_I2c
  1054 ;; This function is called by:
  1055 ;;		Startup code after reset
  1056 ;; This function uses a non-reentrant model
  1057 ;;
  1058                           
  1059                           
  1060                           ;psect for function _main
  1061  0457                     _main:	
  1062                           
  1063                           ;main.c: 139: TRISDbits.TRISD3 = 0;
  1064                           
  1065                           ;incstack = 0
  1066                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1067  0457  1683               	bsf	3,5	;RP0=1, select bank1
  1068  0458  1303               	bcf	3,6	;RP1=0, select bank1
  1069  0459  1188               	bcf	8,3	;volatile
  1070                           
  1071                           ;main.c: 141: configTimer();
  1072  045A  120A  158A  265E  120A  118A  	fcall	_configTimer
  1073                           
  1074                           ;main.c: 144: configADInterrupt();
  1075  045F  120A  158A  262E  120A  118A  	fcall	_configADInterrupt
  1076                           
  1077                           ;main.c: 145: configAD();
  1078  0464  120A  158A  2688  120A  118A  	fcall	_configAD
  1079                           
  1080                           ;main.c: 148: configRS232();
  1081  0469  120A  118A  27EC  120A  118A  	fcall	_configRS232
  1082                           
  1083                           ;main.c: 149: configUSARTInterrupts();
  1084  046E  120A  158A  2679  120A  118A  	fcall	_configUSARTInterrupts
  1085                           
  1086                           ;main.c: 152: InitI2C_Master();
  1087  0473  120A  158A  26C2  120A  118A  	fcall	_InitI2C_Master
  1088                           
  1089                           ;main.c: 155: selectChanel(channel);
  1090  0478  1283               	bcf	3,5	;RP0=0, select bank0
  1091  0479  1303               	bcf	3,6	;RP1=0, select bank0
  1092  047A  0850               	movf	_channel,w
  1093  047B  120A  118A  27AB  120A  118A  	fcall	_selectChanel
  1094                           
  1095                           ;main.c: 158: write_RTC_I2c();
  1096  0480  120A  118A  263F  120A  118A  	fcall	_write_RTC_I2c
  1097  0485                     l2314:	
  1098                           ;main.c: 159: while (1){
  1099                           
  1100                           
  1101                           ;main.c: 161: if(contLedRD4 == 76*2){
  1102  0485  3098               	movlw	152
  1103  0486  1283               	bcf	3,5	;RP0=0, select bank0
  1104  0487  1303               	bcf	3,6	;RP1=0, select bank0
  1105  0488  0648               	xorwf	_contLedRD4,w
  1106  0489  1D03               	btfss	3,2
  1107  048A  2C85               	goto	l2314
  1108                           
  1109                           ;main.c: 162: ADCON0bits.GO_DONE = 1;
  1110  048B  151F               	bsf	31,2	;volatile
  1111                           
  1112                           ;main.c: 164: read_RTC_I2c(0x04);
  1113  048C  3004               	movlw	4
  1114  048D  120A  118A  26B5  120A  118A  	fcall	_read_RTC_I2c
  1115                           
  1116                           ;main.c: 165: dia = leitura;
  1117  0492  1283               	bcf	3,5	;RP0=0, select bank0
  1118  0493  1303               	bcf	3,6	;RP1=0, select bank0
  1119  0494  084C               	movf	_leitura,w
  1120  0495  1683               	bsf	3,5	;RP0=1, select bank3
  1121  0496  1703               	bsf	3,6	;RP1=1, select bank3
  1122  0497  0090               	movwf	??_main^(0+384)
  1123  0498  0810               	movf	??_main^(0+384),w
  1124  0499  1283               	bcf	3,5	;RP0=0, select bank0
  1125  049A  1303               	bcf	3,6	;RP1=0, select bank0
  1126  049B  00C9               	movwf	_dia
  1127                           
  1128                           ;main.c: 166: _delay((unsigned long)((10)*(20000000/4000.0)));
  1129  049C  3041               	movlw	65
  1130  049D  1683               	bsf	3,5	;RP0=1, select bank3
  1131  049E  1703               	bsf	3,6	;RP1=1, select bank3
  1132  049F  0091               	movwf	(??_main^(0+384)+1)
  1133  04A0  30EE               	movlw	238
  1134  04A1  0090               	movwf	??_main^(0+384)
  1135  04A2                     u2457:	
  1136  04A2  0B90               	decfsz	??_main^(0+384),f
  1137  04A3  2CA2               	goto	u2457
  1138  04A4  0B91               	decfsz	(??_main^(0+384)+1),f
  1139  04A5  2CA2               	goto	u2457
  1140  04A6  0000               	nop
  1141                           
  1142                           ;main.c: 169: read_RTC_I2c(0x05);
  1143  04A7  3005               	movlw	5
  1144  04A8  120A  118A  26B5  120A  118A  	fcall	_read_RTC_I2c
  1145                           
  1146                           ;main.c: 170: mes = leitura;
  1147  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  1148  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  1149  04AF  084C               	movf	_leitura,w
  1150  04B0  1683               	bsf	3,5	;RP0=1, select bank3
  1151  04B1  1703               	bsf	3,6	;RP1=1, select bank3
  1152  04B2  0090               	movwf	??_main^(0+384)
  1153  04B3  0810               	movf	??_main^(0+384),w
  1154  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  1155  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  1156  04B6  00CD               	movwf	_mes
  1157                           
  1158                           ;main.c: 171: _delay((unsigned long)((10)*(20000000/4000.0)));
  1159  04B7  3041               	movlw	65
  1160  04B8  1683               	bsf	3,5	;RP0=1, select bank3
  1161  04B9  1703               	bsf	3,6	;RP1=1, select bank3
  1162  04BA  0091               	movwf	(??_main^(0+384)+1)
  1163  04BB  30EE               	movlw	238
  1164  04BC  0090               	movwf	??_main^(0+384)
  1165  04BD                     u2467:	
  1166  04BD  0B90               	decfsz	??_main^(0+384),f
  1167  04BE  2CBD               	goto	u2467
  1168  04BF  0B91               	decfsz	(??_main^(0+384)+1),f
  1169  04C0  2CBD               	goto	u2467
  1170  04C1  0000               	nop
  1171                           
  1172                           ;main.c: 174: read_RTC_I2c(0x06);
  1173  04C2  3006               	movlw	6
  1174  04C3  120A  118A  26B5  120A  118A  	fcall	_read_RTC_I2c
  1175                           
  1176                           ;main.c: 175: ano = leitura;
  1177  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  1178  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  1179  04CA  084C               	movf	_leitura,w
  1180  04CB  1683               	bsf	3,5	;RP0=1, select bank3
  1181  04CC  1703               	bsf	3,6	;RP1=1, select bank3
  1182  04CD  0090               	movwf	??_main^(0+384)
  1183  04CE  0810               	movf	??_main^(0+384),w
  1184  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  1185  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  1186  04D1  00C7               	movwf	_ano
  1187                           
  1188                           ;main.c: 176: _delay((unsigned long)((10)*(20000000/4000.0)));
  1189  04D2  3041               	movlw	65
  1190  04D3  1683               	bsf	3,5	;RP0=1, select bank3
  1191  04D4  1703               	bsf	3,6	;RP1=1, select bank3
  1192  04D5  0091               	movwf	(??_main^(0+384)+1)
  1193  04D6  30EE               	movlw	238
  1194  04D7  0090               	movwf	??_main^(0+384)
  1195  04D8                     u2477:	
  1196  04D8  0B90               	decfsz	??_main^(0+384),f
  1197  04D9  2CD8               	goto	u2477
  1198  04DA  0B91               	decfsz	(??_main^(0+384)+1),f
  1199  04DB  2CD8               	goto	u2477
  1200  04DC  0000               	nop
  1201                           
  1202                           ;main.c: 179: read_RTC_I2c(0x02);
  1203  04DD  3002               	movlw	2
  1204  04DE  120A  118A  26B5  120A  118A  	fcall	_read_RTC_I2c
  1205                           
  1206                           ;main.c: 180: hora = leitura;
  1207  04E3  1283               	bcf	3,5	;RP0=0, select bank0
  1208  04E4  1303               	bcf	3,6	;RP1=0, select bank0
  1209  04E5  084C               	movf	_leitura,w
  1210  04E6  1683               	bsf	3,5	;RP0=1, select bank3
  1211  04E7  1703               	bsf	3,6	;RP1=1, select bank3
  1212  04E8  0090               	movwf	??_main^(0+384)
  1213  04E9  0810               	movf	??_main^(0+384),w
  1214  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  1215  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  1216  04EC  00CA               	movwf	_hora
  1217                           
  1218                           ;main.c: 181: _delay((unsigned long)((10)*(20000000/4000.0)));
  1219  04ED  3041               	movlw	65
  1220  04EE  1683               	bsf	3,5	;RP0=1, select bank3
  1221  04EF  1703               	bsf	3,6	;RP1=1, select bank3
  1222  04F0  0091               	movwf	(??_main^(0+384)+1)
  1223  04F1  30EE               	movlw	238
  1224  04F2  0090               	movwf	??_main^(0+384)
  1225  04F3                     u2487:	
  1226  04F3  0B90               	decfsz	??_main^(0+384),f
  1227  04F4  2CF3               	goto	u2487
  1228  04F5  0B91               	decfsz	(??_main^(0+384)+1),f
  1229  04F6  2CF3               	goto	u2487
  1230  04F7  0000               	nop
  1231                           
  1232                           ;main.c: 184: read_RTC_I2c(0x01);
  1233  04F8  3001               	movlw	1
  1234  04F9  120A  118A  26B5  120A  118A  	fcall	_read_RTC_I2c
  1235                           
  1236                           ;main.c: 185: minuto = leitura;
  1237  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  1238  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  1239  0500  084C               	movf	_leitura,w
  1240  0501  1683               	bsf	3,5	;RP0=1, select bank3
  1241  0502  1703               	bsf	3,6	;RP1=1, select bank3
  1242  0503  0090               	movwf	??_main^(0+384)
  1243  0504  0810               	movf	??_main^(0+384),w
  1244  0505  1283               	bcf	3,5	;RP0=0, select bank0
  1245  0506  1303               	bcf	3,6	;RP1=0, select bank0
  1246  0507  00CE               	movwf	_minuto
  1247                           
  1248                           ;main.c: 186: _delay((unsigned long)((10)*(20000000/4000.0)));
  1249  0508  3041               	movlw	65
  1250  0509  1683               	bsf	3,5	;RP0=1, select bank3
  1251  050A  1703               	bsf	3,6	;RP1=1, select bank3
  1252  050B  0091               	movwf	(??_main^(0+384)+1)
  1253  050C  30EE               	movlw	238
  1254  050D  0090               	movwf	??_main^(0+384)
  1255  050E                     u2497:	
  1256  050E  0B90               	decfsz	??_main^(0+384),f
  1257  050F  2D0E               	goto	u2497
  1258  0510  0B91               	decfsz	(??_main^(0+384)+1),f
  1259  0511  2D0E               	goto	u2497
  1260  0512  0000               	nop
  1261                           
  1262                           ;main.c: 189: read_RTC_I2c(0x00);
  1263  0513  3000               	movlw	0
  1264  0514  120A  118A  26B5  120A  118A  	fcall	_read_RTC_I2c
  1265                           
  1266                           ;main.c: 190: segundo = leitura;
  1267  0519  1283               	bcf	3,5	;RP0=0, select bank0
  1268  051A  1303               	bcf	3,6	;RP1=0, select bank0
  1269  051B  084C               	movf	_leitura,w
  1270  051C  1683               	bsf	3,5	;RP0=1, select bank3
  1271  051D  1703               	bsf	3,6	;RP1=1, select bank3
  1272  051E  0090               	movwf	??_main^(0+384)
  1273  051F  0810               	movf	??_main^(0+384),w
  1274  0520  1283               	bcf	3,5	;RP0=0, select bank0
  1275  0521  1303               	bcf	3,6	;RP1=0, select bank0
  1276  0522  00CF               	movwf	_segundo
  1277                           
  1278                           ;main.c: 194: printf("%u&%u&20%02X-%02X-%02X %02X:%02X:%02X", id, data_ADC, ano, mes, di
      +                          a, hora, minuto, segundo);
  1279  0523  0851               	movf	_id,w
  1280  0524  1683               	bsf	3,5	;RP0=1, select bank3
  1281  0525  1703               	bsf	3,6	;RP1=1, select bank3
  1282  0526  0090               	movwf	??_main^(0+384)
  1283  0527  0191               	clrf	(??_main^(0+384)+1)
  1284  0528  0810               	movf	??_main^(0+384),w
  1285  0529  1683               	bsf	3,5	;RP0=1, select bank1
  1286  052A  1303               	bcf	3,6	;RP1=0, select bank1
  1287  052B  00D4               	movwf	?_printf^(0+128)
  1288  052C  1683               	bsf	3,5	;RP0=1, select bank3
  1289  052D  1703               	bsf	3,6	;RP1=1, select bank3
  1290  052E  0811               	movf	(??_main+1)^(0+384),w
  1291  052F  1683               	bsf	3,5	;RP0=1, select bank1
  1292  0530  1303               	bcf	3,6	;RP1=0, select bank1
  1293  0531  00D5               	movwf	(?_printf+1)^(0+128)
  1294  0532  1283               	bcf	3,5	;RP0=0, select bank0
  1295  0533  1303               	bcf	3,6	;RP1=0, select bank0
  1296  0534  0846               	movf	_data_ADC+1,w
  1297  0535  1683               	bsf	3,5	;RP0=1, select bank1
  1298  0536  1303               	bcf	3,6	;RP1=0, select bank1
  1299  0537  00D7               	movwf	((?_printf+1)^(0+128)+2)
  1300  0538  1283               	bcf	3,5	;RP0=0, select bank0
  1301  0539  1303               	bcf	3,6	;RP1=0, select bank0
  1302  053A  0845               	movf	_data_ADC,w
  1303  053B  1683               	bsf	3,5	;RP0=1, select bank1
  1304  053C  1303               	bcf	3,6	;RP1=0, select bank1
  1305  053D  00D6               	movwf	(?_printf^(0+128)+2)
  1306  053E  1283               	bcf	3,5	;RP0=0, select bank0
  1307  053F  1303               	bcf	3,6	;RP1=0, select bank0
  1308  0540  0847               	movf	_ano,w
  1309  0541  1683               	bsf	3,5	;RP0=1, select bank3
  1310  0542  1703               	bsf	3,6	;RP1=1, select bank3
  1311  0543  0092               	movwf	(??_main+2)^(0+384)
  1312  0544  0193               	clrf	((??_main+2)^(0+384)+1)
  1313  0545  0812               	movf	(??_main+2)^(0+384),w
  1314  0546  1683               	bsf	3,5	;RP0=1, select bank1
  1315  0547  1303               	bcf	3,6	;RP1=0, select bank1
  1316  0548  00D8               	movwf	(?_printf^(0+128)+4)
  1317  0549  1683               	bsf	3,5	;RP0=1, select bank3
  1318  054A  1703               	bsf	3,6	;RP1=1, select bank3
  1319  054B  0813               	movf	(??_main+3)^(0+384),w
  1320  054C  1683               	bsf	3,5	;RP0=1, select bank1
  1321  054D  1303               	bcf	3,6	;RP1=0, select bank1
  1322  054E  00D9               	movwf	((?_printf+1)^(0+128)+4)
  1323  054F  1283               	bcf	3,5	;RP0=0, select bank0
  1324  0550  1303               	bcf	3,6	;RP1=0, select bank0
  1325  0551  084D               	movf	_mes,w
  1326  0552  1683               	bsf	3,5	;RP0=1, select bank3
  1327  0553  1703               	bsf	3,6	;RP1=1, select bank3
  1328  0554  0094               	movwf	(??_main+4)^(0+384)
  1329  0555  0195               	clrf	((??_main+4)^(0+384)+1)
  1330  0556  0814               	movf	(??_main+4)^(0+384),w
  1331  0557  1683               	bsf	3,5	;RP0=1, select bank1
  1332  0558  1303               	bcf	3,6	;RP1=0, select bank1
  1333  0559  00DA               	movwf	(?_printf^(0+128)+6)
  1334  055A  1683               	bsf	3,5	;RP0=1, select bank3
  1335  055B  1703               	bsf	3,6	;RP1=1, select bank3
  1336  055C  0815               	movf	(??_main+5)^(0+384),w
  1337  055D  1683               	bsf	3,5	;RP0=1, select bank1
  1338  055E  1303               	bcf	3,6	;RP1=0, select bank1
  1339  055F  00DB               	movwf	((?_printf+1)^(0+128)+6)
  1340  0560  1283               	bcf	3,5	;RP0=0, select bank0
  1341  0561  1303               	bcf	3,6	;RP1=0, select bank0
  1342  0562  0849               	movf	_dia,w
  1343  0563  1683               	bsf	3,5	;RP0=1, select bank3
  1344  0564  1703               	bsf	3,6	;RP1=1, select bank3
  1345  0565  0096               	movwf	(??_main+6)^(0+384)
  1346  0566  0197               	clrf	((??_main+6)^(0+384)+1)
  1347  0567  0816               	movf	(??_main+6)^(0+384),w
  1348  0568  1683               	bsf	3,5	;RP0=1, select bank1
  1349  0569  1303               	bcf	3,6	;RP1=0, select bank1
  1350  056A  00DC               	movwf	(?_printf^(0+128)+8)
  1351  056B  1683               	bsf	3,5	;RP0=1, select bank3
  1352  056C  1703               	bsf	3,6	;RP1=1, select bank3
  1353  056D  0817               	movf	(??_main+7)^(0+384),w
  1354  056E  1683               	bsf	3,5	;RP0=1, select bank1
  1355  056F  1303               	bcf	3,6	;RP1=0, select bank1
  1356  0570  00DD               	movwf	((?_printf+1)^(0+128)+8)
  1357  0571  1283               	bcf	3,5	;RP0=0, select bank0
  1358  0572  1303               	bcf	3,6	;RP1=0, select bank0
  1359  0573  084A               	movf	_hora,w
  1360  0574  1683               	bsf	3,5	;RP0=1, select bank3
  1361  0575  1703               	bsf	3,6	;RP1=1, select bank3
  1362  0576  0098               	movwf	(??_main+8)^(0+384)
  1363  0577  0199               	clrf	((??_main+8)^(0+384)+1)
  1364  0578  0818               	movf	(??_main+8)^(0+384),w
  1365  0579  1683               	bsf	3,5	;RP0=1, select bank1
  1366  057A  1303               	bcf	3,6	;RP1=0, select bank1
  1367  057B  00DE               	movwf	(?_printf^(0+128)+10)
  1368  057C  1683               	bsf	3,5	;RP0=1, select bank3
  1369  057D  1703               	bsf	3,6	;RP1=1, select bank3
  1370  057E  0819               	movf	(??_main+9)^(0+384),w
  1371  057F  1683               	bsf	3,5	;RP0=1, select bank1
  1372  0580  1303               	bcf	3,6	;RP1=0, select bank1
  1373  0581  00DF               	movwf	((?_printf+1)^(0+128)+10)
  1374  0582  1283               	bcf	3,5	;RP0=0, select bank0
  1375  0583  1303               	bcf	3,6	;RP1=0, select bank0
  1376  0584  084E               	movf	_minuto,w
  1377  0585  1683               	bsf	3,5	;RP0=1, select bank3
  1378  0586  1703               	bsf	3,6	;RP1=1, select bank3
  1379  0587  009A               	movwf	(??_main+10)^(0+384)
  1380  0588  019B               	clrf	((??_main+10)^(0+384)+1)
  1381  0589  081A               	movf	(??_main+10)^(0+384),w
  1382  058A  1683               	bsf	3,5	;RP0=1, select bank1
  1383  058B  1303               	bcf	3,6	;RP1=0, select bank1
  1384  058C  00E0               	movwf	(?_printf^(0+128)+12)
  1385  058D  1683               	bsf	3,5	;RP0=1, select bank3
  1386  058E  1703               	bsf	3,6	;RP1=1, select bank3
  1387  058F  081B               	movf	(??_main+11)^(0+384),w
  1388  0590  1683               	bsf	3,5	;RP0=1, select bank1
  1389  0591  1303               	bcf	3,6	;RP1=0, select bank1
  1390  0592  00E1               	movwf	((?_printf+1)^(0+128)+12)
  1391  0593  1283               	bcf	3,5	;RP0=0, select bank0
  1392  0594  1303               	bcf	3,6	;RP1=0, select bank0
  1393  0595  084F               	movf	_segundo,w
  1394  0596  1683               	bsf	3,5	;RP0=1, select bank3
  1395  0597  1703               	bsf	3,6	;RP1=1, select bank3
  1396  0598  009C               	movwf	(??_main+12)^(0+384)
  1397  0599  019D               	clrf	((??_main+12)^(0+384)+1)
  1398  059A  081C               	movf	(??_main+12)^(0+384),w
  1399  059B  1683               	bsf	3,5	;RP0=1, select bank1
  1400  059C  1303               	bcf	3,6	;RP1=0, select bank1
  1401  059D  00E2               	movwf	(?_printf^(0+128)+14)
  1402  059E  1683               	bsf	3,5	;RP0=1, select bank3
  1403  059F  1703               	bsf	3,6	;RP1=1, select bank3
  1404  05A0  081D               	movf	(??_main+13)^(0+384),w
  1405  05A1  1683               	bsf	3,5	;RP0=1, select bank1
  1406  05A2  1303               	bcf	3,6	;RP1=0, select bank1
  1407  05A3  00E3               	movwf	((?_printf+1)^(0+128)+14)
  1408  05A4  3013               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1409  05A5  120A  118A  203B  120A  118A  	fcall	_printf
  1410                           
  1411                           ;main.c: 196: _delay((unsigned long)((10)*(20000000/4000.0)));
  1412  05AA  3041               	movlw	65
  1413  05AB  1683               	bsf	3,5	;RP0=1, select bank3
  1414  05AC  1703               	bsf	3,6	;RP1=1, select bank3
  1415  05AD  0091               	movwf	(??_main^(0+384)+1)
  1416  05AE  30EE               	movlw	238
  1417  05AF  0090               	movwf	??_main^(0+384)
  1418  05B0                     u2507:	
  1419  05B0  0B90               	decfsz	??_main^(0+384),f
  1420  05B1  2DB0               	goto	u2507
  1421  05B2  0B91               	decfsz	(??_main^(0+384)+1),f
  1422  05B3  2DB0               	goto	u2507
  1423  05B4  0000               	nop
  1424                           
  1425                           ;main.c: 198: printf("\n");
  1426  05B5  304D               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1427  05B6  120A  118A  203B  120A  118A  	fcall	_printf
  1428                           
  1429                           ;main.c: 199: PORTDbits.RD3 = changing;
  1430  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  1431  05BC  1303               	bcf	3,6	;RP1=0, select bank0
  1432  05BD  1C53               	btfss	_changing/(0+8),_changing& (0+7)
  1433  05BE  2DC3               	goto	u2430
  1434  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  1435  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  1436  05C1  1588               	bsf	8,3	;volatile
  1437  05C2  2DC6               	goto	l2350
  1438  05C3                     u2430:	
  1439  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  1440  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  1441  05C5  1188               	bcf	8,3	;volatile
  1442  05C6                     l2350:	
  1443                           
  1444                           ;main.c: 200: contLedRD4 = 0;
  1445  05C6  01C8               	clrf	_contLedRD4
  1446  05C7  2C85               	goto	l2314
  1447  05C8                     __end_of_main:	
  1448                           
  1449                           	psect	text1
  1450  063F                     __ptext1:	
  1451 ;; *************** function _write_RTC_I2c *****************
  1452 ;; Defined at:
  1453 ;;		line 84 in file "main.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;		None
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;		None
  1458 ;; Return value:  Size  Location     Type
  1459 ;;		None               void
  1460 ;; Registers used:
  1461 ;;		wreg, status,2, status,0, pclath, cstack
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1467 ;;      Params:         0       0       0       0       0
  1468 ;;      Locals:         0       0       0       0       0
  1469 ;;      Temps:          0       0       0       0       0
  1470 ;;      Totals:         0       0       0       0       0
  1471 ;;Total ram usage:        0 bytes
  1472 ;; Hardware stack levels used:    1
  1473 ;; Hardware stack levels required when called:    4
  1474 ;; This function calls:
  1475 ;;		_I2C_Idle
  1476 ;;		_I2C_Start
  1477 ;;		_I2C_Stop
  1478 ;;		_I2C_Write_Byte
  1479 ;; This function is called by:
  1480 ;;		_main
  1481 ;; This function uses a non-reentrant model
  1482 ;;
  1483                           
  1484                           
  1485                           ;psect for function _write_RTC_I2c
  1486  063F                     _write_RTC_I2c:	
  1487                           
  1488                           ;main.c: 86: I2C_Idle();
  1489                           
  1490                           ;incstack = 0
  1491                           ; Regs used in _write_RTC_I2c: [wreg+status,2+status,0+pclath+cstack]
  1492  063F  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1493                           
  1494                           ;main.c: 87: I2C_Start();
  1495  0644  120A  158A  2616  120A  118A  	fcall	_I2C_Start
  1496                           
  1497                           ;main.c: 88: I2C_Idle();
  1498  0649  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1499                           
  1500                           ;main.c: 89: I2C_Write_Byte(0xD0);
  1501  064E  30D0               	movlw	208
  1502  064F  120A  158A  2652  120A  118A  	fcall	_I2C_Write_Byte
  1503                           
  1504                           ;main.c: 90: I2C_Idle();
  1505  0654  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1506                           
  1507                           ;main.c: 91: I2C_Write_Byte(0x00);
  1508  0659  3000               	movlw	0
  1509  065A  120A  158A  2652  120A  118A  	fcall	_I2C_Write_Byte
  1510                           
  1511                           ;main.c: 92: I2C_Idle();
  1512  065F  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1513                           
  1514                           ;main.c: 95: I2C_Write_Byte(0x00);
  1515  0664  3000               	movlw	0
  1516  0665  120A  158A  2652  120A  118A  	fcall	_I2C_Write_Byte
  1517                           
  1518                           ;main.c: 96: I2C_Idle();
  1519  066A  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1520                           
  1521                           ;main.c: 98: I2C_Write_Byte(0x30);
  1522  066F  3030               	movlw	48
  1523  0670  120A  158A  2652  120A  118A  	fcall	_I2C_Write_Byte
  1524                           
  1525                           ;main.c: 99: I2C_Idle();
  1526  0675  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1527                           
  1528                           ;main.c: 101: I2C_Write_Byte(0x14);
  1529  067A  3014               	movlw	20
  1530  067B  120A  158A  2652  120A  118A  	fcall	_I2C_Write_Byte
  1531                           
  1532                           ;main.c: 102: I2C_Idle();
  1533  0680  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1534                           
  1535                           ;main.c: 104: I2C_Write_Byte(0x04);
  1536  0685  3004               	movlw	4
  1537  0686  120A  158A  2652  120A  118A  	fcall	_I2C_Write_Byte
  1538                           
  1539                           ;main.c: 105: I2C_Idle();
  1540  068B  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1541                           
  1542                           ;main.c: 107: I2C_Write_Byte(0x22);
  1543  0690  3022               	movlw	34
  1544  0691  120A  158A  2652  120A  118A  	fcall	_I2C_Write_Byte
  1545                           
  1546                           ;main.c: 108: I2C_Idle();
  1547  0696  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1548                           
  1549                           ;main.c: 110: I2C_Write_Byte(0x01);
  1550  069B  3001               	movlw	1
  1551  069C  120A  158A  2652  120A  118A  	fcall	_I2C_Write_Byte
  1552                           
  1553                           ;main.c: 111: I2C_Idle();
  1554  06A1  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1555                           
  1556                           ;main.c: 113: I2C_Write_Byte(0x16);
  1557  06A6  3016               	movlw	22
  1558  06A7  120A  158A  2652  120A  118A  	fcall	_I2C_Write_Byte
  1559                           
  1560                           ;main.c: 114: I2C_Idle();
  1561  06AC  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1562                           
  1563                           ;main.c: 115: I2C_Stop();
  1564  06B1  120A  158A  261E   	fcall	_I2C_Stop
  1565  06B4  0008               	return
  1566  06B5                     __end_of_write_RTC_I2c:	
  1567                           
  1568                           	psect	text2
  1569  07AB                     __ptext2:	
  1570 ;; *************** function _selectChanel *****************
  1571 ;; Defined at:
  1572 ;;		line 53 in file "ad.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;  channel         1    wreg     unsigned char 
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;  channel         1   20[BANK0 ] unsigned char 
  1577 ;; Return value:  Size  Location     Type
  1578 ;;		None               void
  1579 ;; Registers used:
  1580 ;;		wreg, status,2, status,0
  1581 ;; Tracked objects:
  1582 ;;		On entry : 0/0
  1583 ;;		On exit  : 0/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1586 ;;      Params:         0       0       0       0       0
  1587 ;;      Locals:         0       1       0       0       0
  1588 ;;      Temps:          0       0       0       0       0
  1589 ;;      Totals:         0       1       0       0       0
  1590 ;;Total ram usage:        1 bytes
  1591 ;; Hardware stack levels used:    1
  1592 ;; Hardware stack levels required when called:    3
  1593 ;; This function calls:
  1594 ;;		Nothing
  1595 ;; This function is called by:
  1596 ;;		_main
  1597 ;; This function uses a non-reentrant model
  1598 ;;
  1599                           
  1600                           
  1601                           ;psect for function _selectChanel
  1602  07AB                     _selectChanel:	
  1603                           
  1604                           ;incstack = 0
  1605                           ; Regs used in _selectChanel: [wreg+status,2+status,0]
  1606                           ;selectChanel@channel stored from wreg
  1607  07AB  1283               	bcf	3,5	;RP0=0, select bank0
  1608  07AC  1303               	bcf	3,6	;RP1=0, select bank0
  1609  07AD  00B4               	movwf	selectChanel@channel
  1610                           
  1611                           ;ad.c: 54: if(channel == 0){
  1612  07AE  0834               	movf	selectChanel@channel,w
  1613  07AF  1D03               	btfss	3,2
  1614  07B0  2FB5               	goto	l1738
  1615                           
  1616                           ;ad.c: 55: ADCON0bits.CHS2 = 0;
  1617  07B1  129F               	bcf	31,5	;volatile
  1618                           
  1619                           ;ad.c: 56: ADCON0bits.CHS1 = 0;
  1620  07B2  121F               	bcf	31,4	;volatile
  1621                           
  1622                           ;ad.c: 57: ADCON0bits.CHS0 = 0;
  1623  07B3  119F               	bcf	31,3	;volatile
  1624                           
  1625                           ;ad.c: 58: }
  1626  07B4  0008               	return
  1627  07B5                     l1738:	
  1628                           
  1629                           ;ad.c: 59: else if(channel == 1){
  1630  07B5  0334               	decf	selectChanel@channel,w
  1631  07B6  1D03               	btfss	3,2
  1632  07B7  2FBC               	goto	l1742
  1633                           
  1634                           ;ad.c: 60: ADCON0bits.CHS2 = 0;
  1635  07B8  129F               	bcf	31,5	;volatile
  1636                           
  1637                           ;ad.c: 61: ADCON0bits.CHS1 = 0;
  1638  07B9  121F               	bcf	31,4	;volatile
  1639                           
  1640                           ;ad.c: 62: ADCON0bits.CHS0 = 1;
  1641  07BA  159F               	bsf	31,3	;volatile
  1642                           
  1643                           ;ad.c: 63: }
  1644  07BB  0008               	return
  1645  07BC                     l1742:	
  1646                           
  1647                           ;ad.c: 64: else if(channel == 2){
  1648  07BC  3002               	movlw	2
  1649  07BD  0634               	xorwf	selectChanel@channel,w
  1650  07BE  1D03               	btfss	3,2
  1651  07BF  2FC4               	goto	l1746
  1652                           
  1653                           ;ad.c: 65: ADCON0bits.CHS2 = 0;
  1654  07C0  129F               	bcf	31,5	;volatile
  1655                           
  1656                           ;ad.c: 66: ADCON0bits.CHS1 = 1;
  1657  07C1  161F               	bsf	31,4	;volatile
  1658                           
  1659                           ;ad.c: 67: ADCON0bits.CHS0 = 0;
  1660  07C2  119F               	bcf	31,3	;volatile
  1661                           
  1662                           ;ad.c: 68: }
  1663  07C3  0008               	return
  1664  07C4                     l1746:	
  1665                           
  1666                           ;ad.c: 69: else if(channel == 3){
  1667  07C4  3003               	movlw	3
  1668  07C5  0634               	xorwf	selectChanel@channel,w
  1669  07C6  1D03               	btfss	3,2
  1670  07C7  2FCC               	goto	l1750
  1671                           
  1672                           ;ad.c: 70: ADCON0bits.CHS2 = 0;
  1673  07C8  129F               	bcf	31,5	;volatile
  1674                           
  1675                           ;ad.c: 71: ADCON0bits.CHS1 = 1;
  1676  07C9  161F               	bsf	31,4	;volatile
  1677                           
  1678                           ;ad.c: 72: ADCON0bits.CHS0 = 1;
  1679  07CA  159F               	bsf	31,3	;volatile
  1680                           
  1681                           ;ad.c: 73: }
  1682  07CB  0008               	return
  1683  07CC                     l1750:	
  1684                           
  1685                           ;ad.c: 74: else if(channel == 4){
  1686  07CC  3004               	movlw	4
  1687  07CD  0634               	xorwf	selectChanel@channel,w
  1688  07CE  1D03               	btfss	3,2
  1689  07CF  2FD4               	goto	l1754
  1690                           
  1691                           ;ad.c: 75: ADCON0bits.CHS2 = 1;
  1692  07D0  169F               	bsf	31,5	;volatile
  1693                           
  1694                           ;ad.c: 76: ADCON0bits.CHS1 = 0;
  1695  07D1  121F               	bcf	31,4	;volatile
  1696                           
  1697                           ;ad.c: 77: ADCON0bits.CHS0 = 0;
  1698  07D2  119F               	bcf	31,3	;volatile
  1699                           
  1700                           ;ad.c: 78: }
  1701  07D3  0008               	return
  1702  07D4                     l1754:	
  1703                           
  1704                           ;ad.c: 79: else if(channel == 5){
  1705  07D4  3005               	movlw	5
  1706  07D5  0634               	xorwf	selectChanel@channel,w
  1707  07D6  1D03               	btfss	3,2
  1708  07D7  2FDC               	goto	l1758
  1709                           
  1710                           ;ad.c: 80: ADCON0bits.CHS2 = 1;
  1711  07D8  169F               	bsf	31,5	;volatile
  1712                           
  1713                           ;ad.c: 81: ADCON0bits.CHS1 = 0;
  1714  07D9  121F               	bcf	31,4	;volatile
  1715                           
  1716                           ;ad.c: 82: ADCON0bits.CHS0 = 1;
  1717  07DA  159F               	bsf	31,3	;volatile
  1718                           
  1719                           ;ad.c: 83: }
  1720  07DB  0008               	return
  1721  07DC                     l1758:	
  1722                           
  1723                           ;ad.c: 84: else if(channel == 6){
  1724  07DC  3006               	movlw	6
  1725  07DD  0634               	xorwf	selectChanel@channel,w
  1726  07DE  1D03               	btfss	3,2
  1727  07DF  2FE4               	goto	l1762
  1728                           
  1729                           ;ad.c: 85: ADCON0bits.CHS2 = 1;
  1730  07E0  169F               	bsf	31,5	;volatile
  1731                           
  1732                           ;ad.c: 86: ADCON0bits.CHS1 = 1;
  1733  07E1  161F               	bsf	31,4	;volatile
  1734                           
  1735                           ;ad.c: 87: ADCON0bits.CHS0 = 0;
  1736  07E2  119F               	bcf	31,3	;volatile
  1737                           
  1738                           ;ad.c: 88: }
  1739  07E3  0008               	return
  1740  07E4                     l1762:	
  1741                           
  1742                           ;ad.c: 89: else if(channel == 7){
  1743  07E4  3007               	movlw	7
  1744  07E5  0634               	xorwf	selectChanel@channel,w
  1745  07E6  1D03               	btfss	3,2
  1746  07E7  0008               	return
  1747                           
  1748                           ;ad.c: 90: ADCON0bits.CHS2 = 1;
  1749  07E8  169F               	bsf	31,5	;volatile
  1750                           
  1751                           ;ad.c: 91: ADCON0bits.CHS1 = 1;
  1752  07E9  161F               	bsf	31,4	;volatile
  1753                           
  1754                           ;ad.c: 92: ADCON0bits.CHS0 = 1;
  1755  07EA  159F               	bsf	31,3	;volatile
  1756  07EB  0008               	return
  1757  07EC                     __end_of_selectChanel:	
  1758                           
  1759                           	psect	text3
  1760  06B5                     __ptext3:	
  1761 ;; *************** function _read_RTC_I2c *****************
  1762 ;; Defined at:
  1763 ;;		line 118 in file "main.c"
  1764 ;; Parameters:    Size  Location     Type
  1765 ;;  pos_memoria     1    wreg     unsigned char 
  1766 ;; Auto vars:     Size  Location     Type
  1767 ;;  pos_memoria     1   22[BANK0 ] unsigned char 
  1768 ;; Return value:  Size  Location     Type
  1769 ;;		None               void
  1770 ;; Registers used:
  1771 ;;		wreg, status,2, status,0, pclath, cstack
  1772 ;; Tracked objects:
  1773 ;;		On entry : 0/0
  1774 ;;		On exit  : 0/0
  1775 ;;		Unchanged: 0/0
  1776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1777 ;;      Params:         0       0       0       0       0
  1778 ;;      Locals:         0       1       0       0       0
  1779 ;;      Temps:          0       1       0       0       0
  1780 ;;      Totals:         0       2       0       0       0
  1781 ;;Total ram usage:        2 bytes
  1782 ;; Hardware stack levels used:    1
  1783 ;; Hardware stack levels required when called:    4
  1784 ;; This function calls:
  1785 ;;		_I2C_Idle
  1786 ;;		_I2C_ReStart
  1787 ;;		_I2C_Read_Byte
  1788 ;;		_I2C_Send_NACK
  1789 ;;		_I2C_Start
  1790 ;;		_I2C_Stop
  1791 ;;		_I2C_Write_Byte
  1792 ;; This function is called by:
  1793 ;;		_main
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797                           
  1798                           ;psect for function _read_RTC_I2c
  1799  06B5                     _read_RTC_I2c:	
  1800                           
  1801                           ;incstack = 0
  1802                           ; Regs used in _read_RTC_I2c: [wreg+status,2+status,0+pclath+cstack]
  1803                           ;read_RTC_I2c@pos_memoria stored from wreg
  1804  06B5  1283               	bcf	3,5	;RP0=0, select bank0
  1805  06B6  1303               	bcf	3,6	;RP1=0, select bank0
  1806  06B7  00B6               	movwf	read_RTC_I2c@pos_memoria
  1807                           
  1808                           ;main.c: 120: I2C_Idle();
  1809  06B8  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1810                           
  1811                           ;main.c: 121: I2C_Start();
  1812  06BD  120A  158A  2616  120A  118A  	fcall	_I2C_Start
  1813                           
  1814                           ;main.c: 122: I2C_Idle();
  1815  06C2  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1816                           
  1817                           ;main.c: 123: I2C_Write_Byte(0xD0);
  1818  06C7  30D0               	movlw	208
  1819  06C8  120A  158A  2652  120A  118A  	fcall	_I2C_Write_Byte
  1820                           
  1821                           ;main.c: 124: I2C_Idle();
  1822  06CD  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1823                           
  1824                           ;main.c: 125: I2C_Write_Byte(pos_memoria);
  1825  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  1826  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  1827  06D4  0836               	movf	read_RTC_I2c@pos_memoria,w
  1828  06D5  120A  158A  2652  120A  118A  	fcall	_I2C_Write_Byte
  1829                           
  1830                           ;main.c: 126: I2C_Idle();
  1831  06DA  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1832                           
  1833                           ;main.c: 127: I2C_ReStart();
  1834  06DF  120A  158A  260E  120A  118A  	fcall	_I2C_ReStart
  1835                           
  1836                           ;main.c: 128: I2C_Idle();
  1837  06E4  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1838                           
  1839                           ;main.c: 129: I2C_Write_Byte(0xD1);
  1840  06E9  30D1               	movlw	209
  1841  06EA  120A  158A  2652  120A  118A  	fcall	_I2C_Write_Byte
  1842                           
  1843                           ;main.c: 130: I2C_Idle();
  1844  06EF  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1845                           
  1846                           ;main.c: 131: leitura = I2C_Read_Byte();
  1847  06F4  120A  158A  2640  120A  118A  	fcall	_I2C_Read_Byte
  1848  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  1849  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  1850  06FB  00B5               	movwf	??_read_RTC_I2c
  1851  06FC  0835               	movf	??_read_RTC_I2c,w
  1852  06FD  00CC               	movwf	_leitura
  1853                           
  1854                           ;main.c: 132: I2C_Idle();
  1855  06FE  120A  158A  2637  120A  118A  	fcall	_I2C_Idle
  1856                           
  1857                           ;main.c: 133: I2C_Send_NACK();
  1858  0703  120A  158A  2649  120A  118A  	fcall	_I2C_Send_NACK
  1859                           
  1860                           ;main.c: 134: I2C_Stop();
  1861  0708  120A  158A  261E   	fcall	_I2C_Stop
  1862  070B  0008               	return
  1863  070C                     __end_of_read_RTC_I2c:	
  1864                           
  1865                           	psect	text4
  1866  0E52                     __ptext4:	
  1867 ;; *************** function _I2C_Write_Byte *****************
  1868 ;; Defined at:
  1869 ;;		line 108 in file "i2c.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;  Byte            1    wreg     unsigned char 
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;  Byte            1   20[BANK0 ] unsigned char 
  1874 ;; Return value:  Size  Location     Type
  1875 ;;		None               void
  1876 ;; Registers used:
  1877 ;;		wreg
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1883 ;;      Params:         0       0       0       0       0
  1884 ;;      Locals:         0       1       0       0       0
  1885 ;;      Temps:          0       0       0       0       0
  1886 ;;      Totals:         0       1       0       0       0
  1887 ;;Total ram usage:        1 bytes
  1888 ;; Hardware stack levels used:    1
  1889 ;; Hardware stack levels required when called:    3
  1890 ;; This function calls:
  1891 ;;		Nothing
  1892 ;; This function is called by:
  1893 ;;		_write_RTC_I2c
  1894 ;;		_read_RTC_I2c
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           
  1899                           ;psect for function _I2C_Write_Byte
  1900  0E52                     _I2C_Write_Byte:	
  1901                           
  1902                           ;incstack = 0
  1903                           ; Regs used in _I2C_Write_Byte: [wreg]
  1904                           ;I2C_Write_Byte@Byte stored from wreg
  1905  0E52  1283               	bcf	3,5	;RP0=0, select bank0
  1906  0E53  1303               	bcf	3,6	;RP1=0, select bank0
  1907  0E54  00B4               	movwf	I2C_Write_Byte@Byte
  1908                           
  1909                           ;i2c.c: 110: SSPBUF = Byte;
  1910  0E55  0834               	movf	I2C_Write_Byte@Byte,w
  1911  0E56  0093               	movwf	19	;volatile
  1912  0E57                     l115:	
  1913                           ;i2c.c: 111: while (!SSPIF);
  1914                           
  1915  0E57  1D8C               	btfss	12,3	;volatile
  1916  0E58  2E57               	goto	l115
  1917                           
  1918                           ;i2c.c: 112: SSPIF = 0;
  1919  0E59  118C               	bcf	12,3	;volatile
  1920                           
  1921                           ;i2c.c: 113: return SSPCON2bits.ACKSTAT;
  1922                           ;	Return value of _I2C_Write_Byte is never used
  1923  0E5A  1683               	bsf	3,5	;RP0=1, select bank1
  1924  0E5B  1303               	bcf	3,6	;RP1=0, select bank1
  1925  0E5C  0811               	movf	17,w	;volatile
  1926  0E5D  0008               	return
  1927  0E5E                     __end_of_I2C_Write_Byte:	
  1928                           
  1929                           	psect	text5
  1930  0E1E                     __ptext5:	
  1931 ;; *************** function _I2C_Stop *****************
  1932 ;; Defined at:
  1933 ;;		line 88 in file "i2c.c"
  1934 ;; Parameters:    Size  Location     Type
  1935 ;;		None
  1936 ;; Auto vars:     Size  Location     Type
  1937 ;;		None
  1938 ;; Return value:  Size  Location     Type
  1939 ;;		None               void
  1940 ;; Registers used:
  1941 ;;		None
  1942 ;; Tracked objects:
  1943 ;;		On entry : 0/0
  1944 ;;		On exit  : 0/0
  1945 ;;		Unchanged: 0/0
  1946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1947 ;;      Params:         0       0       0       0       0
  1948 ;;      Locals:         0       0       0       0       0
  1949 ;;      Temps:          0       0       0       0       0
  1950 ;;      Totals:         0       0       0       0       0
  1951 ;;Total ram usage:        0 bytes
  1952 ;; Hardware stack levels used:    1
  1953 ;; Hardware stack levels required when called:    3
  1954 ;; This function calls:
  1955 ;;		Nothing
  1956 ;; This function is called by:
  1957 ;;		_write_RTC_I2c
  1958 ;;		_read_RTC_I2c
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           
  1963                           ;psect for function _I2C_Stop
  1964  0E1E                     _I2C_Stop:	
  1965                           
  1966                           ;i2c.c: 89: SSPCON2bits.PEN = 1;
  1967                           
  1968                           ;incstack = 0
  1969                           ; Regs used in _I2C_Stop: []
  1970  0E1E  1683               	bsf	3,5	;RP0=1, select bank1
  1971  0E1F  1303               	bcf	3,6	;RP1=0, select bank1
  1972  0E20  1511               	bsf	17,2	;volatile
  1973  0E21                     l97:	
  1974                           ;i2c.c: 90: while (!SSPIF);
  1975                           
  1976  0E21  1283               	bcf	3,5	;RP0=0, select bank0
  1977  0E22  1D8C               	btfss	12,3	;volatile
  1978  0E23  2E21               	goto	l97
  1979                           
  1980                           ;i2c.c: 91: SSPIF = 0;
  1981  0E24  118C               	bcf	12,3	;volatile
  1982  0E25  0008               	return
  1983  0E26                     __end_of_I2C_Stop:	
  1984                           
  1985                           	psect	text6
  1986  0E16                     __ptext6:	
  1987 ;; *************** function _I2C_Start *****************
  1988 ;; Defined at:
  1989 ;;		line 74 in file "i2c.c"
  1990 ;; Parameters:    Size  Location     Type
  1991 ;;		None
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;		None
  1994 ;; Return value:  Size  Location     Type
  1995 ;;		None               void
  1996 ;; Registers used:
  1997 ;;		None
  1998 ;; Tracked objects:
  1999 ;;		On entry : 0/0
  2000 ;;		On exit  : 0/0
  2001 ;;		Unchanged: 0/0
  2002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2003 ;;      Params:         0       0       0       0       0
  2004 ;;      Locals:         0       0       0       0       0
  2005 ;;      Temps:          0       0       0       0       0
  2006 ;;      Totals:         0       0       0       0       0
  2007 ;;Total ram usage:        0 bytes
  2008 ;; Hardware stack levels used:    1
  2009 ;; Hardware stack levels required when called:    3
  2010 ;; This function calls:
  2011 ;;		Nothing
  2012 ;; This function is called by:
  2013 ;;		_write_RTC_I2c
  2014 ;;		_read_RTC_I2c
  2015 ;; This function uses a non-reentrant model
  2016 ;;
  2017                           
  2018                           
  2019                           ;psect for function _I2C_Start
  2020  0E16                     _I2C_Start:	
  2021                           
  2022                           ;i2c.c: 76: SSPCON2bits.SEN = 1;
  2023                           
  2024                           ;incstack = 0
  2025                           ; Regs used in _I2C_Start: []
  2026  0E16  1683               	bsf	3,5	;RP0=1, select bank1
  2027  0E17  1303               	bcf	3,6	;RP1=0, select bank1
  2028  0E18  1411               	bsf	17,0	;volatile
  2029  0E19                     l85:	
  2030                           ;i2c.c: 77: while (!SSPIF);
  2031                           
  2032  0E19  1283               	bcf	3,5	;RP0=0, select bank0
  2033  0E1A  1D8C               	btfss	12,3	;volatile
  2034  0E1B  2E19               	goto	l85
  2035                           
  2036                           ;i2c.c: 78: SSPIF = 0;
  2037  0E1C  118C               	bcf	12,3	;volatile
  2038  0E1D  0008               	return
  2039  0E1E                     __end_of_I2C_Start:	
  2040                           
  2041                           	psect	text7
  2042  0E49                     __ptext7:	
  2043 ;; *************** function _I2C_Send_NACK *****************
  2044 ;; Defined at:
  2045 ;;		line 101 in file "i2c.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;		None
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;		None
  2050 ;; Return value:  Size  Location     Type
  2051 ;;		None               void
  2052 ;; Registers used:
  2053 ;;		None
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2059 ;;      Params:         0       0       0       0       0
  2060 ;;      Locals:         0       0       0       0       0
  2061 ;;      Temps:          0       0       0       0       0
  2062 ;;      Totals:         0       0       0       0       0
  2063 ;;Total ram usage:        0 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; Hardware stack levels required when called:    3
  2066 ;; This function calls:
  2067 ;;		Nothing
  2068 ;; This function is called by:
  2069 ;;		_read_RTC_I2c
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           
  2074                           ;psect for function _I2C_Send_NACK
  2075  0E49                     _I2C_Send_NACK:	
  2076                           
  2077                           ;i2c.c: 102: SSPCON2bits.ACKDT = 1;
  2078                           
  2079                           ;incstack = 0
  2080                           ; Regs used in _I2C_Send_NACK: []
  2081  0E49  1683               	bsf	3,5	;RP0=1, select bank1
  2082  0E4A  1303               	bcf	3,6	;RP1=0, select bank1
  2083  0E4B  1691               	bsf	17,5	;volatile
  2084                           
  2085                           ;i2c.c: 103: SSPCON2bits.ACKEN = 1;
  2086  0E4C  1611               	bsf	17,4	;volatile
  2087  0E4D                     l109:	
  2088                           ;i2c.c: 104: while (!SSPIF);
  2089                           
  2090  0E4D  1283               	bcf	3,5	;RP0=0, select bank0
  2091  0E4E  1D8C               	btfss	12,3	;volatile
  2092  0E4F  2E4D               	goto	l109
  2093                           
  2094                           ;i2c.c: 105: SSPIF = 0;
  2095  0E50  118C               	bcf	12,3	;volatile
  2096  0E51  0008               	return
  2097  0E52                     __end_of_I2C_Send_NACK:	
  2098                           
  2099                           	psect	text8
  2100  0E40                     __ptext8:	
  2101 ;; *************** function _I2C_Read_Byte *****************
  2102 ;; Defined at:
  2103 ;;		line 116 in file "i2c.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;		None
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;		None
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  1    wreg      unsigned char 
  2110 ;; Registers used:
  2111 ;;		wreg
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2117 ;;      Params:         0       0       0       0       0
  2118 ;;      Locals:         0       0       0       0       0
  2119 ;;      Temps:          0       0       0       0       0
  2120 ;;      Totals:         0       0       0       0       0
  2121 ;;Total ram usage:        0 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; Hardware stack levels required when called:    3
  2124 ;; This function calls:
  2125 ;;		Nothing
  2126 ;; This function is called by:
  2127 ;;		_read_RTC_I2c
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           
  2132                           ;psect for function _I2C_Read_Byte
  2133  0E40                     _I2C_Read_Byte:	
  2134                           
  2135                           ;i2c.c: 118: SSPCON2bits.RCEN = 1;
  2136                           
  2137                           ;incstack = 0
  2138                           ; Regs used in _I2C_Read_Byte: [wreg]
  2139  0E40  1683               	bsf	3,5	;RP0=1, select bank1
  2140  0E41  1303               	bcf	3,6	;RP1=0, select bank1
  2141  0E42  1591               	bsf	17,3	;volatile
  2142  0E43                     l121:	
  2143                           ;i2c.c: 119: while (!SSPIF);
  2144                           
  2145  0E43  1283               	bcf	3,5	;RP0=0, select bank0
  2146  0E44  1D8C               	btfss	12,3	;volatile
  2147  0E45  2E43               	goto	l121
  2148                           
  2149                           ;i2c.c: 120: SSPIF = 0;
  2150  0E46  118C               	bcf	12,3	;volatile
  2151                           
  2152                           ;i2c.c: 122: return SSPBUF;
  2153  0E47  0813               	movf	19,w	;volatile
  2154  0E48  0008               	return
  2155  0E49                     __end_of_I2C_Read_Byte:	
  2156                           
  2157                           	psect	text9
  2158  0E0E                     __ptext9:	
  2159 ;; *************** function _I2C_ReStart *****************
  2160 ;; Defined at:
  2161 ;;		line 81 in file "i2c.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;		None
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;		None
  2166 ;; Return value:  Size  Location     Type
  2167 ;;		None               void
  2168 ;; Registers used:
  2169 ;;		None
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2175 ;;      Params:         0       0       0       0       0
  2176 ;;      Locals:         0       0       0       0       0
  2177 ;;      Temps:          0       0       0       0       0
  2178 ;;      Totals:         0       0       0       0       0
  2179 ;;Total ram usage:        0 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; Hardware stack levels required when called:    3
  2182 ;; This function calls:
  2183 ;;		Nothing
  2184 ;; This function is called by:
  2185 ;;		_read_RTC_I2c
  2186 ;; This function uses a non-reentrant model
  2187 ;;
  2188                           
  2189                           
  2190                           ;psect for function _I2C_ReStart
  2191  0E0E                     _I2C_ReStart:	
  2192                           
  2193                           ;i2c.c: 83: SSPCON2bits.RSEN = 1;
  2194                           
  2195                           ;incstack = 0
  2196                           ; Regs used in _I2C_ReStart: []
  2197  0E0E  1683               	bsf	3,5	;RP0=1, select bank1
  2198  0E0F  1303               	bcf	3,6	;RP1=0, select bank1
  2199  0E10  1491               	bsf	17,1	;volatile
  2200  0E11                     l91:	
  2201                           ;i2c.c: 84: while (!SSPIF);
  2202                           
  2203  0E11  1283               	bcf	3,5	;RP0=0, select bank0
  2204  0E12  1D8C               	btfss	12,3	;volatile
  2205  0E13  2E11               	goto	l91
  2206                           
  2207                           ;i2c.c: 85: SSPIF = 0;
  2208  0E14  118C               	bcf	12,3	;volatile
  2209  0E15  0008               	return
  2210  0E16                     __end_of_I2C_ReStart:	
  2211                           
  2212                           	psect	text10
  2213  0E37                     __ptext10:	
  2214 ;; *************** function _I2C_Idle *****************
  2215 ;; Defined at:
  2216 ;;		line 125 in file "i2c.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;		None
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;		None
  2221 ;; Return value:  Size  Location     Type
  2222 ;;		None               void
  2223 ;; Registers used:
  2224 ;;		wreg, status,2
  2225 ;; Tracked objects:
  2226 ;;		On entry : 0/0
  2227 ;;		On exit  : 0/0
  2228 ;;		Unchanged: 0/0
  2229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2230 ;;      Params:         0       0       0       0       0
  2231 ;;      Locals:         0       0       0       0       0
  2232 ;;      Temps:          0       0       0       0       0
  2233 ;;      Totals:         0       0       0       0       0
  2234 ;;Total ram usage:        0 bytes
  2235 ;; Hardware stack levels used:    1
  2236 ;; Hardware stack levels required when called:    3
  2237 ;; This function calls:
  2238 ;;		Nothing
  2239 ;; This function is called by:
  2240 ;;		_write_RTC_I2c
  2241 ;;		_read_RTC_I2c
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           
  2246                           ;psect for function _I2C_Idle
  2247  0E37                     _I2C_Idle:	
  2248  0E37                     l1570:	
  2249                           ;i2c.c: 128: continue;
  2250                           
  2251                           ;i2c.c: 127: while ( ( SSPCON2 & 0x1F ) || ( SSPSTATbits.R_W ) )
  2252                           
  2253                           ;incstack = 0
  2254                           ; Regs used in _I2C_Idle: [wreg+status,2]
  2255                           
  2256  0E37  1683               	bsf	3,5	;RP0=1, select bank1
  2257  0E38  1303               	bcf	3,6	;RP1=0, select bank1
  2258  0E39  0811               	movf	17,w	;volatile
  2259  0E3A  391F               	andlw	31
  2260  0E3B  1D03               	btfss	3,2
  2261  0E3C  2E37               	goto	l1570
  2262  0E3D  1D14               	btfss	20,2	;volatile
  2263  0E3E  0008               	return
  2264  0E3F  2E37               	goto	l1570
  2265  0E40                     __end_of_I2C_Idle:	
  2266                           
  2267                           	psect	text11
  2268  003B                     __ptext11:	
  2269 ;; *************** function _printf *****************
  2270 ;; Defined at:
  2271 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  2272 ;; Parameters:    Size  Location     Type
  2273 ;;  f               1    wreg     PTR const unsigned char 
  2274 ;;		 -> STR_3(2), STR_2(38), STR_1(3), 
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;  f               1   22[BANK1 ] PTR const unsigned char 
  2277 ;;		 -> STR_3(2), STR_2(38), STR_1(3), 
  2278 ;;  idx             1   16[BANK1 ] unsigned char 
  2279 ;;  tmpval          4    0        struct .
  2280 ;;  width           2   23[BANK1 ] int 
  2281 ;;  val             2   19[BANK1 ] unsigned int 
  2282 ;;  cp              2    0        PTR const unsigned char 
  2283 ;;  len             2    0        unsigned int 
  2284 ;;  c               1   25[BANK1 ] char 
  2285 ;;  flag            1   21[BANK1 ] unsigned char 
  2286 ;;  prec            1   18[BANK1 ] char 
  2287 ;;  ap              1   17[BANK1 ] PTR void [1]
  2288 ;;		 -> ?i1_printf(2), ?_printf(2), 
  2289 ;; Return value:  Size  Location     Type
  2290 ;;                  2    0[BANK1 ] int 
  2291 ;; Registers used:
  2292 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2293 ;; Tracked objects:
  2294 ;;		On entry : 0/0
  2295 ;;		On exit  : 0/0
  2296 ;;		Unchanged: 0/0
  2297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2298 ;;      Params:         0       0      16       0       0
  2299 ;;      Locals:         0       0      10       0       0
  2300 ;;      Temps:          0       3       0       0       0
  2301 ;;      Totals:         0       3      26       0       0
  2302 ;;Total ram usage:       29 bytes
  2303 ;; Hardware stack levels used:    1
  2304 ;; Hardware stack levels required when called:    4
  2305 ;; This function calls:
  2306 ;;		___lwdiv
  2307 ;;		___lwmod
  2308 ;;		___wmul
  2309 ;;		_isdigit
  2310 ;;		_putch
  2311 ;; This function is called by:
  2312 ;;		_main
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           
  2317                           ;psect for function _printf
  2318  003B                     _printf:	
  2319                           
  2320                           ;incstack = 0
  2321                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2322                           ;printf@f stored from wreg
  2323  003B  1683               	bsf	3,5	;RP0=1, select bank1
  2324  003C  1303               	bcf	3,6	;RP1=0, select bank1
  2325  003D  00EA               	movwf	printf@f^(0+128)
  2326                           
  2327                           ;doprnt.c: 466: va_list ap;
  2328                           ;doprnt.c: 499: signed char c;
  2329                           ;doprnt.c: 501: int width;
  2330                           ;doprnt.c: 506: signed char prec;
  2331                           ;doprnt.c: 508: unsigned char flag;
  2332                           ;doprnt.c: 523: union {
  2333                           ;doprnt.c: 524: unsigned long vd;
  2334                           ;doprnt.c: 525: double integ;
  2335                           ;doprnt.c: 526: } tmpval;
  2336                           ;doprnt.c: 528: unsigned int val;
  2337                           ;doprnt.c: 529: unsigned len;
  2338                           ;doprnt.c: 530: const char * cp;
  2339                           ;doprnt.c: 533: *ap = __va_start();
  2340  003E  30D4               	movlw	(low (?_printf| 0))& (0+255)
  2341  003F  1283               	bcf	3,5	;RP0=0, select bank0
  2342  0040  1303               	bcf	3,6	;RP1=0, select bank0
  2343  0041  00C2               	movwf	??_printf
  2344  0042  0842               	movf	??_printf,w
  2345  0043  1683               	bsf	3,5	;RP0=1, select bank1
  2346  0044  1303               	bcf	3,6	;RP1=0, select bank1
  2347  0045  00E5               	movwf	printf@ap^(0+128)
  2348  0046                     l2304:	
  2349                           ;doprnt.c: 536: while(c = *f++) {
  2350                           
  2351  0046  3001               	movlw	1
  2352  0047  1683               	bsf	3,5	;RP0=1, select bank1
  2353  0048  1303               	bcf	3,6	;RP1=0, select bank1
  2354  0049  07EA               	addwf	printf@f^(0+128),f
  2355  004A  30FF               	movlw	-1
  2356  004B  076A               	addwf	printf@f^(0+128),w
  2357  004C  0084               	movwf	4
  2358  004D  120A  118A  270C  120A  118A  	fcall	stringdir
  2359  0052  1283               	bcf	3,5	;RP0=0, select bank0
  2360  0053  1303               	bcf	3,6	;RP1=0, select bank0
  2361  0054  00C2               	movwf	??_printf
  2362  0055  0842               	movf	??_printf,w
  2363  0056  1683               	bsf	3,5	;RP0=1, select bank1
  2364  0057  1303               	bcf	3,6	;RP1=0, select bank1
  2365  0058  00ED               	movwf	printf@c^(0+128)
  2366  0059  086D               	movf	printf@c^(0+128),w
  2367  005A  1903               	btfsc	3,2
  2368  005B  0008               	return
  2369                           
  2370                           ;doprnt.c: 538: if(c != '%')
  2371  005C  3025               	movlw	37
  2372  005D  066D               	xorwf	printf@c^(0+128),w
  2373  005E  1903               	btfsc	3,2
  2374  005F  2867               	goto	l2214
  2375                           
  2376                           ;doprnt.c: 540: {
  2377                           ;doprnt.c: 541: (putch(c) );
  2378  0060  086D               	movf	printf@c^(0+128),w
  2379  0061  120A  158A  2606  120A  118A  	fcall	_putch
  2380                           
  2381                           ;doprnt.c: 542: continue;
  2382  0066  2846               	goto	l2304
  2383  0067                     l2214:	
  2384                           
  2385                           ;doprnt.c: 543: }
  2386                           ;doprnt.c: 546: width = 0;
  2387  0067  1683               	bsf	3,5	;RP0=1, select bank1
  2388  0068  1303               	bcf	3,6	;RP1=0, select bank1
  2389  0069  01EB               	clrf	printf@width^(0+128)
  2390  006A  01EC               	clrf	(printf@width+1)^(0+128)
  2391                           
  2392                           ;doprnt.c: 548: flag = 0;
  2393  006B  01E9               	clrf	printf@flag^(0+128)
  2394                           
  2395                           ;doprnt.c: 551: switch(*f) {
  2396                           
  2397                           ;doprnt.c: 550: for(;;) {
  2398  006C  2876               	goto	l2220
  2399  006D                     l330:	
  2400                           ;doprnt.c: 579: case '0':
  2401                           
  2402                           
  2403                           ;doprnt.c: 580: flag |= 0x04;
  2404  006D  1569               	bsf	printf@flag^(0+128),2
  2405                           
  2406                           ;doprnt.c: 581: f++;
  2407  006E  3001               	movlw	1
  2408  006F  1283               	bcf	3,5	;RP0=0, select bank0
  2409  0070  1303               	bcf	3,6	;RP1=0, select bank0
  2410  0071  00C2               	movwf	??_printf
  2411  0072  0842               	movf	??_printf,w
  2412  0073  1683               	bsf	3,5	;RP0=1, select bank1
  2413  0074  1303               	bcf	3,6	;RP1=0, select bank1
  2414  0075  07EA               	addwf	printf@f^(0+128),f
  2415  0076                     l2220:	
  2416                           ;doprnt.c: 584: }
  2417                           
  2418                           ;doprnt.c: 582: continue;
  2419                           
  2420  0076  086A               	movf	printf@f^(0+128),w
  2421  0077  0084               	movwf	4
  2422  0078  120A  118A  270C  120A  118A  	fcall	stringdir
  2423                           
  2424                           ; Switch size 1, requested type "space"
  2425                           ; Number of cases is 1, Range of values is 48 to 48
  2426                           ; switch strategies available:
  2427                           ; Name         Instructions Cycles
  2428                           ; simple_byte            4     3 (average)
  2429                           ; direct_byte           14    11 (fixed)
  2430                           ; jumptable            263     9 (fixed)
  2431                           ;	Chosen strategy is simple_byte
  2432  007D  3A30               	xorlw	48	; case 48
  2433  007E  1903               	skipnz
  2434  007F  286D               	goto	l330
  2435  0080  2881               	goto	l2222
  2436  0081                     l2222:	
  2437                           ;doprnt.c: 586: }
  2438                           
  2439                           ;doprnt.c: 585: break;
  2440                           
  2441                           
  2442                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2443  0081  086A               	movf	printf@f^(0+128),w
  2444  0082  0084               	movwf	4
  2445  0083  120A  118A  270C  120A  118A  	fcall	stringdir
  2446  0088  120A  158A  2698  120A  118A  	fcall	_isdigit
  2447  008D  1C03               	btfss	3,0
  2448  008E  28F5               	goto	l2238
  2449                           
  2450                           ;doprnt.c: 598: width = 0;
  2451  008F  1683               	bsf	3,5	;RP0=1, select bank1
  2452  0090  1303               	bcf	3,6	;RP1=0, select bank1
  2453  0091  01EB               	clrf	printf@width^(0+128)
  2454  0092  01EC               	clrf	(printf@width+1)^(0+128)
  2455  0093                     l2226:	
  2456                           ;doprnt.c: 599: do {
  2457                           
  2458                           
  2459                           ;doprnt.c: 600: width *= 10;
  2460  0093  300A               	movlw	10
  2461  0094  1283               	bcf	3,5	;RP0=0, select bank0
  2462  0095  1303               	bcf	3,6	;RP1=0, select bank0
  2463  0096  00B4               	movwf	___wmul@multiplier
  2464  0097  3000               	movlw	0
  2465  0098  00B5               	movwf	___wmul@multiplier+1
  2466  0099  1683               	bsf	3,5	;RP0=1, select bank1
  2467  009A  1303               	bcf	3,6	;RP1=0, select bank1
  2468  009B  086C               	movf	(printf@width+1)^(0+128),w
  2469  009C  1283               	bcf	3,5	;RP0=0, select bank0
  2470  009D  1303               	bcf	3,6	;RP1=0, select bank0
  2471  009E  00B7               	movwf	___wmul@multiplicand+1
  2472  009F  1683               	bsf	3,5	;RP0=1, select bank1
  2473  00A0  1303               	bcf	3,6	;RP1=0, select bank1
  2474  00A1  086B               	movf	printf@width^(0+128),w
  2475  00A2  1283               	bcf	3,5	;RP0=0, select bank0
  2476  00A3  1303               	bcf	3,6	;RP1=0, select bank0
  2477  00A4  00B6               	movwf	___wmul@multiplicand
  2478  00A5  120A  158A  26FD  120A  118A  	fcall	___wmul
  2479  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  2480  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  2481  00AC  0835               	movf	?___wmul+1,w
  2482  00AD  1683               	bsf	3,5	;RP0=1, select bank1
  2483  00AE  1303               	bcf	3,6	;RP1=0, select bank1
  2484  00AF  00EC               	movwf	(printf@width+1)^(0+128)
  2485  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  2486  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  2487  00B2  0834               	movf	?___wmul,w
  2488  00B3  1683               	bsf	3,5	;RP0=1, select bank1
  2489  00B4  1303               	bcf	3,6	;RP1=0, select bank1
  2490  00B5  00EB               	movwf	printf@width^(0+128)
  2491                           
  2492                           ;doprnt.c: 601: width += *f++ - '0';
  2493  00B6  086A               	movf	printf@f^(0+128),w
  2494  00B7  0084               	movwf	4
  2495  00B8  120A  118A  270C  120A  118A  	fcall	stringdir
  2496  00BD  3ED0               	addlw	208
  2497  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  2498  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  2499  00C0  00C2               	movwf	??_printf
  2500  00C1  30FF               	movlw	255
  2501  00C2  1803               	skipnc
  2502  00C3  3000               	movlw	0
  2503  00C4  00C3               	movwf	??_printf+1
  2504  00C5  0842               	movf	??_printf,w
  2505  00C6  1683               	bsf	3,5	;RP0=1, select bank1
  2506  00C7  1303               	bcf	3,6	;RP1=0, select bank1
  2507  00C8  07EB               	addwf	printf@width^(0+128),f
  2508  00C9  1803               	skipnc
  2509  00CA  0AEC               	incf	(printf@width+1)^(0+128),f
  2510  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  2511  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  2512  00CD  0843               	movf	??_printf+1,w
  2513  00CE  1683               	bsf	3,5	;RP0=1, select bank1
  2514  00CF  1303               	bcf	3,6	;RP1=0, select bank1
  2515  00D0  07EC               	addwf	(printf@width+1)^(0+128),f
  2516  00D1  3001               	movlw	1
  2517  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  2518  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  2519  00D4  00C2               	movwf	??_printf
  2520  00D5  0842               	movf	??_printf,w
  2521  00D6  1683               	bsf	3,5	;RP0=1, select bank1
  2522  00D7  1303               	bcf	3,6	;RP1=0, select bank1
  2523  00D8  07EA               	addwf	printf@f^(0+128),f
  2524                           
  2525                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2526  00D9  086A               	movf	printf@f^(0+128),w
  2527  00DA  0084               	movwf	4
  2528  00DB  120A  118A  270C  120A  118A  	fcall	stringdir
  2529  00E0  120A  158A  2698  120A  118A  	fcall	_isdigit
  2530  00E5  1C03               	btfss	3,0
  2531  00E6  28F5               	goto	l2238
  2532  00E7  2893               	goto	l2226
  2533  00E8                     l341:	
  2534                           ;doprnt.c: 712: case 'X':
  2535                           
  2536                           ;doprnt.c: 638: goto alldone;
  2537                           
  2538                           ;doprnt.c: 637: case 0:
  2539                           
  2540                           ;doprnt.c: 608: }
  2541                           ;doprnt.c: 635: switch(c = *f++) {
  2542                           
  2543                           
  2544                           ;doprnt.c: 718: case 'x':
  2545                           ;doprnt.c: 721: flag |= 0x80;
  2546  00E8  1683               	bsf	3,5	;RP0=1, select bank1
  2547  00E9  1303               	bcf	3,6	;RP1=0, select bank1
  2548  00EA  17E9               	bsf	printf@flag^(0+128),7
  2549                           
  2550                           ;doprnt.c: 723: break;
  2551  00EB  290F               	goto	l2240
  2552  00EC                     l2234:	
  2553                           ;doprnt.c: 817: case 'u':
  2554                           
  2555                           ;doprnt.c: 813: continue;
  2556                           
  2557                           ;doprnt.c: 802: default:
  2558                           
  2559                           
  2560                           ;doprnt.c: 818: flag |= 0xC0;
  2561  00EC  30C0               	movlw	192
  2562  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  2563  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  2564  00EF  00C2               	movwf	??_printf
  2565  00F0  0842               	movf	??_printf,w
  2566  00F1  1683               	bsf	3,5	;RP0=1, select bank1
  2567  00F2  1303               	bcf	3,6	;RP1=0, select bank1
  2568  00F3  04E9               	iorwf	printf@flag^(0+128),f
  2569                           
  2570                           ;doprnt.c: 822: }
  2571                           
  2572                           ;doprnt.c: 819: break;
  2573  00F4  290F               	goto	l2240
  2574  00F5                     l2238:	
  2575  00F5  3001               	movlw	1
  2576  00F6  1683               	bsf	3,5	;RP0=1, select bank1
  2577  00F7  1303               	bcf	3,6	;RP1=0, select bank1
  2578  00F8  07EA               	addwf	printf@f^(0+128),f
  2579  00F9  30FF               	movlw	-1
  2580  00FA  076A               	addwf	printf@f^(0+128),w
  2581  00FB  0084               	movwf	4
  2582  00FC  120A  118A  270C  120A  118A  	fcall	stringdir
  2583  0101  00ED               	movwf	printf@c^(0+128)
  2584                           
  2585                           ; Switch size 1, requested type "space"
  2586                           ; Number of cases is 4, Range of values is 0 to 120
  2587                           ; switch strategies available:
  2588                           ; Name         Instructions Cycles
  2589                           ; simple_byte           13     7 (average)
  2590                           ; jumptable            260     6 (fixed)
  2591                           ;	Chosen strategy is simple_byte
  2592  0102  3A00               	xorlw	0	; case 0
  2593  0103  1903               	skipnz
  2594  0104  2A87               	goto	l373
  2595  0105  3A58               	xorlw	88	; case 88
  2596  0106  1903               	skipnz
  2597  0107  28E8               	goto	l341
  2598  0108  3A2D               	xorlw	45	; case 117
  2599  0109  1903               	skipnz
  2600  010A  28EC               	goto	l2234
  2601  010B  3A0D               	xorlw	13	; case 120
  2602  010C  1903               	skipnz
  2603  010D  28E8               	goto	l341
  2604  010E  2846               	goto	l2304
  2605  010F                     l2240:	
  2606                           
  2607                           ;doprnt.c: 1273: {
  2608                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2609  010F  0865               	movf	printf@ap^(0+128),w
  2610  0110  0084               	movwf	4
  2611  0111  1383               	bcf	3,7	;select IRP bank0
  2612  0112  0800               	movf	0,w
  2613  0113  00E7               	movwf	printf@val^(0+128)
  2614  0114  0A84               	incf	4,f
  2615  0115  0800               	movf	0,w
  2616  0116  00E8               	movwf	(printf@val+1)^(0+128)
  2617  0117  3002               	movlw	2
  2618  0118  1283               	bcf	3,5	;RP0=0, select bank0
  2619  0119  1303               	bcf	3,6	;RP1=0, select bank0
  2620  011A  00C2               	movwf	??_printf
  2621  011B  0842               	movf	??_printf,w
  2622  011C  1683               	bsf	3,5	;RP0=1, select bank1
  2623  011D  1303               	bcf	3,6	;RP1=0, select bank1
  2624  011E  07E5               	addwf	printf@ap^(0+128),f
  2625                           
  2626                           ;doprnt.c: 1287: }
  2627                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2628  011F  2980               	goto	l2266
  2629  0120                     l346:	
  2630                           ;doprnt.c: 1302: case 0xC0:
  2631                           
  2632                           
  2633                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2634  0120  01ED               	clrf	printf@c^(0+128)
  2635  0121  0AED               	incf	printf@c^(0+128),f
  2636  0122                     L3:	
  2637  0122  3005               	movlw	5
  2638  0123  066D               	xorwf	printf@c^(0+128),w
  2639  0124  1903               	btfsc	3,2
  2640  0125  2989               	goto	l2268
  2641                           
  2642                           ;doprnt.c: 1306: if(val < dpowers[c])
  2643  0126  086D               	movf	printf@c^(0+128),w
  2644  0127  1283               	bcf	3,5	;RP0=0, select bank0
  2645  0128  1303               	bcf	3,6	;RP1=0, select bank0
  2646  0129  00C2               	movwf	??_printf
  2647  012A  0742               	addwf	??_printf,w
  2648  012B  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2649  012C  0084               	movwf	4
  2650  012D  120A  118A  270C  120A  118A  	fcall	stringdir
  2651  0132  00C3               	movwf	??_printf+1
  2652  0133  120A  118A  270C  120A  118A  	fcall	stringdir
  2653  0138  00C4               	movwf	??_printf+2
  2654  0139  0844               	movf	??_printf+2,w
  2655  013A  1683               	bsf	3,5	;RP0=1, select bank1
  2656  013B  1303               	bcf	3,6	;RP1=0, select bank1
  2657  013C  0268               	subwf	(printf@val+1)^(0+128),w
  2658  013D  1D03               	skipz
  2659  013E  2945               	goto	u2295
  2660  013F  1283               	bcf	3,5	;RP0=0, select bank0
  2661  0140  1303               	bcf	3,6	;RP1=0, select bank0
  2662  0141  0843               	movf	??_printf+1,w
  2663  0142  1683               	bsf	3,5	;RP0=1, select bank1
  2664  0143  1303               	bcf	3,6	;RP1=0, select bank1
  2665  0144  0267               	subwf	printf@val^(0+128),w
  2666  0145                     u2295:	
  2667  0145  1C03               	btfss	3,0
  2668  0146  2989               	goto	l2268
  2669                           
  2670                           ;doprnt.c: 1307: break;
  2671  0147  3001               	movlw	1
  2672  0148  1283               	bcf	3,5	;RP0=0, select bank0
  2673  0149  1303               	bcf	3,6	;RP1=0, select bank0
  2674  014A  00C2               	movwf	??_printf
  2675  014B  0842               	movf	??_printf,w
  2676  014C  1683               	bsf	3,5	;RP0=1, select bank1
  2677  014D  1303               	bcf	3,6	;RP1=0, select bank1
  2678  014E  07ED               	addwf	printf@c^(0+128),f
  2679  014F  2922               	goto	L3
  2680  0150                     l351:	
  2681                           ;doprnt.c: 1314: case 0x80:
  2682                           
  2683                           ;doprnt.c: 1309: break;
  2684                           
  2685                           
  2686                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2687  0150  01ED               	clrf	printf@c^(0+128)
  2688  0151  0AED               	incf	printf@c^(0+128),f
  2689  0152                     L4:	
  2690  0152  3004               	movlw	4
  2691  0153  066D               	xorwf	printf@c^(0+128),w
  2692  0154  1903               	btfsc	3,2
  2693  0155  2989               	goto	l2268
  2694                           
  2695                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2696  0156  086D               	movf	printf@c^(0+128),w
  2697  0157  1283               	bcf	3,5	;RP0=0, select bank0
  2698  0158  1303               	bcf	3,6	;RP1=0, select bank0
  2699  0159  00C2               	movwf	??_printf
  2700  015A  0742               	addwf	??_printf,w
  2701  015B  3E0B               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  2702  015C  0084               	movwf	4
  2703  015D  120A  118A  270C  120A  118A  	fcall	stringdir
  2704  0162  00C3               	movwf	??_printf+1
  2705  0163  120A  118A  270C  120A  118A  	fcall	stringdir
  2706  0168  00C4               	movwf	??_printf+2
  2707  0169  0844               	movf	??_printf+2,w
  2708  016A  1683               	bsf	3,5	;RP0=1, select bank1
  2709  016B  1303               	bcf	3,6	;RP1=0, select bank1
  2710  016C  0268               	subwf	(printf@val+1)^(0+128),w
  2711  016D  1D03               	skipz
  2712  016E  2975               	goto	u2325
  2713  016F  1283               	bcf	3,5	;RP0=0, select bank0
  2714  0170  1303               	bcf	3,6	;RP1=0, select bank0
  2715  0171  0843               	movf	??_printf+1,w
  2716  0172  1683               	bsf	3,5	;RP0=1, select bank1
  2717  0173  1303               	bcf	3,6	;RP1=0, select bank1
  2718  0174  0267               	subwf	printf@val^(0+128),w
  2719  0175                     u2325:	
  2720  0175  1C03               	btfss	3,0
  2721  0176  2989               	goto	l2268
  2722                           
  2723                           ;doprnt.c: 1318: break;
  2724  0177  3001               	movlw	1
  2725  0178  1283               	bcf	3,5	;RP0=0, select bank0
  2726  0179  1303               	bcf	3,6	;RP1=0, select bank0
  2727  017A  00C2               	movwf	??_printf
  2728  017B  0842               	movf	??_printf,w
  2729  017C  1683               	bsf	3,5	;RP0=1, select bank1
  2730  017D  1303               	bcf	3,6	;RP1=0, select bank1
  2731  017E  07ED               	addwf	printf@c^(0+128),f
  2732  017F  2952               	goto	L4
  2733  0180                     l2266:	
  2734                           ;doprnt.c: 1336: }
  2735                           
  2736                           ;doprnt.c: 1320: break;
  2737                           
  2738  0180  0869               	movf	printf@flag^(0+128),w
  2739  0181  39C0               	andlw	192
  2740                           
  2741                           ; Switch size 1, requested type "space"
  2742                           ; Number of cases is 2, Range of values is 128 to 192
  2743                           ; switch strategies available:
  2744                           ; Name         Instructions Cycles
  2745                           ; simple_byte            7     4 (average)
  2746                           ; direct_byte          206    11 (fixed)
  2747                           ; jumptable            263     9 (fixed)
  2748                           ;	Chosen strategy is simple_byte
  2749  0182  3A80               	xorlw	128	; case 128
  2750  0183  1903               	skipnz
  2751  0184  2950               	goto	l351
  2752  0185  3A40               	xorlw	64	; case 192
  2753  0186  1903               	skipnz
  2754  0187  2920               	goto	l346
  2755  0188  2989               	goto	l2268
  2756  0189                     l2268:	
  2757                           
  2758                           ;doprnt.c: 1381: if(width > c)
  2759  0189  086D               	movf	printf@c^(0+128),w
  2760  018A  1283               	bcf	3,5	;RP0=0, select bank0
  2761  018B  1303               	bcf	3,6	;RP1=0, select bank0
  2762  018C  00C2               	movwf	??_printf
  2763  018D  01C3               	clrf	??_printf+1
  2764  018E  1BC2               	btfsc	??_printf,7
  2765  018F  03C3               	decf	??_printf+1,f
  2766  0190  0843               	movf	??_printf+1,w
  2767  0191  3A80               	xorlw	128
  2768  0192  00C4               	movwf	??_printf+2
  2769  0193  1683               	bsf	3,5	;RP0=1, select bank1
  2770  0194  1303               	bcf	3,6	;RP1=0, select bank1
  2771  0195  086C               	movf	(printf@width+1)^(0+128),w
  2772  0196  3A80               	xorlw	128
  2773  0197  1283               	bcf	3,5	;RP0=0, select bank0
  2774  0198  1303               	bcf	3,6	;RP1=0, select bank0
  2775  0199  0244               	subwf	??_printf+2,w
  2776  019A  1D03               	skipz
  2777  019B  29A2               	goto	u2345
  2778  019C  1683               	bsf	3,5	;RP0=1, select bank1
  2779  019D  1303               	bcf	3,6	;RP1=0, select bank1
  2780  019E  086B               	movf	printf@width^(0+128),w
  2781  019F  1283               	bcf	3,5	;RP0=0, select bank0
  2782  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  2783  01A1  0242               	subwf	??_printf,w
  2784  01A2                     u2345:	
  2785  01A2  1803               	skipnc
  2786  01A3  29BA               	goto	l2272
  2787                           
  2788                           ;doprnt.c: 1382: width -= c;
  2789  01A4  1683               	bsf	3,5	;RP0=1, select bank1
  2790  01A5  1303               	bcf	3,6	;RP1=0, select bank1
  2791  01A6  086D               	movf	printf@c^(0+128),w
  2792  01A7  1283               	bcf	3,5	;RP0=0, select bank0
  2793  01A8  1303               	bcf	3,6	;RP1=0, select bank0
  2794  01A9  00C2               	movwf	??_printf
  2795  01AA  01C3               	clrf	??_printf+1
  2796  01AB  1BC2               	btfsc	??_printf,7
  2797  01AC  03C3               	decf	??_printf+1,f
  2798  01AD  0842               	movf	??_printf,w
  2799  01AE  1683               	bsf	3,5	;RP0=1, select bank1
  2800  01AF  1303               	bcf	3,6	;RP1=0, select bank1
  2801  01B0  02EB               	subwf	printf@width^(0+128),f
  2802  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  2803  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  2804  01B3  0843               	movf	??_printf+1,w
  2805  01B4  1683               	bsf	3,5	;RP0=1, select bank1
  2806  01B5  1303               	bcf	3,6	;RP1=0, select bank1
  2807  01B6  1C03               	skipc
  2808  01B7  03EC               	decf	(printf@width+1)^(0+128),f
  2809  01B8  02EC               	subwf	(printf@width+1)^(0+128),f
  2810  01B9  29BE               	goto	l2274
  2811  01BA                     l2272:	
  2812                           
  2813                           ;doprnt.c: 1383: else
  2814                           ;doprnt.c: 1384: width = 0;
  2815  01BA  1683               	bsf	3,5	;RP0=1, select bank1
  2816  01BB  1303               	bcf	3,6	;RP1=0, select bank1
  2817  01BC  01EB               	clrf	printf@width^(0+128)
  2818  01BD  01EC               	clrf	(printf@width+1)^(0+128)
  2819  01BE                     l2274:	
  2820                           
  2821                           ;doprnt.c: 1387: if(flag & 0x04) {
  2822  01BE  1D69               	btfss	printf@flag^(0+128),2
  2823  01BF  29D3               	goto	l2282
  2824  01C0                     L5:	
  2825                           
  2826                           ;doprnt.c: 1415: if(width)
  2827  01C0  086B               	movf	printf@width^(0+128),w
  2828  01C1  046C               	iorwf	(printf@width+1)^(0+128),w
  2829  01C2  1903               	btfsc	3,2
  2830  01C3  29E9               	goto	l2288
  2831                           
  2832                           ;doprnt.c: 1417: (putch('0') );
  2833                           
  2834                           ;doprnt.c: 1416: do
  2835  01C4  3030               	movlw	48
  2836  01C5  120A  158A  2606  120A  118A  	fcall	_putch
  2837                           
  2838                           ;doprnt.c: 1418: while(--width);
  2839  01CA  30FF               	movlw	255
  2840  01CB  1683               	bsf	3,5	;RP0=1, select bank1
  2841  01CC  1303               	bcf	3,6	;RP1=0, select bank1
  2842  01CD  07EB               	addwf	printf@width^(0+128),f
  2843  01CE  1803               	skipnc
  2844  01CF  0AEC               	incf	(printf@width+1)^(0+128),f
  2845  01D0  30FF               	movlw	255
  2846  01D1  07EC               	addwf	(printf@width+1)^(0+128),f
  2847  01D2  29C0               	goto	L5
  2848  01D3                     l2282:	
  2849                           ;doprnt.c: 1420: } else
  2850                           
  2851                           
  2852                           ;doprnt.c: 1422: {
  2853                           ;doprnt.c: 1424: if(width
  2854                           ;doprnt.c: 1428: )
  2855  01D3  086B               	movf	printf@width^(0+128),w
  2856  01D4  046C               	iorwf	(printf@width+1)^(0+128),w
  2857  01D5  1903               	btfsc	3,2
  2858  01D6  29E9               	goto	l2288
  2859  01D7                     l2284:	
  2860                           ;doprnt.c: 1429: do
  2861                           
  2862                           
  2863                           ;doprnt.c: 1430: (putch(' ') );
  2864  01D7  3020               	movlw	32
  2865  01D8  120A  158A  2606  120A  118A  	fcall	_putch
  2866                           
  2867                           ;doprnt.c: 1431: while(--width);
  2868  01DD  30FF               	movlw	255
  2869  01DE  1683               	bsf	3,5	;RP0=1, select bank1
  2870  01DF  1303               	bcf	3,6	;RP1=0, select bank1
  2871  01E0  07EB               	addwf	printf@width^(0+128),f
  2872  01E1  1803               	skipnc
  2873  01E2  0AEC               	incf	(printf@width+1)^(0+128),f
  2874  01E3  30FF               	movlw	255
  2875  01E4  07EC               	addwf	(printf@width+1)^(0+128),f
  2876  01E5  086B               	movf	printf@width^(0+128),w
  2877  01E6  046C               	iorwf	(printf@width+1)^(0+128),w
  2878  01E7  1D03               	btfss	3,2
  2879  01E8  29D7               	goto	l2284
  2880  01E9                     l2288:	
  2881                           
  2882                           ;doprnt.c: 1469: }
  2883                           ;doprnt.c: 1472: prec = c;
  2884  01E9  086D               	movf	printf@c^(0+128),w
  2885  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  2886  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  2887  01EC  00C2               	movwf	??_printf
  2888  01ED  0842               	movf	??_printf,w
  2889  01EE  1683               	bsf	3,5	;RP0=1, select bank1
  2890  01EF  1303               	bcf	3,6	;RP1=0, select bank1
  2891  01F0  00E6               	movwf	printf@prec^(0+128)
  2892                           
  2893                           ;doprnt.c: 1474: while(prec--) {
  2894  01F1  2A72               	goto	l2302
  2895  01F2                     l2290:	
  2896                           ;doprnt.c: 1478: {
  2897                           ;doprnt.c: 1486: case 0xC0:
  2898                           
  2899                           ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
  2900                           
  2901                           
  2902                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2903  01F2  300A               	movlw	10
  2904  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  2905  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  2906  01F5  00BC               	movwf	___lwmod@divisor
  2907  01F6  3000               	movlw	0
  2908  01F7  00BD               	movwf	___lwmod@divisor+1
  2909  01F8  1683               	bsf	3,5	;RP0=1, select bank1
  2910  01F9  1303               	bcf	3,6	;RP1=0, select bank1
  2911  01FA  0866               	movf	printf@prec^(0+128),w
  2912  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  2913  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  2914  01FD  00C2               	movwf	??_printf
  2915  01FE  0742               	addwf	??_printf,w
  2916  01FF  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2917  0200  0084               	movwf	4
  2918  0201  120A  118A  270C  120A  118A  	fcall	stringdir
  2919  0206  00B4               	movwf	___lwdiv@divisor
  2920  0207  120A  118A  270C  120A  118A  	fcall	stringdir
  2921  020C  00B5               	movwf	___lwdiv@divisor+1
  2922  020D  1683               	bsf	3,5	;RP0=1, select bank1
  2923  020E  1303               	bcf	3,6	;RP1=0, select bank1
  2924  020F  0868               	movf	(printf@val+1)^(0+128),w
  2925  0210  1283               	bcf	3,5	;RP0=0, select bank0
  2926  0211  1303               	bcf	3,6	;RP1=0, select bank0
  2927  0212  00B7               	movwf	___lwdiv@dividend+1
  2928  0213  1683               	bsf	3,5	;RP0=1, select bank1
  2929  0214  1303               	bcf	3,6	;RP1=0, select bank1
  2930  0215  0867               	movf	printf@val^(0+128),w
  2931  0216  1283               	bcf	3,5	;RP0=0, select bank0
  2932  0217  1303               	bcf	3,6	;RP1=0, select bank0
  2933  0218  00B6               	movwf	___lwdiv@dividend
  2934  0219  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  2935  021E  1283               	bcf	3,5	;RP0=0, select bank0
  2936  021F  1303               	bcf	3,6	;RP1=0, select bank0
  2937  0220  0835               	movf	?___lwdiv+1,w
  2938  0221  00BF               	movwf	___lwmod@dividend+1
  2939  0222  0834               	movf	?___lwdiv,w
  2940  0223  00BE               	movwf	___lwmod@dividend
  2941  0224  120A  158A  2752  120A  118A  	fcall	___lwmod
  2942  0229  1283               	bcf	3,5	;RP0=0, select bank0
  2943  022A  1303               	bcf	3,6	;RP1=0, select bank0
  2944  022B  083C               	movf	?___lwmod,w
  2945  022C  3E30               	addlw	48
  2946  022D  00C3               	movwf	??_printf+1
  2947  022E  0843               	movf	??_printf+1,w
  2948  022F  2A69               	goto	L2
  2949  0230                     l2292:	
  2950                           ;doprnt.c: 1497: case 0x80:
  2951                           
  2952                           ;doprnt.c: 1491: break;
  2953                           
  2954                           
  2955                           ;doprnt.c: 1499: {
  2956                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2957  0230  0866               	movf	printf@prec^(0+128),w
  2958  0231  1283               	bcf	3,5	;RP0=0, select bank0
  2959  0232  1303               	bcf	3,6	;RP1=0, select bank0
  2960  0233  00C2               	movwf	??_printf
  2961  0234  0742               	addwf	??_printf,w
  2962  0235  3E0B               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  2963  0236  0084               	movwf	4
  2964  0237  120A  118A  270C  120A  118A  	fcall	stringdir
  2965  023C  00B4               	movwf	___lwdiv@divisor
  2966  023D  120A  118A  270C  120A  118A  	fcall	stringdir
  2967  0242  00B5               	movwf	___lwdiv@divisor+1
  2968  0243  1683               	bsf	3,5	;RP0=1, select bank1
  2969  0244  1303               	bcf	3,6	;RP1=0, select bank1
  2970  0245  0868               	movf	(printf@val+1)^(0+128),w
  2971  0246  1283               	bcf	3,5	;RP0=0, select bank0
  2972  0247  1303               	bcf	3,6	;RP1=0, select bank0
  2973  0248  00B7               	movwf	___lwdiv@dividend+1
  2974  0249  1683               	bsf	3,5	;RP0=1, select bank1
  2975  024A  1303               	bcf	3,6	;RP1=0, select bank1
  2976  024B  0867               	movf	printf@val^(0+128),w
  2977  024C  1283               	bcf	3,5	;RP0=0, select bank0
  2978  024D  1303               	bcf	3,6	;RP1=0, select bank0
  2979  024E  00B6               	movwf	___lwdiv@dividend
  2980  024F  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  2981  0254  1283               	bcf	3,5	;RP0=0, select bank0
  2982  0255  1303               	bcf	3,6	;RP1=0, select bank0
  2983  0256  0834               	movf	?___lwdiv,w
  2984  0257  390F               	andlw	15
  2985  0258  00C3               	movwf	??_printf+1
  2986  0259  0843               	movf	??_printf+1,w
  2987  025A  1683               	bsf	3,5	;RP0=1, select bank1
  2988  025B  1303               	bcf	3,6	;RP1=0, select bank1
  2989  025C  00E4               	movwf	printf@idx^(0+128)
  2990                           
  2991                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  2992  025D  0864               	movf	printf@idx^(0+128),w
  2993  025E  3E39               	addlw	low ((STR_4-__stringbase)| (0+32768))
  2994  025F  0084               	movwf	4
  2995  0260  120A  118A  270C  120A  118A  	fcall	stringdir
  2996  0265  1283               	bcf	3,5	;RP0=0, select bank0
  2997  0266  1303               	bcf	3,6	;RP1=0, select bank0
  2998  0267  00C2               	movwf	??_printf
  2999  0268  0842               	movf	??_printf,w
  3000  0269                     L2:	
  3001  0269  1683               	bsf	3,5	;RP0=1, select bank1
  3002  026A  1303               	bcf	3,6	;RP1=0, select bank1
  3003  026B  00ED               	movwf	printf@c^(0+128)
  3004  026C                     l2300:	
  3005                           ;doprnt.c: 1523: }
  3006                           
  3007                           ;doprnt.c: 1508: }
  3008                           ;doprnt.c: 1510: break;
  3009                           
  3010                           
  3011                           ;doprnt.c: 1524: (putch(c) );
  3012  026C  086D               	movf	printf@c^(0+128),w
  3013  026D  120A  158A  2606  120A  118A  	fcall	_putch
  3014  0272                     l2302:	
  3015  0272  30FF               	movlw	255
  3016  0273  1283               	bcf	3,5	;RP0=0, select bank0
  3017  0274  1303               	bcf	3,6	;RP1=0, select bank0
  3018  0275  00C2               	movwf	??_printf
  3019  0276  0842               	movf	??_printf,w
  3020  0277  1683               	bsf	3,5	;RP0=1, select bank1
  3021  0278  1303               	bcf	3,6	;RP1=0, select bank1
  3022  0279  07E6               	addwf	printf@prec^(0+128),f
  3023  027A  0A66               	incf	printf@prec^(0+128),w
  3024  027B  1903               	btfsc	3,2
  3025  027C  2846               	goto	l2304
  3026  027D  0869               	movf	printf@flag^(0+128),w
  3027  027E  39C0               	andlw	192
  3028                           
  3029                           ; Switch size 1, requested type "space"
  3030                           ; Number of cases is 2, Range of values is 128 to 192
  3031                           ; switch strategies available:
  3032                           ; Name         Instructions Cycles
  3033                           ; simple_byte            7     4 (average)
  3034                           ; direct_byte          206    11 (fixed)
  3035                           ; jumptable            263     9 (fixed)
  3036                           ;	Chosen strategy is simple_byte
  3037  027F  3A80               	xorlw	128	; case 128
  3038  0280  1903               	skipnz
  3039  0281  2A30               	goto	l2292
  3040  0282  3A40               	xorlw	64	; case 192
  3041  0283  1903               	skipnz
  3042  0284  29F2               	goto	l2290
  3043  0285  2A6C               	goto	l2300
  3044  0286  2A6C               	goto	l2300
  3045  0287                     l373:	
  3046                           ;doprnt.c: 1540: return 0;
  3047                           ;	Return value of _printf is never used
  3048                           
  3049                           ;doprnt.c: 1525: }
  3050                           ;doprnt.c: 1533: }
  3051                           ;doprnt.c: 1535: alldone:
  3052                           
  3053  0287  0008               	return
  3054  0288                     __end_of_printf:	
  3055                           
  3056                           	psect	text12
  3057  0E06                     __ptext12:	
  3058 ;; *************** function _putch *****************
  3059 ;; Defined at:
  3060 ;;		line 46 in file "usart.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;  byte            1    wreg     unsigned char 
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;  byte            1   20[BANK0 ] unsigned char 
  3065 ;; Return value:  Size  Location     Type
  3066 ;;		None               void
  3067 ;; Registers used:
  3068 ;;		wreg
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3074 ;;      Params:         0       0       0       0       0
  3075 ;;      Locals:         0       1       0       0       0
  3076 ;;      Temps:          0       0       0       0       0
  3077 ;;      Totals:         0       1       0       0       0
  3078 ;;Total ram usage:        1 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; Hardware stack levels required when called:    3
  3081 ;; This function calls:
  3082 ;;		Nothing
  3083 ;; This function is called by:
  3084 ;;		_printf
  3085 ;;		_getche
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           
  3090                           ;psect for function _putch
  3091  0E06                     _putch:	
  3092                           
  3093                           ;incstack = 0
  3094                           ; Regs used in _putch: [wreg]
  3095                           ;putch@byte stored from wreg
  3096  0E06  1283               	bcf	3,5	;RP0=0, select bank0
  3097  0E07  1303               	bcf	3,6	;RP1=0, select bank0
  3098  0E08  00B4               	movwf	putch@byte
  3099  0E09                     l180:	
  3100                           ;usart.c: 49: continue;
  3101                           
  3102                           ;usart.c: 48: while (!TXIF)
  3103                           
  3104  0E09  1E0C               	btfss	12,4	;volatile
  3105  0E0A  2E09               	goto	l180
  3106                           
  3107                           ;usart.c: 50: TXREG = byte;
  3108  0E0B  0834               	movf	putch@byte,w
  3109  0E0C  0099               	movwf	25	;volatile
  3110  0E0D  0008               	return
  3111  0E0E                     __end_of_putch:	
  3112                           
  3113                           	psect	text13
  3114  0E98                     __ptext13:	
  3115 ;; *************** function _isdigit *****************
  3116 ;; Defined at:
  3117 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  3118 ;; Parameters:    Size  Location     Type
  3119 ;;  c               1    wreg     unsigned char 
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;  c               1   21[BANK0 ] unsigned char 
  3122 ;; Return value:  Size  Location     Type
  3123 ;;		None               void
  3124 ;; Registers used:
  3125 ;;		wreg, status,2, status,0
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3131 ;;      Params:         0       0       0       0       0
  3132 ;;      Locals:         0       2       0       0       0
  3133 ;;      Temps:          0       0       0       0       0
  3134 ;;      Totals:         0       2       0       0       0
  3135 ;;Total ram usage:        2 bytes
  3136 ;; Hardware stack levels used:    1
  3137 ;; Hardware stack levels required when called:    3
  3138 ;; This function calls:
  3139 ;;		Nothing
  3140 ;; This function is called by:
  3141 ;;		_printf
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           
  3146                           ;psect for function _isdigit
  3147  0E98                     _isdigit:	
  3148                           
  3149                           ;incstack = 0
  3150                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3151                           ;isdigit@c stored from wreg
  3152  0E98  1283               	bcf	3,5	;RP0=0, select bank0
  3153  0E99  1303               	bcf	3,6	;RP1=0, select bank0
  3154  0E9A  00B5               	movwf	isdigit@c
  3155  0E9B  01B4               	clrf	_isdigit$864
  3156  0E9C  303A               	movlw	58
  3157  0E9D  0235               	subwf	isdigit@c,w
  3158  0E9E  1803               	skipnc
  3159  0E9F  2EA6               	goto	l1586
  3160  0EA0  3030               	movlw	48
  3161  0EA1  0235               	subwf	isdigit@c,w
  3162  0EA2  1C03               	skipc
  3163  0EA3  2EA6               	goto	l1586
  3164  0EA4  01B4               	clrf	_isdigit$864
  3165  0EA5  0AB4               	incf	_isdigit$864,f
  3166  0EA6                     l1586:	
  3167  0EA6  0C34               	rrf	_isdigit$864,w
  3168  0EA7  0008               	return
  3169  0EA8                     __end_of_isdigit:	
  3170                           
  3171                           	psect	text14
  3172  0EFD                     __ptext14:	
  3173 ;; *************** function ___wmul *****************
  3174 ;; Defined at:
  3175 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  3176 ;; Parameters:    Size  Location     Type
  3177 ;;  multiplier      2   20[BANK0 ] unsigned int 
  3178 ;;  multiplicand    2   22[BANK0 ] unsigned int 
  3179 ;; Auto vars:     Size  Location     Type
  3180 ;;  product         2   24[BANK0 ] unsigned int 
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  2   20[BANK0 ] unsigned int 
  3183 ;; Registers used:
  3184 ;;		wreg, status,2, status,0
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3190 ;;      Params:         0       4       0       0       0
  3191 ;;      Locals:         0       2       0       0       0
  3192 ;;      Temps:          0       0       0       0       0
  3193 ;;      Totals:         0       6       0       0       0
  3194 ;;Total ram usage:        6 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    3
  3197 ;; This function calls:
  3198 ;;		Nothing
  3199 ;; This function is called by:
  3200 ;;		_printf
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           
  3205                           ;psect for function ___wmul
  3206  0EFD                     ___wmul:	
  3207                           
  3208                           ;incstack = 0
  3209                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3210  0EFD  1283               	bcf	3,5	;RP0=0, select bank0
  3211  0EFE  1303               	bcf	3,6	;RP1=0, select bank0
  3212  0EFF  01B8               	clrf	___wmul@product
  3213  0F00  01B9               	clrf	___wmul@product+1
  3214  0F01                     l1592:	
  3215  0F01  1C34               	btfss	___wmul@multiplier,0
  3216  0F02  2F09               	goto	l457
  3217  0F03  0836               	movf	___wmul@multiplicand,w
  3218  0F04  07B8               	addwf	___wmul@product,f
  3219  0F05  1803               	skipnc
  3220  0F06  0AB9               	incf	___wmul@product+1,f
  3221  0F07  0837               	movf	___wmul@multiplicand+1,w
  3222  0F08  07B9               	addwf	___wmul@product+1,f
  3223  0F09                     l457:	
  3224  0F09  3001               	movlw	1
  3225  0F0A                     u1265:	
  3226  0F0A  1003               	clrc
  3227  0F0B  0DB6               	rlf	___wmul@multiplicand,f
  3228  0F0C  0DB7               	rlf	___wmul@multiplicand+1,f
  3229  0F0D  3EFF               	addlw	-1
  3230  0F0E  1D03               	skipz
  3231  0F0F  2F0A               	goto	u1265
  3232  0F10  3001               	movlw	1
  3233  0F11                     u1275:	
  3234  0F11  1003               	clrc
  3235  0F12  0CB5               	rrf	___wmul@multiplier+1,f
  3236  0F13  0CB4               	rrf	___wmul@multiplier,f
  3237  0F14  3EFF               	addlw	-1
  3238  0F15  1D03               	skipz
  3239  0F16  2F11               	goto	u1275
  3240  0F17  0834               	movf	___wmul@multiplier,w
  3241  0F18  0435               	iorwf	___wmul@multiplier+1,w
  3242  0F19  1D03               	btfss	3,2
  3243  0F1A  2F01               	goto	l1592
  3244  0F1B  0839               	movf	___wmul@product+1,w
  3245  0F1C  00B5               	movwf	?___wmul+1
  3246  0F1D  0838               	movf	___wmul@product,w
  3247  0F1E  00B4               	movwf	?___wmul
  3248  0F1F  0008               	return
  3249  0F20                     __end_of___wmul:	
  3250                           
  3251                           	psect	text15
  3252  0F52                     __ptext15:	
  3253 ;; *************** function ___lwmod *****************
  3254 ;; Defined at:
  3255 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;  divisor         2   28[BANK0 ] unsigned int 
  3258 ;;  dividend        2   30[BANK0 ] unsigned int 
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;  counter         1   33[BANK0 ] unsigned char 
  3261 ;; Return value:  Size  Location     Type
  3262 ;;                  2   28[BANK0 ] unsigned int 
  3263 ;; Registers used:
  3264 ;;		wreg, status,2, status,0
  3265 ;; Tracked objects:
  3266 ;;		On entry : 0/0
  3267 ;;		On exit  : 0/0
  3268 ;;		Unchanged: 0/0
  3269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3270 ;;      Params:         0       4       0       0       0
  3271 ;;      Locals:         0       1       0       0       0
  3272 ;;      Temps:          0       1       0       0       0
  3273 ;;      Totals:         0       6       0       0       0
  3274 ;;Total ram usage:        6 bytes
  3275 ;; Hardware stack levels used:    1
  3276 ;; Hardware stack levels required when called:    3
  3277 ;; This function calls:
  3278 ;;		Nothing
  3279 ;; This function is called by:
  3280 ;;		_printf
  3281 ;; This function uses a non-reentrant model
  3282 ;;
  3283                           
  3284                           
  3285                           ;psect for function ___lwmod
  3286  0F52                     ___lwmod:	
  3287                           
  3288                           ;incstack = 0
  3289                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3290  0F52  1283               	bcf	3,5	;RP0=0, select bank0
  3291  0F53  1303               	bcf	3,6	;RP1=0, select bank0
  3292  0F54  083C               	movf	___lwmod@divisor,w
  3293  0F55  043D               	iorwf	___lwmod@divisor+1,w
  3294  0F56  1903               	btfsc	3,2
  3295  0F57  2F81               	goto	l1648
  3296  0F58  01C1               	clrf	___lwmod@counter
  3297  0F59  0AC1               	incf	___lwmod@counter,f
  3298  0F5A                     l1638:	
  3299  0F5A  1BBD               	btfsc	___lwmod@divisor+1,7
  3300  0F5B  2F68               	goto	l1640
  3301  0F5C  3001               	movlw	1
  3302  0F5D                     u1375:	
  3303  0F5D  1003               	clrc
  3304  0F5E  0DBC               	rlf	___lwmod@divisor,f
  3305  0F5F  0DBD               	rlf	___lwmod@divisor+1,f
  3306  0F60  3EFF               	addlw	-1
  3307  0F61  1D03               	skipz
  3308  0F62  2F5D               	goto	u1375
  3309  0F63  3001               	movlw	1
  3310  0F64  00C0               	movwf	??___lwmod
  3311  0F65  0840               	movf	??___lwmod,w
  3312  0F66  07C1               	addwf	___lwmod@counter,f
  3313  0F67  2F5A               	goto	l1638
  3314  0F68                     l1640:	
  3315  0F68  083D               	movf	___lwmod@divisor+1,w
  3316  0F69  023F               	subwf	___lwmod@dividend+1,w
  3317  0F6A  1D03               	skipz
  3318  0F6B  2F6E               	goto	u1395
  3319  0F6C  083C               	movf	___lwmod@divisor,w
  3320  0F6D  023E               	subwf	___lwmod@dividend,w
  3321  0F6E                     u1395:	
  3322  0F6E  1C03               	skipc
  3323  0F6F  2F76               	goto	l1644
  3324  0F70  083C               	movf	___lwmod@divisor,w
  3325  0F71  02BE               	subwf	___lwmod@dividend,f
  3326  0F72  083D               	movf	___lwmod@divisor+1,w
  3327  0F73  1C03               	skipc
  3328  0F74  03BF               	decf	___lwmod@dividend+1,f
  3329  0F75  02BF               	subwf	___lwmod@dividend+1,f
  3330  0F76                     l1644:	
  3331  0F76  3001               	movlw	1
  3332  0F77                     u1405:	
  3333  0F77  1003               	clrc
  3334  0F78  0CBD               	rrf	___lwmod@divisor+1,f
  3335  0F79  0CBC               	rrf	___lwmod@divisor,f
  3336  0F7A  3EFF               	addlw	-1
  3337  0F7B  1D03               	skipz
  3338  0F7C  2F77               	goto	u1405
  3339  0F7D  3001               	movlw	1
  3340  0F7E  02C1               	subwf	___lwmod@counter,f
  3341  0F7F  1D03               	btfss	3,2
  3342  0F80  2F68               	goto	l1640
  3343  0F81                     l1648:	
  3344  0F81  083F               	movf	___lwmod@dividend+1,w
  3345  0F82  00BD               	movwf	?___lwmod+1
  3346  0F83  083E               	movf	___lwmod@dividend,w
  3347  0F84  00BC               	movwf	?___lwmod
  3348  0F85  0008               	return
  3349  0F86                     __end_of___lwmod:	
  3350                           
  3351                           	psect	text16
  3352  0FC2                     __ptext16:	
  3353 ;; *************** function ___lwdiv *****************
  3354 ;; Defined at:
  3355 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  3356 ;; Parameters:    Size  Location     Type
  3357 ;;  divisor         2   20[BANK0 ] unsigned int 
  3358 ;;  dividend        2   22[BANK0 ] unsigned int 
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;  quotient        2   25[BANK0 ] unsigned int 
  3361 ;;  counter         1   27[BANK0 ] unsigned char 
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  2   20[BANK0 ] unsigned int 
  3364 ;; Registers used:
  3365 ;;		wreg, status,2, status,0
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3371 ;;      Params:         0       4       0       0       0
  3372 ;;      Locals:         0       3       0       0       0
  3373 ;;      Temps:          0       1       0       0       0
  3374 ;;      Totals:         0       8       0       0       0
  3375 ;;Total ram usage:        8 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:    3
  3378 ;; This function calls:
  3379 ;;		Nothing
  3380 ;; This function is called by:
  3381 ;;		_printf
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           
  3386                           ;psect for function ___lwdiv
  3387  0FC2                     ___lwdiv:	
  3388                           
  3389                           ;incstack = 0
  3390                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3391  0FC2  1283               	bcf	3,5	;RP0=0, select bank0
  3392  0FC3  1303               	bcf	3,6	;RP1=0, select bank0
  3393  0FC4  01B9               	clrf	___lwdiv@quotient
  3394  0FC5  01BA               	clrf	___lwdiv@quotient+1
  3395  0FC6  0834               	movf	___lwdiv@divisor,w
  3396  0FC7  0435               	iorwf	___lwdiv@divisor+1,w
  3397  0FC8  1903               	btfsc	3,2
  3398  0FC9  2FFB               	goto	l1626
  3399  0FCA  01BB               	clrf	___lwdiv@counter
  3400  0FCB  0ABB               	incf	___lwdiv@counter,f
  3401  0FCC                     l1614:	
  3402  0FCC  1BB5               	btfsc	___lwdiv@divisor+1,7
  3403  0FCD  2FDA               	goto	l1616
  3404  0FCE  3001               	movlw	1
  3405  0FCF                     u1305:	
  3406  0FCF  1003               	clrc
  3407  0FD0  0DB4               	rlf	___lwdiv@divisor,f
  3408  0FD1  0DB5               	rlf	___lwdiv@divisor+1,f
  3409  0FD2  3EFF               	addlw	-1
  3410  0FD3  1D03               	skipz
  3411  0FD4  2FCF               	goto	u1305
  3412  0FD5  3001               	movlw	1
  3413  0FD6  00B8               	movwf	??___lwdiv
  3414  0FD7  0838               	movf	??___lwdiv,w
  3415  0FD8  07BB               	addwf	___lwdiv@counter,f
  3416  0FD9  2FCC               	goto	l1614
  3417  0FDA                     l1616:	
  3418  0FDA  3001               	movlw	1
  3419  0FDB                     u1325:	
  3420  0FDB  1003               	clrc
  3421  0FDC  0DB9               	rlf	___lwdiv@quotient,f
  3422  0FDD  0DBA               	rlf	___lwdiv@quotient+1,f
  3423  0FDE  3EFF               	addlw	-1
  3424  0FDF  1D03               	skipz
  3425  0FE0  2FDB               	goto	u1325
  3426  0FE1  0835               	movf	___lwdiv@divisor+1,w
  3427  0FE2  0237               	subwf	___lwdiv@dividend+1,w
  3428  0FE3  1D03               	skipz
  3429  0FE4  2FE7               	goto	u1335
  3430  0FE5  0834               	movf	___lwdiv@divisor,w
  3431  0FE6  0236               	subwf	___lwdiv@dividend,w
  3432  0FE7                     u1335:	
  3433  0FE7  1C03               	skipc
  3434  0FE8  2FF0               	goto	l1622
  3435  0FE9  0834               	movf	___lwdiv@divisor,w
  3436  0FEA  02B6               	subwf	___lwdiv@dividend,f
  3437  0FEB  0835               	movf	___lwdiv@divisor+1,w
  3438  0FEC  1C03               	skipc
  3439  0FED  03B7               	decf	___lwdiv@dividend+1,f
  3440  0FEE  02B7               	subwf	___lwdiv@dividend+1,f
  3441  0FEF  1439               	bsf	___lwdiv@quotient,0
  3442  0FF0                     l1622:	
  3443  0FF0  3001               	movlw	1
  3444  0FF1                     u1345:	
  3445  0FF1  1003               	clrc
  3446  0FF2  0CB5               	rrf	___lwdiv@divisor+1,f
  3447  0FF3  0CB4               	rrf	___lwdiv@divisor,f
  3448  0FF4  3EFF               	addlw	-1
  3449  0FF5  1D03               	skipz
  3450  0FF6  2FF1               	goto	u1345
  3451  0FF7  3001               	movlw	1
  3452  0FF8  02BB               	subwf	___lwdiv@counter,f
  3453  0FF9  1D03               	btfss	3,2
  3454  0FFA  2FDA               	goto	l1616
  3455  0FFB                     l1626:	
  3456  0FFB  083A               	movf	___lwdiv@quotient+1,w
  3457  0FFC  00B5               	movwf	?___lwdiv+1
  3458  0FFD  0839               	movf	___lwdiv@quotient,w
  3459  0FFE  00B4               	movwf	?___lwdiv
  3460  0FFF  0008               	return
  3461  1000                     __end_of___lwdiv:	
  3462                           
  3463                           	psect	text17
  3464  0E79                     __ptext17:	
  3465 ;; *************** function _configUSARTInterrupts *****************
  3466 ;; Defined at:
  3467 ;;		line 32 in file "usart.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;		None
  3470 ;; Auto vars:     Size  Location     Type
  3471 ;;		None
  3472 ;; Return value:  Size  Location     Type
  3473 ;;		None               void
  3474 ;; Registers used:
  3475 ;;		None
  3476 ;; Tracked objects:
  3477 ;;		On entry : 0/0
  3478 ;;		On exit  : 0/0
  3479 ;;		Unchanged: 0/0
  3480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3481 ;;      Params:         0       0       0       0       0
  3482 ;;      Locals:         0       0       0       0       0
  3483 ;;      Temps:          0       0       0       0       0
  3484 ;;      Totals:         0       0       0       0       0
  3485 ;;Total ram usage:        0 bytes
  3486 ;; Hardware stack levels used:    1
  3487 ;; Hardware stack levels required when called:    3
  3488 ;; This function calls:
  3489 ;;		Nothing
  3490 ;; This function is called by:
  3491 ;;		_main
  3492 ;; This function uses a non-reentrant model
  3493 ;;
  3494                           
  3495                           
  3496                           ;psect for function _configUSARTInterrupts
  3497  0E79                     _configUSARTInterrupts:	
  3498                           
  3499                           ;usart.c: 35: TXIE = 0;
  3500                           
  3501                           ;incstack = 0
  3502                           ; Regs used in _configUSARTInterrupts: []
  3503  0E79  1683               	bsf	3,5	;RP0=1, select bank1
  3504  0E7A  1303               	bcf	3,6	;RP1=0, select bank1
  3505  0E7B  120C               	bcf	12,4	;volatile
  3506                           
  3507                           ;usart.c: 36: TXIF = 0;
  3508  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  3509  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  3510  0E7E  120C               	bcf	12,4	;volatile
  3511                           
  3512                           ;usart.c: 39: RCIE = 1;
  3513  0E7F  1683               	bsf	3,5	;RP0=1, select bank1
  3514  0E80  1303               	bcf	3,6	;RP1=0, select bank1
  3515  0E81  168C               	bsf	12,5	;volatile
  3516                           
  3517                           ;usart.c: 40: RCIF = 0;
  3518  0E82  1283               	bcf	3,5	;RP0=0, select bank0
  3519  0E83  1303               	bcf	3,6	;RP1=0, select bank0
  3520  0E84  128C               	bcf	12,5	;volatile
  3521                           
  3522                           ;usart.c: 42: PEIE = 1;
  3523  0E85  170B               	bsf	11,6	;volatile
  3524                           
  3525                           ;usart.c: 43: GIE = 1;
  3526  0E86  178B               	bsf	11,7	;volatile
  3527  0E87  0008               	return
  3528  0E88                     __end_of_configUSARTInterrupts:	
  3529                           
  3530                           	psect	text18
  3531  0E5E                     __ptext18:	
  3532 ;; *************** function _configTimer *****************
  3533 ;; Defined at:
  3534 ;;		line 17 in file "timer0.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;		None
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;		None
  3539 ;; Return value:  Size  Location     Type
  3540 ;;		None               void
  3541 ;; Registers used:
  3542 ;;		None
  3543 ;; Tracked objects:
  3544 ;;		On entry : 0/0
  3545 ;;		On exit  : 0/0
  3546 ;;		Unchanged: 0/0
  3547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3548 ;;      Params:         0       0       0       0       0
  3549 ;;      Locals:         0       0       0       0       0
  3550 ;;      Temps:          0       0       0       0       0
  3551 ;;      Totals:         0       0       0       0       0
  3552 ;;Total ram usage:        0 bytes
  3553 ;; Hardware stack levels used:    1
  3554 ;; Hardware stack levels required when called:    3
  3555 ;; This function calls:
  3556 ;;		Nothing
  3557 ;; This function is called by:
  3558 ;;		_main
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562                           
  3563                           ;psect for function _configTimer
  3564  0E5E                     _configTimer:	
  3565                           
  3566                           ;timer0.c: 18: OPTION_REGbits.T0CS = 0;
  3567                           
  3568                           ;incstack = 0
  3569                           ; Regs used in _configTimer: []
  3570  0E5E  1683               	bsf	3,5	;RP0=1, select bank1
  3571  0E5F  1303               	bcf	3,6	;RP1=0, select bank1
  3572  0E60  1281               	bcf	1,5	;volatile
  3573                           
  3574                           ;timer0.c: 19: OPTION_REGbits.T0SE = 0;
  3575  0E61  1201               	bcf	1,4	;volatile
  3576                           
  3577                           ;timer0.c: 20: OPTION_REGbits.PSA = 0;
  3578  0E62  1181               	bcf	1,3	;volatile
  3579                           
  3580                           ;timer0.c: 24: OPTION_REGbits.PS2 = 1;
  3581  0E63  1501               	bsf	1,2	;volatile
  3582                           
  3583                           ;timer0.c: 25: OPTION_REGbits.PS1 = 1;
  3584  0E64  1481               	bsf	1,1	;volatile
  3585                           
  3586                           ;timer0.c: 26: OPTION_REGbits.PS0 = 1;
  3587  0E65  1401               	bsf	1,0	;volatile
  3588                           
  3589                           ;timer0.c: 28: INTCONbits.TMR0IF = 0;
  3590  0E66  110B               	bcf	11,2	;volatile
  3591                           
  3592                           ;timer0.c: 29: INTCONbits.TMR0IE = 1;
  3593  0E67  168B               	bsf	11,5	;volatile
  3594                           
  3595                           ;timer0.c: 30: INTCONbits.GIE = 1;
  3596  0E68  178B               	bsf	11,7	;volatile
  3597                           
  3598                           ;timer0.c: 31: INTCONbits.PEIE = 1;
  3599  0E69  170B               	bsf	11,6	;volatile
  3600  0E6A  0008               	return
  3601  0E6B                     __end_of_configTimer:	
  3602                           
  3603                           	psect	text19
  3604  07EC                     __ptext19:	
  3605 ;; *************** function _configRS232 *****************
  3606 ;; Defined at:
  3607 ;;		line 9 in file "usart.c"
  3608 ;; Parameters:    Size  Location     Type
  3609 ;;		None
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;		None
  3612 ;; Return value:  Size  Location     Type
  3613 ;;		None               void
  3614 ;; Registers used:
  3615 ;;		wreg
  3616 ;; Tracked objects:
  3617 ;;		On entry : 0/0
  3618 ;;		On exit  : 0/0
  3619 ;;		Unchanged: 0/0
  3620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3621 ;;      Params:         0       0       0       0       0
  3622 ;;      Locals:         0       0       0       0       0
  3623 ;;      Temps:          0       0       0       0       0
  3624 ;;      Totals:         0       0       0       0       0
  3625 ;;Total ram usage:        0 bytes
  3626 ;; Hardware stack levels used:    1
  3627 ;; Hardware stack levels required when called:    3
  3628 ;; This function calls:
  3629 ;;		Nothing
  3630 ;; This function is called by:
  3631 ;;		_main
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635                           
  3636                           ;psect for function _configRS232
  3637  07EC                     _configRS232:	
  3638                           
  3639                           ;usart.c: 12: CSRC = 0;
  3640                           
  3641                           ;incstack = 0
  3642                           ; Regs used in _configRS232: [wreg]
  3643  07EC  1683               	bsf	3,5	;RP0=1, select bank1
  3644  07ED  1303               	bcf	3,6	;RP1=0, select bank1
  3645  07EE  1398               	bcf	24,7	;volatile
  3646                           
  3647                           ;usart.c: 13: TX9 = 0;
  3648  07EF  1318               	bcf	24,6	;volatile
  3649                           
  3650                           ;usart.c: 14: TXEN = 1;
  3651  07F0  1698               	bsf	24,5	;volatile
  3652                           
  3653                           ;usart.c: 15: SYNC = 0;
  3654  07F1  1218               	bcf	24,4	;volatile
  3655                           
  3656                           ;usart.c: 16: BRGH = 1;
  3657  07F2  1518               	bsf	24,2	;volatile
  3658                           
  3659                           ;usart.c: 19: SPEN = 1;
  3660  07F3  1283               	bcf	3,5	;RP0=0, select bank0
  3661  07F4  1303               	bcf	3,6	;RP1=0, select bank0
  3662  07F5  1798               	bsf	24,7	;volatile
  3663                           
  3664                           ;usart.c: 20: RX9 = 0;
  3665  07F6  1318               	bcf	24,6	;volatile
  3666                           
  3667                           ;usart.c: 21: CREN = 1;
  3668  07F7  1618               	bsf	24,4	;volatile
  3669                           
  3670                           ;usart.c: 27: SPBRG = 129;
  3671  07F8  3081               	movlw	129
  3672  07F9  1683               	bsf	3,5	;RP0=1, select bank1
  3673  07FA  1303               	bcf	3,6	;RP1=0, select bank1
  3674  07FB  0099               	movwf	25	;volatile
  3675  07FC  0008               	return
  3676  07FD                     __end_of_configRS232:	
  3677                           
  3678                           	psect	text20
  3679  0E2E                     __ptext20:	
  3680 ;; *************** function _configADInterrupt *****************
  3681 ;; Defined at:
  3682 ;;		line 11 in file "ad.c"
  3683 ;; Parameters:    Size  Location     Type
  3684 ;;		None
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;		None
  3687 ;; Return value:  Size  Location     Type
  3688 ;;		None               void
  3689 ;; Registers used:
  3690 ;;		None
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3696 ;;      Params:         0       0       0       0       0
  3697 ;;      Locals:         0       0       0       0       0
  3698 ;;      Temps:          0       0       0       0       0
  3699 ;;      Totals:         0       0       0       0       0
  3700 ;;Total ram usage:        0 bytes
  3701 ;; Hardware stack levels used:    1
  3702 ;; Hardware stack levels required when called:    3
  3703 ;; This function calls:
  3704 ;;		Nothing
  3705 ;; This function is called by:
  3706 ;;		_main
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           
  3711                           ;psect for function _configADInterrupt
  3712  0E2E                     _configADInterrupt:	
  3713                           
  3714                           ;ad.c: 12: PIR1bits.ADIF = 0;
  3715                           
  3716                           ;incstack = 0
  3717                           ; Regs used in _configADInterrupt: []
  3718  0E2E  1283               	bcf	3,5	;RP0=0, select bank0
  3719  0E2F  1303               	bcf	3,6	;RP1=0, select bank0
  3720  0E30  130C               	bcf	12,6	;volatile
  3721                           
  3722                           ;ad.c: 13: PIE1bits.ADIE = 1;
  3723  0E31  1683               	bsf	3,5	;RP0=1, select bank1
  3724  0E32  1303               	bcf	3,6	;RP1=0, select bank1
  3725  0E33  170C               	bsf	12,6	;volatile
  3726                           
  3727                           ;ad.c: 15: INTCONbits.GIE = 1;
  3728  0E34  178B               	bsf	11,7	;volatile
  3729                           
  3730                           ;ad.c: 16: INTCONbits.PEIE = 1;
  3731  0E35  170B               	bsf	11,6	;volatile
  3732  0E36  0008               	return
  3733  0E37                     __end_of_configADInterrupt:	
  3734                           
  3735                           	psect	text21
  3736  0E88                     __ptext21:	
  3737 ;; *************** function _configAD *****************
  3738 ;; Defined at:
  3739 ;;		line 19 in file "ad.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;		None
  3742 ;; Auto vars:     Size  Location     Type
  3743 ;;		None
  3744 ;; Return value:  Size  Location     Type
  3745 ;;		None               void
  3746 ;; Registers used:
  3747 ;;		None
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3753 ;;      Params:         0       0       0       0       0
  3754 ;;      Locals:         0       0       0       0       0
  3755 ;;      Temps:          0       0       0       0       0
  3756 ;;      Totals:         0       0       0       0       0
  3757 ;;Total ram usage:        0 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; Hardware stack levels required when called:    3
  3760 ;; This function calls:
  3761 ;;		Nothing
  3762 ;; This function is called by:
  3763 ;;		_main
  3764 ;; This function uses a non-reentrant model
  3765 ;;
  3766                           
  3767                           
  3768                           ;psect for function _configAD
  3769  0E88                     _configAD:	
  3770                           
  3771                           ;ad.c: 20: ADCON0bits.ADON = 1;
  3772                           
  3773                           ;incstack = 0
  3774                           ; Regs used in _configAD: []
  3775  0E88  1283               	bcf	3,5	;RP0=0, select bank0
  3776  0E89  1303               	bcf	3,6	;RP1=0, select bank0
  3777  0E8A  141F               	bsf	31,0	;volatile
  3778                           
  3779                           ;ad.c: 24: ADFM = 1;
  3780  0E8B  1683               	bsf	3,5	;RP0=1, select bank1
  3781  0E8C  1303               	bcf	3,6	;RP1=0, select bank1
  3782  0E8D  179F               	bsf	31,7	;volatile
  3783                           
  3784                           ;ad.c: 27: ADCON1bits.PCFG3 = 0;
  3785  0E8E  119F               	bcf	31,3	;volatile
  3786                           
  3787                           ;ad.c: 28: ADCON1bits.PCFG2 = 1;
  3788  0E8F  151F               	bsf	31,2	;volatile
  3789                           
  3790                           ;ad.c: 29: ADCON1bits.PCFG1 = 0;
  3791  0E90  109F               	bcf	31,1	;volatile
  3792                           
  3793                           ;ad.c: 30: ADCON1bits.PCFG0 = 1;
  3794  0E91  141F               	bsf	31,0	;volatile
  3795                           
  3796                           ;ad.c: 41: ADCS2 = 0;
  3797  0E92  131F               	bcf	31,6	;volatile
  3798                           
  3799                           ;ad.c: 42: ADCS1 = 1;
  3800  0E93  1283               	bcf	3,5	;RP0=0, select bank0
  3801  0E94  1303               	bcf	3,6	;RP1=0, select bank0
  3802  0E95  179F               	bsf	31,7	;volatile
  3803                           
  3804                           ;ad.c: 43: ADCS0 = 0;
  3805  0E96  131F               	bcf	31,6	;volatile
  3806  0E97  0008               	return
  3807  0E98                     __end_of_configAD:	
  3808                           
  3809                           	psect	text22
  3810  0EC2                     __ptext22:	
  3811 ;; *************** function _InitI2C_Master *****************
  3812 ;; Defined at:
  3813 ;;		line 12 in file "i2c.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;		None
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;		None
  3818 ;; Return value:  Size  Location     Type
  3819 ;;		None               void
  3820 ;; Registers used:
  3821 ;;		wreg, status,2
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3827 ;;      Params:         0       0       0       0       0
  3828 ;;      Locals:         0       0       0       0       0
  3829 ;;      Temps:          0       0       0       0       0
  3830 ;;      Totals:         0       0       0       0       0
  3831 ;;Total ram usage:        0 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; Hardware stack levels required when called:    3
  3834 ;; This function calls:
  3835 ;;		Nothing
  3836 ;; This function is called by:
  3837 ;;		_main
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           
  3842                           ;psect for function _InitI2C_Master
  3843  0EC2                     _InitI2C_Master:	
  3844                           
  3845                           ;i2c.c: 14: TRISC4 = 1;
  3846                           
  3847                           ;incstack = 0
  3848                           ; Regs used in _InitI2C_Master: [wreg+status,2]
  3849  0EC2  1683               	bsf	3,5	;RP0=1, select bank1
  3850  0EC3  1303               	bcf	3,6	;RP1=0, select bank1
  3851  0EC4  1607               	bsf	7,4	;volatile
  3852                           
  3853                           ;i2c.c: 15: TRISC3 = 1;
  3854  0EC5  1587               	bsf	7,3	;volatile
  3855                           
  3856                           ;i2c.c: 17: SSPADD = ( 20000000 / (4*100000) ) - 1;
  3857  0EC6  3031               	movlw	49
  3858  0EC7  0093               	movwf	19	;volatile
  3859                           
  3860                           ;i2c.c: 20: SSPIF = 0;
  3861  0EC8  1283               	bcf	3,5	;RP0=0, select bank0
  3862  0EC9  1303               	bcf	3,6	;RP1=0, select bank0
  3863  0ECA  118C               	bcf	12,3	;volatile
  3864                           
  3865                           ;i2c.c: 23: SSPSTAT = 0;
  3866  0ECB  1683               	bsf	3,5	;RP0=1, select bank1
  3867  0ECC  1303               	bcf	3,6	;RP1=0, select bank1
  3868  0ECD  0194               	clrf	20	;volatile
  3869                           
  3870                           ;i2c.c: 24: SSPSTATbits.SMP = 1;
  3871  0ECE  1794               	bsf	20,7	;volatile
  3872                           
  3873                           ;i2c.c: 25: SSPSTATbits.CKE = 0;
  3874  0ECF  1314               	bcf	20,6	;volatile
  3875                           
  3876                           ;i2c.c: 29: WCOL = 0;
  3877  0ED0  1283               	bcf	3,5	;RP0=0, select bank0
  3878  0ED1  1303               	bcf	3,6	;RP1=0, select bank0
  3879  0ED2  1394               	bcf	20,7	;volatile
  3880                           
  3881                           ;i2c.c: 30: SSPOV = 0;
  3882  0ED3  1314               	bcf	20,6	;volatile
  3883                           
  3884                           ;i2c.c: 31: SSPEN = 0;
  3885  0ED4  1294               	bcf	20,5	;volatile
  3886                           
  3887                           ;i2c.c: 32: CKP = 0;
  3888  0ED5  1214               	bcf	20,4	;volatile
  3889                           
  3890                           ;i2c.c: 34: SSPM3 = 1;
  3891  0ED6  1594               	bsf	20,3	;volatile
  3892                           
  3893                           ;i2c.c: 35: SSPM2 = 0;
  3894  0ED7  1114               	bcf	20,2	;volatile
  3895                           
  3896                           ;i2c.c: 36: SSPM1 = 0;
  3897  0ED8  1094               	bcf	20,1	;volatile
  3898                           
  3899                           ;i2c.c: 37: SSPM0 = 0;
  3900  0ED9  1014               	bcf	20,0	;volatile
  3901                           
  3902                           ;i2c.c: 39: SSPEN = 1;
  3903  0EDA  1694               	bsf	20,5	;volatile
  3904  0EDB  0008               	return
  3905  0EDC                     __end_of_InitI2C_Master:	
  3906                           
  3907                           	psect	text23
  3908  05C8                     __ptext23:	
  3909 ;; *************** function _interruptions *****************
  3910 ;; Defined at:
  3911 ;;		line 39 in file "main.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;		None
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;		None
  3916 ;; Return value:  Size  Location     Type
  3917 ;;		None               void
  3918 ;; Registers used:
  3919 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3920 ;; Tracked objects:
  3921 ;;		On entry : 0/0
  3922 ;;		On exit  : 0/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3925 ;;      Params:         0       0       0       0       0
  3926 ;;      Locals:         0       0       0       0       0
  3927 ;;      Temps:          0       7       0       0       0
  3928 ;;      Totals:         0       7       0       0       0
  3929 ;;Total ram usage:        7 bytes
  3930 ;; Hardware stack levels used:    1
  3931 ;; Hardware stack levels required when called:    2
  3932 ;; This function calls:
  3933 ;;		___awmod
  3934 ;;		_strcpy
  3935 ;;		i1_printf
  3936 ;; This function is called by:
  3937 ;;		Interrupt level 1
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           
  3942                           ;psect for function _interruptions
  3943  05C8                     _interruptions:	
  3944                           
  3945                           ;main.c: 41: if (RCIF){
  3946  05C8  1E8C               	btfss	12,5	;volatile
  3947  05C9  2E20               	goto	i1l2148
  3948                           
  3949                           ;main.c: 42: if (FERR || OERR)
  3950  05CA  1918               	btfsc	24,2	;volatile
  3951  05CB  2DCE               	goto	i1l290
  3952  05CC  1C98               	btfss	24,1	;volatile
  3953  05CD  2DD1               	goto	i1l2124
  3954  05CE                     i1l290:	
  3955                           
  3956                           ;main.c: 43: {
  3957                           ;main.c: 44: CREN = 0;
  3958  05CE  1218               	bcf	24,4	;volatile
  3959                           
  3960                           ;main.c: 45: hasAnError = 1;
  3961  05CF  14D3               	bsf	_hasAnError/(0+8),_hasAnError& (0+7)
  3962                           
  3963                           ;main.c: 46: CREN = 1;
  3964  05D0  1618               	bsf	24,4	;volatile
  3965  05D1                     i1l2124:	
  3966                           
  3967                           ;main.c: 47: }
  3968                           ;main.c: 49: receivedData = RCREG;
  3969  05D1  081A               	movf	26,w	;volatile
  3970  05D2  00AD               	movwf	??_interruptions
  3971  05D3  082D               	movf	??_interruptions,w
  3972  05D4  00D2               	movwf	_receivedData
  3973                           
  3974                           ;main.c: 51: if(receivedData == '\r')
  3975  05D5  300D               	movlw	13
  3976  05D6  0652               	xorwf	_receivedData,w
  3977  05D7  1D03               	btfss	3,2
  3978  05D8  2DF2               	goto	i1l2136
  3979                           
  3980                           ;main.c: 52: {
  3981                           ;main.c: 53: string_aux[i] = '\0';
  3982  05D9  084B               	movf	_i,w
  3983  05DA  3EBA               	addlw	(low (_string_aux| 0))& (0+255)
  3984  05DB  0084               	movwf	4
  3985  05DC  1383               	bcf	3,7	;select IRP bank1
  3986  05DD  0180               	clrf	0
  3987                           
  3988                           ;main.c: 54: strcpy(string,string_aux);
  3989  05DE  30BA               	movlw	(low (_string_aux| 0))& (0+255)
  3990  05DF  00AD               	movwf	??_interruptions
  3991  05E0  082D               	movf	??_interruptions,w
  3992  05E1  00F0               	movwf	strcpy@from
  3993  05E2  30A0               	movlw	(low (_string| 0))& (0+255)
  3994  05E3  120A  158A  26A8  120A  118A  	fcall	_strcpy
  3995                           
  3996                           ;main.c: 55: printf("\n\r");
  3997  05E8  304A               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3998  05E9  120A  118A  2288  120A  118A  	fcall	i1_printf
  3999                           
  4000                           ;main.c: 56: i = 0;
  4001  05EE  1283               	bcf	3,5	;RP0=0, select bank0
  4002  05EF  1303               	bcf	3,6	;RP1=0, select bank0
  4003  05F0  01CB               	clrf	_i
  4004                           
  4005                           ;main.c: 57: }else
  4006  05F1  2E20               	goto	i1l2148
  4007  05F2                     i1l2136:	
  4008                           
  4009                           ;main.c: 58: {
  4010                           ;main.c: 59: if(i < 25)
  4011  05F2  3019               	movlw	25
  4012  05F3  024B               	subwf	_i,w
  4013  05F4  1803               	skipnc
  4014  05F5  2E18               	goto	i1l2144
  4015                           
  4016                           ;main.c: 60: {
  4017                           ;main.c: 61: i = i%25;
  4018  05F6  3019               	movlw	25
  4019  05F7  00F0               	movwf	___awmod@divisor
  4020  05F8  3000               	movlw	0
  4021  05F9  00F1               	movwf	___awmod@divisor+1
  4022  05FA  084B               	movf	_i,w
  4023  05FB  00AD               	movwf	??_interruptions
  4024  05FC  01AE               	clrf	??_interruptions+1
  4025  05FD  082D               	movf	??_interruptions,w
  4026  05FE  00F2               	movwf	___awmod@dividend
  4027  05FF  082E               	movf	??_interruptions+1,w
  4028  0600  00F3               	movwf	___awmod@dividend+1
  4029  0601  120A  118A  2760  120A  118A  	fcall	___awmod
  4030  0606  0870               	movf	?___awmod,w
  4031  0607  1283               	bcf	3,5	;RP0=0, select bank0
  4032  0608  1303               	bcf	3,6	;RP1=0, select bank0
  4033  0609  00AF               	movwf	??_interruptions+2
  4034  060A  082F               	movf	??_interruptions+2,w
  4035  060B  00CB               	movwf	_i
  4036                           
  4037                           ;main.c: 62: string_aux[i] = receivedData;
  4038  060C  0852               	movf	_receivedData,w
  4039  060D  00AD               	movwf	??_interruptions
  4040  060E  084B               	movf	_i,w
  4041  060F  3EBA               	addlw	(low (_string_aux| 0))& (0+255)
  4042  0610  0084               	movwf	4
  4043  0611  082D               	movf	??_interruptions,w
  4044  0612  1383               	bcf	3,7	;select IRP bank1
  4045  0613  0080               	movwf	0
  4046                           
  4047                           ;main.c: 63: i++;
  4048  0614  3001               	movlw	1
  4049  0615  00AD               	movwf	??_interruptions
  4050  0616  082D               	movf	??_interruptions,w
  4051  0617  07CB               	addwf	_i,f
  4052  0618                     i1l2144:	
  4053                           
  4054                           ;main.c: 64: }
  4055                           ;main.c: 65: if(i == 25)
  4056  0618  3019               	movlw	25
  4057  0619  064B               	xorwf	_i,w
  4058  061A  1D03               	btfss	3,2
  4059  061B  2E20               	goto	i1l2148
  4060                           
  4061                           ;main.c: 66: i++;
  4062  061C  3001               	movlw	1
  4063  061D  00AD               	movwf	??_interruptions
  4064  061E  082D               	movf	??_interruptions,w
  4065  061F  07CB               	addwf	_i,f
  4066  0620                     i1l2148:	
  4067                           
  4068                           ;main.c: 67: }
  4069                           ;main.c: 68: }
  4070                           ;main.c: 70: if(PIR1bits.ADIF){
  4071  0620  1F0C               	btfss	12,6	;volatile
  4072  0621  2E2B               	goto	i1l2154
  4073                           
  4074                           ;main.c: 71: data_ADC = ((ADRESH<<8) + ADRESL);
  4075  0622  081E               	movf	30,w	;volatile
  4076  0623  00C6               	movwf	_data_ADC+1
  4077  0624  1683               	bsf	3,5	;RP0=1, select bank1
  4078  0625  1303               	bcf	3,6	;RP1=0, select bank1
  4079  0626  081E               	movf	30,w	;volatile
  4080  0627  1283               	bcf	3,5	;RP0=0, select bank0
  4081  0628  1303               	bcf	3,6	;RP1=0, select bank0
  4082  0629  00C5               	movwf	_data_ADC
  4083                           
  4084                           ;main.c: 73: PIR1bits.ADIF = 0;
  4085  062A  130C               	bcf	12,6	;volatile
  4086  062B                     i1l2154:	
  4087                           
  4088                           ;main.c: 74: }
  4089                           ;main.c: 76: if(INTCONbits.TMR0IF){
  4090  062B  1D0B               	btfss	11,2	;volatile
  4091  062C  2E34               	goto	i1l297
  4092                           
  4093                           ;main.c: 77: contLedRD4++;
  4094  062D  3001               	movlw	1
  4095  062E  00AD               	movwf	??_interruptions
  4096  062F  082D               	movf	??_interruptions,w
  4097  0630  07C8               	addwf	_contLedRD4,f
  4098                           
  4099                           ;main.c: 78: changing = ~changing;
  4100  0631  3001               	movlw	(0+1) shl (_changing& (0+7))
  4101  0632  06D3               	xorwf	_changing/(0+8),f
  4102                           
  4103                           ;main.c: 79: INTCONbits.TMR0IF = 0;
  4104  0633  110B               	bcf	11,2	;volatile
  4105  0634                     i1l297:	
  4106  0634  0833               	movf	??_interruptions+6,w
  4107  0635  00FF               	movwf	127
  4108  0636  0832               	movf	??_interruptions+5,w
  4109  0637  008A               	movwf	10
  4110  0638  0831               	movf	??_interruptions+4,w
  4111  0639  0084               	movwf	4
  4112  063A  0E30               	swapf	(??_interruptions+3)^0,w
  4113  063B  0083               	movwf	3
  4114  063C  0EFE               	swapf	126,f
  4115  063D  0E7E               	swapf	126,w
  4116  063E  0009               	retfie
  4117  063F                     __end_of_interruptions:	
  4118                           
  4119                           	psect	intentry
  4120  0004                     __pintentry:	
  4121                           ;incstack = 0
  4122                           ; Regs used in _interruptions: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4123                           
  4124  0004                     interrupt_function:	
  4125  007E                     saved_w	set	btemp
  4126  0004  00FE               	movwf	btemp
  4127  0005  0E03               	swapf	3,w
  4128  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4129  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4130  0008  00B0               	movwf	??_interruptions+3
  4131  0009  0804               	movf	4,w
  4132  000A  00B1               	movwf	??_interruptions+4
  4133  000B  080A               	movf	10,w
  4134  000C  00B2               	movwf	??_interruptions+5
  4135  000D  087F               	movf	btemp+1,w
  4136  000E  00B3               	movwf	??_interruptions+6
  4137  000F  120A  118A  2DC8   	ljmp	_interruptions
  4138                           
  4139                           	psect	text24
  4140  0288                     __ptext24:	
  4141 ;; *************** function i1_printf *****************
  4142 ;; Defined at:
  4143 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;  f               1    wreg     PTR const unsigned char 
  4146 ;;		 -> STR_3(2), STR_2(38), STR_1(3), 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  f               1    4[BANK0 ] PTR const unsigned char 
  4149 ;;		 -> STR_3(2), STR_2(38), STR_1(3), 
  4150 ;;  printf          4    0        struct .
  4151 ;;  printf          2   10[BANK0 ] int 
  4152 ;;  printf          2    8[BANK0 ] unsigned int 
  4153 ;;  printf          2    0        PTR const unsigned char 
  4154 ;;  printf          2    0        unsigned int 
  4155 ;;  printf          1   12[BANK0 ] char 
  4156 ;;  printf          1    7[BANK0 ] unsigned char 
  4157 ;;  printf          1    6[BANK0 ] char 
  4158 ;;  printf          1    5[BANK0 ] PTR void [1]
  4159 ;;		 -> ?i1_printf(2), ?_printf(2), 
  4160 ;;  printf          1    3[BANK0 ] unsigned char 
  4161 ;; Return value:  Size  Location     Type
  4162 ;;                  2    0[None  ] int 
  4163 ;; Registers used:
  4164 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4165 ;; Tracked objects:
  4166 ;;		On entry : 0/0
  4167 ;;		On exit  : 0/0
  4168 ;;		Unchanged: 0/0
  4169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4170 ;;      Params:         0       0       0       0       0
  4171 ;;      Locals:         0      10       0       0       0
  4172 ;;      Temps:          0       3       0       0       0
  4173 ;;      Totals:         0      13       0       0       0
  4174 ;;Total ram usage:       13 bytes
  4175 ;; Hardware stack levels used:    1
  4176 ;; Hardware stack levels required when called:    1
  4177 ;; This function calls:
  4178 ;;		i1___lwdiv
  4179 ;;		i1___lwmod
  4180 ;;		i1___wmul
  4181 ;;		i1_isdigit
  4182 ;;		i1_putch
  4183 ;; This function is called by:
  4184 ;;		_interruptions
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           
  4189                           ;psect for function i1_printf
  4190  0288                     i1_printf:	
  4191                           
  4192                           ;incstack = 0
  4193                           ; Regs used in i1_printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4194                           ;i1printf@f stored from wreg
  4195  0288  1283               	bcf	3,5	;RP0=0, select bank0
  4196  0289  1303               	bcf	3,6	;RP1=0, select bank0
  4197  028A  00A4               	movwf	i1printf@f
  4198                           
  4199                           ;doprnt.c: 466: va_list ap;
  4200                           ;doprnt.c: 499: signed char c;
  4201                           ;doprnt.c: 501: int width;
  4202                           ;doprnt.c: 506: signed char prec;
  4203                           ;doprnt.c: 508: unsigned char flag;
  4204                           ;doprnt.c: 523: union {
  4205                           ;doprnt.c: 524: unsigned long vd;
  4206                           ;doprnt.c: 525: double integ;
  4207                           ;doprnt.c: 526: } tmpval;
  4208                           ;doprnt.c: 528: unsigned int val;
  4209                           ;doprnt.c: 529: unsigned len;
  4210                           ;doprnt.c: 530: const char * cp;
  4211                           ;doprnt.c: 533: *ap = __va_start();
  4212  028B  3070               	movlw	(low (?i1_printf| 0))& (0+255)
  4213  028C  00A0               	movwf	??i1_printf
  4214  028D  0820               	movf	??i1_printf,w
  4215  028E  00A5               	movwf	i1printf@ap
  4216  028F                     i1l2112:	
  4217                           ;doprnt.c: 536: while(c = *f++) {
  4218                           
  4219  028F  3001               	movlw	1
  4220  0290  1283               	bcf	3,5	;RP0=0, select bank0
  4221  0291  1303               	bcf	3,6	;RP1=0, select bank0
  4222  0292  07A4               	addwf	i1printf@f,f
  4223  0293  30FF               	movlw	-1
  4224  0294  0724               	addwf	i1printf@f,w
  4225  0295  0084               	movwf	4
  4226  0296  120A  118A  270C  120A  118A  	fcall	stringdir
  4227  029B  00A0               	movwf	??i1_printf
  4228  029C  0820               	movf	??i1_printf,w
  4229  029D  00AC               	movwf	i1printf@c
  4230  029E  082C               	movf	i1printf@c,w
  4231  029F  1903               	btfsc	3,2
  4232  02A0  0008               	return
  4233                           
  4234                           ;doprnt.c: 538: if(c != '%')
  4235  02A1  3025               	movlw	37
  4236  02A2  062C               	xorwf	i1printf@c,w
  4237  02A3  1903               	btfsc	3,2
  4238  02A4  2AAC               	goto	i1l2022
  4239                           
  4240                           ;doprnt.c: 540: {
  4241                           ;doprnt.c: 541: (putch(c) );
  4242  02A5  082C               	movf	i1printf@c,w
  4243  02A6  120A  158A  25FE  120A  118A  	fcall	i1_putch
  4244                           
  4245                           ;doprnt.c: 542: continue;
  4246  02AB  2A8F               	goto	i1l2112
  4247  02AC                     i1l2022:	
  4248                           
  4249                           ;doprnt.c: 543: }
  4250                           ;doprnt.c: 546: width = 0;
  4251  02AC  1283               	bcf	3,5	;RP0=0, select bank0
  4252  02AD  1303               	bcf	3,6	;RP1=0, select bank0
  4253  02AE  01AA               	clrf	i1printf@width
  4254  02AF  01AB               	clrf	i1printf@width+1
  4255                           
  4256                           ;doprnt.c: 548: flag = 0;
  4257  02B0  01A7               	clrf	i1printf@flag
  4258                           
  4259                           ;doprnt.c: 551: switch(*f) {
  4260                           
  4261                           ;doprnt.c: 550: for(;;) {
  4262  02B1  2AB7               	goto	i1l2028
  4263  02B2                     i1l330:	
  4264                           ;doprnt.c: 579: case '0':
  4265                           
  4266                           
  4267                           ;doprnt.c: 580: flag |= 0x04;
  4268  02B2  1527               	bsf	i1printf@flag,2
  4269                           
  4270                           ;doprnt.c: 581: f++;
  4271  02B3  3001               	movlw	1
  4272  02B4  00A0               	movwf	??i1_printf
  4273  02B5  0820               	movf	??i1_printf,w
  4274  02B6  07A4               	addwf	i1printf@f,f
  4275  02B7                     i1l2028:	
  4276                           ;doprnt.c: 584: }
  4277                           
  4278                           ;doprnt.c: 582: continue;
  4279                           
  4280  02B7  0824               	movf	i1printf@f,w
  4281  02B8  0084               	movwf	4
  4282  02B9  120A  118A  270C  120A  118A  	fcall	stringdir
  4283                           
  4284                           ; Switch size 1, requested type "space"
  4285                           ; Number of cases is 1, Range of values is 48 to 48
  4286                           ; switch strategies available:
  4287                           ; Name         Instructions Cycles
  4288                           ; simple_byte            4     3 (average)
  4289                           ; direct_byte           14    11 (fixed)
  4290                           ; jumptable            263     9 (fixed)
  4291                           ;	Chosen strategy is simple_byte
  4292  02BE  3A30               	xorlw	48	; case 48
  4293  02BF  1903               	skipnz
  4294  02C0  2AB2               	goto	i1l330
  4295  02C1  2AC2               	goto	i1l2030
  4296  02C2                     i1l2030:	
  4297                           ;doprnt.c: 586: }
  4298                           
  4299                           ;doprnt.c: 585: break;
  4300                           
  4301                           
  4302                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4303  02C2  0824               	movf	i1printf@f,w
  4304  02C3  0084               	movwf	4
  4305  02C4  120A  118A  270C  120A  118A  	fcall	stringdir
  4306  02C9  120A  158A  266B  120A  118A  	fcall	i1_isdigit
  4307  02CE  1C03               	btfss	3,0
  4308  02CF  2B18               	goto	i1l2046
  4309                           
  4310                           ;doprnt.c: 598: width = 0;
  4311  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  4312  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  4313  02D2  01AA               	clrf	i1printf@width
  4314  02D3  01AB               	clrf	i1printf@width+1
  4315  02D4                     i1l2034:	
  4316                           ;doprnt.c: 599: do {
  4317                           
  4318                           
  4319                           ;doprnt.c: 600: width *= 10;
  4320  02D4  300A               	movlw	10
  4321  02D5  00F0               	movwf	i1___wmul@multiplier
  4322  02D6  3000               	movlw	0
  4323  02D7  00F1               	movwf	i1___wmul@multiplier+1
  4324  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  4325  02D9  1303               	bcf	3,6	;RP1=0, select bank0
  4326  02DA  082B               	movf	i1printf@width+1,w
  4327  02DB  00F3               	movwf	i1___wmul@multiplicand+1
  4328  02DC  082A               	movf	i1printf@width,w
  4329  02DD  00F2               	movwf	i1___wmul@multiplicand
  4330  02DE  120A  158A  26DC  120A  118A  	fcall	i1___wmul
  4331  02E3  0871               	movf	?i1___wmul+1,w
  4332  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  4333  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  4334  02E6  00AB               	movwf	i1printf@width+1
  4335  02E7  0870               	movf	?i1___wmul,w
  4336  02E8  00AA               	movwf	i1printf@width
  4337                           
  4338                           ;doprnt.c: 601: width += *f++ - '0';
  4339  02E9  0824               	movf	i1printf@f,w
  4340  02EA  0084               	movwf	4
  4341  02EB  120A  118A  270C  120A  118A  	fcall	stringdir
  4342  02F0  3ED0               	addlw	208
  4343  02F1  00A0               	movwf	??i1_printf
  4344  02F2  30FF               	movlw	255
  4345  02F3  1803               	skipnc
  4346  02F4  3000               	movlw	0
  4347  02F5  00A1               	movwf	??i1_printf+1
  4348  02F6  0820               	movf	??i1_printf,w
  4349  02F7  07AA               	addwf	i1printf@width,f
  4350  02F8  1803               	skipnc
  4351  02F9  0AAB               	incf	i1printf@width+1,f
  4352  02FA  0821               	movf	??i1_printf+1,w
  4353  02FB  07AB               	addwf	i1printf@width+1,f
  4354  02FC  3001               	movlw	1
  4355  02FD  00A0               	movwf	??i1_printf
  4356  02FE  0820               	movf	??i1_printf,w
  4357  02FF  07A4               	addwf	i1printf@f,f
  4358                           
  4359                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4360  0300  0824               	movf	i1printf@f,w
  4361  0301  0084               	movwf	4
  4362  0302  120A  118A  270C  120A  118A  	fcall	stringdir
  4363  0307  120A  158A  266B  120A  118A  	fcall	i1_isdigit
  4364  030C  1C03               	btfss	3,0
  4365  030D  2B18               	goto	i1l2046
  4366  030E  2AD4               	goto	i1l2034
  4367  030F                     i1l341:	
  4368                           ;doprnt.c: 712: case 'X':
  4369                           
  4370                           ;doprnt.c: 638: goto alldone;
  4371                           
  4372                           ;doprnt.c: 637: case 0:
  4373                           
  4374                           ;doprnt.c: 608: }
  4375                           ;doprnt.c: 635: switch(c = *f++) {
  4376                           
  4377                           
  4378                           ;doprnt.c: 718: case 'x':
  4379                           ;doprnt.c: 721: flag |= 0x80;
  4380  030F  1283               	bcf	3,5	;RP0=0, select bank0
  4381  0310  1303               	bcf	3,6	;RP1=0, select bank0
  4382  0311  17A7               	bsf	i1printf@flag,7
  4383                           
  4384                           ;doprnt.c: 723: break;
  4385  0312  2B32               	goto	i1l2048
  4386  0313                     i1l2042:	
  4387                           ;doprnt.c: 817: case 'u':
  4388                           
  4389                           ;doprnt.c: 813: continue;
  4390                           
  4391                           ;doprnt.c: 802: default:
  4392                           
  4393                           
  4394                           ;doprnt.c: 818: flag |= 0xC0;
  4395  0313  30C0               	movlw	192
  4396  0314  00A0               	movwf	??i1_printf
  4397  0315  0820               	movf	??i1_printf,w
  4398  0316  04A7               	iorwf	i1printf@flag,f
  4399                           
  4400                           ;doprnt.c: 822: }
  4401                           
  4402                           ;doprnt.c: 819: break;
  4403  0317  2B32               	goto	i1l2048
  4404  0318                     i1l2046:	
  4405  0318  3001               	movlw	1
  4406  0319  1283               	bcf	3,5	;RP0=0, select bank0
  4407  031A  1303               	bcf	3,6	;RP1=0, select bank0
  4408  031B  07A4               	addwf	i1printf@f,f
  4409  031C  30FF               	movlw	-1
  4410  031D  0724               	addwf	i1printf@f,w
  4411  031E  0084               	movwf	4
  4412  031F  120A  118A  270C  120A  118A  	fcall	stringdir
  4413  0324  00AC               	movwf	i1printf@c
  4414                           
  4415                           ; Switch size 1, requested type "space"
  4416                           ; Number of cases is 4, Range of values is 0 to 120
  4417                           ; switch strategies available:
  4418                           ; Name         Instructions Cycles
  4419                           ; simple_byte           13     7 (average)
  4420                           ; jumptable            260     6 (fixed)
  4421                           ;	Chosen strategy is simple_byte
  4422  0325  3A00               	xorlw	0	; case 0
  4423  0326  1903               	skipnz
  4424  0327  2C56               	goto	i1l373
  4425  0328  3A58               	xorlw	88	; case 88
  4426  0329  1903               	skipnz
  4427  032A  2B0F               	goto	i1l341
  4428  032B  3A2D               	xorlw	45	; case 117
  4429  032C  1903               	skipnz
  4430  032D  2B13               	goto	i1l2042
  4431  032E  3A0D               	xorlw	13	; case 120
  4432  032F  1903               	skipnz
  4433  0330  2B0F               	goto	i1l341
  4434  0331  2A8F               	goto	i1l2112
  4435  0332                     i1l2048:	
  4436                           
  4437                           ;doprnt.c: 1273: {
  4438                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4439  0332  0825               	movf	i1printf@ap,w
  4440  0333  0084               	movwf	4
  4441  0334  1383               	bcf	3,7	;select IRP bank0
  4442  0335  0800               	movf	0,w
  4443  0336  00A8               	movwf	i1printf@val
  4444  0337  0A84               	incf	4,f
  4445  0338  0800               	movf	0,w
  4446  0339  00A9               	movwf	i1printf@val+1
  4447  033A  3002               	movlw	2
  4448  033B  00A0               	movwf	??i1_printf
  4449  033C  0820               	movf	??i1_printf,w
  4450  033D  07A5               	addwf	i1printf@ap,f
  4451                           
  4452                           ;doprnt.c: 1287: }
  4453                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  4454  033E  2B87               	goto	i1l2074
  4455  033F                     i1l346:	
  4456                           ;doprnt.c: 1302: case 0xC0:
  4457                           
  4458                           
  4459                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4460  033F  01AC               	clrf	i1printf@c
  4461  0340  0AAC               	incf	i1printf@c,f
  4462  0341                     L8:	
  4463  0341  3005               	movlw	5
  4464  0342  062C               	xorwf	i1printf@c,w
  4465  0343  1903               	btfsc	3,2
  4466  0344  2B90               	goto	i1l2076
  4467                           
  4468                           ;doprnt.c: 1306: if(val < dpowers[c])
  4469  0345  082C               	movf	i1printf@c,w
  4470  0346  00A0               	movwf	??i1_printf
  4471  0347  0720               	addwf	??i1_printf,w
  4472  0348  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4473  0349  0084               	movwf	4
  4474  034A  120A  118A  270C  120A  118A  	fcall	stringdir
  4475  034F  00A1               	movwf	??i1_printf+1
  4476  0350  120A  118A  270C  120A  118A  	fcall	stringdir
  4477  0355  00A2               	movwf	??i1_printf+2
  4478  0356  0822               	movf	??i1_printf+2,w
  4479  0357  0229               	subwf	i1printf@val+1,w
  4480  0358  1D03               	skipz
  4481  0359  2B5C               	goto	u201_25
  4482  035A  0821               	movf	??i1_printf+1,w
  4483  035B  0228               	subwf	i1printf@val,w
  4484  035C                     u201_25:	
  4485  035C  1C03               	btfss	3,0
  4486  035D  2B90               	goto	i1l2076
  4487                           
  4488                           ;doprnt.c: 1307: break;
  4489  035E  3001               	movlw	1
  4490  035F  00A0               	movwf	??i1_printf
  4491  0360  0820               	movf	??i1_printf,w
  4492  0361  07AC               	addwf	i1printf@c,f
  4493  0362  2B41               	goto	L8
  4494  0363                     i1l351:	
  4495                           ;doprnt.c: 1314: case 0x80:
  4496                           
  4497                           ;doprnt.c: 1309: break;
  4498                           
  4499                           
  4500                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4501  0363  01AC               	clrf	i1printf@c
  4502  0364  0AAC               	incf	i1printf@c,f
  4503  0365                     L9:	
  4504  0365  3004               	movlw	4
  4505  0366  062C               	xorwf	i1printf@c,w
  4506  0367  1903               	btfsc	3,2
  4507  0368  2B90               	goto	i1l2076
  4508                           
  4509                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4510  0369  082C               	movf	i1printf@c,w
  4511  036A  00A0               	movwf	??i1_printf
  4512  036B  0720               	addwf	??i1_printf,w
  4513  036C  3E0B               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  4514  036D  0084               	movwf	4
  4515  036E  120A  118A  270C  120A  118A  	fcall	stringdir
  4516  0373  00A1               	movwf	??i1_printf+1
  4517  0374  120A  118A  270C  120A  118A  	fcall	stringdir
  4518  0379  00A2               	movwf	??i1_printf+2
  4519  037A  0822               	movf	??i1_printf+2,w
  4520  037B  0229               	subwf	i1printf@val+1,w
  4521  037C  1D03               	skipz
  4522  037D  2B80               	goto	u204_25
  4523  037E  0821               	movf	??i1_printf+1,w
  4524  037F  0228               	subwf	i1printf@val,w
  4525  0380                     u204_25:	
  4526  0380  1C03               	btfss	3,0
  4527  0381  2B90               	goto	i1l2076
  4528                           
  4529                           ;doprnt.c: 1318: break;
  4530  0382  3001               	movlw	1
  4531  0383  00A0               	movwf	??i1_printf
  4532  0384  0820               	movf	??i1_printf,w
  4533  0385  07AC               	addwf	i1printf@c,f
  4534  0386  2B65               	goto	L9
  4535  0387                     i1l2074:	
  4536                           ;doprnt.c: 1336: }
  4537                           
  4538                           ;doprnt.c: 1320: break;
  4539                           
  4540  0387  0827               	movf	i1printf@flag,w
  4541  0388  39C0               	andlw	192
  4542                           
  4543                           ; Switch size 1, requested type "space"
  4544                           ; Number of cases is 2, Range of values is 128 to 192
  4545                           ; switch strategies available:
  4546                           ; Name         Instructions Cycles
  4547                           ; simple_byte            7     4 (average)
  4548                           ; direct_byte          206    11 (fixed)
  4549                           ; jumptable            263     9 (fixed)
  4550                           ;	Chosen strategy is simple_byte
  4551  0389  3A80               	xorlw	128	; case 128
  4552  038A  1903               	skipnz
  4553  038B  2B63               	goto	i1l351
  4554  038C  3A40               	xorlw	64	; case 192
  4555  038D  1903               	skipnz
  4556  038E  2B3F               	goto	i1l346
  4557  038F  2B90               	goto	i1l2076
  4558  0390                     i1l2076:	
  4559                           
  4560                           ;doprnt.c: 1381: if(width > c)
  4561  0390  082C               	movf	i1printf@c,w
  4562  0391  00A0               	movwf	??i1_printf
  4563  0392  01A1               	clrf	??i1_printf+1
  4564  0393  1BA0               	btfsc	??i1_printf,7
  4565  0394  03A1               	decf	??i1_printf+1,f
  4566  0395  0821               	movf	??i1_printf+1,w
  4567  0396  3A80               	xorlw	128
  4568  0397  00A2               	movwf	??i1_printf+2
  4569  0398  082B               	movf	i1printf@width+1,w
  4570  0399  3A80               	xorlw	128
  4571  039A  0222               	subwf	??i1_printf+2,w
  4572  039B  1D03               	skipz
  4573  039C  2B9F               	goto	u206_25
  4574  039D  082A               	movf	i1printf@width,w
  4575  039E  0220               	subwf	??i1_printf,w
  4576  039F                     u206_25:	
  4577  039F  1803               	skipnc
  4578  03A0  2BAF               	goto	i1l2080
  4579                           
  4580                           ;doprnt.c: 1382: width -= c;
  4581  03A1  1283               	bcf	3,5	;RP0=0, select bank0
  4582  03A2  1303               	bcf	3,6	;RP1=0, select bank0
  4583  03A3  082C               	movf	i1printf@c,w
  4584  03A4  00A0               	movwf	??i1_printf
  4585  03A5  01A1               	clrf	??i1_printf+1
  4586  03A6  1BA0               	btfsc	??i1_printf,7
  4587  03A7  03A1               	decf	??i1_printf+1,f
  4588  03A8  0820               	movf	??i1_printf,w
  4589  03A9  02AA               	subwf	i1printf@width,f
  4590  03AA  0821               	movf	??i1_printf+1,w
  4591  03AB  1C03               	skipc
  4592  03AC  03AB               	decf	i1printf@width+1,f
  4593  03AD  02AB               	subwf	i1printf@width+1,f
  4594  03AE  2BB3               	goto	i1l2082
  4595  03AF                     i1l2080:	
  4596                           
  4597                           ;doprnt.c: 1383: else
  4598                           ;doprnt.c: 1384: width = 0;
  4599  03AF  1283               	bcf	3,5	;RP0=0, select bank0
  4600  03B0  1303               	bcf	3,6	;RP1=0, select bank0
  4601  03B1  01AA               	clrf	i1printf@width
  4602  03B2  01AB               	clrf	i1printf@width+1
  4603  03B3                     i1l2082:	
  4604                           
  4605                           ;doprnt.c: 1387: if(flag & 0x04) {
  4606  03B3  1D27               	btfss	i1printf@flag,2
  4607  03B4  2BC8               	goto	i1l2090
  4608  03B5                     L10:	
  4609                           
  4610                           ;doprnt.c: 1415: if(width)
  4611  03B5  082A               	movf	i1printf@width,w
  4612  03B6  042B               	iorwf	i1printf@width+1,w
  4613  03B7  1903               	btfsc	3,2
  4614  03B8  2BDE               	goto	i1l2096
  4615                           
  4616                           ;doprnt.c: 1417: (putch('0') );
  4617                           
  4618                           ;doprnt.c: 1416: do
  4619  03B9  3030               	movlw	48
  4620  03BA  120A  158A  25FE  120A  118A  	fcall	i1_putch
  4621                           
  4622                           ;doprnt.c: 1418: while(--width);
  4623  03BF  30FF               	movlw	255
  4624  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  4625  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  4626  03C2  07AA               	addwf	i1printf@width,f
  4627  03C3  1803               	skipnc
  4628  03C4  0AAB               	incf	i1printf@width+1,f
  4629  03C5  30FF               	movlw	255
  4630  03C6  07AB               	addwf	i1printf@width+1,f
  4631  03C7  2BB5               	goto	L10
  4632  03C8                     i1l2090:	
  4633                           ;doprnt.c: 1420: } else
  4634                           
  4635                           
  4636                           ;doprnt.c: 1422: {
  4637                           ;doprnt.c: 1424: if(width
  4638                           ;doprnt.c: 1428: )
  4639  03C8  082A               	movf	i1printf@width,w
  4640  03C9  042B               	iorwf	i1printf@width+1,w
  4641  03CA  1903               	btfsc	3,2
  4642  03CB  2BDE               	goto	i1l2096
  4643  03CC                     i1l2092:	
  4644                           ;doprnt.c: 1429: do
  4645                           
  4646                           
  4647                           ;doprnt.c: 1430: (putch(' ') );
  4648  03CC  3020               	movlw	32
  4649  03CD  120A  158A  25FE  120A  118A  	fcall	i1_putch
  4650                           
  4651                           ;doprnt.c: 1431: while(--width);
  4652  03D2  30FF               	movlw	255
  4653  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  4654  03D4  1303               	bcf	3,6	;RP1=0, select bank0
  4655  03D5  07AA               	addwf	i1printf@width,f
  4656  03D6  1803               	skipnc
  4657  03D7  0AAB               	incf	i1printf@width+1,f
  4658  03D8  30FF               	movlw	255
  4659  03D9  07AB               	addwf	i1printf@width+1,f
  4660  03DA  082A               	movf	i1printf@width,w
  4661  03DB  042B               	iorwf	i1printf@width+1,w
  4662  03DC  1D03               	btfss	3,2
  4663  03DD  2BCC               	goto	i1l2092
  4664  03DE                     i1l2096:	
  4665                           
  4666                           ;doprnt.c: 1469: }
  4667                           ;doprnt.c: 1472: prec = c;
  4668  03DE  082C               	movf	i1printf@c,w
  4669  03DF  00A0               	movwf	??i1_printf
  4670  03E0  0820               	movf	??i1_printf,w
  4671  03E1  00A6               	movwf	i1printf@prec
  4672                           
  4673                           ;doprnt.c: 1474: while(prec--) {
  4674  03E2  2C43               	goto	i1l2110
  4675  03E3                     i1l2098:	
  4676                           ;doprnt.c: 1478: {
  4677                           ;doprnt.c: 1486: case 0xC0:
  4678                           
  4679                           ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
  4680                           
  4681                           
  4682                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4683  03E3  300A               	movlw	10
  4684  03E4  00F8               	movwf	i1___lwmod@divisor
  4685  03E5  3000               	movlw	0
  4686  03E6  00F9               	movwf	i1___lwmod@divisor+1
  4687  03E7  0826               	movf	i1printf@prec,w
  4688  03E8  00A0               	movwf	??i1_printf
  4689  03E9  0720               	addwf	??i1_printf,w
  4690  03EA  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4691  03EB  0084               	movwf	4
  4692  03EC  120A  118A  270C  120A  118A  	fcall	stringdir
  4693  03F1  00F0               	movwf	i1___lwdiv@divisor
  4694  03F2  120A  118A  270C  120A  118A  	fcall	stringdir
  4695  03F7  00F1               	movwf	i1___lwdiv@divisor+1
  4696  03F8  0829               	movf	i1printf@val+1,w
  4697  03F9  00F3               	movwf	i1___lwdiv@dividend+1
  4698  03FA  0828               	movf	i1printf@val,w
  4699  03FB  00F2               	movwf	i1___lwdiv@dividend
  4700  03FC  120A  158A  2786  120A  118A  	fcall	i1___lwdiv
  4701  0401  0871               	movf	?i1___lwdiv+1,w
  4702  0402  00FB               	movwf	i1___lwmod@dividend+1
  4703  0403  0870               	movf	?i1___lwdiv,w
  4704  0404  00FA               	movwf	i1___lwmod@dividend
  4705  0405  120A  158A  2720  120A  118A  	fcall	i1___lwmod
  4706  040A  0878               	movf	?i1___lwmod,w
  4707  040B  3E30               	addlw	48
  4708  040C  1283               	bcf	3,5	;RP0=0, select bank0
  4709  040D  1303               	bcf	3,6	;RP1=0, select bank0
  4710  040E  00A1               	movwf	??i1_printf+1
  4711  040F  0821               	movf	??i1_printf+1,w
  4712  0410  2C3C               	goto	L7
  4713  0411                     i1l2100:	
  4714                           ;doprnt.c: 1497: case 0x80:
  4715                           
  4716                           ;doprnt.c: 1491: break;
  4717                           
  4718                           
  4719                           ;doprnt.c: 1499: {
  4720                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4721  0411  0826               	movf	i1printf@prec,w
  4722  0412  00A0               	movwf	??i1_printf
  4723  0413  0720               	addwf	??i1_printf,w
  4724  0414  3E0B               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  4725  0415  0084               	movwf	4
  4726  0416  120A  118A  270C  120A  118A  	fcall	stringdir
  4727  041B  00F0               	movwf	i1___lwdiv@divisor
  4728  041C  120A  118A  270C  120A  118A  	fcall	stringdir
  4729  0421  00F1               	movwf	i1___lwdiv@divisor+1
  4730  0422  0829               	movf	i1printf@val+1,w
  4731  0423  00F3               	movwf	i1___lwdiv@dividend+1
  4732  0424  0828               	movf	i1printf@val,w
  4733  0425  00F2               	movwf	i1___lwdiv@dividend
  4734  0426  120A  158A  2786  120A  118A  	fcall	i1___lwdiv
  4735  042B  0870               	movf	?i1___lwdiv,w
  4736  042C  390F               	andlw	15
  4737  042D  1283               	bcf	3,5	;RP0=0, select bank0
  4738  042E  1303               	bcf	3,6	;RP1=0, select bank0
  4739  042F  00A1               	movwf	??i1_printf+1
  4740  0430  0821               	movf	??i1_printf+1,w
  4741  0431  00A3               	movwf	i1printf@idx
  4742                           
  4743                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  4744  0432  0823               	movf	i1printf@idx,w
  4745  0433  3E39               	addlw	low ((STR_4-__stringbase)| (0+32768))
  4746  0434  0084               	movwf	4
  4747  0435  120A  118A  270C  120A  118A  	fcall	stringdir
  4748  043A  00A0               	movwf	??i1_printf
  4749  043B  0820               	movf	??i1_printf,w
  4750  043C                     L7:	
  4751  043C  00AC               	movwf	i1printf@c
  4752  043D                     i1l2108:	
  4753                           ;doprnt.c: 1523: }
  4754                           
  4755                           ;doprnt.c: 1508: }
  4756                           ;doprnt.c: 1510: break;
  4757                           
  4758                           
  4759                           ;doprnt.c: 1524: (putch(c) );
  4760  043D  082C               	movf	i1printf@c,w
  4761  043E  120A  158A  25FE  120A  118A  	fcall	i1_putch
  4762  0443                     i1l2110:	
  4763  0443  30FF               	movlw	255
  4764  0444  1283               	bcf	3,5	;RP0=0, select bank0
  4765  0445  1303               	bcf	3,6	;RP1=0, select bank0
  4766  0446  00A0               	movwf	??i1_printf
  4767  0447  0820               	movf	??i1_printf,w
  4768  0448  07A6               	addwf	i1printf@prec,f
  4769  0449  0A26               	incf	i1printf@prec,w
  4770  044A  1903               	btfsc	3,2
  4771  044B  2A8F               	goto	i1l2112
  4772  044C  0827               	movf	i1printf@flag,w
  4773  044D  39C0               	andlw	192
  4774                           
  4775                           ; Switch size 1, requested type "space"
  4776                           ; Number of cases is 2, Range of values is 128 to 192
  4777                           ; switch strategies available:
  4778                           ; Name         Instructions Cycles
  4779                           ; simple_byte            7     4 (average)
  4780                           ; direct_byte          206    11 (fixed)
  4781                           ; jumptable            263     9 (fixed)
  4782                           ;	Chosen strategy is simple_byte
  4783  044E  3A80               	xorlw	128	; case 128
  4784  044F  1903               	skipnz
  4785  0450  2C11               	goto	i1l2100
  4786  0451  3A40               	xorlw	64	; case 192
  4787  0452  1903               	skipnz
  4788  0453  2BE3               	goto	i1l2098
  4789  0454  2C3D               	goto	i1l2108
  4790  0455  2C3D               	goto	i1l2108
  4791  0456                     i1l373:	
  4792                           ;doprnt.c: 1540: return 0;
  4793                           ;	Return value of i1_printf is never used
  4794                           
  4795                           ;doprnt.c: 1525: }
  4796                           ;doprnt.c: 1533: }
  4797                           ;doprnt.c: 1535: alldone:
  4798                           
  4799  0456  0008               	return
  4800  0457                     __end_ofi1_printf:	
  4801                           
  4802                           	psect	text25
  4803  0DFE                     __ptext25:	
  4804 ;; *************** function i1_putch *****************
  4805 ;; Defined at:
  4806 ;;		line 46 in file "usart.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;  byte            1    wreg     unsigned char 
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;  byte            1    0[COMMON] unsigned char 
  4811 ;; Return value:  Size  Location     Type
  4812 ;;		None               void
  4813 ;; Registers used:
  4814 ;;		wreg
  4815 ;; Tracked objects:
  4816 ;;		On entry : 0/0
  4817 ;;		On exit  : 0/0
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4820 ;;      Params:         0       0       0       0       0
  4821 ;;      Locals:         1       0       0       0       0
  4822 ;;      Temps:          0       0       0       0       0
  4823 ;;      Totals:         1       0       0       0       0
  4824 ;;Total ram usage:        1 bytes
  4825 ;; Hardware stack levels used:    1
  4826 ;; This function calls:
  4827 ;;		Nothing
  4828 ;; This function is called by:
  4829 ;;		i1_printf
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           
  4834                           ;psect for function i1_putch
  4835  0DFE                     i1_putch:	
  4836                           
  4837                           ;incstack = 0
  4838                           ; Regs used in i1_putch: [wreg]
  4839                           ;i1putch@byte stored from wreg
  4840  0DFE  00F0               	movwf	i1putch@byte
  4841  0DFF                     i1l180:	
  4842                           ;usart.c: 49: continue;
  4843                           
  4844                           ;usart.c: 48: while (!TXIF)
  4845                           
  4846  0DFF  1283               	bcf	3,5	;RP0=0, select bank0
  4847  0E00  1303               	bcf	3,6	;RP1=0, select bank0
  4848  0E01  1E0C               	btfss	12,4	;volatile
  4849  0E02  2DFF               	goto	i1l180
  4850                           
  4851                           ;usart.c: 50: TXREG = byte;
  4852  0E03  0870               	movf	i1putch@byte,w
  4853  0E04  0099               	movwf	25	;volatile
  4854  0E05  0008               	return
  4855  0E06                     __end_ofi1_putch:	
  4856                           
  4857                           	psect	text26
  4858  0E6B                     __ptext26:	
  4859 ;; *************** function i1_isdigit *****************
  4860 ;; Defined at:
  4861 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;  c               1    wreg     unsigned char 
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;  c               1    1[COMMON] unsigned char 
  4866 ;; Return value:  Size  Location     Type
  4867 ;;		None               void
  4868 ;; Registers used:
  4869 ;;		wreg, status,2, status,0
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4875 ;;      Params:         0       0       0       0       0
  4876 ;;      Locals:         2       0       0       0       0
  4877 ;;      Temps:          0       0       0       0       0
  4878 ;;      Totals:         2       0       0       0       0
  4879 ;;Total ram usage:        2 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; This function calls:
  4882 ;;		Nothing
  4883 ;; This function is called by:
  4884 ;;		i1_printf
  4885 ;; This function uses a non-reentrant model
  4886 ;;
  4887                           
  4888                           
  4889                           ;psect for function i1_isdigit
  4890  0E6B                     i1_isdigit:	
  4891                           
  4892                           ;incstack = 0
  4893                           ; Regs used in i1_isdigit: [wreg+status,2+status,0]
  4894                           ;i1isdigit@c stored from wreg
  4895  0E6B  00F1               	movwf	i1isdigit@c
  4896  0E6C  01F0               	clrf	i1_isdigit$864
  4897  0E6D  303A               	movlw	58
  4898  0E6E  0271               	subwf	i1isdigit@c,w
  4899  0E6F  1803               	skipnc
  4900  0E70  2E77               	goto	i1l1678
  4901  0E71  3030               	movlw	48
  4902  0E72  0271               	subwf	i1isdigit@c,w
  4903  0E73  1C03               	skipc
  4904  0E74  2E77               	goto	i1l1678
  4905  0E75  01F0               	clrf	i1_isdigit$864
  4906  0E76  0AF0               	incf	i1_isdigit$864,f
  4907  0E77                     i1l1678:	
  4908  0E77  0C70               	rrf	i1_isdigit$864,w
  4909  0E78  0008               	return
  4910  0E79                     __end_ofi1_isdigit:	
  4911                           
  4912                           	psect	text27
  4913  0EDC                     __ptext27:	
  4914 ;; *************** function i1___wmul *****************
  4915 ;; Defined at:
  4916 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;  multiplier      2    0[COMMON] unsigned int 
  4919 ;;  multiplicand    2    2[COMMON] unsigned int 
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  __wmul          2    4[COMMON] unsigned int 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;                  2    0[COMMON] unsigned int 
  4924 ;; Registers used:
  4925 ;;		wreg, status,2, status,0
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4931 ;;      Params:         4       0       0       0       0
  4932 ;;      Locals:         2       0       0       0       0
  4933 ;;      Temps:          0       0       0       0       0
  4934 ;;      Totals:         6       0       0       0       0
  4935 ;;Total ram usage:        6 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; This function calls:
  4938 ;;		Nothing
  4939 ;; This function is called by:
  4940 ;;		i1_printf
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           
  4945                           ;psect for function i1___wmul
  4946  0EDC                     i1___wmul:	
  4947                           
  4948                           ;incstack = 0
  4949                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  4950  0EDC  01F4               	clrf	i1___wmul@product
  4951  0EDD  01F5               	clrf	i1___wmul@product+1
  4952  0EDE                     i1l1658:	
  4953  0EDE  1C70               	btfss	i1___wmul@multiplier,0
  4954  0EDF  2EE6               	goto	i1l457
  4955  0EE0  0872               	movf	i1___wmul@multiplicand,w
  4956  0EE1  07F4               	addwf	i1___wmul@product,f
  4957  0EE2  1803               	skipnc
  4958  0EE3  0AF5               	incf	i1___wmul@product+1,f
  4959  0EE4  0873               	movf	i1___wmul@multiplicand+1,w
  4960  0EE5  07F5               	addwf	i1___wmul@product+1,f
  4961  0EE6                     i1l457:	
  4962  0EE6  3001               	movlw	1
  4963  0EE7                     u144_25:	
  4964  0EE7  1003               	clrc
  4965  0EE8  0DF2               	rlf	i1___wmul@multiplicand,f
  4966  0EE9  0DF3               	rlf	i1___wmul@multiplicand+1,f
  4967  0EEA  3EFF               	addlw	-1
  4968  0EEB  1D03               	skipz
  4969  0EEC  2EE7               	goto	u144_25
  4970  0EED  3001               	movlw	1
  4971  0EEE                     u145_25:	
  4972  0EEE  1003               	clrc
  4973  0EEF  0CF1               	rrf	i1___wmul@multiplier+1,f
  4974  0EF0  0CF0               	rrf	i1___wmul@multiplier,f
  4975  0EF1  3EFF               	addlw	-1
  4976  0EF2  1D03               	skipz
  4977  0EF3  2EEE               	goto	u145_25
  4978  0EF4  0870               	movf	i1___wmul@multiplier,w
  4979  0EF5  0471               	iorwf	i1___wmul@multiplier+1,w
  4980  0EF6  1D03               	btfss	3,2
  4981  0EF7  2EDE               	goto	i1l1658
  4982  0EF8  0875               	movf	i1___wmul@product+1,w
  4983  0EF9  00F1               	movwf	?i1___wmul+1
  4984  0EFA  0874               	movf	i1___wmul@product,w
  4985  0EFB  00F0               	movwf	?i1___wmul
  4986  0EFC  0008               	return
  4987  0EFD                     __end_ofi1___wmul:	
  4988                           
  4989                           	psect	text28
  4990  0F20                     __ptext28:	
  4991 ;; *************** function i1___lwmod *****************
  4992 ;; Defined at:
  4993 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  4994 ;; Parameters:    Size  Location     Type
  4995 ;;  divisor         2    8[COMMON] unsigned int 
  4996 ;;  dividend        2   10[COMMON] unsigned int 
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;  __lwmod         1   13[COMMON] unsigned char 
  4999 ;; Return value:  Size  Location     Type
  5000 ;;                  2    8[COMMON] unsigned int 
  5001 ;; Registers used:
  5002 ;;		wreg, status,2, status,0
  5003 ;; Tracked objects:
  5004 ;;		On entry : 0/0
  5005 ;;		On exit  : 0/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5008 ;;      Params:         4       0       0       0       0
  5009 ;;      Locals:         1       0       0       0       0
  5010 ;;      Temps:          1       0       0       0       0
  5011 ;;      Totals:         6       0       0       0       0
  5012 ;;Total ram usage:        6 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; This function calls:
  5015 ;;		Nothing
  5016 ;; This function is called by:
  5017 ;;		i1_printf
  5018 ;; This function uses a non-reentrant model
  5019 ;;
  5020                           
  5021                           
  5022                           ;psect for function i1___lwmod
  5023  0F20                     i1___lwmod:	
  5024                           
  5025                           ;incstack = 0
  5026                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
  5027  0F20  0878               	movf	i1___lwmod@divisor,w
  5028  0F21  0479               	iorwf	i1___lwmod@divisor+1,w
  5029  0F22  1903               	btfsc	3,2
  5030  0F23  2F4D               	goto	i1l1726
  5031  0F24  01FD               	clrf	i1___lwmod@counter
  5032  0F25  0AFD               	incf	i1___lwmod@counter,f
  5033  0F26                     i1l1716:	
  5034  0F26  1BF9               	btfsc	i1___lwmod@divisor+1,7
  5035  0F27  2F34               	goto	i1l1718
  5036  0F28  3001               	movlw	1
  5037  0F29                     u157_25:	
  5038  0F29  1003               	clrc
  5039  0F2A  0DF8               	rlf	i1___lwmod@divisor,f
  5040  0F2B  0DF9               	rlf	i1___lwmod@divisor+1,f
  5041  0F2C  3EFF               	addlw	-1
  5042  0F2D  1D03               	skipz
  5043  0F2E  2F29               	goto	u157_25
  5044  0F2F  3001               	movlw	1
  5045  0F30  00FC               	movwf	??i1___lwmod
  5046  0F31  087C               	movf	??i1___lwmod,w
  5047  0F32  07FD               	addwf	i1___lwmod@counter,f
  5048  0F33  2F26               	goto	i1l1716
  5049  0F34                     i1l1718:	
  5050  0F34  0879               	movf	i1___lwmod@divisor+1,w
  5051  0F35  027B               	subwf	i1___lwmod@dividend+1,w
  5052  0F36  1D03               	skipz
  5053  0F37  2F3A               	goto	u159_25
  5054  0F38  0878               	movf	i1___lwmod@divisor,w
  5055  0F39  027A               	subwf	i1___lwmod@dividend,w
  5056  0F3A                     u159_25:	
  5057  0F3A  1C03               	skipc
  5058  0F3B  2F42               	goto	i1l1722
  5059  0F3C  0878               	movf	i1___lwmod@divisor,w
  5060  0F3D  02FA               	subwf	i1___lwmod@dividend,f
  5061  0F3E  0879               	movf	i1___lwmod@divisor+1,w
  5062  0F3F  1C03               	skipc
  5063  0F40  03FB               	decf	i1___lwmod@dividend+1,f
  5064  0F41  02FB               	subwf	i1___lwmod@dividend+1,f
  5065  0F42                     i1l1722:	
  5066  0F42  3001               	movlw	1
  5067  0F43                     u160_25:	
  5068  0F43  1003               	clrc
  5069  0F44  0CF9               	rrf	i1___lwmod@divisor+1,f
  5070  0F45  0CF8               	rrf	i1___lwmod@divisor,f
  5071  0F46  3EFF               	addlw	-1
  5072  0F47  1D03               	skipz
  5073  0F48  2F43               	goto	u160_25
  5074  0F49  3001               	movlw	1
  5075  0F4A  02FD               	subwf	i1___lwmod@counter,f
  5076  0F4B  1D03               	btfss	3,2
  5077  0F4C  2F34               	goto	i1l1718
  5078  0F4D                     i1l1726:	
  5079  0F4D  087B               	movf	i1___lwmod@dividend+1,w
  5080  0F4E  00F9               	movwf	?i1___lwmod+1
  5081  0F4F  087A               	movf	i1___lwmod@dividend,w
  5082  0F50  00F8               	movwf	?i1___lwmod
  5083  0F51  0008               	return
  5084  0F52                     __end_ofi1___lwmod:	
  5085                           
  5086                           	psect	text29
  5087  0F86                     __ptext29:	
  5088 ;; *************** function i1___lwdiv *****************
  5089 ;; Defined at:
  5090 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;  divisor         2    0[COMMON] unsigned int 
  5093 ;;  dividend        2    2[COMMON] unsigned int 
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;  __lwdiv         2    5[COMMON] unsigned int 
  5096 ;;  __lwdiv         1    7[COMMON] unsigned char 
  5097 ;; Return value:  Size  Location     Type
  5098 ;;                  2    0[COMMON] unsigned int 
  5099 ;; Registers used:
  5100 ;;		wreg, status,2, status,0
  5101 ;; Tracked objects:
  5102 ;;		On entry : 0/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5106 ;;      Params:         4       0       0       0       0
  5107 ;;      Locals:         3       0       0       0       0
  5108 ;;      Temps:          1       0       0       0       0
  5109 ;;      Totals:         8       0       0       0       0
  5110 ;;Total ram usage:        8 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; This function calls:
  5113 ;;		Nothing
  5114 ;; This function is called by:
  5115 ;;		i1_printf
  5116 ;; This function uses a non-reentrant model
  5117 ;;
  5118                           
  5119                           
  5120                           ;psect for function i1___lwdiv
  5121  0F86                     i1___lwdiv:	
  5122                           
  5123                           ;incstack = 0
  5124                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
  5125  0F86  01F5               	clrf	i1___lwdiv@quotient
  5126  0F87  01F6               	clrf	i1___lwdiv@quotient+1
  5127  0F88  0870               	movf	i1___lwdiv@divisor,w
  5128  0F89  0471               	iorwf	i1___lwdiv@divisor+1,w
  5129  0F8A  1903               	btfsc	3,2
  5130  0F8B  2FBD               	goto	i1l1704
  5131  0F8C  01F7               	clrf	i1___lwdiv@counter
  5132  0F8D  0AF7               	incf	i1___lwdiv@counter,f
  5133  0F8E                     i1l1692:	
  5134  0F8E  1BF1               	btfsc	i1___lwdiv@divisor+1,7
  5135  0F8F  2F9C               	goto	i1l1694
  5136  0F90  3001               	movlw	1
  5137  0F91                     u150_25:	
  5138  0F91  1003               	clrc
  5139  0F92  0DF0               	rlf	i1___lwdiv@divisor,f
  5140  0F93  0DF1               	rlf	i1___lwdiv@divisor+1,f
  5141  0F94  3EFF               	addlw	-1
  5142  0F95  1D03               	skipz
  5143  0F96  2F91               	goto	u150_25
  5144  0F97  3001               	movlw	1
  5145  0F98  00F4               	movwf	??i1___lwdiv
  5146  0F99  0874               	movf	??i1___lwdiv,w
  5147  0F9A  07F7               	addwf	i1___lwdiv@counter,f
  5148  0F9B  2F8E               	goto	i1l1692
  5149  0F9C                     i1l1694:	
  5150  0F9C  3001               	movlw	1
  5151  0F9D                     u152_25:	
  5152  0F9D  1003               	clrc
  5153  0F9E  0DF5               	rlf	i1___lwdiv@quotient,f
  5154  0F9F  0DF6               	rlf	i1___lwdiv@quotient+1,f
  5155  0FA0  3EFF               	addlw	-1
  5156  0FA1  1D03               	skipz
  5157  0FA2  2F9D               	goto	u152_25
  5158  0FA3  0871               	movf	i1___lwdiv@divisor+1,w
  5159  0FA4  0273               	subwf	i1___lwdiv@dividend+1,w
  5160  0FA5  1D03               	skipz
  5161  0FA6  2FA9               	goto	u153_25
  5162  0FA7  0870               	movf	i1___lwdiv@divisor,w
  5163  0FA8  0272               	subwf	i1___lwdiv@dividend,w
  5164  0FA9                     u153_25:	
  5165  0FA9  1C03               	skipc
  5166  0FAA  2FB2               	goto	i1l1700
  5167  0FAB  0870               	movf	i1___lwdiv@divisor,w
  5168  0FAC  02F2               	subwf	i1___lwdiv@dividend,f
  5169  0FAD  0871               	movf	i1___lwdiv@divisor+1,w
  5170  0FAE  1C03               	skipc
  5171  0FAF  03F3               	decf	i1___lwdiv@dividend+1,f
  5172  0FB0  02F3               	subwf	i1___lwdiv@dividend+1,f
  5173  0FB1  1475               	bsf	i1___lwdiv@quotient,0
  5174  0FB2                     i1l1700:	
  5175  0FB2  3001               	movlw	1
  5176  0FB3                     u154_25:	
  5177  0FB3  1003               	clrc
  5178  0FB4  0CF1               	rrf	i1___lwdiv@divisor+1,f
  5179  0FB5  0CF0               	rrf	i1___lwdiv@divisor,f
  5180  0FB6  3EFF               	addlw	-1
  5181  0FB7  1D03               	skipz
  5182  0FB8  2FB3               	goto	u154_25
  5183  0FB9  3001               	movlw	1
  5184  0FBA  02F7               	subwf	i1___lwdiv@counter,f
  5185  0FBB  1D03               	btfss	3,2
  5186  0FBC  2F9C               	goto	i1l1694
  5187  0FBD                     i1l1704:	
  5188  0FBD  0876               	movf	i1___lwdiv@quotient+1,w
  5189  0FBE  00F1               	movwf	?i1___lwdiv+1
  5190  0FBF  0875               	movf	i1___lwdiv@quotient,w
  5191  0FC0  00F0               	movwf	?i1___lwdiv
  5192  0FC1  0008               	return
  5193  0FC2                     __end_ofi1___lwdiv:	
  5194                           
  5195                           	psect	text30
  5196  0EA8                     __ptext30:	
  5197 ;; *************** function _strcpy *****************
  5198 ;; Defined at:
  5199 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strcpy.c"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;  to              1    wreg     PTR unsigned char 
  5202 ;;		 -> string(26), 
  5203 ;;  from            1    0[COMMON] PTR const unsigned char 
  5204 ;;		 -> string_aux(26), 
  5205 ;; Auto vars:     Size  Location     Type
  5206 ;;  to              1    2[COMMON] PTR unsigned char 
  5207 ;;		 -> string(26), 
  5208 ;;  cp              1    3[COMMON] PTR unsigned char 
  5209 ;;		 -> string(26), 
  5210 ;; Return value:  Size  Location     Type
  5211 ;;                  1    wreg      PTR unsigned char 
  5212 ;; Registers used:
  5213 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5214 ;; Tracked objects:
  5215 ;;		On entry : 0/0
  5216 ;;		On exit  : 0/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5219 ;;      Params:         1       0       0       0       0
  5220 ;;      Locals:         2       0       0       0       0
  5221 ;;      Temps:          1       0       0       0       0
  5222 ;;      Totals:         4       0       0       0       0
  5223 ;;Total ram usage:        4 bytes
  5224 ;; Hardware stack levels used:    1
  5225 ;; This function calls:
  5226 ;;		Nothing
  5227 ;; This function is called by:
  5228 ;;		_interruptions
  5229 ;; This function uses a non-reentrant model
  5230 ;;
  5231                           
  5232                           
  5233                           ;psect for function _strcpy
  5234  0EA8                     _strcpy:	
  5235                           
  5236                           ;incstack = 0
  5237                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0]
  5238                           ;strcpy@to stored from wreg
  5239  0EA8  00F2               	movwf	strcpy@to
  5240  0EA9  0872               	movf	strcpy@to,w
  5241  0EAA  00F1               	movwf	??_strcpy
  5242  0EAB  0871               	movf	??_strcpy,w
  5243  0EAC  00F3               	movwf	strcpy@cp
  5244  0EAD                     i1l1808:	
  5245  0EAD  0870               	movf	strcpy@from,w
  5246  0EAE  0084               	movwf	4
  5247  0EAF  1383               	bcf	3,7	;select IRP bank0
  5248  0EB0  0800               	movf	0,w
  5249  0EB1  00F1               	movwf	??_strcpy
  5250  0EB2  0873               	movf	strcpy@cp,w
  5251  0EB3  0084               	movwf	4
  5252  0EB4  0871               	movf	??_strcpy,w
  5253  0EB5  0080               	movwf	0
  5254  0EB6  0800               	movf	0,w
  5255  0EB7  1903               	btfsc	3,2
  5256  0EB8  0008               	return
  5257  0EB9  3001               	movlw	1
  5258  0EBA  00F1               	movwf	??_strcpy
  5259  0EBB  0871               	movf	??_strcpy,w
  5260  0EBC  07F3               	addwf	strcpy@cp,f
  5261  0EBD  3001               	movlw	1
  5262  0EBE  00F1               	movwf	??_strcpy
  5263  0EBF  0871               	movf	??_strcpy,w
  5264  0EC0  07F0               	addwf	strcpy@from,f
  5265  0EC1  2EAD               	goto	i1l1808
  5266  0EC2                     __end_of_strcpy:	
  5267                           ;	Return value of _strcpy is never used
  5268                           
  5269                           
  5270                           	psect	text31
  5271  0760                     __ptext31:	
  5272 ;; *************** function ___awmod *****************
  5273 ;; Defined at:
  5274 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;  divisor         2    0[COMMON] int 
  5277 ;;  dividend        2    2[COMMON] int 
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;  sign            1    6[COMMON] unsigned char 
  5280 ;;  counter         1    5[COMMON] unsigned char 
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  2    0[COMMON] int 
  5283 ;; Registers used:
  5284 ;;		wreg, status,2, status,0
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5290 ;;      Params:         4       0       0       0       0
  5291 ;;      Locals:         2       0       0       0       0
  5292 ;;      Temps:          1       0       0       0       0
  5293 ;;      Totals:         7       0       0       0       0
  5294 ;;Total ram usage:        7 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; This function calls:
  5297 ;;		Nothing
  5298 ;; This function is called by:
  5299 ;;		_interruptions
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           
  5304                           ;psect for function ___awmod
  5305  0760                     ___awmod:	
  5306                           
  5307                           ;incstack = 0
  5308                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5309  0760  01F6               	clrf	___awmod@sign
  5310  0761  1FF3               	btfss	___awmod@dividend+1,7
  5311  0762  2F6A               	goto	i1l1986
  5312  0763  09F2               	comf	___awmod@dividend,f
  5313  0764  09F3               	comf	___awmod@dividend+1,f
  5314  0765  0AF2               	incf	___awmod@dividend,f
  5315  0766  1903               	skipnz
  5316  0767  0AF3               	incf	___awmod@dividend+1,f
  5317  0768  01F6               	clrf	___awmod@sign
  5318  0769  0AF6               	incf	___awmod@sign,f
  5319  076A                     i1l1986:	
  5320  076A  1FF1               	btfss	___awmod@divisor+1,7
  5321  076B  2F71               	goto	i1l1990
  5322  076C  09F0               	comf	___awmod@divisor,f
  5323  076D  09F1               	comf	___awmod@divisor+1,f
  5324  076E  0AF0               	incf	___awmod@divisor,f
  5325  076F  1903               	skipnz
  5326  0770  0AF1               	incf	___awmod@divisor+1,f
  5327  0771                     i1l1990:	
  5328  0771  0870               	movf	___awmod@divisor,w
  5329  0772  0471               	iorwf	___awmod@divisor+1,w
  5330  0773  1903               	btfsc	3,2
  5331  0774  2F9E               	goto	i1l2008
  5332  0775  01F5               	clrf	___awmod@counter
  5333  0776  0AF5               	incf	___awmod@counter,f
  5334  0777                     i1l1998:	
  5335  0777  1BF1               	btfsc	___awmod@divisor+1,7
  5336  0778  2F85               	goto	i1l2000
  5337  0779  3001               	movlw	1
  5338  077A                     u191_25:	
  5339  077A  1003               	clrc
  5340  077B  0DF0               	rlf	___awmod@divisor,f
  5341  077C  0DF1               	rlf	___awmod@divisor+1,f
  5342  077D  3EFF               	addlw	-1
  5343  077E  1D03               	skipz
  5344  077F  2F7A               	goto	u191_25
  5345  0780  3001               	movlw	1
  5346  0781  00F4               	movwf	??___awmod
  5347  0782  0874               	movf	??___awmod,w
  5348  0783  07F5               	addwf	___awmod@counter,f
  5349  0784  2F77               	goto	i1l1998
  5350  0785                     i1l2000:	
  5351  0785  0871               	movf	___awmod@divisor+1,w
  5352  0786  0273               	subwf	___awmod@dividend+1,w
  5353  0787  1D03               	skipz
  5354  0788  2F8B               	goto	u193_25
  5355  0789  0870               	movf	___awmod@divisor,w
  5356  078A  0272               	subwf	___awmod@dividend,w
  5357  078B                     u193_25:	
  5358  078B  1C03               	skipc
  5359  078C  2F93               	goto	i1l2004
  5360  078D  0870               	movf	___awmod@divisor,w
  5361  078E  02F2               	subwf	___awmod@dividend,f
  5362  078F  0871               	movf	___awmod@divisor+1,w
  5363  0790  1C03               	skipc
  5364  0791  03F3               	decf	___awmod@dividend+1,f
  5365  0792  02F3               	subwf	___awmod@dividend+1,f
  5366  0793                     i1l2004:	
  5367  0793  3001               	movlw	1
  5368  0794                     u194_25:	
  5369  0794  1003               	clrc
  5370  0795  0CF1               	rrf	___awmod@divisor+1,f
  5371  0796  0CF0               	rrf	___awmod@divisor,f
  5372  0797  3EFF               	addlw	-1
  5373  0798  1D03               	skipz
  5374  0799  2F94               	goto	u194_25
  5375  079A  3001               	movlw	1
  5376  079B  02F5               	subwf	___awmod@counter,f
  5377  079C  1D03               	btfss	3,2
  5378  079D  2F85               	goto	i1l2000
  5379  079E                     i1l2008:	
  5380  079E  0876               	movf	___awmod@sign,w
  5381  079F  1903               	btfsc	3,2
  5382  07A0  2FA6               	goto	i1l2012
  5383  07A1  09F2               	comf	___awmod@dividend,f
  5384  07A2  09F3               	comf	___awmod@dividend+1,f
  5385  07A3  0AF2               	incf	___awmod@dividend,f
  5386  07A4  1903               	skipnz
  5387  07A5  0AF3               	incf	___awmod@dividend+1,f
  5388  07A6                     i1l2012:	
  5389  07A6  0873               	movf	___awmod@dividend+1,w
  5390  07A7  00F1               	movwf	?___awmod+1
  5391  07A8  0872               	movf	___awmod@dividend,w
  5392  07A9  00F0               	movwf	?___awmod
  5393  07AA  0008               	return
  5394  07AB                     __end_of___awmod:	
  5395  007E                     btemp	set	126	;btemp
  5396  007E                     wtemp	set	126
  5397  007E                     wtemp0	set	126
  5398  0080                     wtemp1	set	128
  5399  0082                     wtemp2	set	130
  5400  0084                     wtemp3	set	132
  5401  0086                     wtemp4	set	134
  5402  0088                     wtemp5	set	136
  5403  007F                     wtemp6	set	127
  5404  007E                     ttemp	set	126
  5405  007E                     ttemp0	set	126
  5406  0081                     ttemp1	set	129
  5407  0084                     ttemp2	set	132
  5408  0087                     ttemp3	set	135
  5409  007F                     ttemp4	set	127
  5410  007E                     ltemp	set	126
  5411  007E                     ltemp0	set	126
  5412  0082                     ltemp1	set	130
  5413  0086                     ltemp2	set	134
  5414  0080                     ltemp3	set	128


Data Sizes:
    Strings     60
    Constant    18
    Data        3
    BSS         63
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     37      52
    BANK1            80     26      78
    BANK3            96     14      14
    BANK2            96      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(1) Largest target is 26
		 -> string_aux(BANK1[26]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 26
		 -> string(BANK1[26]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 26
		 -> string(BANK1[26]), 

    printf@f	PTR const unsigned char  size(1) Largest target is 38
		 -> STR_3(CODE[2]), STR_2(CODE[38]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?i1_printf(COMMON[2]), ?_printf(BANK1[2]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 26
		 -> string(BANK1[26]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _interruptions in COMMON

    i1_printf->i1___lwmod
    i1___lwmod->i1___lwdiv

Critical Paths under _main in BANK0

    _main->_printf
    _write_RTC_I2c->_I2C_Write_Byte
    _read_RTC_I2c->_I2C_Write_Byte
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _interruptions in BANK0

    _interruptions->i1_printf

Critical Paths under _main in BANK1

    _main->_printf

Critical Paths under _interruptions in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptions in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptions in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0    2547
                                              0 BANK3     14    14      0
                     _InitI2C_Master
                           _configAD
                  _configADInterrupt
                        _configRS232
                        _configTimer
              _configUSARTInterrupts
                             _printf
                       _read_RTC_I2c
                       _selectChanel
                      _write_RTC_I2c
 ---------------------------------------------------------------------------------
 (1) _write_RTC_I2c                                        0     0      0      22
                           _I2C_Idle
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (1) _selectChanel                                         1     1      0     176
                                             20 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_RTC_I2c                                         2     2      0      44
                                             21 BANK0      2     2      0
                           _I2C_Idle
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Byte                                       1     1      0      22
                                             20 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Send_NACK                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Read_Byte                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Idle                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    21     16    2305
                                             34 BANK0      3     3      0
                                              0 BANK1     26    10     16
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             20 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                             20 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                             20 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                             28 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                             20 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _configUSARTInterrupts                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configRS232                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configADInterrupt                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configAD                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitI2C_Master                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _interruptions                                        7     7      0    2121
                                             13 BANK0      7     7      0
                            ___awmod
                             _strcpy
                           i1_printf
 ---------------------------------------------------------------------------------
 (4) i1_printf                                            21    21      0    1528
                                              0 BANK0     13    13      0
                          i1___lwdiv
                          i1___lwmod
                           i1___wmul
                          i1_isdigit
                            i1_putch
 ---------------------------------------------------------------------------------
 (5) i1_putch                                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) i1_isdigit                                            2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) i1___wmul                                             6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (5) i1___lwmod                                            6     2      4     211
                                              8 COMMON     6     2      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) i1___lwdiv                                            8     4      4     266
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               4     3      1     169
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     424
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitI2C_Master
   _configAD
   _configADInterrupt
   _configRS232
   _configTimer
   _configUSARTInterrupts
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _read_RTC_I2c
     _I2C_Idle
     _I2C_ReStart
     _I2C_Read_Byte
     _I2C_Send_NACK
     _I2C_Start
     _I2C_Stop
     _I2C_Write_Byte
   _selectChanel
   _write_RTC_I2c
     _I2C_Idle
     _I2C_Start
     _I2C_Stop
     _I2C_Write_Byte

 _interruptions (ROOT)
   ___awmod
   _strcpy
   i1_printf
     i1___lwdiv
     i1___lwmod
       i1___lwdiv (ARG)
     i1___wmul
     i1_isdigit
     i1_putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      E       E       9       14.6%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     1A      4E       7       97.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     25      34       5       65.0%
BITBANK0            50      0       1       4        1.3%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      9E      12        0.0%
ABS                  0      0      9E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri Jun 03 10:11:15 2016

                             _i 004B                               pc 0002              __size_of_I2C_Start 0008  
                   __CFG_CP$OFF 0000                     _SSPSTATbits 0094                              l91 0E11  
                            l85 0E19                              l97 0E21           __end_of_interruptions 063F  
                            _id 0051                              fsr 0004             ___wmul@multiplicand 0036  
              i1___wmul@product 0074                             l121 0E43                             l115 0E57  
                           l109 0E4D                             l330 006D                             l180 0E09  
                           l341 00E8                             l351 0150                             l346 0120  
                           l373 0287                             l457 0F09                             _CKP 00A4  
                           _GIE 005F                    __CFG_CPD$OFF 0000                             _RX9 00C6  
                           _TX9 04C6                             _dia 0049                             _ano 0047  
          __size_of_I2C_ReStart 0008                             _mes 004D                             fsr0 0004  
                           indf 0000              I2C_Write_Byte@Byte 0034                    ___awmod@sign 0076  
                  __CFG_FOSC$HS 0000                    __CFG_LVP$OFF 0000                            l2300 026C  
                          l2220 0076                            l2302 0272                            l2222 0081  
                          l2214 0067                            l2240 010F                            l2304 0046  
                          l2234 00EC                            l2226 0093                            l2314 0485  
                          l1622 0FF0                            l1614 0FCC                            l2238 00F5  
                          l2350 05C6                            l1616 0FDA                            l1640 0F68  
                          l2272 01BA                            l1626 0FFB                            l2290 01F2  
                          l2282 01D3                            l2274 01BE                            l2266 0180  
                          l1570 0E37                            l1644 0F76                            l2292 0230  
                          l2284 01D7                            l2268 0189                            l1638 0F5A  
                          l1750 07CC                            l1742 07BC                            l1648 0F81  
                          l1592 0F01                            l2288 01E9                            l1586 0EA6  
                          l1762 07E4                            l1754 07D4                            l1746 07C4  
                          l1738 07B5                            l1758 07DC                            _ADFM 04FF  
                          STR_1 075B                            STR_2 0724                            STR_3 075E  
                          STR_4 074A                            _BRGH 04C2                            _CREN 00C4  
                          _FERR 00C2                            u1305 0FCF                            _CSRC 04C7  
                          u1325 0FDB                            u1405 0F77                            u1335 0FE7  
                          u1345 0FF1                            u1265 0F0A                            u1275 0F11  
                          u2325 0175                            u2430 05C3                            u1375 0F5D  
                          u2345 01A2                            u1395 0F6E                            u2507 05B0  
                          u2295 0145                            u2457 04A2                            u2467 04BD  
                          u2477 04D8                            u2487 04F3                            u2497 050E  
                          _PEIE 005E                            _RCIE 0465                            _RCIF 0065  
                          _OERR 00C1                            _WCOL 00A7                            _SPEN 00C7  
                          _TXIE 0464                            _TXEN 04C5                            _TXIF 0064  
                          _SYNC 04C4                    __CFG_WRT$OFF 0000                            _main 0457  
                          _hora 004A                __end_of_I2C_Idle 0E40                            btemp 007E  
              __end_of_I2C_Stop 0E26                            ltemp 007E                   i1printf@width 002A  
                          start 0012                            ttemp 007E                            wtemp 007E  
               __end_ofi1_putch 0E06      __size_of_configADInterrupt 0009                           _ADCS0 00FE  
                         _ADCS1 00FF                           _ADCS2 04FE                           ?_main 0070  
                 __CFG_WDTE$OFF 0000                 __end_of___awmod 07AB                 __end_of___lwdiv 1000  
                         i1l330 02B2                           i1l180 0DFF                           i1l341 030F  
                         i1l351 0363                 __end_of___lwmod 0F86                           i1l346 033F  
                         i1l290 05CE                           i1l373 0456                           i1l457 0EE6  
                         i1l297 0634                           _RCREG 001A                           _SPBRG 0099  
                         _SSPM0 00A0                           _SSPM1 00A1                           _SSPM2 00A2  
                         _SSPM3 00A3                           _SSPIF 0063                           _SSPEN 00A5  
                         _SSPOV 00A6                           _TXREG 0019                      i1isdigit@c 0071  
            i1___lwmod@dividend 007A                 __end_of_dpowers 071C          __size_of_I2C_Read_Byte 0009  
               __end_of_isdigit 0EA8                           _putch 0E06               __end_of_I2C_Start 0E1E  
                __CFG_BOREN$OFF 0000                           pclath 000A                __end_ofi1___wmul 0EFD  
                         ltemp0 007E                           ltemp1 0082                           ltemp2 0086  
                         ltemp3 0080                           ttemp0 007E                           ttemp1 0081  
                         ttemp2 0084                           ttemp3 0087                           ttemp4 007F  
        __size_of_I2C_Send_NACK 0009                           status 0003             i1___wmul@multiplier 0070  
                         wtemp0 007E                           wtemp1 0080                           wtemp2 0082  
                         wtemp3 0084                           wtemp4 0086                           wtemp5 0088  
                         wtemp6 007F              __size_ofi1___lwdiv 003C              __size_ofi1___lwmod 0032  
              __end_ofi1_printf 0457                ??_InitI2C_Master 0034                      i1printf@ap 0025  
               __initialization 0015                    __end_of_main 05C8              __size_ofi1_isdigit 000E  
                 ?_read_RTC_I2c 0070                          ??_main 0190           _configUSARTInterrupts 0E79  
                        _ADRESH 001E                          _ADRESL 009E                          ?_putch 0070  
                        i1l2000 0785                          i1l2012 07A6                          i1l2004 0793  
                        i1l2100 0411                          i1l2110 0443                          i1l2030 02C2  
                        i1l2022 02AC                          i1l2008 079E                          i1l2112 028F  
                        i1l2042 0313                          i1l2034 02D4                          i1l2108 043D  
                        i1l2028 02B7                          i1l2124 05D1                          i1l2046 0318  
                        i1l2080 03AF                          i1l2048 0332                          i1l2144 0618  
                        i1l2136 05F2                          i1l2090 03C8                          i1l2082 03B3  
                        i1l2074 0387                          i1l2154 062B                          i1l1700 0FB2  
                        i1l2092 03CC                          i1l2076 0390                          i1l2148 0620  
                        i1l1704 0FBD                          i1l2096 03DE                          i1l1722 0F42  
                        i1l2098 03E3                          i1l1716 0F26                          u201_25 035C  
                        i1l1718 0F34                          i1l1726 0F4D                          i1l1808 0EAD  
                        i1l1658 0EDE                          i1l1692 0F8E                          i1l1694 0F9C  
                        i1l1678 0E77                          i1l1990 0771                          i1l1986 076A  
                        u204_25 0380                          i1l1998 0777                          u150_25 0F91  
                        u206_25 039F                          u152_25 0F9D                          u160_25 0F43  
                        u144_25 0EE7                          u153_25 0FA9                          u145_25 0EEE  
                        u154_25 0FB3                          u157_25 0F29                          u191_25 077A  
                        u159_25 0F3A                          u193_25 078B                          u194_25 0794  
                     ??i1_putch 0070                          _SSPADD 0093                          _TRISC3 043B  
                        _TRISC4 043C                          _SSPBUF 0013            __size_of_configRS232 0011  
                __CFG_PWRTE$OFF 0000                __end_of_configAD 0E98            __size_of_configTimer 000D  
                 _I2C_Read_Byte 0E40                          ___wmul 0EFD                       ??___awmod 0074  
                     ??___lwdiv 0038                       ??___lwmod 0040                  ??_read_RTC_I2c 0035  
                        _minuto 004E                 ___awmod@divisor 0070                   _I2C_Send_NACK 0E49  
               ___awmod@counter 0075                          _printf 003B                          _strcpy 0EA8  
                        _string 00A0                       ?_I2C_Idle 0070               __end_ofi1___lwdiv 0FC2  
             __end_ofi1___lwmod 0F52                       ??_isdigit 0034                       ?_I2C_Stop 0070  
                        saved_w 007E          __size_of_write_RTC_I2c 0076               __end_ofi1_isdigit 0E79  
       __end_of__initialization 0037                     i1printf@idx 0023                     i1printf@val 0028  
                ?_I2C_Read_Byte 0070                  __pcstackCOMMON 0070                    __pidataBANK0 07FD  
                   i1putch@byte 0070                   __end_of_putch 0E0E                  ?_I2C_Send_NACK 0070  
        ?_configUSARTInterrupts 0070                       ?i1___wmul 0070                      ??_I2C_Idle 0034  
                _OPTION_REGbits 0081                      ??_I2C_Stop 0034                       ?i1_printf 0070  
                       ??_putch 0034                      __pbssBANK0 0045                      __pbssBANK1 00A0  
                    _hasAnError 0299                   ?_selectChanel 0070                      __pmaintext 0457  
                       ?___wmul 0034                   _write_RTC_I2c 063F                      __pintentry 0004  
       __size_of_I2C_Write_Byte 000C                   ??_I2C_ReStart 0034                         ?_printf 00D4  
                    ??i1___wmul 0074                         ?_strcpy 0070                   i1_isdigit$864 0070  
                    _contLedRD4 0048                      ??i1_printf 0020                       ?_configAD 0070  
                       _SSPCON2 0091                         _SSPSTAT 0094                      __stringtab 070C  
          __end_of_read_RTC_I2c 070C                         i1_putch 0DFE          __size_of_interruptions 0077  
                     _I2C_Start 0E16                 ??_I2C_Read_Byte 0034                  ??_selectChanel 0034  
       read_RTC_I2c@pos_memoria 0036                  ?_write_RTC_I2c 0070                 ??_I2C_Send_NACK 0034  
                       ___awmod 0760                 __size_of___wmul 0023                         ___lwdiv 0FC2  
                       ___lwmod 0F52                         _channel 0050                         __ptext1 063F  
                       __ptext2 07AB                         __ptext3 06B5                         __ptext4 0E52  
                       __ptext5 0E1E                         __ptext6 0E16                         __ptext7 0E49  
                       __ptext8 0E40                         __ptext9 0E0E                 __size_of_printf 024D  
               __size_of_strcpy 001A               __end_of_hexpowers 0724                         _dpowers 0712  
             i1___lwdiv@divisor 0070                         _leitura 004C                         _isdigit 0E98  
             i1___lwdiv@counter 0077                ___awmod@dividend 0072                         _segundo 004F  
           __end_of_I2C_ReStart 0E16                      ??_configAD 0034                         clrloop0 0E27  
          end_of_initialization 0037                      ?_I2C_Start 0070                         printf@c 00ED  
                       printf@f 00EA           i1___wmul@multiplicand 0072                   _interruptions 05C8  
                     _PORTDbits 0008                       _TRISDbits 0088               __size_of_I2C_Idle 0009  
             __size_of_I2C_Stop 0008                       i1___lwdiv 0F86                       i1___lwmod 0F20  
                 ??_configRS232 0034                     printf@width 00EB                       i1_isdigit 0E6B  
                 ??_configTimer 0034                    i1printf@flag 0027                    i1printf@prec 0026  
               ??_write_RTC_I2c 0035                      _string_aux 00BA         ??_configUSARTInterrupts 0034  
                _I2C_Write_Byte 0E52                  ?_interruptions 0070                  __end_of___wmul 0F20  
                   _I2C_ReStart 0E0E               i1___lwmod@divisor 0078         __size_of_InitI2C_Master 001A  
                 __pbitbssBANK0 0298               i1___lwmod@counter 007D                  __end_of_printf 0288  
                __end_of_strcpy 0EC2             start_initialization 0015               __size_ofi1___wmul 0021  
          __end_of_selectChanel 07EC                       i1printf@c 002C                       i1printf@f 0024  
         __size_of_read_RTC_I2c 0057                      ?i1___lwdiv 0070                      ?i1___lwmod 0078  
             __size_ofi1_printf 01CF                      ?i1_isdigit 0070                     ??_I2C_Start 0034  
           __end_of_configRS232 07FD          __end_of_I2C_Write_Byte 0E5E                        ??___wmul 0038  
                   __pdataBANK0 0050             __end_of_configTimer 0E6B                    _read_RTC_I2c 06B5  
                      ??_printf 0042                        ??_strcpy 0071                       ___latbits 0002  
                 __pcstackBANK0 0020                   __pcstackBANK1 00D4                   __pcstackBANK3 0190  
             __size_of_configAD 0010                        ?i1_putch 0070                ___lwdiv@dividend 0036  
               ?_I2C_Write_Byte 0070                 ??_interruptions 002D                        ?___awmod 0070  
                      ?___lwdiv 0034                        ?___lwmod 003C                       __pstrings 070C  
                      _I2C_Idle 0E37                        ?_isdigit 0070                        _I2C_Stop 0E1E  
                     _hexpowers 071C                ___lwdiv@quotient 0039                     ??i1___lwdiv 0074  
                   ??i1___lwmod 007C                  __size_of_putch 0008                    _receivedData 0052  
             interrupt_function 0004                     _configRS232 07EC                  ___wmul@product 0038  
                   ??i1_isdigit 0070                       clear_ram0 0E26                        _PIE1bits 008C  
                   _configTimer 0E5E                        _PIR1bits 000C           __end_of_I2C_Read_Byte 0E49  
         __end_of_I2C_Send_NACK 0E52           __size_of_selectChanel 0041                  _InitI2C_Master 0EC2  
                    _ADCON0bits 001F                     __stringbase 0711                      _ADCON1bits 009F  
             ___wmul@multiplier 0034                        i1___wmul 0EDC                      printf@flag 00E9  
                    printf@prec 00E6                        i1_printf 0288             selectChanel@channel 0034  
              __size_ofi1_putch 0008                    _selectChanel 07AB          __end_of_InitI2C_Master 0EDC  
              __size_of___awmod 004B                __size_of___lwdiv 003E  __size_of_configUSARTInterrupts 000F  
              __size_of___lwmod 0034   __end_of_configUSARTInterrupts 0E88                    ?_I2C_ReStart 0070  
            __end_of__stringtab 0712                     _isdigit$864 0034                        _data_ADC 0045  
                      _changing 0298                __size_of_isdigit 0010                 ___lwdiv@divisor 0034  
               ___lwdiv@counter 003B                        __ptext10 0E37                        __ptext11 003B  
                      __ptext20 0E2E                        __ptext12 0E06                        __ptext21 0E88  
                      __ptext13 0E98                        __ptext30 0EA8                        __ptext22 0EC2  
                      __ptext14 0EFD                        __ptext31 0760                        __ptext23 05C8  
                      __ptext15 0F52                        __ptext24 0288                        __ptext16 0FC2  
                      __ptext25 0DFE                        __ptext17 0E79                        __ptext26 0E6B  
                      __ptext18 0E5E                        __ptext27 0EDC                        __ptext19 07EC  
                      __ptext28 0F20                        __ptext29 0F86                        _configAD 0E88  
            i1___lwdiv@dividend 0072                      strcpy@from 0070                   __size_of_main 0171  
         __end_of_write_RTC_I2c 06B5               _configADInterrupt 0E2E                 ?_InitI2C_Master 0070  
                     printf@idx 00E4                       printf@val 00E7              ?_configADInterrupt 0070  
            i1___lwdiv@quotient 0075                       putch@byte 0034                      _INTCONbits 000B  
           ??_configADInterrupt 0034                        isdigit@c 0035                        intlevel1 0000  
              ___lwmod@dividend 003E                ??_I2C_Write_Byte 0034                       stringcode 070C  
     __end_of_configADInterrupt 0E37                        printf@ap 00E5                 ___lwmod@divisor 003C  
                      strcpy@cp 0073                        strcpy@to 0072                 ___lwmod@counter 0041  
                      stringdir 070C                        stringtab 070C                     _SSPCON2bits 0091  
                  ?_configRS232 0070                    ?_configTimer 0070  
