

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Dec 14 16:24:27 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	idataCOMRAM
    52  001708                     __pidataCOMRAM:
    53                           	opt stack 0
    54                           
    55                           ;initializer for _receivedData
    56  001708  58                 	db	88
    57                           
    58                           	psect	smallconst
    59  000800                     __psmallconst:
    60                           	opt stack 0
    61  000800  00                 	db	0
    62  000801                     _dpowers:
    63                           	opt stack 0
    64  000801  0001               	dw	1
    65  000803  000A               	dw	10
    66  000805  0064               	dw	100
    67  000807  03E8               	dw	1000
    68  000809  2710               	dw	10000
    69  00080B                     __end_of_dpowers:
    70                           	opt stack 0
    71  00080B                     _hexpowers:
    72                           	opt stack 0
    73  00080B  0001               	dw	1
    74  00080D  0010               	dw	16
    75  00080F  0100               	dw	256
    76  000811  1000               	dw	4096
    77  000813                     __end_of_hexpowers:
    78                           	opt stack 0
    79  0000                     _ADCON0bits	set	4034
    80  0000                     _ADCON1bits	set	4033
    81  0000                     _ADCON2bits	set	4032
    82  0000                     _ADRESH	set	4036
    83  0000                     _ADRESL	set	4035
    84  0000                     _INTCONbits	set	4082
    85  0000                     _PIE1bits	set	3997
    86  0000                     _PIR1bits	set	3998
    87  0000                     _PORTDbits	set	3971
    88  0000                     _RCREG	set	4014
    89  0000                     _SPBRG	set	4015
    90  0000                     _SSPADD	set	4040
    91  0000                     _SSPBUF	set	4041
    92  0000                     _SSPCON1	set	4038
    93  0000                     _SSPCON1bits	set	4038
    94  0000                     _SSPCON2	set	4037
    95  0000                     _SSPCON2bits	set	4037
    96  0000                     _SSPSTAT	set	4039
    97  0000                     _SSPSTATbits	set	4039
    98  0000                     _T0CONbits	set	4053
    99  0000                     _TRISBbits	set	3987
   100  0000                     _TXREG	set	4013
   101  0000                     _ADFM	set	32263
   102  0000                     _BRG16	set	32195
   103  0000                     _BRGH	set	32098
   104  0000                     _CREN	set	32092
   105  0000                     _FERR	set	32090
   106  0000                     _GIE	set	32663
   107  0000                     _OERR	set	32089
   108  0000                     _PEIE	set	32662
   109  0000                     _RCIE	set	31981
   110  0000                     _RCIF	set	31989
   111  0000                     _RX9	set	32094
   112  0000                     _RXDTP	set	32197
   113  0000                     _SPEN	set	32095
   114  0000                     _SSPIF	set	31987
   115  0000                     _SYNC	set	32100
   116  0000                     _TMR0IP	set	32650
   117  0000                     _TX9	set	32102
   118  0000                     _TXEN	set	32101
   119  0000                     _TXIE	set	31980
   120  0000                     _TXIF	set	31988
   121  000813                     STR_3:
   122  000813  0A                 	db	10
   123  000814  0A                 	db	10
   124  000815  0D                 	db	13
   125  000816  4C                 	db	76	;'L'
   126  000817  65                 	db	101	;'e'
   127  000818  74                 	db	116	;'t'
   128  000819  20                 	db	32
   129  00081A  54                 	db	84	;'T'
   130  00081B  68                 	db	104	;'h'
   131  00081C  65                 	db	101	;'e'
   132  00081D  20                 	db	32
   133  00081E  43                 	db	67	;'C'
   134  00081F  61                 	db	97	;'a'
   135  000820  72                 	db	114	;'r'
   136  000821  6E                 	db	110	;'n'
   137  000822  61                 	db	97	;'a'
   138  000823  67                 	db	103	;'g'
   139  000824  65                 	db	101	;'e'
   140  000825  20                 	db	32
   141  000826  42                 	db	66	;'B'
   142  000827  65                 	db	101	;'e'
   143  000828  67                 	db	103	;'g'
   144  000829  69                 	db	105	;'i'
   145  00082A  6E                 	db	110	;'n'
   146  00082B  2C                 	db	44
   147  00082C  20                 	db	32
   148  00082D  6E                 	db	110	;'n'
   149  00082E  6F                 	db	111	;'o'
   150  00082F  77                 	db	119	;'w'
   151  000830  21                 	db	33
   152  000831  0A                 	db	10
   153  000832  0A                 	db	10
   154  000833  00                 	db	0
   155  000834                     STR_6:
   156  000834  0A                 	db	10
   157  000835  0D                 	db	13
   158  000836  4C                 	db	76	;'L'
   159  000837  65                 	db	101	;'e'
   160  000838  69                 	db	105	;'i'
   161  000839  74                 	db	116	;'t'
   162  00083A  75                 	db	117	;'u'
   163  00083B  72                 	db	114	;'r'
   164  00083C  61                 	db	97	;'a'
   165  00083D  20                 	db	32
   166  00083E  53                 	db	83	;'S'
   167  00083F  65                 	db	101	;'e'
   168  000840  67                 	db	103	;'g'
   169  000841  75                 	db	117	;'u'
   170  000842  6E                 	db	110	;'n'
   171  000843  64                 	db	100	;'d'
   172  000844  6F                 	db	111	;'o'
   173  000845  3A                 	db	58	;':'
   174  000846  20                 	db	32
   175  000847  5B                 	db	91	;'['
   176  000848  20                 	db	32
   177  000849  25                 	db	37
   178  00084A  30                 	db	48	;'0'
   179  00084B  32                 	db	50	;'2'
   180  00084C  58                 	db	88	;'X'
   181  00084D  20                 	db	32
   182  00084E  5D                 	db	93	;']'
   183  00084F  00                 	db	0
   184  000850                     STR_5:
   185  000850  0A                 	db	10
   186  000851  0D                 	db	13
   187  000852  4C                 	db	76	;'L'
   188  000853  65                 	db	101	;'e'
   189  000854  69                 	db	105	;'i'
   190  000855  74                 	db	116	;'t'
   191  000856  75                 	db	117	;'u'
   192  000857  72                 	db	114	;'r'
   193  000858  61                 	db	97	;'a'
   194  000859  20                 	db	32
   195  00085A  4D                 	db	77	;'M'
   196  00085B  69                 	db	105	;'i'
   197  00085C  6E                 	db	110	;'n'
   198  00085D  75                 	db	117	;'u'
   199  00085E  74                 	db	116	;'t'
   200  00085F  6F                 	db	111	;'o'
   201  000860  3A                 	db	58	;':'
   202  000861  20                 	db	32
   203  000862  5B                 	db	91	;'['
   204  000863  20                 	db	32
   205  000864  25                 	db	37
   206  000865  30                 	db	48	;'0'
   207  000866  32                 	db	50	;'2'
   208  000867  58                 	db	88	;'X'
   209  000868  20                 	db	32
   210  000869  5D                 	db	93	;']'
   211  00086A  00                 	db	0
   212  00086B                     STR_4:
   213  00086B  0A                 	db	10
   214  00086C  0D                 	db	13
   215  00086D  4C                 	db	76	;'L'
   216  00086E  65                 	db	101	;'e'
   217  00086F  69                 	db	105	;'i'
   218  000870  74                 	db	116	;'t'
   219  000871  75                 	db	117	;'u'
   220  000872  72                 	db	114	;'r'
   221  000873  61                 	db	97	;'a'
   222  000874  20                 	db	32
   223  000875  48                 	db	72	;'H'
   224  000876  6F                 	db	111	;'o'
   225  000877  72                 	db	114	;'r'
   226  000878  61                 	db	97	;'a'
   227  000879  3A                 	db	58	;':'
   228  00087A  20                 	db	32
   229  00087B  5B                 	db	91	;'['
   230  00087C  20                 	db	32
   231  00087D  25                 	db	37
   232  00087E  30                 	db	48	;'0'
   233  00087F  32                 	db	50	;'2'
   234  000880  58                 	db	88	;'X'
   235  000881  20                 	db	32
   236  000882  5D                 	db	93	;']'
   237  000883  00                 	db	0
   238  000884                     STR_2:
   239  000884  0A                 	db	10
   240  000885  0A                 	db	10
   241  000886  0D                 	db	13
   242  000887  77                 	db	119	;'w'
   243  000888  72                 	db	114	;'r'
   244  000889  69                 	db	105	;'i'
   245  00088A  74                 	db	116	;'t'
   246  00088B  65                 	db	101	;'e'
   247  00088C  5F                 	db	95	;'_'
   248  00088D  52                 	db	82	;'R'
   249  00088E  54                 	db	84	;'T'
   250  00088F  43                 	db	67	;'C'
   251  000890  5F                 	db	95	;'_'
   252  000891  49                 	db	73	;'I'
   253  000892  32                 	db	50	;'2'
   254  000893  63                 	db	99	;'c'
   255  000894  28                 	db	40
   256  000895  29                 	db	41
   257  000896  0A                 	db	10
   258  000897  0A                 	db	10
   259  000898  00                 	db	0
   260  000899                     STR_9:
   261  000899  30                 	db	48	;'0'
   262  00089A  31                 	db	49	;'1'
   263  00089B  32                 	db	50	;'2'
   264  00089C  33                 	db	51	;'3'
   265  00089D  34                 	db	52	;'4'
   266  00089E  35                 	db	53	;'5'
   267  00089F  36                 	db	54	;'6'
   268  0008A0  37                 	db	55	;'7'
   269  0008A1  38                 	db	56	;'8'
   270  0008A2  39                 	db	57	;'9'
   271  0008A3  41                 	db	65	;'A'
   272  0008A4  42                 	db	66	;'B'
   273  0008A5  43                 	db	67	;'C'
   274  0008A6  44                 	db	68	;'D'
   275  0008A7  45                 	db	69	;'E'
   276  0008A8  46                 	db	70	;'F'
   277  0008A9  00                 	db	0
   278  0008AA                     STR_7:
   279  0008AA  0A                 	db	10
   280  0008AB  0D                 	db	13
   281  0008AC  52                 	db	82	;'R'
   282  0008AD  65                 	db	101	;'e'
   283  0008AE  67                 	db	103	;'g'
   284  0008AF  69                 	db	105	;'i'
   285  0008B0  73                 	db	115	;'s'
   286  0008B1  74                 	db	116	;'t'
   287  0008B2  72                 	db	114	;'r'
   288  0008B3  6F                 	db	111	;'o'
   289  0008B4  75                 	db	117	;'u'
   290  0008B5  20                 	db	32
   291  0008B6  25                 	db	37
   292  0008B7  75                 	db	117	;'u'
   293  0008B8  69                 	db	105	;'i'
   294  0008B9  00                 	db	0
   295  0008BA                     STR_8:
   296  0008BA  0A                 	db	10
   297  0008BB  0D                 	db	13
   298  0008BC  0A                 	db	10
   299  0008BD  0D                 	db	13
   300  0008BE  0A                 	db	10
   301  0008BF  0D                 	db	13
   302  0008C0  00                 	db	0
   303  0000                     
   304                           ; #config settings
   305  0008C1  00                 	db	0	; dummy byte at the end
   306  0000                     
   307                           	psect	cinit
   308  001500                     __pcinit:
   309                           	opt stack 0
   310  001500                     start_initialization:
   311                           	opt stack 0
   312  001500                     __initialization:
   313                           	opt stack 0
   314                           
   315                           ; Clear objects allocated to BANK0 (29 bytes)
   316  001500  EE00  F084         	lfsr	0,__pbssBANK0
   317  001504  0E1D               	movlw	29
   318  001506                     clear_0:
   319  001506  6AEE               	clrf	postinc0,c
   320  001508  06E8               	decf	wreg,f,c
   321  00150A  E1FD               	bnz	clear_0
   322                           
   323                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   324  00150C  6A48               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   325                           
   326                           ; Clear objects allocated to COMRAM (27 bytes)
   327  00150E  EE00  F02D         	lfsr	0,__pbssCOMRAM
   328  001512  0E1B               	movlw	27
   329  001514                     clear_1:
   330  001514  6AEE               	clrf	postinc0,c
   331  001516  06E8               	decf	wreg,f,c
   332  001518  E1FD               	bnz	clear_1
   333                           
   334                           ; Initialize objects allocated to COMRAM (1 bytes)
   335                           ; load TBLPTR registers with __pidataCOMRAM
   336  00151A  0E08               	movlw	low __pidataCOMRAM
   337  00151C  6EF6               	movwf	tblptrl,c
   338  00151E  0E17               	movlw	high __pidataCOMRAM
   339  001520  6EF7               	movwf	tblptrh,c
   340  001522  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   341  001524  6EF8               	movwf	tblptru,c
   342  001526  0009               	tblrd		*+	;fetch initializer
   343  001528  CFF5 F049          	movff	tablat,__pdataCOMRAM
   344  00152C                     end_of_initialization:
   345                           	opt stack 0
   346  00152C                     __end_of__initialization:
   347                           	opt stack 0
   348  00152C  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   349  00152E  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   350  001530  0E00               	movlw	low (__Lmediumconst shr (0+16))
   351  001532  6EF8               	movwf	tblptru,c
   352  001534  0100               	movlb	0
   353  001536  EF51  F007         	goto	_main	;jump to C main() function
   354                           tblptru	equ	0xFF8
   355                           tblptrh	equ	0xFF7
   356                           tblptrl	equ	0xFF6
   357                           tablat	equ	0xFF5
   358                           postinc0	equ	0xFEE
   359                           wreg	equ	0xFE8
   360                           
   361                           	psect	bitbssCOMRAM
   362  000240                     __pbitbssCOMRAM:
   363                           	opt stack 0
   364  000240                     _hasAnError:
   365                           	opt stack 0
   366  000240                     	ds	1
   367  000241                     _val:
   368                           	opt stack 0
   369  000241                     	ds	1
   370                           tblptru	equ	0xFF8
   371                           tblptrh	equ	0xFF7
   372                           tblptrl	equ	0xFF6
   373                           tablat	equ	0xFF5
   374                           postinc0	equ	0xFEE
   375                           wreg	equ	0xFE8
   376                           
   377                           	psect	bssCOMRAM
   378  00002D                     __pbssCOMRAM:
   379                           	opt stack 0
   380  00002D                     _i:
   381                           	opt stack 0
   382  00002D                     	ds	1
   383  00002E                     _string_aux:
   384                           	opt stack 0
   385  00002E                     	ds	26
   386                           tblptru	equ	0xFF8
   387                           tblptrh	equ	0xFF7
   388                           tblptrl	equ	0xFF6
   389                           tablat	equ	0xFF5
   390                           postinc0	equ	0xFEE
   391                           wreg	equ	0xFE8
   392                           
   393                           	psect	dataCOMRAM
   394  000049                     __pdataCOMRAM:
   395                           	opt stack 0
   396  000049                     _receivedData:
   397                           	opt stack 0
   398  000049                     	ds	1
   399                           tblptru	equ	0xFF8
   400                           tblptrh	equ	0xFF7
   401                           tblptrl	equ	0xFF6
   402                           tablat	equ	0xFF5
   403                           postinc0	equ	0xFEE
   404                           wreg	equ	0xFE8
   405                           
   406                           	psect	bssBANK0
   407  000084                     __pbssBANK0:
   408                           	opt stack 0
   409  000084                     _data_ADC:
   410                           	opt stack 0
   411  000084                     	ds	2
   412  000086                     _leitura:
   413                           	opt stack 0
   414  000086                     	ds	1
   415  000087                     _string:
   416                           	opt stack 0
   417  000087                     	ds	26
   418                           tblptru	equ	0xFF8
   419                           tblptrh	equ	0xFF7
   420                           tblptrl	equ	0xFF6
   421                           tablat	equ	0xFF5
   422                           postinc0	equ	0xFEE
   423                           wreg	equ	0xFE8
   424                           
   425                           	psect	cstackBANK0
   426  000060                     __pcstackBANK0:
   427                           	opt stack 0
   428  000060                     ??_isdigit:
   429  000060                     ??_I2C_Idle:
   430  000060                     ?___wmul:
   431                           	opt stack 0
   432  000060                     ?___lwdiv:
   433                           	opt stack 0
   434  000060                     I2C_Write_Byte@Byte:
   435                           	opt stack 0
   436  000060                     putch@byte:
   437                           	opt stack 0
   438  000060                     selectChanel@channel:
   439                           	opt stack 0
   440  000060                     ___wmul@multiplier:
   441                           	opt stack 0
   442  000060                     ___lwdiv@dividend:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x0
   446  000060                     	ds	1
   447  000061                     read_RTC_I2c@pos_memoria:
   448                           	opt stack 0
   449  000061                     _isdigit$1318:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x1
   453  000061                     	ds	1
   454  000062                     isdigit@c:
   455                           	opt stack 0
   456  000062                     ___wmul@multiplicand:
   457                           	opt stack 0
   458  000062                     ___lwdiv@divisor:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x2
   462  000062                     	ds	2
   463  000064                     ___lwdiv@counter:
   464                           	opt stack 0
   465  000064                     ___wmul@product:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x4
   469  000064                     	ds	1
   470  000065                     ___lwdiv@quotient:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x5
   474  000065                     	ds	2
   475  000067                     ?___lwmod:
   476                           	opt stack 0
   477  000067                     ___lwmod@dividend:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x7
   481  000067                     	ds	2
   482  000069                     ___lwmod@divisor:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x9
   486  000069                     	ds	2
   487  00006B                     ___lwmod@counter:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0xB
   491  00006B                     	ds	1
   492  00006C                     ?_printf:
   493                           	opt stack 0
   494  00006C                     printf@f:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0xC
   498  00006C                     	ds	4
   499  000070                     ??_printf:
   500                           
   501                           ; 0 bytes @ 0x10
   502  000070                     	ds	4
   503  000074                     printf@idx:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x14
   507  000074                     	ds	1
   508  000075                     printf@ap:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x15
   512  000075                     	ds	2
   513  000077                     printf@prec:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x17
   517  000077                     	ds	1
   518  000078                     printf@val:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x18
   522  000078                     	ds	2
   523  00007A                     printf@flag:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x1A
   527  00007A                     	ds	1
   528  00007B                     printf@width:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x1B
   532  00007B                     	ds	2
   533  00007D                     printf@c:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x1D
   537  00007D                     	ds	1
   538  00007E                     ??_main:
   539                           
   540                           ; 0 bytes @ 0x1E
   541  00007E                     	ds	1
   542  00007F                     main@channel:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0x1F
   546  00007F                     	ds	1
   547  000080                     main@i:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x20
   551  000080                     	ds	2
   552  000082                     main@i_1063:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x22
   556  000082                     	ds	2
   557                           tblptru	equ	0xFF8
   558                           tblptrh	equ	0xFF7
   559                           tblptrl	equ	0xFF6
   560                           tablat	equ	0xFF5
   561                           postinc0	equ	0xFEE
   562                           wreg	equ	0xFE8
   563                           
   564                           	psect	cstackCOMRAM
   565  000001                     __pcstackCOMRAM:
   566                           	opt stack 0
   567  000001                     ??i2_isdigit:
   568  000001                     ?___awmod:
   569                           	opt stack 0
   570  000001                     ?i2___wmul:
   571                           	opt stack 0
   572  000001                     ?i2___lwdiv:
   573                           	opt stack 0
   574  000001                     i2putch@byte:
   575                           	opt stack 0
   576  000001                     ___awmod@dividend:
   577                           	opt stack 0
   578  000001                     strcpy@to:
   579                           	opt stack 0
   580  000001                     i2___wmul@multiplier:
   581                           	opt stack 0
   582  000001                     i2___lwdiv@dividend:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x0
   586  000001                     	ds	1
   587  000002                     i2_isdigit$1318:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x1
   591  000002                     	ds	1
   592  000003                     i2isdigit@c:
   593                           	opt stack 0
   594  000003                     ___awmod@divisor:
   595                           	opt stack 0
   596  000003                     strcpy@from:
   597                           	opt stack 0
   598  000003                     i2___wmul@multiplicand:
   599                           	opt stack 0
   600  000003                     i2___lwdiv@divisor:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x2
   604  000003                     	ds	2
   605  000005                     ___awmod@counter:
   606                           	opt stack 0
   607  000005                     strcpy@cp:
   608                           	opt stack 0
   609  000005                     i2___wmul@product:
   610                           	opt stack 0
   611  000005                     i2___lwdiv@quotient:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x4
   615  000005                     	ds	1
   616  000006                     ___awmod@sign:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x5
   620  000006                     	ds	1
   621  000007                     i2___lwdiv@counter:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x6
   625  000007                     	ds	1
   626  000008                     ?i2___lwmod:
   627                           	opt stack 0
   628  000008                     i2___lwmod@dividend:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x7
   632  000008                     	ds	2
   633  00000A                     i2___lwmod@divisor:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x9
   637  00000A                     	ds	2
   638  00000C                     i2___lwmod@counter:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0xB
   642  00000C                     	ds	1
   643  00000D                     ?i2_printf:
   644                           	opt stack 0
   645  00000D                     i2printf@f:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0xC
   649  00000D                     	ds	2
   650  00000F                     ??i2_printf:
   651                           
   652                           ; 0 bytes @ 0xE
   653  00000F                     	ds	4
   654  000013                     i2printf@idx:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x12
   658  000013                     	ds	1
   659  000014                     i2printf@ap:
   660                           	opt stack 0
   661                           
   662                           ; 2 bytes @ 0x13
   663  000014                     	ds	2
   664  000016                     i2printf@prec:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x15
   668  000016                     	ds	1
   669  000017                     i2printf@flag:
   670                           	opt stack 0
   671                           
   672                           ; 1 bytes @ 0x16
   673  000017                     	ds	1
   674  000018                     i2printf@val:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x17
   678  000018                     	ds	2
   679  00001A                     i2printf@width:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x19
   683  00001A                     	ds	2
   684  00001C                     i2printf@c:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x1B
   688  00001C                     	ds	1
   689  00001D                     ??_interruptions:
   690                           
   691                           ; 0 bytes @ 0x1C
   692  00001D                     	ds	16
   693                           tblptru	equ	0xFF8
   694                           tblptrh	equ	0xFF7
   695                           tblptrl	equ	0xFF6
   696                           tablat	equ	0xFF5
   697                           postinc0	equ	0xFEE
   698                           wreg	equ	0xFE8
   699                           
   700 ;;
   701 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   702 ;;
   703 ;; *************** function _main *****************
   704 ;; Defined at:
   705 ;;		line 123 in file "main.c"
   706 ;; Parameters:    Size  Location     Type
   707 ;;		None
   708 ;; Auto vars:     Size  Location     Type
   709 ;;  i               2   34[BANK0 ] int 
   710 ;;  i               2   32[BANK0 ] int 
   711 ;;  channel         1   31[BANK0 ] unsigned char 
   712 ;; Return value:  Size  Location     Type
   713 ;;		None               void
   714 ;; Registers used:
   715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   716 ;; Tracked objects:
   717 ;;		On entry : 0/0
   718 ;;		On exit  : 0/0
   719 ;;		Unchanged: 0/0
   720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   721 ;;      Params:         0       0       0       0       0       0       0       0       0
   722 ;;      Locals:         0       5       0       0       0       0       0       0       0
   723 ;;      Temps:          0       1       0       0       0       0       0       0       0
   724 ;;      Totals:         0       6       0       0       0       0       0       0       0
   725 ;;Total ram usage:        6 bytes
   726 ;; Hardware stack levels required when called:    5
   727 ;; This function calls:
   728 ;;		_InitI2C_Master
   729 ;;		_configAD
   730 ;;		_configADInterrupt
   731 ;;		_configRS232
   732 ;;		_configTimer
   733 ;;		_configUSARTInterrupts
   734 ;;		_printf
   735 ;;		_read_RTC_I2c
   736 ;;		_selectChanel
   737 ;;		_write_RTC_I2c
   738 ;; This function is called by:
   739 ;;		Startup code after reset
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743                           	psect	text0
   744  000EA2                     __ptext0:
   745                           	opt stack 0
   746  000EA2                     _main:
   747                           	opt stack 26
   748                           
   749                           ;main.c: 125: configTimer();
   750                           
   751                           ;incstack = 0
   752  000EA2  EC17  F00B         	call	_configTimer	;wreg free
   753                           
   754                           ;main.c: 128: configADInterrupt();
   755  000EA6  EC7F  F00B         	call	_configADInterrupt	;wreg free
   756                           
   757                           ;main.c: 129: configAD();
   758  000EAA  EC24  F00B         	call	_configAD	;wreg free
   759                           
   760                           ;main.c: 132: configRS232();
   761  000EAE  EC31  F00B         	call	_configRS232	;wreg free
   762                           
   763                           ;main.c: 133: configUSARTInterrupts();
   764  000EB2  EC57  F00B         	call	_configUSARTInterrupts	;wreg free
   765                           
   766                           ;main.c: 137: InitI2C_Master();
   767  000EB6  ECF7  F00A         	call	_InitI2C_Master	;wreg free
   768                           
   769                           ;main.c: 140: unsigned char channel = 1;
   770  000EBA  0E01               	movlw	1
   771  000EBC  0100               	movlb	0	; () banked
   772  000EBE  6F7F               	movwf	main@channel& (0+255),b
   773                           
   774                           ; BSR set to: 0
   775                           ;main.c: 141: selectChanel(channel);
   776  000EC0  0100               	movlb	0	; () banked
   777  000EC2  517F               	movf	main@channel& (0+255),w,b
   778  000EC4  ECB1  F008         	call	_selectChanel
   779                           
   780                           ;main.c: 142: ADCON0bits.GODONE = 1;
   781  000EC8  82C2               	bsf	4034,1,c	;volatile
   782                           
   783                           ;main.c: 145: printf("\n\n\rwrite_RTC_I2c()\n\n");
   784  000ECA  0E84               	movlw	low STR_2
   785  000ECC  0100               	movlb	0	; () banked
   786  000ECE  6F6C               	movwf	printf@f& (0+255),b
   787  000ED0  0E08               	movlw	high STR_2
   788  000ED2  0100               	movlb	0	; () banked
   789  000ED4  6F6D               	movwf	(printf@f+1)& (0+255),b
   790  000ED6  EC61  F004         	call	_printf	;wreg free
   791                           
   792                           ;main.c: 147: for(int i=0; i<(2000/20); i++)
   793  000EDA  0E00               	movlw	0
   794  000EDC  0100               	movlb	0	; () banked
   795  000EDE  6F81               	movwf	(main@i+1)& (0+255),b
   796  000EE0  0E00               	movlw	0
   797  000EE2  6F80               	movwf	main@i& (0+255),b
   798  000EE4                     l2663:
   799                           
   800                           ; BSR set to: 0
   801  000EE4  0100               	movlb	0	; () banked
   802  000EE6  BF81               	btfsc	(main@i+1)& (0+255),7,b
   803  000EE8  D008               	goto	l2667
   804  000EEA  0100               	movlb	0	; () banked
   805  000EEC  5181               	movf	(main@i+1)& (0+255),w,b
   806  000EEE  E111               	bnz	l2671
   807  000EF0  0E64               	movlw	100
   808  000EF2  0100               	movlb	0	; () banked
   809  000EF4  5D80               	subwf	main@i& (0+255),w,b
   810  000EF6  B0D8               	btfsc	status,0,c
   811  000EF8  D00C               	goto	l2671
   812  000EFA                     l2667:
   813                           
   814                           ; BSR set to: 0
   815                           ;main.c: 148: {
   816                           ;main.c: 149: _delay((unsigned long)((20)*(20000000/4000.0)));
   817  000EFA  0E82               	movlw	130
   818  000EFC  0100               	movlb	0	; () banked
   819  000EFE  6F7E               	movwf	??_main& (0+255),b
   820  000F00  0EDE               	movlw	222
   821  000F02                     u2447:
   822  000F02  2EE8               	decfsz	wreg,f,c
   823  000F04  D7FE               	goto	u2447
   824  000F06  2F7E               	decfsz	??_main& (0+255),f,b
   825  000F08  D7FC               	goto	u2447
   826  000F0A  0100               	movlb	0	; () banked
   827  000F0C  4B80               	infsnz	main@i& (0+255),f,b
   828  000F0E  2B81               	incf	(main@i+1)& (0+255),f,b
   829  000F10  D7E9               	goto	l2663
   830  000F12                     l2671:
   831                           
   832                           ; BSR set to: 0
   833                           ;main.c: 150: }
   834                           ;main.c: 151: write_RTC_I2c();
   835  000F12  ECA8  F009         	call	_write_RTC_I2c	;wreg free
   836                           
   837                           ;main.c: 153: printf("\n\n\rLet The Carnage Begin, now!\n\n");
   838  000F16  0E13               	movlw	low STR_3
   839  000F18  0100               	movlb	0	; () banked
   840  000F1A  6F6C               	movwf	printf@f& (0+255),b
   841  000F1C  0E08               	movlw	high STR_3
   842  000F1E  0100               	movlb	0	; () banked
   843  000F20  6F6D               	movwf	(printf@f+1)& (0+255),b
   844  000F22  EC61  F004         	call	_printf	;wreg free
   845  000F26                     l2675:
   846                           
   847                           ;main.c: 156: for(int i=0; i<(2000/20); i++)
   848  000F26  0E00               	movlw	0
   849  000F28  0100               	movlb	0	; () banked
   850  000F2A  6F83               	movwf	(main@i_1063+1)& (0+255),b
   851  000F2C  0E00               	movlw	0
   852  000F2E  6F82               	movwf	main@i_1063& (0+255),b
   853  000F30                     l2677:
   854                           
   855                           ; BSR set to: 0
   856  000F30  0100               	movlb	0	; () banked
   857  000F32  BF83               	btfsc	(main@i_1063+1)& (0+255),7,b
   858  000F34  D008               	goto	l2681
   859  000F36  0100               	movlb	0	; () banked
   860  000F38  5183               	movf	(main@i_1063+1)& (0+255),w,b
   861  000F3A  E111               	bnz	l2685
   862  000F3C  0E64               	movlw	100
   863  000F3E  0100               	movlb	0	; () banked
   864  000F40  5D82               	subwf	main@i_1063& (0+255),w,b
   865  000F42  B0D8               	btfsc	status,0,c
   866  000F44  D00C               	goto	l2685
   867  000F46                     l2681:
   868                           
   869                           ; BSR set to: 0
   870                           ;main.c: 157: {
   871                           ;main.c: 158: _delay((unsigned long)((20)*(20000000/4000.0)));
   872  000F46  0E82               	movlw	130
   873  000F48  0100               	movlb	0	; () banked
   874  000F4A  6F7E               	movwf	??_main& (0+255),b
   875  000F4C  0EDE               	movlw	222
   876  000F4E                     u2457:
   877  000F4E  2EE8               	decfsz	wreg,f,c
   878  000F50  D7FE               	goto	u2457
   879  000F52  2F7E               	decfsz	??_main& (0+255),f,b
   880  000F54  D7FC               	goto	u2457
   881  000F56  0100               	movlb	0	; () banked
   882  000F58  4B82               	infsnz	main@i_1063& (0+255),f,b
   883  000F5A  2B83               	incf	(main@i_1063+1)& (0+255),f,b
   884  000F5C  D7E9               	goto	l2677
   885  000F5E                     l2685:
   886                           
   887                           ; BSR set to: 0
   888                           ;main.c: 159: }
   889                           ;main.c: 162: read_RTC_I2c(0x02);
   890  000F5E  0E02               	movlw	2
   891  000F60  EC38  F00A         	call	_read_RTC_I2c
   892                           
   893                           ;main.c: 163: printf("\n\rLeitura Hora: [ %02X ]", leitura);
   894  000F64  0E6B               	movlw	low STR_4
   895  000F66  0100               	movlb	0	; () banked
   896  000F68  6F6C               	movwf	printf@f& (0+255),b
   897  000F6A  0E08               	movlw	high STR_4
   898  000F6C  0100               	movlb	0	; () banked
   899  000F6E  6F6D               	movwf	(printf@f+1)& (0+255),b
   900  000F70  C086  F06E         	movff	_leitura,?_printf+2
   901  000F74  0100               	movlb	0	; () banked
   902  000F76  6B6F               	clrf	(?_printf+3)& (0+255),b
   903  000F78  EC61  F004         	call	_printf	;wreg free
   904                           
   905                           ;main.c: 165: _delay((unsigned long)((10)*(20000000/4000.0)));
   906  000F7C  0E41               	movlw	65
   907  000F7E  0100               	movlb	0	; () banked
   908  000F80  6F7E               	movwf	??_main& (0+255),b
   909  000F82  0EEE               	movlw	238
   910  000F84                     u2467:
   911  000F84  2EE8               	decfsz	wreg,f,c
   912  000F86  D7FE               	goto	u2467
   913  000F88  2F7E               	decfsz	??_main& (0+255),f,b
   914  000F8A  D7FC               	goto	u2467
   915  000F8C  D000               	nop2	
   916                           
   917                           ;main.c: 168: read_RTC_I2c(0x01);
   918  000F8E  0E01               	movlw	1
   919  000F90  EC38  F00A         	call	_read_RTC_I2c
   920                           
   921                           ;main.c: 169: printf("\n\rLeitura Minuto: [ %02X ]", leitura);
   922  000F94  0E50               	movlw	low STR_5
   923  000F96  0100               	movlb	0	; () banked
   924  000F98  6F6C               	movwf	printf@f& (0+255),b
   925  000F9A  0E08               	movlw	high STR_5
   926  000F9C  0100               	movlb	0	; () banked
   927  000F9E  6F6D               	movwf	(printf@f+1)& (0+255),b
   928  000FA0  C086  F06E         	movff	_leitura,?_printf+2
   929  000FA4  0100               	movlb	0	; () banked
   930  000FA6  6B6F               	clrf	(?_printf+3)& (0+255),b
   931  000FA8  EC61  F004         	call	_printf	;wreg free
   932                           
   933                           ;main.c: 171: _delay((unsigned long)((10)*(20000000/4000.0)));
   934  000FAC  0E41               	movlw	65
   935  000FAE  0100               	movlb	0	; () banked
   936  000FB0  6F7E               	movwf	??_main& (0+255),b
   937  000FB2  0EEE               	movlw	238
   938  000FB4                     u2477:
   939  000FB4  2EE8               	decfsz	wreg,f,c
   940  000FB6  D7FE               	goto	u2477
   941  000FB8  2F7E               	decfsz	??_main& (0+255),f,b
   942  000FBA  D7FC               	goto	u2477
   943  000FBC  D000               	nop2	
   944                           
   945                           ;main.c: 174: read_RTC_I2c(0x00);
   946  000FBE  0E00               	movlw	0
   947  000FC0  EC38  F00A         	call	_read_RTC_I2c
   948                           
   949                           ;main.c: 175: printf("\n\rLeitura Segundo: [ %02X ]", leitura);
   950  000FC4  0E34               	movlw	low STR_6
   951  000FC6  0100               	movlb	0	; () banked
   952  000FC8  6F6C               	movwf	printf@f& (0+255),b
   953  000FCA  0E08               	movlw	high STR_6
   954  000FCC  0100               	movlb	0	; () banked
   955  000FCE  6F6D               	movwf	(printf@f+1)& (0+255),b
   956  000FD0  C086  F06E         	movff	_leitura,?_printf+2
   957  000FD4  0100               	movlb	0	; () banked
   958  000FD6  6B6F               	clrf	(?_printf+3)& (0+255),b
   959  000FD8  EC61  F004         	call	_printf	;wreg free
   960                           
   961                           ;main.c: 177: _delay((unsigned long)((10)*(20000000/4000.0)));
   962  000FDC  0E41               	movlw	65
   963  000FDE  0100               	movlb	0	; () banked
   964  000FE0  6F7E               	movwf	??_main& (0+255),b
   965  000FE2  0EEE               	movlw	238
   966  000FE4                     u2487:
   967  000FE4  2EE8               	decfsz	wreg,f,c
   968  000FE6  D7FE               	goto	u2487
   969  000FE8  2F7E               	decfsz	??_main& (0+255),f,b
   970  000FEA  D7FC               	goto	u2487
   971  000FEC  D000               	nop2	
   972                           
   973                           ;main.c: 179: printf("\n\rRegistrou %ui", data_ADC);
   974  000FEE  0EAA               	movlw	low STR_7
   975  000FF0  0100               	movlb	0	; () banked
   976  000FF2  6F6C               	movwf	printf@f& (0+255),b
   977  000FF4  0E08               	movlw	high STR_7
   978  000FF6  0100               	movlb	0	; () banked
   979  000FF8  6F6D               	movwf	(printf@f+1)& (0+255),b
   980  000FFA  C084  F06E         	movff	_data_ADC,?_printf+2
   981  000FFE  C085  F06F         	movff	_data_ADC+1,?_printf+3
   982  001002  EC61  F004         	call	_printf	;wreg free
   983                           
   984                           ;main.c: 181: _delay((unsigned long)((10)*(20000000/4000.0)));
   985  001006  0E41               	movlw	65
   986  001008  0100               	movlb	0	; () banked
   987  00100A  6F7E               	movwf	??_main& (0+255),b
   988  00100C  0EEE               	movlw	238
   989  00100E                     u2497:
   990  00100E  2EE8               	decfsz	wreg,f,c
   991  001010  D7FE               	goto	u2497
   992  001012  2F7E               	decfsz	??_main& (0+255),f,b
   993  001014  D7FC               	goto	u2497
   994  001016  D000               	nop2	
   995                           
   996                           ;main.c: 183: printf("\n\r\n\r\n\r");
   997  001018  0EBA               	movlw	low STR_8
   998  00101A  0100               	movlb	0	; () banked
   999  00101C  6F6C               	movwf	printf@f& (0+255),b
  1000  00101E  0E08               	movlw	high STR_8
  1001  001020  0100               	movlb	0	; () banked
  1002  001022  6F6D               	movwf	(printf@f+1)& (0+255),b
  1003  001024  EC61  F004         	call	_printf	;wreg free
  1004  001028  D77E               	goto	l2675
  1005  00102A                     __end_of_main:
  1006                           	opt stack 0
  1007                           tblptru	equ	0xFF8
  1008                           tblptrh	equ	0xFF7
  1009                           tblptrl	equ	0xFF6
  1010                           tablat	equ	0xFF5
  1011                           postinc0	equ	0xFEE
  1012                           wreg	equ	0xFE8
  1013                           status	equ	0xFD8
  1014                           
  1015 ;; *************** function _write_RTC_I2c *****************
  1016 ;; Defined at:
  1017 ;;		line 78 in file "main.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;		None
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;		None
  1022 ;; Return value:  Size  Location     Type
  1023 ;;		None               void
  1024 ;; Registers used:
  1025 ;;		wreg, status,2, status,0, cstack
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1031 ;;      Params:         0       0       0       0       0       0       0       0       0
  1032 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1033 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1034 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1035 ;;Total ram usage:        0 bytes
  1036 ;; Hardware stack levels used:    1
  1037 ;; Hardware stack levels required when called:    4
  1038 ;; This function calls:
  1039 ;;		_I2C_Idle
  1040 ;;		_I2C_Start
  1041 ;;		_I2C_Stop
  1042 ;;		_I2C_Write_Byte
  1043 ;; This function is called by:
  1044 ;;		_main
  1045 ;; This function uses a non-reentrant model
  1046 ;;
  1047                           
  1048                           	psect	text1
  1049  001350                     __ptext1:
  1050                           	opt stack 0
  1051  001350                     _write_RTC_I2c:
  1052                           	opt stack 26
  1053                           
  1054                           ;main.c: 80: I2C_Idle();
  1055                           
  1056                           ;incstack = 0
  1057  001350  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1058                           
  1059                           ;main.c: 81: I2C_Start();
  1060  001354  EC75  F00B         	call	_I2C_Start	;wreg free
  1061                           
  1062                           ;main.c: 82: I2C_Idle();
  1063  001358  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1064                           
  1065                           ;main.c: 83: I2C_Write_Byte(0xD0);
  1066  00135C  0ED0               	movlw	208
  1067  00135E  EC47  F00B         	call	_I2C_Write_Byte
  1068                           
  1069                           ;main.c: 84: I2C_Idle();
  1070  001362  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1071                           
  1072                           ;main.c: 85: I2C_Write_Byte(0x00);
  1073  001366  0E00               	movlw	0
  1074  001368  EC47  F00B         	call	_I2C_Write_Byte
  1075                           
  1076                           ;main.c: 86: I2C_Idle();
  1077  00136C  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1078                           
  1079                           ;main.c: 87: I2C_Write_Byte(0x00);
  1080  001370  0E00               	movlw	0
  1081  001372  EC47  F00B         	call	_I2C_Write_Byte
  1082                           
  1083                           ;main.c: 88: I2C_Idle();
  1084  001376  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1085                           
  1086                           ;main.c: 89: I2C_Write_Byte(0x08);
  1087  00137A  0E08               	movlw	8
  1088  00137C  EC47  F00B         	call	_I2C_Write_Byte
  1089                           
  1090                           ;main.c: 90: I2C_Idle();
  1091  001380  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1092                           
  1093                           ;main.c: 91: I2C_Write_Byte(0x08);
  1094  001384  0E08               	movlw	8
  1095  001386  EC47  F00B         	call	_I2C_Write_Byte
  1096                           
  1097                           ;main.c: 92: I2C_Idle();
  1098  00138A  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1099                           
  1100                           ;main.c: 93: I2C_Write_Byte(0x04);
  1101  00138E  0E04               	movlw	4
  1102  001390  EC47  F00B         	call	_I2C_Write_Byte
  1103                           
  1104                           ;main.c: 94: I2C_Idle();
  1105  001394  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1106                           
  1107                           ;main.c: 95: I2C_Write_Byte(0x17);
  1108  001398  0E17               	movlw	23
  1109  00139A  EC47  F00B         	call	_I2C_Write_Byte
  1110                           
  1111                           ;main.c: 96: I2C_Idle();
  1112  00139E  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1113                           
  1114                           ;main.c: 97: I2C_Write_Byte(0x04);
  1115  0013A2  0E04               	movlw	4
  1116  0013A4  EC47  F00B         	call	_I2C_Write_Byte
  1117                           
  1118                           ;main.c: 98: I2C_Idle();
  1119  0013A8  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1120                           
  1121                           ;main.c: 99: I2C_Write_Byte(0x13);
  1122  0013AC  0E13               	movlw	19
  1123  0013AE  EC47  F00B         	call	_I2C_Write_Byte
  1124                           
  1125                           ;main.c: 100: I2C_Idle();
  1126  0013B2  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1127                           
  1128                           ;main.c: 101: I2C_Stop();
  1129  0013B6  EC70  F00B         	call	_I2C_Stop	;wreg free
  1130  0013BA  0012               	return		;funcret
  1131  0013BC                     __end_of_write_RTC_I2c:
  1132                           	opt stack 0
  1133                           tblptru	equ	0xFF8
  1134                           tblptrh	equ	0xFF7
  1135                           tblptrl	equ	0xFF6
  1136                           tablat	equ	0xFF5
  1137                           postinc0	equ	0xFEE
  1138                           wreg	equ	0xFE8
  1139                           status	equ	0xFD8
  1140                           
  1141 ;; *************** function _selectChanel *****************
  1142 ;; Defined at:
  1143 ;;		line 44 in file "ad.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;  channel         1    wreg     unsigned char 
  1146 ;; Auto vars:     Size  Location     Type
  1147 ;;  channel         1    0[BANK0 ] unsigned char 
  1148 ;; Return value:  Size  Location     Type
  1149 ;;		None               void
  1150 ;; Registers used:
  1151 ;;		wreg, status,2, status,0
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1157 ;;      Params:         0       0       0       0       0       0       0       0       0
  1158 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1159 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1160 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1161 ;;Total ram usage:        1 bytes
  1162 ;; Hardware stack levels used:    1
  1163 ;; Hardware stack levels required when called:    3
  1164 ;; This function calls:
  1165 ;;		Nothing
  1166 ;; This function is called by:
  1167 ;;		_main
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text2
  1172  001162                     __ptext2:
  1173                           	opt stack 0
  1174  001162                     _selectChanel:
  1175                           	opt stack 27
  1176                           
  1177                           ;incstack = 0
  1178                           ;selectChanel@channel stored from wreg
  1179  001162  0100               	movlb	0	; () banked
  1180  001164  6F60               	movwf	selectChanel@channel& (0+255),b
  1181                           
  1182                           ;ad.c: 45: if(channel == 0){
  1183  001166  0100               	movlb	0	; () banked
  1184  001168  5160               	movf	selectChanel@channel& (0+255),w,b
  1185  00116A  0100               	movlb	0	; () banked
  1186  00116C  A4D8               	btfss	status,2,c
  1187  00116E  D005               	goto	l2417
  1188                           
  1189                           ; BSR set to: 0
  1190                           ;ad.c: 46: ADCON0bits.CHS3 = 0;
  1191  001170  9AC2               	bcf	4034,5,c	;volatile
  1192                           
  1193                           ;ad.c: 47: ADCON0bits.CHS2 = 0;
  1194  001172  98C2               	bcf	4034,4,c	;volatile
  1195                           
  1196                           ;ad.c: 48: ADCON0bits.CHS1 = 0;
  1197  001174  96C2               	bcf	4034,3,c	;volatile
  1198                           
  1199                           ;ad.c: 49: ADCON0bits.CHS0 = 0;
  1200  001176  94C2               	bcf	4034,2,c	;volatile
  1201                           
  1202                           ;ad.c: 50: }
  1203  001178  0012               	return	
  1204  00117A                     l2417:
  1205                           
  1206                           ; BSR set to: 0
  1207                           ;ad.c: 51: else if(channel == 1){
  1208  00117A  0100               	movlb	0	; () banked
  1209  00117C  0560               	decf	selectChanel@channel& (0+255),w,b
  1210  00117E  A4D8               	btfss	status,2,c
  1211  001180  D005               	goto	l2421
  1212                           
  1213                           ; BSR set to: 0
  1214                           ;ad.c: 52: ADCON0bits.CHS3 = 0;
  1215  001182  9AC2               	bcf	4034,5,c	;volatile
  1216                           
  1217                           ;ad.c: 53: ADCON0bits.CHS2 = 0;
  1218  001184  98C2               	bcf	4034,4,c	;volatile
  1219                           
  1220                           ;ad.c: 54: ADCON0bits.CHS1 = 0;
  1221  001186  96C2               	bcf	4034,3,c	;volatile
  1222                           
  1223                           ;ad.c: 55: ADCON0bits.CHS0 = 1;
  1224  001188  84C2               	bsf	4034,2,c	;volatile
  1225                           
  1226                           ;ad.c: 56: }
  1227  00118A  0012               	return	
  1228  00118C                     l2421:
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;ad.c: 57: else if(channel == 2){
  1232  00118C  0E02               	movlw	2
  1233  00118E  0100               	movlb	0	; () banked
  1234  001190  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1235  001192  A4D8               	btfss	status,2,c
  1236  001194  D005               	goto	l2425
  1237                           
  1238                           ; BSR set to: 0
  1239                           ;ad.c: 58: ADCON0bits.CHS3 = 0;
  1240  001196  9AC2               	bcf	4034,5,c	;volatile
  1241                           
  1242                           ;ad.c: 59: ADCON0bits.CHS2 = 0;
  1243  001198  98C2               	bcf	4034,4,c	;volatile
  1244                           
  1245                           ;ad.c: 60: ADCON0bits.CHS1 = 1;
  1246  00119A  86C2               	bsf	4034,3,c	;volatile
  1247                           
  1248                           ;ad.c: 61: ADCON0bits.CHS0 = 0;
  1249  00119C  94C2               	bcf	4034,2,c	;volatile
  1250                           
  1251                           ;ad.c: 62: }
  1252  00119E  0012               	return	
  1253  0011A0                     l2425:
  1254                           
  1255                           ; BSR set to: 0
  1256                           ;ad.c: 63: else if(channel == 3){
  1257  0011A0  0E03               	movlw	3
  1258  0011A2  0100               	movlb	0	; () banked
  1259  0011A4  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1260  0011A6  A4D8               	btfss	status,2,c
  1261  0011A8  D005               	goto	l2429
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;ad.c: 64: ADCON0bits.CHS3 = 0;
  1265  0011AA  9AC2               	bcf	4034,5,c	;volatile
  1266                           
  1267                           ;ad.c: 65: ADCON0bits.CHS2 = 0;
  1268  0011AC  98C2               	bcf	4034,4,c	;volatile
  1269                           
  1270                           ;ad.c: 66: ADCON0bits.CHS1 = 1;
  1271  0011AE  86C2               	bsf	4034,3,c	;volatile
  1272                           
  1273                           ;ad.c: 67: ADCON0bits.CHS0 = 1;
  1274  0011B0  84C2               	bsf	4034,2,c	;volatile
  1275                           
  1276                           ;ad.c: 68: }
  1277  0011B2  0012               	return	
  1278  0011B4                     l2429:
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;ad.c: 69: else if(channel == 4){
  1282  0011B4  0E04               	movlw	4
  1283  0011B6  0100               	movlb	0	; () banked
  1284  0011B8  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1285  0011BA  A4D8               	btfss	status,2,c
  1286  0011BC  D005               	goto	l2433
  1287                           
  1288                           ; BSR set to: 0
  1289                           ;ad.c: 70: ADCON0bits.CHS3 = 0;
  1290  0011BE  9AC2               	bcf	4034,5,c	;volatile
  1291                           
  1292                           ;ad.c: 71: ADCON0bits.CHS2 = 1;
  1293  0011C0  88C2               	bsf	4034,4,c	;volatile
  1294                           
  1295                           ;ad.c: 72: ADCON0bits.CHS1 = 0;
  1296  0011C2  96C2               	bcf	4034,3,c	;volatile
  1297                           
  1298                           ;ad.c: 73: ADCON0bits.CHS0 = 0;
  1299  0011C4  94C2               	bcf	4034,2,c	;volatile
  1300                           
  1301                           ;ad.c: 74: }
  1302  0011C6  0012               	return	
  1303  0011C8                     l2433:
  1304                           
  1305                           ; BSR set to: 0
  1306                           ;ad.c: 75: else if(channel == 5){
  1307  0011C8  0E05               	movlw	5
  1308  0011CA  0100               	movlb	0	; () banked
  1309  0011CC  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1310  0011CE  A4D8               	btfss	status,2,c
  1311  0011D0  D005               	goto	l2437
  1312                           
  1313                           ; BSR set to: 0
  1314                           ;ad.c: 76: ADCON0bits.CHS3 = 0;
  1315  0011D2  9AC2               	bcf	4034,5,c	;volatile
  1316                           
  1317                           ;ad.c: 77: ADCON0bits.CHS2 = 1;
  1318  0011D4  88C2               	bsf	4034,4,c	;volatile
  1319                           
  1320                           ;ad.c: 78: ADCON0bits.CHS1 = 0;
  1321  0011D6  96C2               	bcf	4034,3,c	;volatile
  1322                           
  1323                           ;ad.c: 79: ADCON0bits.CHS0 = 1;
  1324  0011D8  84C2               	bsf	4034,2,c	;volatile
  1325                           
  1326                           ;ad.c: 80: }
  1327  0011DA  0012               	return	
  1328  0011DC                     l2437:
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;ad.c: 81: else if(channel == 6){
  1332  0011DC  0E06               	movlw	6
  1333  0011DE  0100               	movlb	0	; () banked
  1334  0011E0  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1335  0011E2  A4D8               	btfss	status,2,c
  1336  0011E4  D005               	goto	l2441
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;ad.c: 82: ADCON0bits.CHS3 = 0;
  1340  0011E6  9AC2               	bcf	4034,5,c	;volatile
  1341                           
  1342                           ;ad.c: 83: ADCON0bits.CHS2 = 1;
  1343  0011E8  88C2               	bsf	4034,4,c	;volatile
  1344                           
  1345                           ;ad.c: 84: ADCON0bits.CHS1 = 1;
  1346  0011EA  86C2               	bsf	4034,3,c	;volatile
  1347                           
  1348                           ;ad.c: 85: ADCON0bits.CHS0 = 0;
  1349  0011EC  94C2               	bcf	4034,2,c	;volatile
  1350                           
  1351                           ;ad.c: 86: }
  1352  0011EE  0012               	return	
  1353  0011F0                     l2441:
  1354                           
  1355                           ; BSR set to: 0
  1356                           ;ad.c: 87: else if(channel == 7){
  1357  0011F0  0E07               	movlw	7
  1358  0011F2  0100               	movlb	0	; () banked
  1359  0011F4  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1360  0011F6  A4D8               	btfss	status,2,c
  1361  0011F8  D005               	goto	l2445
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;ad.c: 88: ADCON0bits.CHS3 = 0;
  1365  0011FA  9AC2               	bcf	4034,5,c	;volatile
  1366                           
  1367                           ;ad.c: 89: ADCON0bits.CHS2 = 1;
  1368  0011FC  88C2               	bsf	4034,4,c	;volatile
  1369                           
  1370                           ;ad.c: 90: ADCON0bits.CHS1 = 1;
  1371  0011FE  86C2               	bsf	4034,3,c	;volatile
  1372                           
  1373                           ;ad.c: 91: ADCON0bits.CHS0 = 1;
  1374  001200  84C2               	bsf	4034,2,c	;volatile
  1375                           
  1376                           ;ad.c: 92: }
  1377  001202  0012               	return	
  1378  001204                     l2445:
  1379                           
  1380                           ; BSR set to: 0
  1381                           ;ad.c: 93: else if(channel == 8){
  1382  001204  0E08               	movlw	8
  1383  001206  0100               	movlb	0	; () banked
  1384  001208  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1385  00120A  A4D8               	btfss	status,2,c
  1386  00120C  D005               	goto	l2449
  1387                           
  1388                           ; BSR set to: 0
  1389                           ;ad.c: 94: ADCON0bits.CHS3 = 1;
  1390  00120E  8AC2               	bsf	4034,5,c	;volatile
  1391                           
  1392                           ;ad.c: 95: ADCON0bits.CHS2 = 0;
  1393  001210  98C2               	bcf	4034,4,c	;volatile
  1394                           
  1395                           ;ad.c: 96: ADCON0bits.CHS1 = 0;
  1396  001212  96C2               	bcf	4034,3,c	;volatile
  1397                           
  1398                           ;ad.c: 97: ADCON0bits.CHS0 = 0;
  1399  001214  94C2               	bcf	4034,2,c	;volatile
  1400                           
  1401                           ;ad.c: 98: }
  1402  001216  0012               	return	
  1403  001218                     l2449:
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;ad.c: 99: else if(channel == 9){
  1407  001218  0E09               	movlw	9
  1408  00121A  0100               	movlb	0	; () banked
  1409  00121C  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1410  00121E  A4D8               	btfss	status,2,c
  1411  001220  D005               	goto	l2453
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;ad.c: 100: ADCON0bits.CHS3 = 1;
  1415  001222  8AC2               	bsf	4034,5,c	;volatile
  1416                           
  1417                           ;ad.c: 101: ADCON0bits.CHS2 = 0;
  1418  001224  98C2               	bcf	4034,4,c	;volatile
  1419                           
  1420                           ;ad.c: 102: ADCON0bits.CHS1 = 0;
  1421  001226  96C2               	bcf	4034,3,c	;volatile
  1422                           
  1423                           ;ad.c: 103: ADCON0bits.CHS0 = 1;
  1424  001228  84C2               	bsf	4034,2,c	;volatile
  1425                           
  1426                           ;ad.c: 104: }
  1427  00122A  0012               	return	
  1428  00122C                     l2453:
  1429                           
  1430                           ; BSR set to: 0
  1431                           ;ad.c: 105: else if(channel == 10){
  1432  00122C  0E0A               	movlw	10
  1433  00122E  0100               	movlb	0	; () banked
  1434  001230  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1435  001232  A4D8               	btfss	status,2,c
  1436  001234  D005               	goto	l2457
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;ad.c: 106: ADCON0bits.CHS3 = 1;
  1440  001236  8AC2               	bsf	4034,5,c	;volatile
  1441                           
  1442                           ;ad.c: 107: ADCON0bits.CHS2 = 0;
  1443  001238  98C2               	bcf	4034,4,c	;volatile
  1444                           
  1445                           ;ad.c: 108: ADCON0bits.CHS1 = 1;
  1446  00123A  86C2               	bsf	4034,3,c	;volatile
  1447                           
  1448                           ;ad.c: 109: ADCON0bits.CHS0 = 0;
  1449  00123C  94C2               	bcf	4034,2,c	;volatile
  1450                           
  1451                           ;ad.c: 110: }
  1452  00123E  0012               	return	
  1453  001240                     l2457:
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;ad.c: 111: else if(channel == 11){
  1457  001240  0E0B               	movlw	11
  1458  001242  0100               	movlb	0	; () banked
  1459  001244  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1460  001246  A4D8               	btfss	status,2,c
  1461  001248  D005               	goto	l2461
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;ad.c: 112: ADCON0bits.CHS3 = 1;
  1465  00124A  8AC2               	bsf	4034,5,c	;volatile
  1466                           
  1467                           ;ad.c: 113: ADCON0bits.CHS2 = 0;
  1468  00124C  98C2               	bcf	4034,4,c	;volatile
  1469                           
  1470                           ;ad.c: 114: ADCON0bits.CHS1 = 1;
  1471  00124E  86C2               	bsf	4034,3,c	;volatile
  1472                           
  1473                           ;ad.c: 115: ADCON0bits.CHS0 = 1;
  1474  001250  84C2               	bsf	4034,2,c	;volatile
  1475                           
  1476                           ;ad.c: 116: }
  1477  001252  0012               	return	
  1478  001254                     l2461:
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;ad.c: 117: else if(channel == 12){
  1482  001254  0E0C               	movlw	12
  1483  001256  0100               	movlb	0	; () banked
  1484  001258  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1485  00125A  A4D8               	btfss	status,2,c
  1486  00125C  0012               	return	
  1487                           
  1488                           ; BSR set to: 0
  1489                           ;ad.c: 118: ADCON0bits.CHS3 = 1;
  1490  00125E  8AC2               	bsf	4034,5,c	;volatile
  1491                           
  1492                           ;ad.c: 119: ADCON0bits.CHS2 = 1;
  1493  001260  88C2               	bsf	4034,4,c	;volatile
  1494                           
  1495                           ;ad.c: 120: ADCON0bits.CHS1 = 0;
  1496  001262  96C2               	bcf	4034,3,c	;volatile
  1497                           
  1498                           ;ad.c: 121: ADCON0bits.CHS0 = 0;
  1499  001264  94C2               	bcf	4034,2,c	;volatile
  1500                           
  1501                           ; BSR set to: 0
  1502                           
  1503                           ; BSR set to: 0
  1504                           
  1505                           ; BSR set to: 0
  1506                           
  1507                           ; BSR set to: 0
  1508                           
  1509                           ; BSR set to: 0
  1510                           
  1511                           ; BSR set to: 0
  1512                           
  1513                           ; BSR set to: 0
  1514                           
  1515                           ; BSR set to: 0
  1516                           
  1517                           ; BSR set to: 0
  1518                           
  1519                           ; BSR set to: 0
  1520                           
  1521                           ; BSR set to: 0
  1522                           
  1523                           ; BSR set to: 0
  1524  001266  0012               	return	
  1525  001268                     __end_of_selectChanel:
  1526                           	opt stack 0
  1527                           tblptru	equ	0xFF8
  1528                           tblptrh	equ	0xFF7
  1529                           tblptrl	equ	0xFF6
  1530                           tablat	equ	0xFF5
  1531                           postinc0	equ	0xFEE
  1532                           wreg	equ	0xFE8
  1533                           status	equ	0xFD8
  1534                           
  1535 ;; *************** function _read_RTC_I2c *****************
  1536 ;; Defined at:
  1537 ;;		line 104 in file "main.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;  pos_memoria     1    wreg     unsigned char 
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;  pos_memoria     1    1[BANK0 ] unsigned char 
  1542 ;; Return value:  Size  Location     Type
  1543 ;;		None               void
  1544 ;; Registers used:
  1545 ;;		wreg, status,2, status,0, cstack
  1546 ;; Tracked objects:
  1547 ;;		On entry : 0/0
  1548 ;;		On exit  : 0/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1551 ;;      Params:         0       0       0       0       0       0       0       0       0
  1552 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1553 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1554 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1555 ;;Total ram usage:        1 bytes
  1556 ;; Hardware stack levels used:    1
  1557 ;; Hardware stack levels required when called:    4
  1558 ;; This function calls:
  1559 ;;		_I2C_Idle
  1560 ;;		_I2C_ReStart
  1561 ;;		_I2C_Read_Byte
  1562 ;;		_I2C_Send_NACK
  1563 ;;		_I2C_Start
  1564 ;;		_I2C_Stop
  1565 ;;		_I2C_Write_Byte
  1566 ;; This function is called by:
  1567 ;;		_main
  1568 ;; This function uses a non-reentrant model
  1569 ;;
  1570                           
  1571                           	psect	text3
  1572  001470                     __ptext3:
  1573                           	opt stack 0
  1574  001470                     _read_RTC_I2c:
  1575                           	opt stack 26
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;incstack = 0
  1579                           ;read_RTC_I2c@pos_memoria stored from wreg
  1580  001470  0100               	movlb	0	; () banked
  1581  001472  6F61               	movwf	read_RTC_I2c@pos_memoria& (0+255),b
  1582                           
  1583                           ;main.c: 106: I2C_Idle();
  1584  001474  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1585                           
  1586                           ;main.c: 107: I2C_Start();
  1587  001478  EC75  F00B         	call	_I2C_Start	;wreg free
  1588                           
  1589                           ;main.c: 108: I2C_Idle();
  1590  00147C  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1591                           
  1592                           ;main.c: 109: I2C_Write_Byte(0xD0);
  1593  001480  0ED0               	movlw	208
  1594  001482  EC47  F00B         	call	_I2C_Write_Byte
  1595                           
  1596                           ;main.c: 110: I2C_Idle();
  1597  001486  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1598                           
  1599                           ;main.c: 111: I2C_Write_Byte(pos_memoria);
  1600  00148A  0100               	movlb	0	; () banked
  1601  00148C  5161               	movf	read_RTC_I2c@pos_memoria& (0+255),w,b
  1602  00148E  EC47  F00B         	call	_I2C_Write_Byte
  1603                           
  1604                           ;main.c: 112: I2C_Idle();
  1605  001492  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1606                           
  1607                           ;main.c: 113: I2C_ReStart();
  1608  001496  EC7A  F00B         	call	_I2C_ReStart	;wreg free
  1609                           
  1610                           ;main.c: 114: I2C_Idle();
  1611  00149A  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1612                           
  1613                           ;main.c: 115: I2C_Write_Byte(0xD1);
  1614  00149E  0ED1               	movlw	209
  1615  0014A0  EC47  F00B         	call	_I2C_Write_Byte
  1616                           
  1617                           ;main.c: 116: I2C_Idle();
  1618  0014A4  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1619                           
  1620                           ;main.c: 117: leitura = I2C_Read_Byte();
  1621  0014A8  EC64  F00B         	call	_I2C_Read_Byte	;wreg free
  1622  0014AC  0100               	movlb	0	; () banked
  1623  0014AE  6F86               	movwf	_leitura& (0+255),b
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;main.c: 118: I2C_Idle();
  1627  0014B0  EC3D  F00B         	call	_I2C_Idle	;wreg free
  1628                           
  1629                           ;main.c: 119: I2C_Send_NACK();
  1630  0014B4  EC5E  F00B         	call	_I2C_Send_NACK	;wreg free
  1631                           
  1632                           ;main.c: 120: I2C_Stop();
  1633  0014B8  EC70  F00B         	call	_I2C_Stop	;wreg free
  1634  0014BC  0012               	return		;funcret
  1635  0014BE                     __end_of_read_RTC_I2c:
  1636                           	opt stack 0
  1637                           tblptru	equ	0xFF8
  1638                           tblptrh	equ	0xFF7
  1639                           tblptrl	equ	0xFF6
  1640                           tablat	equ	0xFF5
  1641                           postinc0	equ	0xFEE
  1642                           wreg	equ	0xFE8
  1643                           status	equ	0xFD8
  1644                           
  1645 ;; *************** function _I2C_Write_Byte *****************
  1646 ;; Defined at:
  1647 ;;		line 82 in file "i2c.c"
  1648 ;; Parameters:    Size  Location     Type
  1649 ;;  Byte            1    wreg     unsigned char 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;  Byte            1    0[BANK0 ] unsigned char 
  1652 ;; Return value:  Size  Location     Type
  1653 ;;		None               void
  1654 ;; Registers used:
  1655 ;;		wreg
  1656 ;; Tracked objects:
  1657 ;;		On entry : 0/0
  1658 ;;		On exit  : 0/0
  1659 ;;		Unchanged: 0/0
  1660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1661 ;;      Params:         0       0       0       0       0       0       0       0       0
  1662 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1663 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1664 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1665 ;;Total ram usage:        1 bytes
  1666 ;; Hardware stack levels used:    1
  1667 ;; Hardware stack levels required when called:    3
  1668 ;; This function calls:
  1669 ;;		Nothing
  1670 ;; This function is called by:
  1671 ;;		_write_RTC_I2c
  1672 ;;		_read_RTC_I2c
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           	psect	text4
  1677  00168E                     __ptext4:
  1678                           	opt stack 0
  1679  00168E                     _I2C_Write_Byte:
  1680                           	opt stack 26
  1681                           
  1682                           ;incstack = 0
  1683                           ;I2C_Write_Byte@Byte stored from wreg
  1684  00168E  0100               	movlb	0	; () banked
  1685  001690  6F60               	movwf	I2C_Write_Byte@Byte& (0+255),b
  1686                           
  1687                           ;i2c.c: 84: SSPBUF = Byte;
  1688  001692  C060  FFC9         	movff	I2C_Write_Byte@Byte,4041	;volatile
  1689  001696                     l59:
  1690  001696  A69E               	btfss	3998,3,c	;volatile
  1691  001698  D7FE               	goto	l59
  1692                           
  1693                           ;i2c.c: 86: SSPIF = 0;
  1694  00169A  969E               	bcf	3998,3,c	;volatile
  1695                           
  1696                           ;i2c.c: 87: return SSPCON2bits.ACKSTAT;
  1697                           ;	Return value of _I2C_Write_Byte is never used
  1698  00169C  50C5               	movf	4037,w,c	;volatile
  1699  00169E  0012               	return		;funcret
  1700  0016A0                     __end_of_I2C_Write_Byte:
  1701                           	opt stack 0
  1702                           tblptru	equ	0xFF8
  1703                           tblptrh	equ	0xFF7
  1704                           tblptrl	equ	0xFF6
  1705                           tablat	equ	0xFF5
  1706                           postinc0	equ	0xFEE
  1707                           wreg	equ	0xFE8
  1708                           status	equ	0xFD8
  1709                           
  1710 ;; *************** function _I2C_Stop *****************
  1711 ;; Defined at:
  1712 ;;		line 62 in file "i2c.c"
  1713 ;; Parameters:    Size  Location     Type
  1714 ;;		None
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;		None
  1717 ;; Return value:  Size  Location     Type
  1718 ;;		None               void
  1719 ;; Registers used:
  1720 ;;		None
  1721 ;; Tracked objects:
  1722 ;;		On entry : 0/0
  1723 ;;		On exit  : 0/0
  1724 ;;		Unchanged: 0/0
  1725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1726 ;;      Params:         0       0       0       0       0       0       0       0       0
  1727 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1728 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1729 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1730 ;;Total ram usage:        0 bytes
  1731 ;; Hardware stack levels used:    1
  1732 ;; Hardware stack levels required when called:    3
  1733 ;; This function calls:
  1734 ;;		Nothing
  1735 ;; This function is called by:
  1736 ;;		_write_RTC_I2c
  1737 ;;		_read_RTC_I2c
  1738 ;; This function uses a non-reentrant model
  1739 ;;
  1740                           
  1741                           	psect	text5
  1742  0016E0                     __ptext5:
  1743                           	opt stack 0
  1744  0016E0                     _I2C_Stop:
  1745                           	opt stack 26
  1746                           
  1747                           ;i2c.c: 63: SSPCON2bits.PEN = 1;
  1748                           
  1749                           ;incstack = 0
  1750  0016E0  84C5               	bsf	4037,2,c	;volatile
  1751  0016E2                     l41:
  1752  0016E2  A69E               	btfss	3998,3,c	;volatile
  1753  0016E4  D7FE               	goto	l41
  1754                           
  1755                           ;i2c.c: 65: SSPIF = 0;
  1756  0016E6  969E               	bcf	3998,3,c	;volatile
  1757  0016E8  0012               	return		;funcret
  1758  0016EA                     __end_of_I2C_Stop:
  1759                           	opt stack 0
  1760                           tblptru	equ	0xFF8
  1761                           tblptrh	equ	0xFF7
  1762                           tblptrl	equ	0xFF6
  1763                           tablat	equ	0xFF5
  1764                           postinc0	equ	0xFEE
  1765                           wreg	equ	0xFE8
  1766                           status	equ	0xFD8
  1767                           
  1768 ;; *************** function _I2C_Start *****************
  1769 ;; Defined at:
  1770 ;;		line 48 in file "i2c.c"
  1771 ;; Parameters:    Size  Location     Type
  1772 ;;		None
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;		None
  1775 ;; Return value:  Size  Location     Type
  1776 ;;		None               void
  1777 ;; Registers used:
  1778 ;;		None
  1779 ;; Tracked objects:
  1780 ;;		On entry : 0/0
  1781 ;;		On exit  : 0/0
  1782 ;;		Unchanged: 0/0
  1783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1784 ;;      Params:         0       0       0       0       0       0       0       0       0
  1785 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1786 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1787 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1788 ;;Total ram usage:        0 bytes
  1789 ;; Hardware stack levels used:    1
  1790 ;; Hardware stack levels required when called:    3
  1791 ;; This function calls:
  1792 ;;		Nothing
  1793 ;; This function is called by:
  1794 ;;		_write_RTC_I2c
  1795 ;;		_read_RTC_I2c
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799                           	psect	text6
  1800  0016EA                     __ptext6:
  1801                           	opt stack 0
  1802  0016EA                     _I2C_Start:
  1803                           	opt stack 26
  1804                           
  1805                           ;i2c.c: 50: SSPCON2bits.SEN = 1;
  1806                           
  1807                           ;incstack = 0
  1808  0016EA  80C5               	bsf	4037,0,c	;volatile
  1809  0016EC                     l29:
  1810  0016EC  A69E               	btfss	3998,3,c	;volatile
  1811  0016EE  D7FE               	goto	l29
  1812                           
  1813                           ;i2c.c: 52: SSPIF = 0;
  1814  0016F0  969E               	bcf	3998,3,c	;volatile
  1815  0016F2  0012               	return		;funcret
  1816  0016F4                     __end_of_I2C_Start:
  1817                           	opt stack 0
  1818                           tblptru	equ	0xFF8
  1819                           tblptrh	equ	0xFF7
  1820                           tblptrl	equ	0xFF6
  1821                           tablat	equ	0xFF5
  1822                           postinc0	equ	0xFEE
  1823                           wreg	equ	0xFE8
  1824                           status	equ	0xFD8
  1825                           
  1826 ;; *************** function _I2C_Send_NACK *****************
  1827 ;; Defined at:
  1828 ;;		line 75 in file "i2c.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;		None
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;		None
  1833 ;; Return value:  Size  Location     Type
  1834 ;;		None               void
  1835 ;; Registers used:
  1836 ;;		None
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1842 ;;      Params:         0       0       0       0       0       0       0       0       0
  1843 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1844 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1845 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1846 ;;Total ram usage:        0 bytes
  1847 ;; Hardware stack levels used:    1
  1848 ;; Hardware stack levels required when called:    3
  1849 ;; This function calls:
  1850 ;;		Nothing
  1851 ;; This function is called by:
  1852 ;;		_read_RTC_I2c
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           	psect	text7
  1857  0016BC                     __ptext7:
  1858                           	opt stack 0
  1859  0016BC                     _I2C_Send_NACK:
  1860                           	opt stack 26
  1861                           
  1862                           ;i2c.c: 76: SSPCON2bits.ACKDT = 1;
  1863                           
  1864                           ;incstack = 0
  1865  0016BC  8AC5               	bsf	4037,5,c	;volatile
  1866                           
  1867                           ;i2c.c: 77: SSPCON2bits.ACKEN = 1;
  1868  0016BE  88C5               	bsf	4037,4,c	;volatile
  1869  0016C0                     l53:
  1870  0016C0  A69E               	btfss	3998,3,c	;volatile
  1871  0016C2  D7FE               	goto	l53
  1872                           
  1873                           ;i2c.c: 79: SSPIF = 0;
  1874  0016C4  969E               	bcf	3998,3,c	;volatile
  1875  0016C6  0012               	return		;funcret
  1876  0016C8                     __end_of_I2C_Send_NACK:
  1877                           	opt stack 0
  1878                           tblptru	equ	0xFF8
  1879                           tblptrh	equ	0xFF7
  1880                           tblptrl	equ	0xFF6
  1881                           tablat	equ	0xFF5
  1882                           postinc0	equ	0xFEE
  1883                           wreg	equ	0xFE8
  1884                           status	equ	0xFD8
  1885                           
  1886 ;; *************** function _I2C_Read_Byte *****************
  1887 ;; Defined at:
  1888 ;;		line 90 in file "i2c.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;		None
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;		None
  1893 ;; Return value:  Size  Location     Type
  1894 ;;                  1    wreg      unsigned char 
  1895 ;; Registers used:
  1896 ;;		wreg, status,2
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1902 ;;      Params:         0       0       0       0       0       0       0       0       0
  1903 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1904 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1905 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1906 ;;Total ram usage:        0 bytes
  1907 ;; Hardware stack levels used:    1
  1908 ;; Hardware stack levels required when called:    3
  1909 ;; This function calls:
  1910 ;;		Nothing
  1911 ;; This function is called by:
  1912 ;;		_read_RTC_I2c
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           	psect	text8
  1917  0016C8                     __ptext8:
  1918                           	opt stack 0
  1919  0016C8                     _I2C_Read_Byte:
  1920                           	opt stack 26
  1921                           
  1922                           ;i2c.c: 92: SSPCON2bits.RCEN = 1;
  1923                           
  1924                           ;incstack = 0
  1925  0016C8  86C5               	bsf	4037,3,c	;volatile
  1926  0016CA                     l65:
  1927  0016CA  A69E               	btfss	3998,3,c	;volatile
  1928  0016CC  D7FE               	goto	l65
  1929                           
  1930                           ;i2c.c: 94: SSPIF = 0;
  1931  0016CE  969E               	bcf	3998,3,c	;volatile
  1932                           
  1933                           ;i2c.c: 96: return SSPBUF;
  1934  0016D0  50C9               	movf	4041,w,c	;volatile
  1935  0016D2  0012               	return	
  1936  0016D4                     __end_of_I2C_Read_Byte:
  1937                           	opt stack 0
  1938                           tblptru	equ	0xFF8
  1939                           tblptrh	equ	0xFF7
  1940                           tblptrl	equ	0xFF6
  1941                           tablat	equ	0xFF5
  1942                           postinc0	equ	0xFEE
  1943                           wreg	equ	0xFE8
  1944                           status	equ	0xFD8
  1945                           
  1946 ;; *************** function _I2C_ReStart *****************
  1947 ;; Defined at:
  1948 ;;		line 55 in file "i2c.c"
  1949 ;; Parameters:    Size  Location     Type
  1950 ;;		None
  1951 ;; Auto vars:     Size  Location     Type
  1952 ;;		None
  1953 ;; Return value:  Size  Location     Type
  1954 ;;		None               void
  1955 ;; Registers used:
  1956 ;;		None
  1957 ;; Tracked objects:
  1958 ;;		On entry : 0/0
  1959 ;;		On exit  : 0/0
  1960 ;;		Unchanged: 0/0
  1961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1962 ;;      Params:         0       0       0       0       0       0       0       0       0
  1963 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1964 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1965 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1966 ;;Total ram usage:        0 bytes
  1967 ;; Hardware stack levels used:    1
  1968 ;; Hardware stack levels required when called:    3
  1969 ;; This function calls:
  1970 ;;		Nothing
  1971 ;; This function is called by:
  1972 ;;		_read_RTC_I2c
  1973 ;; This function uses a non-reentrant model
  1974 ;;
  1975                           
  1976                           	psect	text9
  1977  0016F4                     __ptext9:
  1978                           	opt stack 0
  1979  0016F4                     _I2C_ReStart:
  1980                           	opt stack 26
  1981                           
  1982                           ;i2c.c: 57: SSPCON2bits.RSEN = 1;
  1983                           
  1984                           ;incstack = 0
  1985  0016F4  82C5               	bsf	4037,1,c	;volatile
  1986  0016F6                     l35:
  1987  0016F6  A69E               	btfss	3998,3,c	;volatile
  1988  0016F8  D7FE               	goto	l35
  1989                           
  1990                           ;i2c.c: 59: SSPIF = 0;
  1991  0016FA  969E               	bcf	3998,3,c	;volatile
  1992  0016FC  0012               	return		;funcret
  1993  0016FE                     __end_of_I2C_ReStart:
  1994                           	opt stack 0
  1995                           tblptru	equ	0xFF8
  1996                           tblptrh	equ	0xFF7
  1997                           tblptrl	equ	0xFF6
  1998                           tablat	equ	0xFF5
  1999                           postinc0	equ	0xFEE
  2000                           wreg	equ	0xFE8
  2001                           status	equ	0xFD8
  2002                           
  2003 ;; *************** function _I2C_Idle *****************
  2004 ;; Defined at:
  2005 ;;		line 99 in file "i2c.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;		None
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;		None
  2010 ;; Return value:  Size  Location     Type
  2011 ;;		None               void
  2012 ;; Registers used:
  2013 ;;		wreg, status,2, status,0
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2019 ;;      Params:         0       0       0       0       0       0       0       0       0
  2020 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2021 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2022 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2023 ;;Total ram usage:        1 bytes
  2024 ;; Hardware stack levels used:    1
  2025 ;; Hardware stack levels required when called:    3
  2026 ;; This function calls:
  2027 ;;		Nothing
  2028 ;; This function is called by:
  2029 ;;		_write_RTC_I2c
  2030 ;;		_read_RTC_I2c
  2031 ;; This function uses a non-reentrant model
  2032 ;;
  2033                           
  2034                           	psect	text10
  2035  00167A                     __ptext10:
  2036                           	opt stack 0
  2037  00167A                     _I2C_Idle:
  2038                           	opt stack 26
  2039  00167A                     l2323:
  2040  00167A  CFC5 F060          	movff	4037,??_I2C_Idle	;volatile
  2041  00167E  0E1F               	movlw	31
  2042  001680  0100               	movlb	0	; () banked
  2043  001682  1760               	andwf	??_I2C_Idle& (0+255),f,b
  2044  001684  A4D8               	btfss	status,2,c
  2045  001686  D7F9               	goto	l2323
  2046                           
  2047                           ; BSR set to: 0
  2048  001688  A4C7               	btfss	4039,2,c	;volatile
  2049  00168A  0012               	return	
  2050  00168C  D7F6               	goto	l2323
  2051  00168E                     __end_of_I2C_Idle:
  2052                           	opt stack 0
  2053                           tblptru	equ	0xFF8
  2054                           tblptrh	equ	0xFF7
  2055                           tblptrl	equ	0xFF6
  2056                           tablat	equ	0xFF5
  2057                           postinc0	equ	0xFEE
  2058                           wreg	equ	0xFE8
  2059                           status	equ	0xFD8
  2060                           
  2061 ;; *************** function _printf *****************
  2062 ;; Defined at:
  2063 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  2064 ;; Parameters:    Size  Location     Type
  2065 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  2066 ;;		 -> STR_8(7), STR_7(16), STR_6(28), STR_5(27), 
  2067 ;;		 -> STR_4(25), STR_3(33), STR_2(21), STR_1(3), 
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;  idx             1   20[BANK0 ] unsigned char 
  2070 ;;  tmpval          4    0        struct .
  2071 ;;  cp              3    0        PTR const unsigned char 
  2072 ;;  width           2   27[BANK0 ] int 
  2073 ;;  val             2   24[BANK0 ] unsigned int 
  2074 ;;  ap              2   21[BANK0 ] PTR void [1]
  2075 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2076 ;;  len             2    0        unsigned int 
  2077 ;;  c               1   29[BANK0 ] char 
  2078 ;;  flag            1   26[BANK0 ] unsigned char 
  2079 ;;  prec            1   23[BANK0 ] char 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  2   12[BANK0 ] int 
  2082 ;; Registers used:
  2083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2089 ;;      Params:         0       4       0       0       0       0       0       0       0
  2090 ;;      Locals:         0      10       0       0       0       0       0       0       0
  2091 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2092 ;;      Totals:         0      18       0       0       0       0       0       0       0
  2093 ;;Total ram usage:       18 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:    4
  2096 ;; This function calls:
  2097 ;;		___lwdiv
  2098 ;;		___lwmod
  2099 ;;		___wmul
  2100 ;;		_isdigit
  2101 ;;		_putch
  2102 ;; This function is called by:
  2103 ;;		_main
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           	psect	text11
  2108  0008C2                     __ptext11:
  2109                           	opt stack 0
  2110  0008C2                     _printf:
  2111                           	opt stack 26
  2112                           
  2113                           ;doprnt.c: 466: va_list ap;
  2114                           ;doprnt.c: 499: signed char c;
  2115                           ;doprnt.c: 501: int width;
  2116                           ;doprnt.c: 506: signed char prec;
  2117                           ;doprnt.c: 508: unsigned char flag;
  2118                           ;doprnt.c: 523: union {
  2119                           ;doprnt.c: 524: unsigned long vd;
  2120                           ;doprnt.c: 525: double integ;
  2121                           ;doprnt.c: 526: } tmpval;
  2122                           ;doprnt.c: 528: unsigned int val;
  2123                           ;doprnt.c: 529: unsigned len;
  2124                           ;doprnt.c: 530: const char * cp;
  2125                           ;doprnt.c: 533: *ap = __va_start();
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;incstack = 0
  2129  0008C2  0E6E               	movlw	low (?_printf+2)
  2130  0008C4  0100               	movlb	0	; () banked
  2131  0008C6  6F75               	movwf	printf@ap& (0+255),b
  2132  0008C8  0E00               	movlw	high (?_printf+2)
  2133  0008CA  0100               	movlb	0	; () banked
  2134  0008CC  6F76               	movwf	(printf@ap+1)& (0+255),b
  2135                           
  2136                           ;doprnt.c: 536: while(c = *f++) {
  2137  0008CE  D187               	goto	l2569
  2138  0008D0                     l2467:
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;doprnt.c: 538: if(c != '%')
  2142  0008D0  0E25               	movlw	37
  2143  0008D2  0100               	movlb	0	; () banked
  2144  0008D4  197D               	xorwf	printf@c& (0+255),w,b
  2145  0008D6  B4D8               	btfsc	status,2,c
  2146  0008D8  D005               	goto	l2471
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;doprnt.c: 540: {
  2150                           ;doprnt.c: 541: (putch(c) );
  2151  0008DA  0100               	movlb	0	; () banked
  2152  0008DC  517D               	movf	printf@c& (0+255),w,b
  2153  0008DE  EC50  F00B         	call	_putch
  2154                           
  2155                           ;doprnt.c: 542: continue;
  2156  0008E2  D17D               	goto	l2569
  2157  0008E4                     l2471:
  2158                           
  2159                           ;doprnt.c: 543: }
  2160                           ;doprnt.c: 546: width = 0;
  2161  0008E4  0E00               	movlw	0
  2162  0008E6  0100               	movlb	0	; () banked
  2163  0008E8  6F7C               	movwf	(printf@width+1)& (0+255),b
  2164  0008EA  0E00               	movlw	0
  2165  0008EC  6F7B               	movwf	printf@width& (0+255),b
  2166                           
  2167                           ;doprnt.c: 548: flag = 0;
  2168  0008EE  0E00               	movlw	0
  2169  0008F0  0100               	movlb	0	; () banked
  2170  0008F2  6F7A               	movwf	printf@flag& (0+255),b
  2171                           
  2172                           ; BSR set to: 0
  2173                           ;doprnt.c: 551: switch(*f) {
  2174                           
  2175                           ;doprnt.c: 550: for(;;) {
  2176  0008F4  D005               	goto	l2477
  2177  0008F6                     l2473:
  2178                           
  2179                           ;doprnt.c: 580: flag |= 0x04;
  2180  0008F6  0100               	movlb	0	; () banked
  2181  0008F8  857A               	bsf	printf@flag& (0+255),2,b
  2182                           
  2183                           ;doprnt.c: 581: f++;
  2184  0008FA  0100               	movlb	0	; () banked
  2185  0008FC  4B6C               	infsnz	printf@f& (0+255),f,b
  2186  0008FE  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2187  000900                     l2477:
  2188  000900  C06C  FFF6         	movff	printf@f,tblptrl
  2189  000904  C06D  FFF7         	movff	printf@f+1,tblptrh
  2190  000908                     	if	0	;tblptru may be non-zero
  2191  000908                     	endif
  2192  000908                     	if	0	;tblptru may be non-zero
  2193  000908                     	endif
  2194  000908  0008               	tblrd		*
  2195  00090A  50F5               	movf	tablat,w,c
  2196                           
  2197                           ; Switch size 1, requested type "space"
  2198                           ; Number of cases is 1, Range of values is 48 to 48
  2199                           ; switch strategies available:
  2200                           ; Name         Instructions Cycles
  2201                           ; simple_byte            4     3 (average)
  2202                           ;	Chosen strategy is simple_byte
  2203  00090C  0A30               	xorlw	48	; case 48
  2204  00090E  B4D8               	btfsc	status,2,c
  2205  000910  D7F2               	goto	l2473
  2206                           
  2207                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2208                           
  2209                           ;doprnt.c: 586: }
  2210                           
  2211                           ;doprnt.c: 585: break;
  2212  000912  C06C  FFF6         	movff	printf@f,tblptrl
  2213  000916  C06D  FFF7         	movff	printf@f+1,tblptrh
  2214  00091A                     	if	0	;tblptru may be non-zero
  2215  00091A                     	endif
  2216  00091A                     	if	0	;tblptru may be non-zero
  2217  00091A                     	endif
  2218  00091A  0008               	tblrd		*
  2219  00091C  50F5               	movf	tablat,w,c
  2220  00091E  ECCF  F00A         	call	_isdigit
  2221  000922  A0D8               	btfss	status,0,c
  2222  000924  D048               	goto	l2497
  2223                           
  2224                           ;doprnt.c: 598: width = 0;
  2225  000926  0E00               	movlw	0
  2226  000928  0100               	movlb	0	; () banked
  2227  00092A  6F7C               	movwf	(printf@width+1)& (0+255),b
  2228  00092C  0E00               	movlw	0
  2229  00092E  6F7B               	movwf	printf@width& (0+255),b
  2230  000930                     l2483:
  2231                           
  2232                           ;doprnt.c: 600: width *= 10;
  2233  000930  C07B  F060         	movff	printf@width,___wmul@multiplier
  2234  000934  C07C  F061         	movff	printf@width+1,___wmul@multiplier+1
  2235  000938  0E00               	movlw	0
  2236  00093A  0100               	movlb	0	; () banked
  2237  00093C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2238  00093E  0E0A               	movlw	10
  2239  000940  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2240  000942  EC9D  F00A         	call	___wmul	;wreg free
  2241  000946  C060  F07B         	movff	?___wmul,printf@width
  2242  00094A  C061  F07C         	movff	?___wmul+1,printf@width+1
  2243                           
  2244                           ;doprnt.c: 601: width += *f++ - '0';
  2245  00094E  0ED0               	movlw	208
  2246  000950  0100               	movlb	0	; () banked
  2247  000952  6F70               	movwf	??_printf& (0+255),b
  2248  000954  0EFF               	movlw	255
  2249  000956  0100               	movlb	0	; () banked
  2250  000958  6F71               	movwf	(??_printf+1)& (0+255),b
  2251  00095A  C06C  FFF6         	movff	printf@f,tblptrl
  2252  00095E  C06D  FFF7         	movff	printf@f+1,tblptrh
  2253  000962                     	if	0	;tblptru may be non-zero
  2254  000962                     	endif
  2255  000962                     	if	0	;tblptru may be non-zero
  2256  000962                     	endif
  2257  000962  0008               	tblrd		*
  2258  000964  50F5               	movf	tablat,w,c
  2259  000966  0100               	movlb	0	; () banked
  2260  000968  6F72               	movwf	(??_printf+2)& (0+255),b
  2261  00096A  6B73               	clrf	(??_printf+3)& (0+255),b
  2262  00096C  0100               	movlb	0	; () banked
  2263  00096E  5170               	movf	??_printf& (0+255),w,b
  2264  000970  0100               	movlb	0	; () banked
  2265  000972  2772               	addwf	(??_printf+2)& (0+255),f,b
  2266  000974  0100               	movlb	0	; () banked
  2267  000976  5171               	movf	(??_printf+1)& (0+255),w,b
  2268  000978  0100               	movlb	0	; () banked
  2269  00097A  2373               	addwfc	(??_printf+3)& (0+255),f,b
  2270  00097C  0100               	movlb	0	; () banked
  2271  00097E  5172               	movf	(??_printf+2)& (0+255),w,b
  2272  000980  0100               	movlb	0	; () banked
  2273  000982  277B               	addwf	printf@width& (0+255),f,b
  2274  000984  0100               	movlb	0	; () banked
  2275  000986  5173               	movf	(??_printf+3)& (0+255),w,b
  2276  000988  0100               	movlb	0	; () banked
  2277  00098A  237C               	addwfc	(printf@width+1)& (0+255),f,b
  2278                           
  2279                           ; BSR set to: 0
  2280  00098C  0100               	movlb	0	; () banked
  2281  00098E  4B6C               	infsnz	printf@f& (0+255),f,b
  2282  000990  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2286  000992  C06C  FFF6         	movff	printf@f,tblptrl
  2287  000996  C06D  FFF7         	movff	printf@f+1,tblptrh
  2288  00099A                     	if	0	;tblptru may be non-zero
  2289  00099A                     	endif
  2290  00099A                     	if	0	;tblptru may be non-zero
  2291  00099A                     	endif
  2292  00099A  0008               	tblrd		*
  2293  00099C  50F5               	movf	tablat,w,c
  2294  00099E  ECCF  F00A         	call	_isdigit
  2295  0009A2  A0D8               	btfss	status,0,c
  2296  0009A4  D008               	goto	l2497
  2297  0009A6  D7C4               	goto	l2483
  2298  0009A8                     l2491:
  2299                           
  2300                           ;doprnt.c: 718: case 'x':
  2301                           ;doprnt.c: 721: flag |= 0x80;
  2302  0009A8  0100               	movlb	0	; () banked
  2303  0009AA  8F7A               	bsf	printf@flag& (0+255),7,b
  2304                           
  2305                           ;doprnt.c: 723: break;
  2306  0009AC  D01D               	goto	l2499
  2307  0009AE                     l2493:
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;doprnt.c: 818: flag |= 0xC0;
  2311  0009AE  0EC0               	movlw	192
  2312  0009B0  0100               	movlb	0	; () banked
  2313  0009B2  137A               	iorwf	printf@flag& (0+255),f,b
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;doprnt.c: 822: }
  2317                           
  2318                           ;doprnt.c: 819: break;
  2319  0009B4  D019               	goto	l2499
  2320  0009B6                     l2497:
  2321  0009B6  C06C  FFF6         	movff	printf@f,tblptrl
  2322  0009BA  C06D  FFF7         	movff	printf@f+1,tblptrh
  2323  0009BE  0100               	movlb	0	; () banked
  2324  0009C0  4B6C               	infsnz	printf@f& (0+255),f,b
  2325  0009C2  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2326  0009C4                     	if	0	;tblptru may be non-zero
  2327  0009C4                     	endif
  2328  0009C4                     	if	0	;tblptru may be non-zero
  2329  0009C4                     	endif
  2330  0009C4  0008               	tblrd		*
  2331  0009C6  CFF5 F07D          	movff	tablat,printf@c
  2332  0009CA  0100               	movlb	0	; () banked
  2333  0009CC  517D               	movf	printf@c& (0+255),w,b
  2334                           
  2335                           ; Switch size 1, requested type "space"
  2336                           ; Number of cases is 4, Range of values is 0 to 120
  2337                           ; switch strategies available:
  2338                           ; Name         Instructions Cycles
  2339                           ; simple_byte           13     7 (average)
  2340                           ;	Chosen strategy is simple_byte
  2341  0009CE  0A00               	xorlw	0	; case 0
  2342  0009D0  B4D8               	btfsc	status,2,c
  2343  0009D2  0012               	return	
  2344  0009D4  0A58               	xorlw	88	; case 88
  2345  0009D6  B4D8               	btfsc	status,2,c
  2346  0009D8  D7E7               	goto	l2491
  2347  0009DA  0A2D               	xorlw	45	; case 117
  2348  0009DC  B4D8               	btfsc	status,2,c
  2349  0009DE  D7E7               	goto	l2493
  2350  0009E0  0A0D               	xorlw	13	; case 120
  2351  0009E2  B4D8               	btfsc	status,2,c
  2352  0009E4  D7E1               	goto	l2491
  2353  0009E6  D0FB               	goto	l2569
  2354  0009E8                     l2499:
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;doprnt.c: 1273: {
  2358                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2359  0009E8  C075  FFD9         	movff	printf@ap,fsr2l
  2360  0009EC  C076  FFDA         	movff	printf@ap+1,fsr2h
  2361  0009F0  CFDE F078          	movff	postinc2,printf@val
  2362  0009F4  CFDD F079          	movff	postdec2,printf@val+1
  2363                           
  2364                           ; BSR set to: 0
  2365  0009F8  0E02               	movlw	2
  2366  0009FA  0100               	movlb	0	; () banked
  2367  0009FC  2775               	addwf	printf@ap& (0+255),f,b
  2368  0009FE  0E00               	movlw	0
  2369  000A00  2376               	addwfc	(printf@ap+1)& (0+255),f,b
  2370                           
  2371                           ;doprnt.c: 1287: }
  2372                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2373  000A02  D03C               	goto	l2533
  2374  000A04                     l2503:
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2378  000A04  0E01               	movlw	1
  2379  000A06  0100               	movlb	0	; () banked
  2380  000A08  6F7D               	movwf	printf@c& (0+255),b
  2381  000A0A                     l2505:
  2382                           
  2383                           ; BSR set to: 0
  2384  000A0A  0E05               	movlw	5
  2385  000A0C  0100               	movlb	0	; () banked
  2386  000A0E  197D               	xorwf	printf@c& (0+255),w,b
  2387  000A10  B4D8               	btfsc	status,2,c
  2388  000A12  D03D               	goto	l2535
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;doprnt.c: 1306: if(val < dpowers[c])
  2392                           
  2393                           ; BSR set to: 0
  2394                           
  2395                           ; BSR set to: 0
  2396  000A14  0100               	movlb	0	; () banked
  2397  000A16  517D               	movf	printf@c& (0+255),w,b
  2398  000A18  0D02               	mullw	2
  2399  000A1A  0E01               	movlw	low _dpowers
  2400  000A1C  24F3               	addwf	prodl,w,c
  2401  000A1E  6EF6               	movwf	tblptrl,c
  2402  000A20  0E08               	movlw	high _dpowers
  2403  000A22  20F4               	addwfc	prodh,w,c
  2404  000A24  6EF7               	movwf	tblptrh,c
  2405  000A26                     	if	0	;There are less than 3 active tblptr bytes
  2406  000A26                     	endif
  2407  000A26  0009               	tblrd		*+
  2408  000A28  50F5               	movf	tablat,w,c
  2409  000A2A  0100               	movlb	0	; () banked
  2410  000A2C  5D78               	subwf	printf@val& (0+255),w,b
  2411  000A2E  0009               	tblrd		*+
  2412  000A30  50F5               	movf	tablat,w,c
  2413  000A32  0100               	movlb	0	; () banked
  2414  000A34  5979               	subwfb	(printf@val+1)& (0+255),w,b
  2415  000A36  A0D8               	btfss	status,0,c
  2416  000A38  D02A               	goto	l2535
  2417                           
  2418                           ; BSR set to: 0
  2419                           
  2420                           ; BSR set to: 0
  2421                           
  2422                           ; BSR set to: 0
  2423                           ;doprnt.c: 1307: break;
  2424  000A3A  0100               	movlb	0	; () banked
  2425  000A3C  2B7D               	incf	printf@c& (0+255),f,b
  2426  000A3E  D7E5               	goto	l2505
  2427  000A40                     l2517:
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2431  000A40  0E01               	movlw	1
  2432  000A42  0100               	movlb	0	; () banked
  2433  000A44  6F7D               	movwf	printf@c& (0+255),b
  2434  000A46                     l2519:
  2435                           
  2436                           ; BSR set to: 0
  2437  000A46  0E04               	movlw	4
  2438  000A48  0100               	movlb	0	; () banked
  2439  000A4A  197D               	xorwf	printf@c& (0+255),w,b
  2440  000A4C  B4D8               	btfsc	status,2,c
  2441  000A4E  D01F               	goto	l2535
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2445                           
  2446                           ; BSR set to: 0
  2447                           
  2448                           ; BSR set to: 0
  2449  000A50  0100               	movlb	0	; () banked
  2450  000A52  517D               	movf	printf@c& (0+255),w,b
  2451  000A54  0D02               	mullw	2
  2452  000A56  0E0B               	movlw	low _hexpowers
  2453  000A58  24F3               	addwf	prodl,w,c
  2454  000A5A  6EF6               	movwf	tblptrl,c
  2455  000A5C  0E08               	movlw	high _hexpowers
  2456  000A5E  20F4               	addwfc	prodh,w,c
  2457  000A60  6EF7               	movwf	tblptrh,c
  2458  000A62                     	if	0	;There are less than 3 active tblptr bytes
  2459  000A62                     	endif
  2460  000A62  0009               	tblrd		*+
  2461  000A64  50F5               	movf	tablat,w,c
  2462  000A66  0100               	movlb	0	; () banked
  2463  000A68  5D78               	subwf	printf@val& (0+255),w,b
  2464  000A6A  0009               	tblrd		*+
  2465  000A6C  50F5               	movf	tablat,w,c
  2466  000A6E  0100               	movlb	0	; () banked
  2467  000A70  5979               	subwfb	(printf@val+1)& (0+255),w,b
  2468  000A72  A0D8               	btfss	status,0,c
  2469  000A74  D00C               	goto	l2535
  2470                           
  2471                           ; BSR set to: 0
  2472                           
  2473                           ; BSR set to: 0
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;doprnt.c: 1318: break;
  2477  000A76  0100               	movlb	0	; () banked
  2478  000A78  2B7D               	incf	printf@c& (0+255),f,b
  2479  000A7A  D7E5               	goto	l2519
  2480  000A7C                     l2533:
  2481                           
  2482                           ; BSR set to: 0
  2483  000A7C  0100               	movlb	0	; () banked
  2484  000A7E  517A               	movf	printf@flag& (0+255),w,b
  2485  000A80  0BC0               	andlw	192
  2486                           
  2487                           ; Switch size 1, requested type "space"
  2488                           ; Number of cases is 2, Range of values is 128 to 192
  2489                           ; switch strategies available:
  2490                           ; Name         Instructions Cycles
  2491                           ; simple_byte            7     4 (average)
  2492                           ;	Chosen strategy is simple_byte
  2493  000A82  0A80               	xorlw	128	; case 128
  2494  000A84  B4D8               	btfsc	status,2,c
  2495  000A86  D7DC               	goto	l2517
  2496  000A88  0A40               	xorlw	64	; case 192
  2497  000A8A  B4D8               	btfsc	status,2,c
  2498  000A8C  D7BB               	goto	l2503
  2499  000A8E                     l2535:
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;doprnt.c: 1381: if(width > c)
  2503  000A8E  0E80               	movlw	128
  2504  000A90  0100               	movlb	0	; () banked
  2505  000A92  BF7D               	btfsc	printf@c& (0+255),7,b
  2506  000A94  0E7F               	movlw	127
  2507  000A96  0100               	movlb	0	; () banked
  2508  000A98  6F70               	movwf	??_printf& (0+255),b
  2509  000A9A  0100               	movlb	0	; () banked
  2510  000A9C  517B               	movf	printf@width& (0+255),w,b
  2511  000A9E  0100               	movlb	0	; () banked
  2512  000AA0  5D7D               	subwf	printf@c& (0+255),w,b
  2513  000AA2  0100               	movlb	0	; () banked
  2514  000AA4  517C               	movf	(printf@width+1)& (0+255),w,b
  2515  000AA6  0A80               	xorlw	128
  2516  000AA8  0100               	movlb	0	; () banked
  2517  000AAA  5970               	subwfb	??_printf& (0+255),w,b
  2518  000AAC  B0D8               	btfsc	status,0,c
  2519  000AAE  D00B               	goto	l2539
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;doprnt.c: 1382: width -= c;
  2523  000AB0  0100               	movlb	0	; () banked
  2524  000AB2  517D               	movf	printf@c& (0+255),w,b
  2525  000AB4  0100               	movlb	0	; () banked
  2526  000AB6  5F7B               	subwf	printf@width& (0+255),f,b
  2527  000AB8  0E00               	movlw	0
  2528  000ABA  0100               	movlb	0	; () banked
  2529  000ABC  BF7D               	btfsc	printf@c& (0+255),7,b
  2530  000ABE  0EFF               	movlw	255
  2531  000AC0  0100               	movlb	0	; () banked
  2532  000AC2  5B7C               	subwfb	(printf@width+1)& (0+255),f,b
  2533  000AC4  D005               	goto	l2541
  2534  000AC6                     l2539:
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;doprnt.c: 1383: else
  2538                           ;doprnt.c: 1384: width = 0;
  2539  000AC6  0E00               	movlw	0
  2540  000AC8  0100               	movlb	0	; () banked
  2541  000ACA  6F7C               	movwf	(printf@width+1)& (0+255),b
  2542  000ACC  0E00               	movlw	0
  2543  000ACE  6F7B               	movwf	printf@width& (0+255),b
  2544  000AD0                     l2541:
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;doprnt.c: 1387: if(flag & 0x04) {
  2548  000AD0  0100               	movlb	0	; () banked
  2549  000AD2  A57A               	btfss	printf@flag& (0+255),2,b
  2550  000AD4  D00E               	goto	l2549
  2551  000AD6                     
  2552                           ; BSR set to: 0
  2553                           ;doprnt.c: 1415: if(width)
  2554  000AD6  0100               	movlb	0	; () banked
  2555  000AD8  517B               	movf	printf@width& (0+255),w,b
  2556  000ADA  0100               	movlb	0	; () banked
  2557  000ADC  117C               	iorwf	(printf@width+1)& (0+255),w,b
  2558  000ADE  B4D8               	btfsc	status,2,c
  2559  000AE0  D01B               	goto	l340
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;doprnt.c: 1417: (putch('0') );
  2563                           
  2564                           ; BSR set to: 0
  2565                           
  2566                           ;doprnt.c: 1416: do
  2567  000AE2  0E30               	movlw	48
  2568  000AE4  EC50  F00B         	call	_putch
  2569                           
  2570                           ;doprnt.c: 1418: while(--width);
  2571  000AE8  0100               	movlb	0	; () banked
  2572  000AEA  077B               	decf	printf@width& (0+255),f,b
  2573  000AEC  A0D8               	btfss	status,0,c
  2574  000AEE  077C               	decf	(printf@width+1)& (0+255),f,b
  2575  000AF0  D7F2               	goto	L1
  2576  000AF2                     l2549:
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;doprnt.c: 1422: {
  2580                           ;doprnt.c: 1424: if(width
  2581                           ;doprnt.c: 1428: )
  2582  000AF2  0100               	movlb	0	; () banked
  2583  000AF4  517B               	movf	printf@width& (0+255),w,b
  2584  000AF6  0100               	movlb	0	; () banked
  2585  000AF8  117C               	iorwf	(printf@width+1)& (0+255),w,b
  2586  000AFA  B4D8               	btfsc	status,2,c
  2587  000AFC  D00D               	goto	l340
  2588  000AFE                     l2551:
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;doprnt.c: 1430: (putch(' ') );
  2592  000AFE  0E20               	movlw	32
  2593  000B00  EC50  F00B         	call	_putch
  2594                           
  2595                           ;doprnt.c: 1431: while(--width);
  2596  000B04  0100               	movlb	0	; () banked
  2597  000B06  077B               	decf	printf@width& (0+255),f,b
  2598  000B08  A0D8               	btfss	status,0,c
  2599  000B0A  077C               	decf	(printf@width+1)& (0+255),f,b
  2600  000B0C  0100               	movlb	0	; () banked
  2601  000B0E  517B               	movf	printf@width& (0+255),w,b
  2602  000B10  0100               	movlb	0	; () banked
  2603  000B12  117C               	iorwf	(printf@width+1)& (0+255),w,b
  2604  000B14  A4D8               	btfss	status,2,c
  2605  000B16  D7F3               	goto	l2551
  2606  000B18                     l340:
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;doprnt.c: 1469: }
  2610                           ;doprnt.c: 1472: prec = c;
  2611  000B18  C07D  F077         	movff	printf@c,printf@prec
  2612                           
  2613                           ;doprnt.c: 1474: while(prec--) {
  2614  000B1C  D05A               	goto	l2567
  2615  000B1E                     l2555:
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2619  000B1E  0100               	movlb	0	; () banked
  2620  000B20  5177               	movf	printf@prec& (0+255),w,b
  2621  000B22  0D02               	mullw	2
  2622  000B24  0E01               	movlw	low _dpowers
  2623  000B26  24F3               	addwf	prodl,w,c
  2624  000B28  6EF6               	movwf	tblptrl,c
  2625  000B2A  0E08               	movlw	high _dpowers
  2626  000B2C  20F4               	addwfc	prodh,w,c
  2627  000B2E  6EF7               	movwf	tblptrh,c
  2628  000B30                     	if	0	;There are less than 3 active tblptr bytes
  2629  000B30                     	endif
  2630  000B30  0009               	tblrd		*+
  2631  000B32  CFF5 F062          	movff	tablat,___lwdiv@divisor
  2632  000B36  000A               	tblrd		*-
  2633  000B38  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  2634  000B3C  C078  F060         	movff	printf@val,___lwdiv@dividend
  2635  000B40  C079  F061         	movff	printf@val+1,___lwdiv@dividend+1
  2636  000B44  EC34  F009         	call	___lwdiv	;wreg free
  2637  000B48  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  2638  000B4C  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  2639  000B50  0E00               	movlw	0
  2640  000B52  0100               	movlb	0	; () banked
  2641  000B54  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  2642  000B56  0E0A               	movlw	10
  2643  000B58  6F69               	movwf	___lwmod@divisor& (0+255),b
  2644  000B5A  ECDE  F009         	call	___lwmod	;wreg free
  2645  000B5E  0100               	movlb	0	; () banked
  2646  000B60  5167               	movf	?___lwmod& (0+255),w,b
  2647  000B62  0F30               	addlw	48
  2648  000B64  0100               	movlb	0	; () banked
  2649  000B66  6F7D               	movwf	printf@c& (0+255),b
  2650                           
  2651                           ;doprnt.c: 1491: break;
  2652  000B68  D030               	goto	l2565
  2653  000B6A                     l2557:
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;doprnt.c: 1499: {
  2657                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2658  000B6A  C078  F060         	movff	printf@val,___lwdiv@dividend
  2659  000B6E  C079  F061         	movff	printf@val+1,___lwdiv@dividend+1
  2660  000B72  0100               	movlb	0	; () banked
  2661  000B74  5177               	movf	printf@prec& (0+255),w,b
  2662  000B76  0D02               	mullw	2
  2663  000B78  0E0B               	movlw	low _hexpowers
  2664  000B7A  24F3               	addwf	prodl,w,c
  2665  000B7C  6EF6               	movwf	tblptrl,c
  2666  000B7E  0E08               	movlw	high _hexpowers
  2667  000B80  20F4               	addwfc	prodh,w,c
  2668  000B82  6EF7               	movwf	tblptrh,c
  2669  000B84                     	if	0	;There are less than 3 active tblptr bytes
  2670  000B84                     	endif
  2671  000B84  0009               	tblrd		*+
  2672  000B86  CFF5 F062          	movff	tablat,___lwdiv@divisor
  2673  000B8A  000A               	tblrd		*-
  2674  000B8C  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  2675  000B90  EC34  F009         	call	___lwdiv	;wreg free
  2676  000B94  0100               	movlb	0	; () banked
  2677  000B96  5160               	movf	?___lwdiv& (0+255),w,b
  2678  000B98  0B0F               	andlw	15
  2679  000B9A  0100               	movlb	0	; () banked
  2680  000B9C  6F74               	movwf	printf@idx& (0+255),b
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  2684  000B9E  0100               	movlb	0	; () banked
  2685  000BA0  5174               	movf	printf@idx& (0+255),w,b
  2686  000BA2  0D01               	mullw	1
  2687  000BA4  0E99               	movlw	low STR_9
  2688  000BA6  24F3               	addwf	prodl,w,c
  2689  000BA8  6EF6               	movwf	tblptrl,c
  2690  000BAA  0E08               	movlw	high STR_9
  2691  000BAC  20F4               	addwfc	prodh,w,c
  2692  000BAE  6EF7               	movwf	tblptrh,c
  2693  000BB0                     	if	0	;There are less than 3 active tblptr bytes
  2694  000BB0                     	endif
  2695  000BB0  0008               	tblrd		*
  2696  000BB2  CFF5 F07D          	movff	tablat,printf@c
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;doprnt.c: 1523: }
  2700                           
  2701                           ;doprnt.c: 1508: }
  2702                           ;doprnt.c: 1510: break;
  2703  000BB6  D009               	goto	l2565
  2704  000BB8                     l2563:
  2705                           
  2706                           ; BSR set to: 0
  2707  000BB8  0100               	movlb	0	; () banked
  2708  000BBA  517A               	movf	printf@flag& (0+255),w,b
  2709  000BBC  0BC0               	andlw	192
  2710                           
  2711                           ; Switch size 1, requested type "space"
  2712                           ; Number of cases is 2, Range of values is 128 to 192
  2713                           ; switch strategies available:
  2714                           ; Name         Instructions Cycles
  2715                           ; simple_byte            7     4 (average)
  2716                           ;	Chosen strategy is simple_byte
  2717  000BBE  0A80               	xorlw	128	; case 128
  2718  000BC0  B4D8               	btfsc	status,2,c
  2719  000BC2  D7D3               	goto	l2557
  2720  000BC4  0A40               	xorlw	64	; case 192
  2721  000BC6  B4D8               	btfsc	status,2,c
  2722  000BC8  D7AA               	goto	l2555
  2723  000BCA                     l2565:
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;doprnt.c: 1524: (putch(c) );
  2727  000BCA  0100               	movlb	0	; () banked
  2728  000BCC  517D               	movf	printf@c& (0+255),w,b
  2729  000BCE  EC50  F00B         	call	_putch
  2730  000BD2                     l2567:
  2731  000BD2  0100               	movlb	0	; () banked
  2732  000BD4  0777               	decf	printf@prec& (0+255),f,b
  2733  000BD6  0100               	movlb	0	; () banked
  2734  000BD8  2977               	incf	printf@prec& (0+255),w,b
  2735  000BDA  A4D8               	btfss	status,2,c
  2736  000BDC  D7ED               	goto	l2563
  2737  000BDE                     l2569:
  2738  000BDE  C06C  FFF6         	movff	printf@f,tblptrl
  2739  000BE2  C06D  FFF7         	movff	printf@f+1,tblptrh
  2740  000BE6  0100               	movlb	0	; () banked
  2741  000BE8  4B6C               	infsnz	printf@f& (0+255),f,b
  2742  000BEA  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2743  000BEC                     	if	0	;tblptru may be non-zero
  2744  000BEC                     	endif
  2745  000BEC                     	if	0	;tblptru may be non-zero
  2746  000BEC                     	endif
  2747  000BEC  0008               	tblrd		*
  2748  000BEE  CFF5 F07D          	movff	tablat,printf@c
  2749  000BF2  0100               	movlb	0	; () banked
  2750  000BF4  517D               	movf	printf@c& (0+255),w,b
  2751  000BF6  B4D8               	btfsc	status,2,c
  2752  000BF8  0012               	return	
  2753  000BFA  D66A               	goto	l2467
  2754  000BFC                     __end_of_printf:
  2755                           	opt stack 0
  2756                           tblptru	equ	0xFF8
  2757                           tblptrh	equ	0xFF7
  2758                           tblptrl	equ	0xFF6
  2759                           tablat	equ	0xFF5
  2760                           prodh	equ	0xFF4
  2761                           prodl	equ	0xFF3
  2762                           postinc0	equ	0xFEE
  2763                           wreg	equ	0xFE8
  2764                           postinc2	equ	0xFDE
  2765                           postdec2	equ	0xFDD
  2766                           fsr2h	equ	0xFDA
  2767                           fsr2l	equ	0xFD9
  2768                           status	equ	0xFD8
  2769                           
  2770 ;; *************** function _putch *****************
  2771 ;; Defined at:
  2772 ;;		line 46 in file "usart.c"
  2773 ;; Parameters:    Size  Location     Type
  2774 ;;  byte            1    wreg     unsigned char 
  2775 ;; Auto vars:     Size  Location     Type
  2776 ;;  byte            1    0[BANK0 ] unsigned char 
  2777 ;; Return value:  Size  Location     Type
  2778 ;;		None               void
  2779 ;; Registers used:
  2780 ;;		wreg
  2781 ;; Tracked objects:
  2782 ;;		On entry : 0/0
  2783 ;;		On exit  : 0/0
  2784 ;;		Unchanged: 0/0
  2785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2786 ;;      Params:         0       0       0       0       0       0       0       0       0
  2787 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2788 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2789 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2790 ;;Total ram usage:        1 bytes
  2791 ;; Hardware stack levels used:    1
  2792 ;; Hardware stack levels required when called:    3
  2793 ;; This function calls:
  2794 ;;		Nothing
  2795 ;; This function is called by:
  2796 ;;		_printf
  2797 ;;		_getche
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801                           	psect	text12
  2802  0016A0                     __ptext12:
  2803                           	opt stack 0
  2804  0016A0                     _putch:
  2805                           	opt stack 26
  2806                           
  2807                           ;incstack = 0
  2808                           ;putch@byte stored from wreg
  2809  0016A0  0100               	movlb	0	; () banked
  2810  0016A2  6F60               	movwf	putch@byte& (0+255),b
  2811  0016A4                     l119:
  2812  0016A4  A89E               	btfss	3998,4,c	;volatile
  2813  0016A6  D7FE               	goto	l119
  2814                           
  2815                           ;usart.c: 50: TXREG = byte;
  2816  0016A8  C060  FFAD         	movff	putch@byte,4013	;volatile
  2817  0016AC  0012               	return		;funcret
  2818  0016AE                     __end_of_putch:
  2819                           	opt stack 0
  2820                           tblptru	equ	0xFF8
  2821                           tblptrh	equ	0xFF7
  2822                           tblptrl	equ	0xFF6
  2823                           tablat	equ	0xFF5
  2824                           prodh	equ	0xFF4
  2825                           prodl	equ	0xFF3
  2826                           postinc0	equ	0xFEE
  2827                           wreg	equ	0xFE8
  2828                           postinc2	equ	0xFDE
  2829                           postdec2	equ	0xFDD
  2830                           fsr2h	equ	0xFDA
  2831                           fsr2l	equ	0xFD9
  2832                           status	equ	0xFD8
  2833                           
  2834 ;; *************** function _isdigit *****************
  2835 ;; Defined at:
  2836 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;  c               1    wreg     unsigned char 
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;  c               1    2[BANK0 ] unsigned char 
  2841 ;; Return value:  Size  Location     Type
  2842 ;;		None               void
  2843 ;; Registers used:
  2844 ;;		wreg, status,2, status,0
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2850 ;;      Params:         0       0       0       0       0       0       0       0       0
  2851 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2852 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2853 ;;      Totals:         0       3       0       0       0       0       0       0       0
  2854 ;;Total ram usage:        3 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; Hardware stack levels required when called:    3
  2857 ;; This function calls:
  2858 ;;		Nothing
  2859 ;; This function is called by:
  2860 ;;		_printf
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           	psect	text13
  2865  00159E                     __ptext13:
  2866                           	opt stack 0
  2867  00159E                     _isdigit:
  2868                           	opt stack 26
  2869                           
  2870                           ;incstack = 0
  2871                           ;isdigit@c stored from wreg
  2872  00159E  0100               	movlb	0	; () banked
  2873  0015A0  6F62               	movwf	isdigit@c& (0+255),b
  2874  0015A2  0E00               	movlw	0
  2875  0015A4  0100               	movlb	0	; () banked
  2876  0015A6  6F61               	movwf	_isdigit$1318& (0+255),b
  2877                           
  2878                           ; BSR set to: 0
  2879  0015A8  0E3A               	movlw	58
  2880  0015AA  0100               	movlb	0	; () banked
  2881  0015AC  6162               	cpfslt	isdigit@c& (0+255),b
  2882  0015AE  D007               	goto	l2339
  2883                           
  2884                           ; BSR set to: 0
  2885  0015B0  0E2F               	movlw	47
  2886  0015B2  0100               	movlb	0	; () banked
  2887  0015B4  6562               	cpfsgt	isdigit@c& (0+255),b
  2888  0015B6  D003               	goto	l2339
  2889                           
  2890                           ; BSR set to: 0
  2891  0015B8  0E01               	movlw	1
  2892  0015BA  0100               	movlb	0	; () banked
  2893  0015BC  6F61               	movwf	_isdigit$1318& (0+255),b
  2894  0015BE                     l2339:
  2895                           
  2896                           ; BSR set to: 0
  2897  0015BE  C061  F060         	movff	_isdigit$1318,??_isdigit
  2898  0015C2  0100               	movlb	0	; () banked
  2899  0015C4  3160               	rrcf	??_isdigit& (0+255),w,b
  2900  0015C6  0012               	return	
  2901  0015C8                     __end_of_isdigit:
  2902                           	opt stack 0
  2903                           tblptru	equ	0xFF8
  2904                           tblptrh	equ	0xFF7
  2905                           tblptrl	equ	0xFF6
  2906                           tablat	equ	0xFF5
  2907                           prodh	equ	0xFF4
  2908                           prodl	equ	0xFF3
  2909                           postinc0	equ	0xFEE
  2910                           wreg	equ	0xFE8
  2911                           postinc2	equ	0xFDE
  2912                           postdec2	equ	0xFDD
  2913                           fsr2h	equ	0xFDA
  2914                           fsr2l	equ	0xFD9
  2915                           status	equ	0xFD8
  2916                           
  2917 ;; *************** function ___wmul *****************
  2918 ;; Defined at:
  2919 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2922 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;  product         2    4[BANK0 ] unsigned int 
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  2    0[BANK0 ] unsigned int 
  2927 ;; Registers used:
  2928 ;;		wreg, status,2, status,0, prodl, prodh
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2934 ;;      Params:         0       4       0       0       0       0       0       0       0
  2935 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2936 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2937 ;;      Totals:         0       6       0       0       0       0       0       0       0
  2938 ;;Total ram usage:        6 bytes
  2939 ;; Hardware stack levels used:    1
  2940 ;; Hardware stack levels required when called:    3
  2941 ;; This function calls:
  2942 ;;		Nothing
  2943 ;; This function is called by:
  2944 ;;		_printf
  2945 ;; This function uses a non-reentrant model
  2946 ;;
  2947                           
  2948                           	psect	text14
  2949  00153A                     __ptext14:
  2950                           	opt stack 0
  2951  00153A                     ___wmul:
  2952                           	opt stack 26
  2953                           
  2954                           ; BSR set to: 0
  2955                           ;incstack = 0
  2956  00153A  0100               	movlb	0	; () banked
  2957  00153C  5160               	movf	___wmul@multiplier& (0+255),w,b
  2958  00153E  0100               	movlb	0	; () banked
  2959  001540  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2960  001542  CFF3 F064          	movff	prodl,___wmul@product
  2961  001546  CFF4 F065          	movff	prodh,___wmul@product+1
  2962  00154A  0100               	movlb	0	; () banked
  2963  00154C  5160               	movf	___wmul@multiplier& (0+255),w,b
  2964  00154E  0100               	movlb	0	; () banked
  2965  001550  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2966  001552  50F3               	movf	prodl,w,c
  2967  001554  0100               	movlb	0	; () banked
  2968  001556  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2969  001558  0100               	movlb	0	; () banked
  2970  00155A  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2971  00155C  0100               	movlb	0	; () banked
  2972  00155E  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2973  001560  50F3               	movf	prodl,w,c
  2974  001562  0100               	movlb	0	; () banked
  2975  001564  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2976                           
  2977                           ; BSR set to: 0
  2978  001566  C064  F060         	movff	___wmul@product,?___wmul
  2979  00156A  C065  F061         	movff	___wmul@product+1,?___wmul+1
  2980  00156E  0012               	return	
  2981  001570                     __end_of___wmul:
  2982                           	opt stack 0
  2983                           tblptru	equ	0xFF8
  2984                           tblptrh	equ	0xFF7
  2985                           tblptrl	equ	0xFF6
  2986                           tablat	equ	0xFF5
  2987                           prodh	equ	0xFF4
  2988                           prodl	equ	0xFF3
  2989                           postinc0	equ	0xFEE
  2990                           wreg	equ	0xFE8
  2991                           postinc2	equ	0xFDE
  2992                           postdec2	equ	0xFDD
  2993                           fsr2h	equ	0xFDA
  2994                           fsr2l	equ	0xFD9
  2995                           status	equ	0xFD8
  2996                           
  2997 ;; *************** function ___lwmod *****************
  2998 ;; Defined at:
  2999 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;  dividend        2    7[BANK0 ] unsigned int 
  3002 ;;  divisor         2    9[BANK0 ] unsigned int 
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;  counter         1   11[BANK0 ] unsigned char 
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  2    7[BANK0 ] unsigned int 
  3007 ;; Registers used:
  3008 ;;		wreg, status,2, status,0
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3014 ;;      Params:         0       4       0       0       0       0       0       0       0
  3015 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3016 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3017 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3018 ;;Total ram usage:        5 bytes
  3019 ;; Hardware stack levels used:    1
  3020 ;; Hardware stack levels required when called:    3
  3021 ;; This function calls:
  3022 ;;		Nothing
  3023 ;; This function is called by:
  3024 ;;		_printf
  3025 ;; This function uses a non-reentrant model
  3026 ;;
  3027                           
  3028                           	psect	text15
  3029  0013BC                     __ptext15:
  3030                           	opt stack 0
  3031  0013BC                     ___lwmod:
  3032                           	opt stack 26
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;incstack = 0
  3036  0013BC  0100               	movlb	0	; () banked
  3037  0013BE  5169               	movf	___lwmod@divisor& (0+255),w,b
  3038  0013C0  0100               	movlb	0	; () banked
  3039  0013C2  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3040  0013C4  B4D8               	btfsc	status,2,c
  3041  0013C6  D026               	goto	l770
  3042                           
  3043                           ; BSR set to: 0
  3044  0013C8  0E01               	movlw	1
  3045  0013CA  0100               	movlb	0	; () banked
  3046  0013CC  6F6B               	movwf	___lwmod@counter& (0+255),b
  3047  0013CE  D006               	goto	l2377
  3048  0013D0                     l2375:
  3049                           
  3050                           ; BSR set to: 0
  3051  0013D0  0100               	movlb	0	; () banked
  3052  0013D2  90D8               	bcf	status,0,c
  3053  0013D4  3769               	rlcf	___lwmod@divisor& (0+255),f,b
  3054  0013D6  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3055  0013D8  0100               	movlb	0	; () banked
  3056  0013DA  2B6B               	incf	___lwmod@counter& (0+255),f,b
  3057  0013DC                     l2377:
  3058                           
  3059                           ; BSR set to: 0
  3060  0013DC  0100               	movlb	0	; () banked
  3061  0013DE  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3062  0013E0  D7F7               	goto	l2375
  3063  0013E2                     l2379:
  3064                           
  3065                           ; BSR set to: 0
  3066  0013E2  0100               	movlb	0	; () banked
  3067  0013E4  5169               	movf	___lwmod@divisor& (0+255),w,b
  3068  0013E6  0100               	movlb	0	; () banked
  3069  0013E8  5D67               	subwf	___lwmod@dividend& (0+255),w,b
  3070  0013EA  0100               	movlb	0	; () banked
  3071  0013EC  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3072  0013EE  0100               	movlb	0	; () banked
  3073  0013F0  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3074  0013F2  A0D8               	btfss	status,0,c
  3075  0013F4  D008               	goto	l2383
  3076                           
  3077                           ; BSR set to: 0
  3078  0013F6  0100               	movlb	0	; () banked
  3079  0013F8  5169               	movf	___lwmod@divisor& (0+255),w,b
  3080  0013FA  0100               	movlb	0	; () banked
  3081  0013FC  5F67               	subwf	___lwmod@dividend& (0+255),f,b
  3082  0013FE  0100               	movlb	0	; () banked
  3083  001400  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3084  001402  0100               	movlb	0	; () banked
  3085  001404  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3086  001406                     l2383:
  3087                           
  3088                           ; BSR set to: 0
  3089  001406  0100               	movlb	0	; () banked
  3090  001408  90D8               	bcf	status,0,c
  3091  00140A  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3092  00140C  3369               	rrcf	___lwmod@divisor& (0+255),f,b
  3093                           
  3094                           ; BSR set to: 0
  3095  00140E  0100               	movlb	0	; () banked
  3096  001410  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
  3097  001412  D7E7               	goto	l2379
  3098  001414                     l770:
  3099                           
  3100                           ; BSR set to: 0
  3101  001414  C067  F067         	movff	___lwmod@dividend,?___lwmod
  3102  001418  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
  3103                           
  3104                           ; BSR set to: 0
  3105  00141C  0012               	return		;funcret
  3106  00141E                     __end_of___lwmod:
  3107                           	opt stack 0
  3108                           tblptru	equ	0xFF8
  3109                           tblptrh	equ	0xFF7
  3110                           tblptrl	equ	0xFF6
  3111                           tablat	equ	0xFF5
  3112                           prodh	equ	0xFF4
  3113                           prodl	equ	0xFF3
  3114                           postinc0	equ	0xFEE
  3115                           wreg	equ	0xFE8
  3116                           postinc2	equ	0xFDE
  3117                           postdec2	equ	0xFDD
  3118                           fsr2h	equ	0xFDA
  3119                           fsr2l	equ	0xFD9
  3120                           status	equ	0xFD8
  3121                           
  3122 ;; *************** function ___lwdiv *****************
  3123 ;; Defined at:
  3124 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;  dividend        2    0[BANK0 ] unsigned int 
  3127 ;;  divisor         2    2[BANK0 ] unsigned int 
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;  quotient        2    5[BANK0 ] unsigned int 
  3130 ;;  counter         1    4[BANK0 ] unsigned char 
  3131 ;; Return value:  Size  Location     Type
  3132 ;;                  2    0[BANK0 ] unsigned int 
  3133 ;; Registers used:
  3134 ;;		wreg, status,2, status,0
  3135 ;; Tracked objects:
  3136 ;;		On entry : 0/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3140 ;;      Params:         0       4       0       0       0       0       0       0       0
  3141 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3142 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3143 ;;      Totals:         0       7       0       0       0       0       0       0       0
  3144 ;;Total ram usage:        7 bytes
  3145 ;; Hardware stack levels used:    1
  3146 ;; Hardware stack levels required when called:    3
  3147 ;; This function calls:
  3148 ;;		Nothing
  3149 ;; This function is called by:
  3150 ;;		_printf
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           	psect	text16
  3155  001268                     __ptext16:
  3156                           	opt stack 0
  3157  001268                     ___lwdiv:
  3158                           	opt stack 26
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;incstack = 0
  3162  001268  0E00               	movlw	0
  3163  00126A  0100               	movlb	0	; () banked
  3164  00126C  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3165  00126E  0E00               	movlw	0
  3166  001270  6F65               	movwf	___lwdiv@quotient& (0+255),b
  3167                           
  3168                           ; BSR set to: 0
  3169  001272  0100               	movlb	0	; () banked
  3170  001274  5162               	movf	___lwdiv@divisor& (0+255),w,b
  3171  001276  0100               	movlb	0	; () banked
  3172  001278  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3173  00127A  B4D8               	btfsc	status,2,c
  3174  00127C  D02C               	goto	l760
  3175                           
  3176                           ; BSR set to: 0
  3177  00127E  0E01               	movlw	1
  3178  001280  0100               	movlb	0	; () banked
  3179  001282  6F64               	movwf	___lwdiv@counter& (0+255),b
  3180  001284  D006               	goto	l2357
  3181  001286                     l2355:
  3182                           
  3183                           ; BSR set to: 0
  3184  001286  0100               	movlb	0	; () banked
  3185  001288  90D8               	bcf	status,0,c
  3186  00128A  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  3187  00128C  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3188  00128E  0100               	movlb	0	; () banked
  3189  001290  2B64               	incf	___lwdiv@counter& (0+255),f,b
  3190  001292                     l2357:
  3191                           
  3192                           ; BSR set to: 0
  3193  001292  0100               	movlb	0	; () banked
  3194  001294  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3195  001296  D7F7               	goto	l2355
  3196  001298                     l2359:
  3197                           
  3198                           ; BSR set to: 0
  3199  001298  0100               	movlb	0	; () banked
  3200  00129A  90D8               	bcf	status,0,c
  3201  00129C  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  3202  00129E  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3203                           
  3204                           ; BSR set to: 0
  3205  0012A0  0100               	movlb	0	; () banked
  3206  0012A2  5162               	movf	___lwdiv@divisor& (0+255),w,b
  3207  0012A4  0100               	movlb	0	; () banked
  3208  0012A6  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  3209  0012A8  0100               	movlb	0	; () banked
  3210  0012AA  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3211  0012AC  0100               	movlb	0	; () banked
  3212  0012AE  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3213  0012B0  A0D8               	btfss	status,0,c
  3214  0012B2  D00A               	goto	l2367
  3215                           
  3216                           ; BSR set to: 0
  3217  0012B4  0100               	movlb	0	; () banked
  3218  0012B6  5162               	movf	___lwdiv@divisor& (0+255),w,b
  3219  0012B8  0100               	movlb	0	; () banked
  3220  0012BA  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  3221  0012BC  0100               	movlb	0	; () banked
  3222  0012BE  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3223  0012C0  0100               	movlb	0	; () banked
  3224  0012C2  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3225                           
  3226                           ; BSR set to: 0
  3227  0012C4  0100               	movlb	0	; () banked
  3228  0012C6  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  3229  0012C8                     l2367:
  3230                           
  3231                           ; BSR set to: 0
  3232  0012C8  0100               	movlb	0	; () banked
  3233  0012CA  90D8               	bcf	status,0,c
  3234  0012CC  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3235  0012CE  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  3236                           
  3237                           ; BSR set to: 0
  3238  0012D0  0100               	movlb	0	; () banked
  3239  0012D2  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  3240  0012D4  D7E1               	goto	l2359
  3241  0012D6                     l760:
  3242                           
  3243                           ; BSR set to: 0
  3244  0012D6  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  3245  0012DA  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3246                           
  3247                           ; BSR set to: 0
  3248  0012DE  0012               	return		;funcret
  3249  0012E0                     __end_of___lwdiv:
  3250                           	opt stack 0
  3251                           tblptru	equ	0xFF8
  3252                           tblptrh	equ	0xFF7
  3253                           tblptrl	equ	0xFF6
  3254                           tablat	equ	0xFF5
  3255                           prodh	equ	0xFF4
  3256                           prodl	equ	0xFF3
  3257                           postinc0	equ	0xFEE
  3258                           wreg	equ	0xFE8
  3259                           postinc2	equ	0xFDE
  3260                           postdec2	equ	0xFDD
  3261                           fsr2h	equ	0xFDA
  3262                           fsr2l	equ	0xFD9
  3263                           status	equ	0xFD8
  3264                           
  3265 ;; *************** function _configUSARTInterrupts *****************
  3266 ;; Defined at:
  3267 ;;		line 32 in file "usart.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;		None
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;		None
  3272 ;; Return value:  Size  Location     Type
  3273 ;;		None               void
  3274 ;; Registers used:
  3275 ;;		None
  3276 ;; Tracked objects:
  3277 ;;		On entry : 0/0
  3278 ;;		On exit  : 0/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3281 ;;      Params:         0       0       0       0       0       0       0       0       0
  3282 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3283 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3284 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3285 ;;Total ram usage:        0 bytes
  3286 ;; Hardware stack levels used:    1
  3287 ;; Hardware stack levels required when called:    3
  3288 ;; This function calls:
  3289 ;;		Nothing
  3290 ;; This function is called by:
  3291 ;;		_main
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text17
  3296  0016AE                     __ptext17:
  3297                           	opt stack 0
  3298  0016AE                     _configUSARTInterrupts:
  3299                           	opt stack 27
  3300                           
  3301                           ;usart.c: 35: TXIE = 0;
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;incstack = 0
  3305  0016AE  989D               	bcf	3997,4,c	;volatile
  3306                           
  3307                           ;usart.c: 36: TXIF = 0;
  3308  0016B0  989E               	bcf	3998,4,c	;volatile
  3309                           
  3310                           ;usart.c: 39: RCIE = 1;
  3311  0016B2  8A9D               	bsf	3997,5,c	;volatile
  3312                           
  3313                           ;usart.c: 40: RCIF = 0;
  3314  0016B4  9A9E               	bcf	3998,5,c	;volatile
  3315                           
  3316                           ;usart.c: 42: PEIE = 1;
  3317  0016B6  8CF2               	bsf	intcon,6,c	;volatile
  3318                           
  3319                           ;usart.c: 43: GIE = 1;
  3320  0016B8  8EF2               	bsf	intcon,7,c	;volatile
  3321  0016BA  0012               	return		;funcret
  3322  0016BC                     __end_of_configUSARTInterrupts:
  3323                           	opt stack 0
  3324                           tblptru	equ	0xFF8
  3325                           tblptrh	equ	0xFF7
  3326                           tblptrl	equ	0xFF6
  3327                           tablat	equ	0xFF5
  3328                           prodh	equ	0xFF4
  3329                           prodl	equ	0xFF3
  3330                           intcon	equ	0xFF2
  3331                           postinc0	equ	0xFEE
  3332                           wreg	equ	0xFE8
  3333                           postinc2	equ	0xFDE
  3334                           postdec2	equ	0xFDD
  3335                           fsr2h	equ	0xFDA
  3336                           fsr2l	equ	0xFD9
  3337                           status	equ	0xFD8
  3338                           
  3339 ;; *************** function _configTimer *****************
  3340 ;; Defined at:
  3341 ;;		line 17 in file "timer0.c"
  3342 ;; Parameters:    Size  Location     Type
  3343 ;;		None
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;		None
  3346 ;; Return value:  Size  Location     Type
  3347 ;;		None               void
  3348 ;; Registers used:
  3349 ;;		None
  3350 ;; Tracked objects:
  3351 ;;		On entry : 0/0
  3352 ;;		On exit  : 0/0
  3353 ;;		Unchanged: 0/0
  3354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3355 ;;      Params:         0       0       0       0       0       0       0       0       0
  3356 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3357 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3358 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3359 ;;Total ram usage:        0 bytes
  3360 ;; Hardware stack levels used:    1
  3361 ;; Hardware stack levels required when called:    3
  3362 ;; This function calls:
  3363 ;;		Nothing
  3364 ;; This function is called by:
  3365 ;;		_main
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           	psect	text18
  3370  00162E                     __ptext18:
  3371                           	opt stack 0
  3372  00162E                     _configTimer:
  3373                           	opt stack 27
  3374                           
  3375                           ;timer0.c: 18: T0CONbits.T0CS = 0;
  3376                           
  3377                           ;incstack = 0
  3378  00162E  9AD5               	bcf	4053,5,c	;volatile
  3379                           
  3380                           ;timer0.c: 19: T0CONbits.T0SE = 0;
  3381  001630  98D5               	bcf	4053,4,c	;volatile
  3382                           
  3383                           ;timer0.c: 20: T0CONbits.PSA = 0;
  3384  001632  96D5               	bcf	4053,3,c	;volatile
  3385                           
  3386                           ;timer0.c: 21: T0CONbits.T08BIT = 0;
  3387  001634  9CD5               	bcf	4053,6,c	;volatile
  3388                           
  3389                           ;timer0.c: 24: T0CONbits.T0PS2 = 1;
  3390  001636  84D5               	bsf	4053,2,c	;volatile
  3391                           
  3392                           ;timer0.c: 25: T0CONbits.T0PS1 = 0;
  3393  001638  92D5               	bcf	4053,1,c	;volatile
  3394                           
  3395                           ;timer0.c: 26: T0CONbits.T0PS0 = 1;
  3396  00163A  80D5               	bsf	4053,0,c	;volatile
  3397                           
  3398                           ;timer0.c: 28: TMR0IP = 1;
  3399  00163C  84F1               	bsf	intcon2,2,c	;volatile
  3400                           
  3401                           ;timer0.c: 30: INTCONbits.TMR0IF = 0;
  3402  00163E  94F2               	bcf	intcon,2,c	;volatile
  3403                           
  3404                           ;timer0.c: 31: INTCONbits.TMR0IE = 1;
  3405  001640  8AF2               	bsf	intcon,5,c	;volatile
  3406                           
  3407                           ;timer0.c: 32: INTCONbits.GIE = 1;
  3408  001642  8EF2               	bsf	intcon,7,c	;volatile
  3409                           
  3410                           ;timer0.c: 33: INTCONbits.PEIE = 1;
  3411  001644  8CF2               	bsf	intcon,6,c	;volatile
  3412  001646  0012               	return		;funcret
  3413  001648                     __end_of_configTimer:
  3414                           	opt stack 0
  3415                           tblptru	equ	0xFF8
  3416                           tblptrh	equ	0xFF7
  3417                           tblptrl	equ	0xFF6
  3418                           tablat	equ	0xFF5
  3419                           prodh	equ	0xFF4
  3420                           prodl	equ	0xFF3
  3421                           intcon	equ	0xFF2
  3422                           intcon2	equ	0xFF1
  3423                           postinc0	equ	0xFEE
  3424                           wreg	equ	0xFE8
  3425                           postinc2	equ	0xFDE
  3426                           postdec2	equ	0xFDD
  3427                           fsr2h	equ	0xFDA
  3428                           fsr2l	equ	0xFD9
  3429                           status	equ	0xFD8
  3430                           
  3431 ;; *************** function _configRS232 *****************
  3432 ;; Defined at:
  3433 ;;		line 9 in file "usart.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;		None
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;		None
  3438 ;; Return value:  Size  Location     Type
  3439 ;;		None               void
  3440 ;; Registers used:
  3441 ;;		wreg, status,2
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3447 ;;      Params:         0       0       0       0       0       0       0       0       0
  3448 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3449 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3450 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3451 ;;Total ram usage:        0 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; Hardware stack levels required when called:    3
  3454 ;; This function calls:
  3455 ;;		Nothing
  3456 ;; This function is called by:
  3457 ;;		_main
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           	psect	text19
  3462  001662                     __ptext19:
  3463                           	opt stack 0
  3464  001662                     _configRS232:
  3465                           	opt stack 27
  3466                           
  3467                           ;usart.c: 13: TX9 = 0;
  3468                           
  3469                           ;incstack = 0
  3470  001662  9CAC               	bcf	4012,6,c	;volatile
  3471                           
  3472                           ;usart.c: 14: TXEN = 1;
  3473  001664  8AAC               	bsf	4012,5,c	;volatile
  3474                           
  3475                           ;usart.c: 15: SYNC = 0;
  3476  001666  98AC               	bcf	4012,4,c	;volatile
  3477                           
  3478                           ;usart.c: 16: BRGH = 1;
  3479  001668  84AC               	bsf	4012,2,c	;volatile
  3480                           
  3481                           ;usart.c: 19: SPEN = 1;
  3482  00166A  8EAB               	bsf	4011,7,c	;volatile
  3483                           
  3484                           ;usart.c: 20: RX9 = 0;
  3485  00166C  9CAB               	bcf	4011,6,c	;volatile
  3486                           
  3487                           ;usart.c: 21: CREN = 1;
  3488  00166E  88AB               	bsf	4011,4,c	;volatile
  3489                           
  3490                           ;usart.c: 26: BRG16 = 0;
  3491  001670  96B8               	bcf	4024,3,c	;volatile
  3492                           
  3493                           ;usart.c: 27: SPBRG = 129;
  3494  001672  0E81               	movlw	129
  3495  001674  6EAF               	movwf	4015,c	;volatile
  3496                           
  3497                           ;usart.c: 29: RXDTP = 0;
  3498  001676  9AB8               	bcf	4024,5,c	;volatile
  3499  001678  0012               	return		;funcret
  3500  00167A                     __end_of_configRS232:
  3501                           	opt stack 0
  3502                           tblptru	equ	0xFF8
  3503                           tblptrh	equ	0xFF7
  3504                           tblptrl	equ	0xFF6
  3505                           tablat	equ	0xFF5
  3506                           prodh	equ	0xFF4
  3507                           prodl	equ	0xFF3
  3508                           intcon	equ	0xFF2
  3509                           intcon2	equ	0xFF1
  3510                           postinc0	equ	0xFEE
  3511                           wreg	equ	0xFE8
  3512                           postinc2	equ	0xFDE
  3513                           postdec2	equ	0xFDD
  3514                           fsr2h	equ	0xFDA
  3515                           fsr2l	equ	0xFD9
  3516                           status	equ	0xFD8
  3517                           
  3518 ;; *************** function _configADInterrupt *****************
  3519 ;; Defined at:
  3520 ;;		line 11 in file "ad.c"
  3521 ;; Parameters:    Size  Location     Type
  3522 ;;		None
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;		None
  3525 ;; Return value:  Size  Location     Type
  3526 ;;		None               void
  3527 ;; Registers used:
  3528 ;;		None
  3529 ;; Tracked objects:
  3530 ;;		On entry : 0/0
  3531 ;;		On exit  : 0/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3534 ;;      Params:         0       0       0       0       0       0       0       0       0
  3535 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3536 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3537 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3538 ;;Total ram usage:        0 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; Hardware stack levels required when called:    3
  3541 ;; This function calls:
  3542 ;;		Nothing
  3543 ;; This function is called by:
  3544 ;;		_main
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           	psect	text20
  3549  0016FE                     __ptext20:
  3550                           	opt stack 0
  3551  0016FE                     _configADInterrupt:
  3552                           	opt stack 27
  3553                           
  3554                           ;ad.c: 12: PIR1bits.ADIF = 0;
  3555                           
  3556                           ;incstack = 0
  3557  0016FE  9C9E               	bcf	3998,6,c	;volatile
  3558                           
  3559                           ;ad.c: 13: PIE1bits.ADIE = 1;
  3560  001700  8C9D               	bsf	3997,6,c	;volatile
  3561                           
  3562                           ;ad.c: 15: INTCONbits.GIE = 1;
  3563  001702  8EF2               	bsf	intcon,7,c	;volatile
  3564                           
  3565                           ;ad.c: 16: INTCONbits.PEIE = 1;
  3566  001704  8CF2               	bsf	intcon,6,c	;volatile
  3567  001706  0012               	return		;funcret
  3568  001708                     __end_of_configADInterrupt:
  3569                           	opt stack 0
  3570                           tblptru	equ	0xFF8
  3571                           tblptrh	equ	0xFF7
  3572                           tblptrl	equ	0xFF6
  3573                           tablat	equ	0xFF5
  3574                           prodh	equ	0xFF4
  3575                           prodl	equ	0xFF3
  3576                           intcon	equ	0xFF2
  3577                           intcon2	equ	0xFF1
  3578                           postinc0	equ	0xFEE
  3579                           wreg	equ	0xFE8
  3580                           postinc2	equ	0xFDE
  3581                           postdec2	equ	0xFDD
  3582                           fsr2h	equ	0xFDA
  3583                           fsr2l	equ	0xFD9
  3584                           status	equ	0xFD8
  3585                           
  3586 ;; *************** function _configAD *****************
  3587 ;; Defined at:
  3588 ;;		line 19 in file "ad.c"
  3589 ;; Parameters:    Size  Location     Type
  3590 ;;		None
  3591 ;; Auto vars:     Size  Location     Type
  3592 ;;		None
  3593 ;; Return value:  Size  Location     Type
  3594 ;;		None               void
  3595 ;; Registers used:
  3596 ;;		None
  3597 ;; Tracked objects:
  3598 ;;		On entry : 0/0
  3599 ;;		On exit  : 0/0
  3600 ;;		Unchanged: 0/0
  3601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3602 ;;      Params:         0       0       0       0       0       0       0       0       0
  3603 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3604 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3605 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3606 ;;Total ram usage:        0 bytes
  3607 ;; Hardware stack levels used:    1
  3608 ;; Hardware stack levels required when called:    3
  3609 ;; This function calls:
  3610 ;;		Nothing
  3611 ;; This function is called by:
  3612 ;;		_main
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           	psect	text21
  3617  001648                     __ptext21:
  3618                           	opt stack 0
  3619  001648                     _configAD:
  3620                           	opt stack 27
  3621                           
  3622                           ;ad.c: 20: ADCON0bits.ADON = 1;
  3623                           
  3624                           ;incstack = 0
  3625  001648  80C2               	bsf	4034,0,c	;volatile
  3626                           
  3627                           ;ad.c: 24: ADFM = 1;
  3628  00164A  8EC0               	bsf	4032,7,c	;volatile
  3629                           
  3630                           ;ad.c: 27: ADCON1bits.PCFG3 = 0;
  3631  00164C  96C1               	bcf	4033,3,c	;volatile
  3632                           
  3633                           ;ad.c: 28: ADCON1bits.PCFG2 = 1;
  3634  00164E  84C1               	bsf	4033,2,c	;volatile
  3635                           
  3636                           ;ad.c: 29: ADCON1bits.PCFG1 = 0;
  3637  001650  92C1               	bcf	4033,1,c	;volatile
  3638                           
  3639                           ;ad.c: 30: ADCON1bits.PCFG0 = 1;
  3640  001652  80C1               	bsf	4033,0,c	;volatile
  3641                           
  3642                           ;ad.c: 33: ADCON2bits.ACQT2 = 0;
  3643  001654  9AC0               	bcf	4032,5,c	;volatile
  3644                           
  3645                           ;ad.c: 34: ADCON2bits.ACQT1 = 0;
  3646  001656  98C0               	bcf	4032,4,c	;volatile
  3647                           
  3648                           ;ad.c: 35: ADCON2bits.ACQT0 = 1;
  3649  001658  86C0               	bsf	4032,3,c	;volatile
  3650                           
  3651                           ;ad.c: 38: ADCON2bits.ADCS2 = 1;
  3652  00165A  84C0               	bsf	4032,2,c	;volatile
  3653                           
  3654                           ;ad.c: 39: ADCON2bits.ADCS1 = 0;
  3655  00165C  92C0               	bcf	4032,1,c	;volatile
  3656                           
  3657                           ;ad.c: 40: ADCON2bits.ADCS0 = 1;
  3658  00165E  80C0               	bsf	4032,0,c	;volatile
  3659  001660  0012               	return		;funcret
  3660  001662                     __end_of_configAD:
  3661                           	opt stack 0
  3662                           tblptru	equ	0xFF8
  3663                           tblptrh	equ	0xFF7
  3664                           tblptrl	equ	0xFF6
  3665                           tablat	equ	0xFF5
  3666                           prodh	equ	0xFF4
  3667                           prodl	equ	0xFF3
  3668                           intcon	equ	0xFF2
  3669                           intcon2	equ	0xFF1
  3670                           postinc0	equ	0xFEE
  3671                           wreg	equ	0xFE8
  3672                           postinc2	equ	0xFDE
  3673                           postdec2	equ	0xFDD
  3674                           fsr2h	equ	0xFDA
  3675                           fsr2l	equ	0xFD9
  3676                           status	equ	0xFD8
  3677                           
  3678 ;; *************** function _InitI2C_Master *****************
  3679 ;; Defined at:
  3680 ;;		line 4 in file "i2c.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;		None
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;		None
  3685 ;; Return value:  Size  Location     Type
  3686 ;;		None               void
  3687 ;; Registers used:
  3688 ;;		wreg, status,2
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3694 ;;      Params:         0       0       0       0       0       0       0       0       0
  3695 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3696 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3697 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3698 ;;Total ram usage:        0 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    3
  3701 ;; This function calls:
  3702 ;;		Nothing
  3703 ;; This function is called by:
  3704 ;;		_main
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           	psect	text22
  3709  0015EE                     __ptext22:
  3710                           	opt stack 0
  3711  0015EE                     _InitI2C_Master:
  3712                           	opt stack 27
  3713                           
  3714                           ;i2c.c: 6: TRISBbits.RB0 = 1;
  3715                           
  3716                           ;incstack = 0
  3717  0015EE  8093               	bsf	3987,0,c	;volatile
  3718                           
  3719                           ;i2c.c: 7: TRISBbits.RB1 = 1;
  3720  0015F0  8293               	bsf	3987,1,c	;volatile
  3721                           
  3722                           ;i2c.c: 9: SSPADD = ( 20000000 / (4*100000) ) - 1;
  3723  0015F2  0E31               	movlw	49
  3724  0015F4  6EC8               	movwf	4040,c	;volatile
  3725                           
  3726                           ;i2c.c: 12: SSPIF = 0;
  3727  0015F6  969E               	bcf	3998,3,c	;volatile
  3728                           
  3729                           ;i2c.c: 15: SSPSTAT = 0;
  3730  0015F8  0E00               	movlw	0
  3731  0015FA  6EC7               	movwf	4039,c	;volatile
  3732                           
  3733                           ;i2c.c: 16: SSPSTATbits.SMP = 1;
  3734  0015FC  8EC7               	bsf	4039,7,c	;volatile
  3735                           
  3736                           ;i2c.c: 17: SSPSTATbits.CKE = 0;
  3737  0015FE  9CC7               	bcf	4039,6,c	;volatile
  3738                           
  3739                           ;i2c.c: 20: SSPCON1 = 0;
  3740  001600  0E00               	movlw	0
  3741  001602  6EC6               	movwf	4038,c	;volatile
  3742                           
  3743                           ;i2c.c: 21: SSPCON1bits.SSPM = 0b1000;
  3744  001604  50C6               	movf	4038,w,c	;volatile
  3745  001606  0BF0               	andlw	-16
  3746  001608  0908               	iorlw	8
  3747  00160A  6EC6               	movwf	4038,c	;volatile
  3748                           
  3749                           ;i2c.c: 22: SSPCON1bits.SSPEN = 1;
  3750  00160C  8AC6               	bsf	4038,5,c	;volatile
  3751  00160E  0012               	return		;funcret
  3752  001610                     __end_of_InitI2C_Master:
  3753                           	opt stack 0
  3754                           tblptru	equ	0xFF8
  3755                           tblptrh	equ	0xFF7
  3756                           tblptrl	equ	0xFF6
  3757                           tablat	equ	0xFF5
  3758                           prodh	equ	0xFF4
  3759                           prodl	equ	0xFF3
  3760                           intcon	equ	0xFF2
  3761                           intcon2	equ	0xFF1
  3762                           postinc0	equ	0xFEE
  3763                           wreg	equ	0xFE8
  3764                           postinc2	equ	0xFDE
  3765                           postdec2	equ	0xFDD
  3766                           fsr2h	equ	0xFDA
  3767                           fsr2l	equ	0xFD9
  3768                           status	equ	0xFD8
  3769                           
  3770 ;; *************** function _interruptions *****************
  3771 ;; Defined at:
  3772 ;;		line 31 in file "main.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;		None
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;		None
  3777 ;; Return value:  Size  Location     Type
  3778 ;;		None               void
  3779 ;; Registers used:
  3780 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3781 ;; Tracked objects:
  3782 ;;		On entry : 0/0
  3783 ;;		On exit  : 0/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3786 ;;      Params:         0       0       0       0       0       0       0       0       0
  3787 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3788 ;;      Temps:         16       0       0       0       0       0       0       0       0
  3789 ;;      Totals:        16       0       0       0       0       0       0       0       0
  3790 ;;Total ram usage:       16 bytes
  3791 ;; Hardware stack levels used:    1
  3792 ;; Hardware stack levels required when called:    2
  3793 ;; This function calls:
  3794 ;;		___awmod
  3795 ;;		_strcpy
  3796 ;;		i2_printf
  3797 ;; This function is called by:
  3798 ;;		Interrupt level 2
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	intcode
  3803  000008                     __pintcode:
  3804                           	opt stack 0
  3805  000008                     _interruptions:
  3806                           	opt stack 26
  3807                           
  3808                           ;incstack = 0
  3809  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3810  00000A  CFFA F01F          	movff	pclath,??_interruptions+2
  3811  00000E  CFFB F020          	movff	pclatu,??_interruptions+3
  3812  000012  ED15  F008         	call	int_func,f	;refresh shadow registers
  3813                           pclatu	equ	0xFFB
  3814                           pclath	equ	0xFFA
  3815                           tblptru	equ	0xFF8
  3816                           tblptrh	equ	0xFF7
  3817                           tblptrl	equ	0xFF6
  3818                           tablat	equ	0xFF5
  3819                           prodh	equ	0xFF4
  3820                           prodl	equ	0xFF3
  3821                           intcon	equ	0xFF2
  3822                           intcon2	equ	0xFF1
  3823                           postinc0	equ	0xFEE
  3824                           wreg	equ	0xFE8
  3825                           postinc2	equ	0xFDE
  3826                           postdec2	equ	0xFDD
  3827                           fsr2h	equ	0xFDA
  3828                           fsr2l	equ	0xFD9
  3829                           status	equ	0xFD8
  3830                           
  3831                           	psect	intcode_body
  3832  00102A                     __pintcode_body:
  3833                           	opt stack 26
  3834  00102A                     int_func:
  3835                           	opt stack 26
  3836  00102A  0006               	pop		; remove dummy address from shadow register refresh
  3837  00102C  CFE9 F021          	movff	fsr0l,??_interruptions+4
  3838  001030  CFEA F022          	movff	fsr0h,??_interruptions+5
  3839  001034  CFE1 F023          	movff	fsr1l,??_interruptions+6
  3840  001038  CFE2 F024          	movff	fsr1h,??_interruptions+7
  3841  00103C  CFD9 F025          	movff	fsr2l,??_interruptions+8
  3842  001040  CFDA F026          	movff	fsr2h,??_interruptions+9
  3843  001044  CFF3 F027          	movff	prodl,??_interruptions+10
  3844  001048  CFF4 F028          	movff	prodh,??_interruptions+11
  3845  00104C  CFF6 F029          	movff	tblptrl,??_interruptions+12
  3846  001050  CFF7 F02A          	movff	tblptrh,??_interruptions+13
  3847  001054  CFF8 F02B          	movff	tblptru,??_interruptions+14
  3848  001058  CFF5 F02C          	movff	tablat,??_interruptions+15
  3849                           
  3850                           ;main.c: 34: if (RCIF){
  3851  00105C  AA9E               	btfss	3998,5,c	;volatile
  3852  00105E  D047               	goto	i2l2233
  3853                           
  3854                           ;main.c: 35: if (FERR || OERR)
  3855  001060  B4AB               	btfsc	4011,2,c	;volatile
  3856  001062  D002               	goto	i2l266
  3857  001064  A2AB               	btfss	4011,1,c	;volatile
  3858  001066  D003               	goto	i2l264
  3859  001068                     i2l266:
  3860                           
  3861                           ;main.c: 36: {
  3862                           ;main.c: 37: CREN = 0;
  3863  001068  98AB               	bcf	4011,4,c	;volatile
  3864                           
  3865                           ;main.c: 38: hasAnError = 1;
  3866  00106A  8048               	bsf	_hasAnError/(0+8),_hasAnError& (0+7),c
  3867                           
  3868                           ;main.c: 39: CREN = 1;
  3869  00106C  88AB               	bsf	4011,4,c	;volatile
  3870  00106E                     i2l264:
  3871                           
  3872                           ;main.c: 40: }
  3873                           ;main.c: 42: receivedData = RCREG;
  3874  00106E  CFAE F049          	movff	4014,_receivedData	;volatile
  3875                           
  3876                           ;main.c: 44: if(receivedData == '\r')
  3877  001072  0E0D               	movlw	13
  3878  001074  1849               	xorwf	_receivedData,w,c
  3879  001076  A4D8               	btfss	status,2,c
  3880  001078  D01D               	goto	i2l2221
  3881                           
  3882                           ;main.c: 45: {
  3883                           ;main.c: 46: string_aux[i] = '\0';
  3884  00107A  502D               	movf	_i,w,c
  3885  00107C  0D01               	mullw	1
  3886  00107E  0E2E               	movlw	low _string_aux
  3887  001080  24F3               	addwf	prodl,w,c
  3888  001082  6ED9               	movwf	fsr2l,c
  3889  001084  0E00               	movlw	high _string_aux
  3890  001086  20F4               	addwfc	prodh,w,c
  3891  001088  6EDA               	movwf	fsr2h,c
  3892  00108A  0E00               	movlw	0
  3893  00108C  6EDF               	movwf	indf2,c
  3894                           
  3895                           ;main.c: 47: strcpy(string,string_aux);
  3896  00108E  0E87               	movlw	low _string
  3897  001090  6E01               	movwf	strcpy@to,c
  3898  001092  0E00               	movlw	high _string
  3899  001094  6E02               	movwf	strcpy@to+1,c
  3900  001096  0E2E               	movlw	low _string_aux
  3901  001098  6E03               	movwf	strcpy@from,c
  3902  00109A  0E00               	movlw	high _string_aux
  3903  00109C  6E04               	movwf	strcpy@from+1,c
  3904  00109E  ECB8  F00A         	call	_strcpy	;wreg free
  3905                           
  3906                           ;main.c: 48: printf("\n\r");
  3907  0010A2  0EBE               	movlw	low (STR_8+4)
  3908  0010A4  6E0D               	movwf	i2printf@f,c
  3909  0010A6  0E08               	movlw	high (STR_8+4)
  3910  0010A8  6E0E               	movwf	i2printf@f+1,c
  3911  0010AA  ECFE  F005         	call	i2_printf	;wreg free
  3912                           
  3913                           ;main.c: 49: i = 0;
  3914  0010AE  0E00               	movlw	0
  3915  0010B0  6E2D               	movwf	_i,c
  3916                           
  3917                           ;main.c: 50: }else
  3918  0010B2  D01D               	goto	i2l2233
  3919  0010B4                     i2l2221:
  3920                           
  3921                           ;main.c: 51: {
  3922                           ;main.c: 52: if(i < 25)
  3923  0010B4  0E19               	movlw	25
  3924  0010B6  602D               	cpfslt	_i,c
  3925  0010B8  D016               	goto	i2l2229
  3926                           
  3927                           ;main.c: 53: {
  3928                           ;main.c: 54: i = i%25;
  3929  0010BA  C02D  F001         	movff	_i,___awmod@dividend
  3930  0010BE  6A02               	clrf	___awmod@dividend+1,c
  3931  0010C0  0E00               	movlw	0
  3932  0010C2  6E04               	movwf	___awmod@divisor+1,c
  3933  0010C4  0E19               	movlw	25
  3934  0010C6  6E03               	movwf	___awmod@divisor,c
  3935  0010C8  EC70  F009         	call	___awmod	;wreg free
  3936  0010CC  5001               	movf	?___awmod,w,c
  3937  0010CE  6E2D               	movwf	_i,c
  3938                           
  3939                           ;main.c: 55: string_aux[i] = receivedData;
  3940  0010D0  502D               	movf	_i,w,c
  3941  0010D2  0D01               	mullw	1
  3942  0010D4  0E2E               	movlw	low _string_aux
  3943  0010D6  24F3               	addwf	prodl,w,c
  3944  0010D8  6ED9               	movwf	fsr2l,c
  3945  0010DA  0E00               	movlw	high _string_aux
  3946  0010DC  20F4               	addwfc	prodh,w,c
  3947  0010DE  6EDA               	movwf	fsr2h,c
  3948  0010E0  C049  FFDF         	movff	_receivedData,indf2
  3949                           
  3950                           ;main.c: 56: i++;
  3951  0010E4  2A2D               	incf	_i,f,c
  3952  0010E6                     i2l2229:
  3953                           
  3954                           ;main.c: 57: }
  3955                           ;main.c: 58: if(i == 25)
  3956  0010E6  0E19               	movlw	25
  3957  0010E8  182D               	xorwf	_i,w,c
  3958  0010EA  B4D8               	btfsc	status,2,c
  3959                           
  3960                           ;main.c: 59: i++;
  3961  0010EC  2A2D               	incf	_i,f,c
  3962  0010EE                     i2l2233:
  3963                           
  3964                           ;main.c: 60: }
  3965                           ;main.c: 61: }
  3966                           ;main.c: 63: if(PIR1bits.ADIF){
  3967  0010EE  AC9E               	btfss	3998,6,c	;volatile
  3968  0010F0  D00D               	goto	i2l2241
  3969                           
  3970                           ;main.c: 64: data_ADC = ((ADRESH<<8) + ADRESL);
  3971  0010F2  50C4               	movf	4036,w,c	;volatile
  3972  0010F4  6E1E               	movwf	(??_interruptions+1)& (0+255),c
  3973  0010F6  6A1D               	clrf	??_interruptions& (0+255),c
  3974  0010F8  50C3               	movf	4035,w,c	;volatile
  3975  0010FA  241D               	addwf	??_interruptions,w,c
  3976  0010FC  0100               	movlb	0	; () banked
  3977  0010FE  6F84               	movwf	_data_ADC& (0+255),b
  3978  001100  0E00               	movlw	0
  3979  001102  201E               	addwfc	??_interruptions+1,w,c
  3980  001104  0100               	movlb	0	; () banked
  3981  001106  6F85               	movwf	(_data_ADC+1)& (0+255),b
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;main.c: 65: ADCON0bits.GODONE = 1;
  3985  001108  82C2               	bsf	4034,1,c	;volatile
  3986                           
  3987                           ; BSR set to: 0
  3988                           ;main.c: 66: PIR1bits.ADIF = 0;
  3989  00110A  9C9E               	bcf	3998,6,c	;volatile
  3990  00110C                     i2l2241:
  3991                           
  3992                           ;main.c: 67: }
  3993                           ;main.c: 69: if(INTCONbits.TMR0IF){
  3994  00110C  A4F2               	btfss	intcon,2,c	;volatile
  3995  00110E  D00B               	goto	i2l273
  3996                           
  3997                           ;main.c: 70: val = ~val;
  3998  001110  B248               	btfsc	_val/(0+8),_val& (0+7),c
  3999  001112  D002               	goto	i2u186_40
  4000  001114  8248               	bsf	_val/(0+8),_val& (0+7),c
  4001  001116  D001               	goto	i2u187_45
  4002  001118                     i2u186_40:
  4003  001118  9248               	bcf	_val/(0+8),_val& (0+7),c
  4004  00111A                     i2u187_45:
  4005                           
  4006                           ;main.c: 71: PORTDbits.RD4 = val;
  4007  00111A  A248               	btfss	_val/(0+8),_val& (0+7),c
  4008  00111C  D002               	bra	i2u188_45
  4009  00111E  8883               	bsf	3971,4,c	;volatile
  4010  001120  D001               	bra	i2u188_47
  4011  001122                     i2u188_45:
  4012  001122  9883               	bcf	3971,4,c	;volatile
  4013  001124                     i2u188_47:
  4014                           
  4015                           ;main.c: 73: INTCONbits.TMR0IF = 0;
  4016  001124  94F2               	bcf	intcon,2,c	;volatile
  4017  001126                     i2l273:
  4018  001126  C02C  FFF5         	movff	??_interruptions+15,tablat
  4019  00112A  C02B  FFF8         	movff	??_interruptions+14,tblptru
  4020  00112E  C02A  FFF7         	movff	??_interruptions+13,tblptrh
  4021  001132  C029  FFF6         	movff	??_interruptions+12,tblptrl
  4022  001136  C028  FFF4         	movff	??_interruptions+11,prodh
  4023  00113A  C027  FFF3         	movff	??_interruptions+10,prodl
  4024  00113E  C026  FFDA         	movff	??_interruptions+9,fsr2h
  4025  001142  C025  FFD9         	movff	??_interruptions+8,fsr2l
  4026  001146  C024  FFE2         	movff	??_interruptions+7,fsr1h
  4027  00114A  C023  FFE1         	movff	??_interruptions+6,fsr1l
  4028  00114E  C022  FFEA         	movff	??_interruptions+5,fsr0h
  4029  001152  C021  FFE9         	movff	??_interruptions+4,fsr0l
  4030  001156  C020  FFFB         	movff	??_interruptions+3,pclatu
  4031  00115A  C01F  FFFA         	movff	??_interruptions+2,pclath
  4032  00115E  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4033  001160  0011               	retfie		f
  4034  001162                     __end_of_interruptions:
  4035                           	opt stack 0
  4036                           pclatu	equ	0xFFB
  4037                           pclath	equ	0xFFA
  4038                           tblptru	equ	0xFF8
  4039                           tblptrh	equ	0xFF7
  4040                           tblptrl	equ	0xFF6
  4041                           tablat	equ	0xFF5
  4042                           prodh	equ	0xFF4
  4043                           prodl	equ	0xFF3
  4044                           intcon	equ	0xFF2
  4045                           intcon2	equ	0xFF1
  4046                           postinc0	equ	0xFEE
  4047                           fsr0h	equ	0xFEA
  4048                           fsr0l	equ	0xFE9
  4049                           wreg	equ	0xFE8
  4050                           fsr1h	equ	0xFE2
  4051                           fsr1l	equ	0xFE1
  4052                           indf2	equ	0xFDF
  4053                           postinc2	equ	0xFDE
  4054                           postdec2	equ	0xFDD
  4055                           fsr2h	equ	0xFDA
  4056                           fsr2l	equ	0xFD9
  4057                           status	equ	0xFD8
  4058                           
  4059 ;; *************** function i2_printf *****************
  4060 ;; Defined at:
  4061 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4062 ;; Parameters:    Size  Location     Type
  4063 ;;  f               2   12[COMRAM] PTR const unsigned char 
  4064 ;;		 -> STR_8(7), STR_7(16), STR_6(28), STR_5(27), 
  4065 ;;		 -> STR_4(25), STR_3(33), STR_2(21), STR_1(3), 
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;  printf          4    0        struct .
  4068 ;;  printf          3    0        PTR const unsigned char 
  4069 ;;  printf          2   25[COMRAM] int 
  4070 ;;  printf          2   23[COMRAM] unsigned int 
  4071 ;;  printf          2   19[COMRAM] PTR void [1]
  4072 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4073 ;;  printf          2    0        unsigned int 
  4074 ;;  printf          1   27[COMRAM] char 
  4075 ;;  printf          1   22[COMRAM] unsigned char 
  4076 ;;  printf          1   21[COMRAM] char 
  4077 ;;  printf          1   18[COMRAM] unsigned char 
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  2   12[COMRAM] int 
  4080 ;; Registers used:
  4081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4087 ;;      Params:         2       0       0       0       0       0       0       0       0
  4088 ;;      Locals:        10       0       0       0       0       0       0       0       0
  4089 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4090 ;;      Totals:        16       0       0       0       0       0       0       0       0
  4091 ;;Total ram usage:       16 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    1
  4094 ;; This function calls:
  4095 ;;		i2___lwdiv
  4096 ;;		i2___lwmod
  4097 ;;		i2___wmul
  4098 ;;		i2_isdigit
  4099 ;;		i2_putch
  4100 ;; This function is called by:
  4101 ;;		_interruptions
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           	psect	text24
  4106  000BFC                     __ptext24:
  4107                           	opt stack 0
  4108  000BFC                     i2_printf:
  4109                           	opt stack 26
  4110                           
  4111                           ;doprnt.c: 466: va_list ap;
  4112                           ;doprnt.c: 499: signed char c;
  4113                           ;doprnt.c: 501: int width;
  4114                           ;doprnt.c: 506: signed char prec;
  4115                           ;doprnt.c: 508: unsigned char flag;
  4116                           ;doprnt.c: 523: union {
  4117                           ;doprnt.c: 524: unsigned long vd;
  4118                           ;doprnt.c: 525: double integ;
  4119                           ;doprnt.c: 526: } tmpval;
  4120                           ;doprnt.c: 528: unsigned int val;
  4121                           ;doprnt.c: 529: unsigned len;
  4122                           ;doprnt.c: 530: const char * cp;
  4123                           ;doprnt.c: 533: *ap = __va_start();
  4124                           
  4125                           ;incstack = 0
  4126  000BFC  0E0F               	movlw	low (?i2_printf+2)
  4127  000BFE  6E14               	movwf	i2printf@ap,c
  4128  000C00  0E00               	movlw	high (?i2_printf+2)
  4129  000C02  6E15               	movwf	i2printf@ap+1,c
  4130                           
  4131                           ;doprnt.c: 536: while(c = *f++) {
  4132  000C04  D141               	goto	i2l2199
  4133  000C06                     i2l2097:
  4134                           
  4135                           ;doprnt.c: 538: if(c != '%')
  4136  000C06  0E25               	movlw	37
  4137  000C08  181C               	xorwf	i2printf@c,w,c
  4138  000C0A  B4D8               	btfsc	status,2,c
  4139  000C0C  D004               	goto	i2l2101
  4140                           
  4141                           ;doprnt.c: 540: {
  4142                           ;doprnt.c: 541: (putch(c) );
  4143  000C0E  501C               	movf	i2printf@c,w,c
  4144  000C10  EC6A  F00B         	call	i2_putch
  4145                           
  4146                           ;doprnt.c: 542: continue;
  4147  000C14  D139               	goto	i2l2199
  4148  000C16                     i2l2101:
  4149                           
  4150                           ;doprnt.c: 543: }
  4151                           ;doprnt.c: 546: width = 0;
  4152  000C16  0E00               	movlw	0
  4153  000C18  6E1B               	movwf	i2printf@width+1,c
  4154  000C1A  0E00               	movlw	0
  4155  000C1C  6E1A               	movwf	i2printf@width,c
  4156                           
  4157                           ;doprnt.c: 548: flag = 0;
  4158  000C1E  0E00               	movlw	0
  4159  000C20  6E17               	movwf	i2printf@flag,c
  4160                           
  4161                           ;doprnt.c: 551: switch(*f) {
  4162                           
  4163                           ;doprnt.c: 550: for(;;) {
  4164  000C22  D003               	goto	i2l2107
  4165  000C24                     i2l2103:
  4166                           
  4167                           ;doprnt.c: 580: flag |= 0x04;
  4168  000C24  8417               	bsf	i2printf@flag,2,c
  4169                           
  4170                           ;doprnt.c: 581: f++;
  4171  000C26  4A0D               	infsnz	i2printf@f,f,c
  4172  000C28  2A0E               	incf	i2printf@f+1,f,c
  4173  000C2A                     i2l2107:
  4174  000C2A  C00D  FFF6         	movff	i2printf@f,tblptrl
  4175  000C2E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4176  000C32                     	if	0	;tblptru may be non-zero
  4177  000C32                     	endif
  4178  000C32                     	if	0	;tblptru may be non-zero
  4179  000C32                     	endif
  4180  000C32  0008               	tblrd		*
  4181  000C34  50F5               	movf	tablat,w,c
  4182                           
  4183                           ; Switch size 1, requested type "space"
  4184                           ; Number of cases is 1, Range of values is 48 to 48
  4185                           ; switch strategies available:
  4186                           ; Name         Instructions Cycles
  4187                           ; simple_byte            4     3 (average)
  4188                           ;	Chosen strategy is simple_byte
  4189  000C36  0A30               	xorlw	48	; case 48
  4190  000C38  B4D8               	btfsc	status,2,c
  4191  000C3A  D7F4               	goto	i2l2103
  4192                           
  4193                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4194                           
  4195                           ;doprnt.c: 586: }
  4196                           
  4197                           ;doprnt.c: 585: break;
  4198  000C3C  C00D  FFF6         	movff	i2printf@f,tblptrl
  4199  000C40  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4200  000C44                     	if	0	;tblptru may be non-zero
  4201  000C44                     	endif
  4202  000C44                     	if	0	;tblptru may be non-zero
  4203  000C44                     	endif
  4204  000C44  0008               	tblrd		*
  4205  000C46  50F5               	movf	tablat,w,c
  4206  000C48  EC08  F00B         	call	i2_isdigit
  4207  000C4C  A0D8               	btfss	status,0,c
  4208  000C4E  D038               	goto	i2l2127
  4209                           
  4210                           ;doprnt.c: 598: width = 0;
  4211  000C50  0E00               	movlw	0
  4212  000C52  6E1B               	movwf	i2printf@width+1,c
  4213  000C54  0E00               	movlw	0
  4214  000C56  6E1A               	movwf	i2printf@width,c
  4215  000C58                     i2l2113:
  4216                           
  4217                           ;doprnt.c: 600: width *= 10;
  4218  000C58  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
  4219  000C5C  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  4220  000C60  0E00               	movlw	0
  4221  000C62  6E04               	movwf	i2___wmul@multiplicand+1,c
  4222  000C64  0E0A               	movlw	10
  4223  000C66  6E03               	movwf	i2___wmul@multiplicand,c
  4224  000C68  ECE4  F00A         	call	i2___wmul	;wreg free
  4225  000C6C  C001  F01A         	movff	?i2___wmul,i2printf@width
  4226  000C70  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
  4227                           
  4228                           ;doprnt.c: 601: width += *f++ - '0';
  4229  000C74  0ED0               	movlw	208
  4230  000C76  6E0F               	movwf	??i2_printf& (0+255),c
  4231  000C78  0EFF               	movlw	255
  4232  000C7A  6E10               	movwf	(??i2_printf+1)& (0+255),c
  4233  000C7C  C00D  FFF6         	movff	i2printf@f,tblptrl
  4234  000C80  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4235  000C84                     	if	0	;tblptru may be non-zero
  4236  000C84                     	endif
  4237  000C84                     	if	0	;tblptru may be non-zero
  4238  000C84                     	endif
  4239  000C84  0008               	tblrd		*
  4240  000C86  50F5               	movf	tablat,w,c
  4241  000C88  6E11               	movwf	(??i2_printf+2)& (0+255),c
  4242  000C8A  6A12               	clrf	(??i2_printf+3)& (0+255),c
  4243  000C8C  500F               	movf	??i2_printf,w,c
  4244  000C8E  2611               	addwf	??i2_printf+2,f,c
  4245  000C90  5010               	movf	??i2_printf+1,w,c
  4246  000C92  2212               	addwfc	??i2_printf+3,f,c
  4247  000C94  5011               	movf	??i2_printf+2,w,c
  4248  000C96  261A               	addwf	i2printf@width,f,c
  4249  000C98  5012               	movf	??i2_printf+3,w,c
  4250  000C9A  221B               	addwfc	i2printf@width+1,f,c
  4251  000C9C  4A0D               	infsnz	i2printf@f,f,c
  4252  000C9E  2A0E               	incf	i2printf@f+1,f,c
  4253                           
  4254                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4255  000CA0  C00D  FFF6         	movff	i2printf@f,tblptrl
  4256  000CA4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4257  000CA8                     	if	0	;tblptru may be non-zero
  4258  000CA8                     	endif
  4259  000CA8                     	if	0	;tblptru may be non-zero
  4260  000CA8                     	endif
  4261  000CA8  0008               	tblrd		*
  4262  000CAA  50F5               	movf	tablat,w,c
  4263  000CAC  EC08  F00B         	call	i2_isdigit
  4264  000CB0  A0D8               	btfss	status,0,c
  4265  000CB2  D006               	goto	i2l2127
  4266  000CB4  D7D1               	goto	i2l2113
  4267  000CB6                     i2l2121:
  4268                           
  4269                           ;doprnt.c: 718: case 'x':
  4270                           ;doprnt.c: 721: flag |= 0x80;
  4271  000CB6  8E17               	bsf	i2printf@flag,7,c
  4272                           
  4273                           ;doprnt.c: 723: break;
  4274  000CB8  D01A               	goto	i2l2129
  4275  000CBA                     i2l2123:
  4276                           
  4277                           ;doprnt.c: 818: flag |= 0xC0;
  4278  000CBA  0EC0               	movlw	192
  4279  000CBC  1217               	iorwf	i2printf@flag,f,c
  4280                           
  4281                           ;doprnt.c: 822: }
  4282                           
  4283                           ;doprnt.c: 819: break;
  4284  000CBE  D017               	goto	i2l2129
  4285  000CC0                     i2l2127:
  4286  000CC0  C00D  FFF6         	movff	i2printf@f,tblptrl
  4287  000CC4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4288  000CC8  4A0D               	infsnz	i2printf@f,f,c
  4289  000CCA  2A0E               	incf	i2printf@f+1,f,c
  4290  000CCC                     	if	0	;tblptru may be non-zero
  4291  000CCC                     	endif
  4292  000CCC                     	if	0	;tblptru may be non-zero
  4293  000CCC                     	endif
  4294  000CCC  0008               	tblrd		*
  4295  000CCE  CFF5 F01C          	movff	tablat,i2printf@c
  4296  000CD2  501C               	movf	i2printf@c,w,c
  4297                           
  4298                           ; Switch size 1, requested type "space"
  4299                           ; Number of cases is 4, Range of values is 0 to 120
  4300                           ; switch strategies available:
  4301                           ; Name         Instructions Cycles
  4302                           ; simple_byte           13     7 (average)
  4303                           ;	Chosen strategy is simple_byte
  4304  000CD4  0A00               	xorlw	0	; case 0
  4305  000CD6  B4D8               	btfsc	status,2,c
  4306  000CD8  0012               	return	
  4307  000CDA  0A58               	xorlw	88	; case 88
  4308  000CDC  B4D8               	btfsc	status,2,c
  4309  000CDE  D7EB               	goto	i2l2121
  4310  000CE0  0A2D               	xorlw	45	; case 117
  4311  000CE2  B4D8               	btfsc	status,2,c
  4312  000CE4  D7EA               	goto	i2l2123
  4313  000CE6  0A0D               	xorlw	13	; case 120
  4314  000CE8  B4D8               	btfsc	status,2,c
  4315  000CEA  D7E5               	goto	i2l2121
  4316  000CEC  D0CD               	goto	i2l2199
  4317  000CEE                     i2l2129:
  4318                           
  4319                           ;doprnt.c: 1273: {
  4320                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4321  000CEE  C014  FFD9         	movff	i2printf@ap,fsr2l
  4322  000CF2  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  4323  000CF6  CFDE F018          	movff	postinc2,i2printf@val
  4324  000CFA  CFDD F019          	movff	postdec2,i2printf@val+1
  4325  000CFE  0E02               	movlw	2
  4326  000D00  2614               	addwf	i2printf@ap,f,c
  4327  000D02  0E00               	movlw	0
  4328  000D04  2215               	addwfc	i2printf@ap+1,f,c
  4329                           
  4330                           ;doprnt.c: 1287: }
  4331                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  4332  000D06  D030               	goto	i2l2163
  4333  000D08                     i2l2133:
  4334                           
  4335                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4336  000D08  0E01               	movlw	1
  4337  000D0A  6E1C               	movwf	i2printf@c,c
  4338  000D0C                     i2l2135:
  4339  000D0C  0E05               	movlw	5
  4340  000D0E  181C               	xorwf	i2printf@c,w,c
  4341  000D10  B4D8               	btfsc	status,2,c
  4342  000D12  D032               	goto	i2l2165
  4343                           
  4344                           ;doprnt.c: 1306: if(val < dpowers[c])
  4345  000D14  501C               	movf	i2printf@c,w,c
  4346  000D16  0D02               	mullw	2
  4347  000D18  0E01               	movlw	low _dpowers
  4348  000D1A  24F3               	addwf	prodl,w,c
  4349  000D1C  6EF6               	movwf	tblptrl,c
  4350  000D1E  0E08               	movlw	high _dpowers
  4351  000D20  20F4               	addwfc	prodh,w,c
  4352  000D22  6EF7               	movwf	tblptrh,c
  4353  000D24                     	if	0	;There are less than 3 active tblptr bytes
  4354  000D24                     	endif
  4355  000D24  0009               	tblrd		*+
  4356  000D26  50F5               	movf	tablat,w,c
  4357  000D28  5C18               	subwf	i2printf@val,w,c
  4358  000D2A  0009               	tblrd		*+
  4359  000D2C  50F5               	movf	tablat,w,c
  4360  000D2E  5819               	subwfb	i2printf@val+1,w,c
  4361  000D30  A0D8               	btfss	status,0,c
  4362  000D32  D022               	goto	i2l2165
  4363                           
  4364                           ;doprnt.c: 1307: break;
  4365  000D34  2A1C               	incf	i2printf@c,f,c
  4366  000D36  D7EA               	goto	i2l2135
  4367  000D38                     i2l2147:
  4368                           
  4369                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4370  000D38  0E01               	movlw	1
  4371  000D3A  6E1C               	movwf	i2printf@c,c
  4372  000D3C                     i2l2149:
  4373  000D3C  0E04               	movlw	4
  4374  000D3E  181C               	xorwf	i2printf@c,w,c
  4375  000D40  B4D8               	btfsc	status,2,c
  4376  000D42  D01A               	goto	i2l2165
  4377                           
  4378                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4379  000D44  501C               	movf	i2printf@c,w,c
  4380  000D46  0D02               	mullw	2
  4381  000D48  0E0B               	movlw	low _hexpowers
  4382  000D4A  24F3               	addwf	prodl,w,c
  4383  000D4C  6EF6               	movwf	tblptrl,c
  4384  000D4E  0E08               	movlw	high _hexpowers
  4385  000D50  20F4               	addwfc	prodh,w,c
  4386  000D52  6EF7               	movwf	tblptrh,c
  4387  000D54                     	if	0	;There are less than 3 active tblptr bytes
  4388  000D54                     	endif
  4389  000D54  0009               	tblrd		*+
  4390  000D56  50F5               	movf	tablat,w,c
  4391  000D58  5C18               	subwf	i2printf@val,w,c
  4392  000D5A  0009               	tblrd		*+
  4393  000D5C  50F5               	movf	tablat,w,c
  4394  000D5E  5819               	subwfb	i2printf@val+1,w,c
  4395  000D60  A0D8               	btfss	status,0,c
  4396  000D62  D00A               	goto	i2l2165
  4397                           
  4398                           ;doprnt.c: 1318: break;
  4399  000D64  2A1C               	incf	i2printf@c,f,c
  4400  000D66  D7EA               	goto	i2l2149
  4401  000D68                     i2l2163:
  4402  000D68  5017               	movf	i2printf@flag,w,c
  4403  000D6A  0BC0               	andlw	192
  4404                           
  4405                           ; Switch size 1, requested type "space"
  4406                           ; Number of cases is 2, Range of values is 128 to 192
  4407                           ; switch strategies available:
  4408                           ; Name         Instructions Cycles
  4409                           ; simple_byte            7     4 (average)
  4410                           ;	Chosen strategy is simple_byte
  4411  000D6C  0A80               	xorlw	128	; case 128
  4412  000D6E  B4D8               	btfsc	status,2,c
  4413  000D70  D7E3               	goto	i2l2147
  4414  000D72  0A40               	xorlw	64	; case 192
  4415  000D74  B4D8               	btfsc	status,2,c
  4416  000D76  D7C8               	goto	i2l2133
  4417  000D78                     i2l2165:
  4418                           
  4419                           ;doprnt.c: 1381: if(width > c)
  4420  000D78  0E80               	movlw	128
  4421  000D7A  BE1C               	btfsc	i2printf@c,7,c
  4422  000D7C  0E7F               	movlw	127
  4423  000D7E  6E0F               	movwf	??i2_printf& (0+255),c
  4424  000D80  501A               	movf	i2printf@width,w,c
  4425  000D82  5C1C               	subwf	i2printf@c,w,c
  4426  000D84  501B               	movf	i2printf@width+1,w,c
  4427  000D86  0A80               	xorlw	128
  4428  000D88  580F               	subwfb	??i2_printf& (0+255),w,c
  4429  000D8A  B0D8               	btfsc	status,0,c
  4430  000D8C  D007               	goto	i2l2169
  4431                           
  4432                           ;doprnt.c: 1382: width -= c;
  4433  000D8E  501C               	movf	i2printf@c,w,c
  4434  000D90  5E1A               	subwf	i2printf@width,f,c
  4435  000D92  0E00               	movlw	0
  4436  000D94  BE1C               	btfsc	i2printf@c,7,c
  4437  000D96  0EFF               	movlw	255
  4438  000D98  5A1B               	subwfb	i2printf@width+1,f,c
  4439  000D9A  D004               	goto	i2l2171
  4440  000D9C                     i2l2169:
  4441                           
  4442                           ;doprnt.c: 1383: else
  4443                           ;doprnt.c: 1384: width = 0;
  4444  000D9C  0E00               	movlw	0
  4445  000D9E  6E1B               	movwf	i2printf@width+1,c
  4446  000DA0  0E00               	movlw	0
  4447  000DA2  6E1A               	movwf	i2printf@width,c
  4448  000DA4                     i2l2171:
  4449                           
  4450                           ;doprnt.c: 1387: if(flag & 0x04) {
  4451  000DA4  A417               	btfss	i2printf@flag,2,c
  4452  000DA6  D00B               	goto	i2l2179
  4453  000DA8                     
  4454                           ;doprnt.c: 1415: if(width)
  4455  000DA8  501A               	movf	i2printf@width,w,c
  4456  000DAA  101B               	iorwf	i2printf@width+1,w,c
  4457  000DAC  B4D8               	btfsc	status,2,c
  4458  000DAE  D015               	goto	i2l340
  4459                           
  4460                           ;doprnt.c: 1417: (putch('0') );
  4461                           
  4462                           ;doprnt.c: 1416: do
  4463  000DB0  0E30               	movlw	48
  4464  000DB2  EC6A  F00B         	call	i2_putch
  4465                           
  4466                           ;doprnt.c: 1418: while(--width);
  4467  000DB6  061A               	decf	i2printf@width,f,c
  4468  000DB8  A0D8               	btfss	status,0,c
  4469  000DBA  061B               	decf	i2printf@width+1,f,c
  4470  000DBC  D7F5               	goto	L2
  4471  000DBE                     i2l2179:
  4472                           
  4473                           ;doprnt.c: 1422: {
  4474                           ;doprnt.c: 1424: if(width
  4475                           ;doprnt.c: 1428: )
  4476  000DBE  501A               	movf	i2printf@width,w,c
  4477  000DC0  101B               	iorwf	i2printf@width+1,w,c
  4478  000DC2  B4D8               	btfsc	status,2,c
  4479  000DC4  D00A               	goto	i2l340
  4480  000DC6                     i2l2181:
  4481                           
  4482                           ;doprnt.c: 1430: (putch(' ') );
  4483  000DC6  0E20               	movlw	32
  4484  000DC8  EC6A  F00B         	call	i2_putch
  4485                           
  4486                           ;doprnt.c: 1431: while(--width);
  4487  000DCC  061A               	decf	i2printf@width,f,c
  4488  000DCE  A0D8               	btfss	status,0,c
  4489  000DD0  061B               	decf	i2printf@width+1,f,c
  4490  000DD2  501A               	movf	i2printf@width,w,c
  4491  000DD4  101B               	iorwf	i2printf@width+1,w,c
  4492  000DD6  A4D8               	btfss	status,2,c
  4493  000DD8  D7F6               	goto	i2l2181
  4494  000DDA                     i2l340:
  4495                           
  4496                           ;doprnt.c: 1469: }
  4497                           ;doprnt.c: 1472: prec = c;
  4498  000DDA  C01C  F016         	movff	i2printf@c,i2printf@prec
  4499                           
  4500                           ;doprnt.c: 1474: while(prec--) {
  4501  000DDE  D050               	goto	i2l2197
  4502  000DE0                     i2l2185:
  4503                           
  4504                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4505  000DE0  5016               	movf	i2printf@prec,w,c
  4506  000DE2  0D02               	mullw	2
  4507  000DE4  0E01               	movlw	low _dpowers
  4508  000DE6  24F3               	addwf	prodl,w,c
  4509  000DE8  6EF6               	movwf	tblptrl,c
  4510  000DEA  0E08               	movlw	high _dpowers
  4511  000DEC  20F4               	addwfc	prodh,w,c
  4512  000DEE  6EF7               	movwf	tblptrh,c
  4513  000DF0                     	if	0	;There are less than 3 active tblptr bytes
  4514  000DF0                     	endif
  4515  000DF0  0009               	tblrd		*+
  4516  000DF2  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4517  000DF6  000A               	tblrd		*-
  4518  000DF8  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4519  000DFC  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4520  000E00  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4521  000E04  EC0F  F00A         	call	i2___lwdiv	;wreg free
  4522  000E08  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  4523  000E0C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  4524  000E10  0E00               	movlw	0
  4525  000E12  6E0B               	movwf	i2___lwmod@divisor+1,c
  4526  000E14  0E0A               	movlw	10
  4527  000E16  6E0A               	movwf	i2___lwmod@divisor,c
  4528  000E18  EC5F  F00A         	call	i2___lwmod	;wreg free
  4529  000E1C  5008               	movf	?i2___lwmod,w,c
  4530  000E1E  0F30               	addlw	48
  4531  000E20  6E1C               	movwf	i2printf@c,c
  4532                           
  4533                           ;doprnt.c: 1491: break;
  4534  000E22  D02B               	goto	i2l2195
  4535  000E24                     i2l2187:
  4536                           
  4537                           ;doprnt.c: 1499: {
  4538                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4539  000E24  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4540  000E28  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4541  000E2C  5016               	movf	i2printf@prec,w,c
  4542  000E2E  0D02               	mullw	2
  4543  000E30  0E0B               	movlw	low _hexpowers
  4544  000E32  24F3               	addwf	prodl,w,c
  4545  000E34  6EF6               	movwf	tblptrl,c
  4546  000E36  0E08               	movlw	high _hexpowers
  4547  000E38  20F4               	addwfc	prodh,w,c
  4548  000E3A  6EF7               	movwf	tblptrh,c
  4549  000E3C                     	if	0	;There are less than 3 active tblptr bytes
  4550  000E3C                     	endif
  4551  000E3C  0009               	tblrd		*+
  4552  000E3E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4553  000E42  000A               	tblrd		*-
  4554  000E44  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4555  000E48  EC0F  F00A         	call	i2___lwdiv	;wreg free
  4556  000E4C  5001               	movf	?i2___lwdiv,w,c
  4557  000E4E  0B0F               	andlw	15
  4558  000E50  6E13               	movwf	i2printf@idx,c
  4559                           
  4560                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  4561  000E52  5013               	movf	i2printf@idx,w,c
  4562  000E54  0D01               	mullw	1
  4563  000E56  0E99               	movlw	low STR_9
  4564  000E58  24F3               	addwf	prodl,w,c
  4565  000E5A  6EF6               	movwf	tblptrl,c
  4566  000E5C  0E08               	movlw	high STR_9
  4567  000E5E  20F4               	addwfc	prodh,w,c
  4568  000E60  6EF7               	movwf	tblptrh,c
  4569  000E62                     	if	0	;There are less than 3 active tblptr bytes
  4570  000E62                     	endif
  4571  000E62  0008               	tblrd		*
  4572  000E64  CFF5 F01C          	movff	tablat,i2printf@c
  4573                           
  4574                           ;doprnt.c: 1523: }
  4575                           
  4576                           ;doprnt.c: 1508: }
  4577                           ;doprnt.c: 1510: break;
  4578  000E68  D008               	goto	i2l2195
  4579  000E6A                     i2l2193:
  4580  000E6A  5017               	movf	i2printf@flag,w,c
  4581  000E6C  0BC0               	andlw	192
  4582                           
  4583                           ; Switch size 1, requested type "space"
  4584                           ; Number of cases is 2, Range of values is 128 to 192
  4585                           ; switch strategies available:
  4586                           ; Name         Instructions Cycles
  4587                           ; simple_byte            7     4 (average)
  4588                           ;	Chosen strategy is simple_byte
  4589  000E6E  0A80               	xorlw	128	; case 128
  4590  000E70  B4D8               	btfsc	status,2,c
  4591  000E72  D7D8               	goto	i2l2187
  4592  000E74  0A40               	xorlw	64	; case 192
  4593  000E76  B4D8               	btfsc	status,2,c
  4594  000E78  D7B3               	goto	i2l2185
  4595  000E7A                     i2l2195:
  4596                           
  4597                           ;doprnt.c: 1524: (putch(c) );
  4598  000E7A  501C               	movf	i2printf@c,w,c
  4599  000E7C  EC6A  F00B         	call	i2_putch
  4600  000E80                     i2l2197:
  4601  000E80  0616               	decf	i2printf@prec,f,c
  4602  000E82  2816               	incf	i2printf@prec,w,c
  4603  000E84  A4D8               	btfss	status,2,c
  4604  000E86  D7F1               	goto	i2l2193
  4605  000E88                     i2l2199:
  4606  000E88  C00D  FFF6         	movff	i2printf@f,tblptrl
  4607  000E8C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4608  000E90  4A0D               	infsnz	i2printf@f,f,c
  4609  000E92  2A0E               	incf	i2printf@f+1,f,c
  4610  000E94                     	if	0	;tblptru may be non-zero
  4611  000E94                     	endif
  4612  000E94                     	if	0	;tblptru may be non-zero
  4613  000E94                     	endif
  4614  000E94  0008               	tblrd		*
  4615  000E96  CFF5 F01C          	movff	tablat,i2printf@c
  4616  000E9A  501C               	movf	i2printf@c,w,c
  4617  000E9C  B4D8               	btfsc	status,2,c
  4618  000E9E  0012               	return	
  4619  000EA0  D6B2               	goto	i2l2097
  4620  000EA2                     __end_ofi2_printf:
  4621                           	opt stack 0
  4622                           pclatu	equ	0xFFB
  4623                           pclath	equ	0xFFA
  4624                           tblptru	equ	0xFF8
  4625                           tblptrh	equ	0xFF7
  4626                           tblptrl	equ	0xFF6
  4627                           tablat	equ	0xFF5
  4628                           prodh	equ	0xFF4
  4629                           prodl	equ	0xFF3
  4630                           intcon	equ	0xFF2
  4631                           intcon2	equ	0xFF1
  4632                           postinc0	equ	0xFEE
  4633                           fsr0h	equ	0xFEA
  4634                           fsr0l	equ	0xFE9
  4635                           wreg	equ	0xFE8
  4636                           fsr1h	equ	0xFE2
  4637                           fsr1l	equ	0xFE1
  4638                           indf2	equ	0xFDF
  4639                           postinc2	equ	0xFDE
  4640                           postdec2	equ	0xFDD
  4641                           fsr2h	equ	0xFDA
  4642                           fsr2l	equ	0xFD9
  4643                           status	equ	0xFD8
  4644                           
  4645 ;; *************** function i2_putch *****************
  4646 ;; Defined at:
  4647 ;;		line 46 in file "usart.c"
  4648 ;; Parameters:    Size  Location     Type
  4649 ;;  byte            1    wreg     unsigned char 
  4650 ;; Auto vars:     Size  Location     Type
  4651 ;;  byte            1    0[COMRAM] unsigned char 
  4652 ;; Return value:  Size  Location     Type
  4653 ;;		None               void
  4654 ;; Registers used:
  4655 ;;		wreg
  4656 ;; Tracked objects:
  4657 ;;		On entry : 0/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4661 ;;      Params:         0       0       0       0       0       0       0       0       0
  4662 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4663 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4664 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4665 ;;Total ram usage:        1 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; This function calls:
  4668 ;;		Nothing
  4669 ;; This function is called by:
  4670 ;;		i2_printf
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           	psect	text25
  4675  0016D4                     __ptext25:
  4676                           	opt stack 0
  4677  0016D4                     i2_putch:
  4678                           	opt stack 26
  4679                           
  4680                           ;incstack = 0
  4681                           ;i2putch@byte stored from wreg
  4682  0016D4  6E01               	movwf	i2putch@byte,c
  4683  0016D6                     i2l119:
  4684  0016D6  A89E               	btfss	3998,4,c	;volatile
  4685  0016D8  D7FE               	goto	i2l119
  4686                           
  4687                           ;usart.c: 50: TXREG = byte;
  4688  0016DA  C001  FFAD         	movff	i2putch@byte,4013	;volatile
  4689  0016DE  0012               	return		;funcret
  4690  0016E0                     __end_ofi2_putch:
  4691                           	opt stack 0
  4692                           pclatu	equ	0xFFB
  4693                           pclath	equ	0xFFA
  4694                           tblptru	equ	0xFF8
  4695                           tblptrh	equ	0xFF7
  4696                           tblptrl	equ	0xFF6
  4697                           tablat	equ	0xFF5
  4698                           prodh	equ	0xFF4
  4699                           prodl	equ	0xFF3
  4700                           intcon	equ	0xFF2
  4701                           intcon2	equ	0xFF1
  4702                           postinc0	equ	0xFEE
  4703                           fsr0h	equ	0xFEA
  4704                           fsr0l	equ	0xFE9
  4705                           wreg	equ	0xFE8
  4706                           fsr1h	equ	0xFE2
  4707                           fsr1l	equ	0xFE1
  4708                           indf2	equ	0xFDF
  4709                           postinc2	equ	0xFDE
  4710                           postdec2	equ	0xFDD
  4711                           fsr2h	equ	0xFDA
  4712                           fsr2l	equ	0xFD9
  4713                           status	equ	0xFD8
  4714                           
  4715 ;; *************** function i2_isdigit *****************
  4716 ;; Defined at:
  4717 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4718 ;; Parameters:    Size  Location     Type
  4719 ;;  c               1    wreg     unsigned char 
  4720 ;; Auto vars:     Size  Location     Type
  4721 ;;  c               1    2[COMRAM] unsigned char 
  4722 ;; Return value:  Size  Location     Type
  4723 ;;		None               void
  4724 ;; Registers used:
  4725 ;;		wreg, status,2, status,0
  4726 ;; Tracked objects:
  4727 ;;		On entry : 0/0
  4728 ;;		On exit  : 0/0
  4729 ;;		Unchanged: 0/0
  4730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4731 ;;      Params:         0       0       0       0       0       0       0       0       0
  4732 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4733 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4734 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4735 ;;Total ram usage:        3 bytes
  4736 ;; Hardware stack levels used:    1
  4737 ;; This function calls:
  4738 ;;		Nothing
  4739 ;; This function is called by:
  4740 ;;		i2_printf
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           	psect	text26
  4745  001610                     __ptext26:
  4746                           	opt stack 0
  4747  001610                     i2_isdigit:
  4748                           	opt stack 26
  4749                           
  4750                           ;incstack = 0
  4751                           ;i2isdigit@c stored from wreg
  4752  001610  6E03               	movwf	i2isdigit@c,c
  4753  001612  0E00               	movlw	0
  4754  001614  6E02               	movwf	i2_isdigit$1318,c
  4755  001616  0E3A               	movlw	58
  4756  001618  6003               	cpfslt	i2isdigit@c,c
  4757  00161A  D005               	goto	i2l1755
  4758  00161C  0E2F               	movlw	47
  4759  00161E  6403               	cpfsgt	i2isdigit@c,c
  4760  001620  D002               	goto	i2l1755
  4761  001622  0E01               	movlw	1
  4762  001624  6E02               	movwf	i2_isdigit$1318,c
  4763  001626                     i2l1755:
  4764  001626  C002  F001         	movff	i2_isdigit$1318,??i2_isdigit
  4765  00162A  3001               	rrcf	??i2_isdigit,w,c
  4766  00162C  0012               	return	
  4767  00162E                     __end_ofi2_isdigit:
  4768                           	opt stack 0
  4769                           pclatu	equ	0xFFB
  4770                           pclath	equ	0xFFA
  4771                           tblptru	equ	0xFF8
  4772                           tblptrh	equ	0xFF7
  4773                           tblptrl	equ	0xFF6
  4774                           tablat	equ	0xFF5
  4775                           prodh	equ	0xFF4
  4776                           prodl	equ	0xFF3
  4777                           intcon	equ	0xFF2
  4778                           intcon2	equ	0xFF1
  4779                           postinc0	equ	0xFEE
  4780                           fsr0h	equ	0xFEA
  4781                           fsr0l	equ	0xFE9
  4782                           wreg	equ	0xFE8
  4783                           fsr1h	equ	0xFE2
  4784                           fsr1l	equ	0xFE1
  4785                           indf2	equ	0xFDF
  4786                           postinc2	equ	0xFDE
  4787                           postdec2	equ	0xFDD
  4788                           fsr2h	equ	0xFDA
  4789                           fsr2l	equ	0xFD9
  4790                           status	equ	0xFD8
  4791                           
  4792 ;; *************** function i2___wmul *****************
  4793 ;; Defined at:
  4794 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4795 ;; Parameters:    Size  Location     Type
  4796 ;;  multiplier      2    0[COMRAM] unsigned int 
  4797 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;  __wmul          2    4[COMRAM] unsigned int 
  4800 ;; Return value:  Size  Location     Type
  4801 ;;                  2    0[COMRAM] unsigned int 
  4802 ;; Registers used:
  4803 ;;		wreg, status,2, status,0, prodl, prodh
  4804 ;; Tracked objects:
  4805 ;;		On entry : 0/0
  4806 ;;		On exit  : 0/0
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4809 ;;      Params:         4       0       0       0       0       0       0       0       0
  4810 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4811 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4812 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4813 ;;Total ram usage:        6 bytes
  4814 ;; Hardware stack levels used:    1
  4815 ;; This function calls:
  4816 ;;		Nothing
  4817 ;; This function is called by:
  4818 ;;		i2_printf
  4819 ;; This function uses a non-reentrant model
  4820 ;;
  4821                           
  4822                           	psect	text27
  4823  0015C8                     __ptext27:
  4824                           	opt stack 0
  4825  0015C8                     i2___wmul:
  4826                           	opt stack 26
  4827                           
  4828                           ;incstack = 0
  4829  0015C8  5001               	movf	i2___wmul@multiplier,w,c
  4830  0015CA  0203               	mulwf	i2___wmul@multiplicand,c
  4831  0015CC  CFF3 F005          	movff	prodl,i2___wmul@product
  4832  0015D0  CFF4 F006          	movff	prodh,i2___wmul@product+1
  4833  0015D4  5001               	movf	i2___wmul@multiplier,w,c
  4834  0015D6  0204               	mulwf	i2___wmul@multiplicand+1,c
  4835  0015D8  50F3               	movf	prodl,w,c
  4836  0015DA  2606               	addwf	i2___wmul@product+1,f,c
  4837  0015DC  5002               	movf	i2___wmul@multiplier+1,w,c
  4838  0015DE  0203               	mulwf	i2___wmul@multiplicand,c
  4839  0015E0  50F3               	movf	prodl,w,c
  4840  0015E2  2606               	addwf	i2___wmul@product+1,f,c
  4841  0015E4  C005  F001         	movff	i2___wmul@product,?i2___wmul
  4842  0015E8  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  4843  0015EC  0012               	return	
  4844  0015EE                     __end_ofi2___wmul:
  4845                           	opt stack 0
  4846                           pclatu	equ	0xFFB
  4847                           pclath	equ	0xFFA
  4848                           tblptru	equ	0xFF8
  4849                           tblptrh	equ	0xFF7
  4850                           tblptrl	equ	0xFF6
  4851                           tablat	equ	0xFF5
  4852                           prodh	equ	0xFF4
  4853                           prodl	equ	0xFF3
  4854                           intcon	equ	0xFF2
  4855                           intcon2	equ	0xFF1
  4856                           postinc0	equ	0xFEE
  4857                           fsr0h	equ	0xFEA
  4858                           fsr0l	equ	0xFE9
  4859                           wreg	equ	0xFE8
  4860                           fsr1h	equ	0xFE2
  4861                           fsr1l	equ	0xFE1
  4862                           indf2	equ	0xFDF
  4863                           postinc2	equ	0xFDE
  4864                           postdec2	equ	0xFDD
  4865                           fsr2h	equ	0xFDA
  4866                           fsr2l	equ	0xFD9
  4867                           status	equ	0xFD8
  4868                           
  4869 ;; *************** function i2___lwmod *****************
  4870 ;; Defined at:
  4871 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;  dividend        2    7[COMRAM] unsigned int 
  4874 ;;  divisor         2    9[COMRAM] unsigned int 
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;  __lwmod         1   11[COMRAM] unsigned char 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  2    7[COMRAM] unsigned int 
  4879 ;; Registers used:
  4880 ;;		wreg, status,2, status,0
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4886 ;;      Params:         4       0       0       0       0       0       0       0       0
  4887 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4888 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4889 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4890 ;;Total ram usage:        5 bytes
  4891 ;; Hardware stack levels used:    1
  4892 ;; This function calls:
  4893 ;;		Nothing
  4894 ;; This function is called by:
  4895 ;;		i2_printf
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           	psect	text28
  4900  0014BE                     __ptext28:
  4901                           	opt stack 0
  4902  0014BE                     i2___lwmod:
  4903                           	opt stack 26
  4904                           
  4905                           ;incstack = 0
  4906  0014BE  500A               	movf	i2___lwmod@divisor,w,c
  4907  0014C0  100B               	iorwf	i2___lwmod@divisor+1,w,c
  4908  0014C2  B4D8               	btfsc	status,2,c
  4909  0014C4  D018               	goto	i2l770
  4910  0014C6  0E01               	movlw	1
  4911  0014C8  6E0C               	movwf	i2___lwmod@counter,c
  4912  0014CA  D004               	goto	i2l1787
  4913  0014CC                     i2l1785:
  4914  0014CC  90D8               	bcf	status,0,c
  4915  0014CE  360A               	rlcf	i2___lwmod@divisor,f,c
  4916  0014D0  360B               	rlcf	i2___lwmod@divisor+1,f,c
  4917  0014D2  2A0C               	incf	i2___lwmod@counter,f,c
  4918  0014D4                     i2l1787:
  4919  0014D4  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  4920  0014D6  D7FA               	goto	i2l1785
  4921  0014D8                     i2l1789:
  4922  0014D8  500A               	movf	i2___lwmod@divisor,w,c
  4923  0014DA  5C08               	subwf	i2___lwmod@dividend,w,c
  4924  0014DC  500B               	movf	i2___lwmod@divisor+1,w,c
  4925  0014DE  5809               	subwfb	i2___lwmod@dividend+1,w,c
  4926  0014E0  A0D8               	btfss	status,0,c
  4927  0014E2  D004               	goto	i2l1793
  4928  0014E4  500A               	movf	i2___lwmod@divisor,w,c
  4929  0014E6  5E08               	subwf	i2___lwmod@dividend,f,c
  4930  0014E8  500B               	movf	i2___lwmod@divisor+1,w,c
  4931  0014EA  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  4932  0014EC                     i2l1793:
  4933  0014EC  90D8               	bcf	status,0,c
  4934  0014EE  320B               	rrcf	i2___lwmod@divisor+1,f,c
  4935  0014F0  320A               	rrcf	i2___lwmod@divisor,f,c
  4936  0014F2  2E0C               	decfsz	i2___lwmod@counter,f,c
  4937  0014F4  D7F1               	goto	i2l1789
  4938  0014F6                     i2l770:
  4939  0014F6  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  4940  0014FA  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  4941  0014FE  0012               	return		;funcret
  4942  001500                     __end_ofi2___lwmod:
  4943                           	opt stack 0
  4944                           pclatu	equ	0xFFB
  4945                           pclath	equ	0xFFA
  4946                           tblptru	equ	0xFF8
  4947                           tblptrh	equ	0xFF7
  4948                           tblptrl	equ	0xFF6
  4949                           tablat	equ	0xFF5
  4950                           prodh	equ	0xFF4
  4951                           prodl	equ	0xFF3
  4952                           intcon	equ	0xFF2
  4953                           intcon2	equ	0xFF1
  4954                           postinc0	equ	0xFEE
  4955                           fsr0h	equ	0xFEA
  4956                           fsr0l	equ	0xFE9
  4957                           wreg	equ	0xFE8
  4958                           fsr1h	equ	0xFE2
  4959                           fsr1l	equ	0xFE1
  4960                           indf2	equ	0xFDF
  4961                           postinc2	equ	0xFDE
  4962                           postdec2	equ	0xFDD
  4963                           fsr2h	equ	0xFDA
  4964                           fsr2l	equ	0xFD9
  4965                           status	equ	0xFD8
  4966                           
  4967 ;; *************** function i2___lwdiv *****************
  4968 ;; Defined at:
  4969 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;  dividend        2    0[COMRAM] unsigned int 
  4972 ;;  divisor         2    2[COMRAM] unsigned int 
  4973 ;; Auto vars:     Size  Location     Type
  4974 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  4975 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  4976 ;; Return value:  Size  Location     Type
  4977 ;;                  2    0[COMRAM] unsigned int 
  4978 ;; Registers used:
  4979 ;;		wreg, status,2, status,0
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/0
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4985 ;;      Params:         4       0       0       0       0       0       0       0       0
  4986 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4987 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4988 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4989 ;;Total ram usage:        7 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; This function calls:
  4992 ;;		Nothing
  4993 ;; This function is called by:
  4994 ;;		i2_printf
  4995 ;; This function uses a non-reentrant model
  4996 ;;
  4997                           
  4998                           	psect	text29
  4999  00141E                     __ptext29:
  5000                           	opt stack 0
  5001  00141E                     i2___lwdiv:
  5002                           	opt stack 26
  5003                           
  5004                           ;incstack = 0
  5005  00141E  0E00               	movlw	0
  5006  001420  6E06               	movwf	i2___lwdiv@quotient+1,c
  5007  001422  0E00               	movlw	0
  5008  001424  6E05               	movwf	i2___lwdiv@quotient,c
  5009  001426  5003               	movf	i2___lwdiv@divisor,w,c
  5010  001428  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  5011  00142A  B4D8               	btfsc	status,2,c
  5012  00142C  D01C               	goto	i2l760
  5013  00142E  0E01               	movlw	1
  5014  001430  6E07               	movwf	i2___lwdiv@counter,c
  5015  001432  D004               	goto	i2l1767
  5016  001434                     i2l1765:
  5017  001434  90D8               	bcf	status,0,c
  5018  001436  3603               	rlcf	i2___lwdiv@divisor,f,c
  5019  001438  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  5020  00143A  2A07               	incf	i2___lwdiv@counter,f,c
  5021  00143C                     i2l1767:
  5022  00143C  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  5023  00143E  D7FA               	goto	i2l1765
  5024  001440                     i2l1769:
  5025  001440  90D8               	bcf	status,0,c
  5026  001442  3605               	rlcf	i2___lwdiv@quotient,f,c
  5027  001444  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  5028  001446  5003               	movf	i2___lwdiv@divisor,w,c
  5029  001448  5C01               	subwf	i2___lwdiv@dividend,w,c
  5030  00144A  5004               	movf	i2___lwdiv@divisor+1,w,c
  5031  00144C  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  5032  00144E  A0D8               	btfss	status,0,c
  5033  001450  D005               	goto	i2l1777
  5034  001452  5003               	movf	i2___lwdiv@divisor,w,c
  5035  001454  5E01               	subwf	i2___lwdiv@dividend,f,c
  5036  001456  5004               	movf	i2___lwdiv@divisor+1,w,c
  5037  001458  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  5038  00145A  8005               	bsf	i2___lwdiv@quotient,0,c
  5039  00145C                     i2l1777:
  5040  00145C  90D8               	bcf	status,0,c
  5041  00145E  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  5042  001460  3203               	rrcf	i2___lwdiv@divisor,f,c
  5043  001462  2E07               	decfsz	i2___lwdiv@counter,f,c
  5044  001464  D7ED               	goto	i2l1769
  5045  001466                     i2l760:
  5046  001466  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  5047  00146A  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  5048  00146E  0012               	return		;funcret
  5049  001470                     __end_ofi2___lwdiv:
  5050                           	opt stack 0
  5051                           pclatu	equ	0xFFB
  5052                           pclath	equ	0xFFA
  5053                           tblptru	equ	0xFF8
  5054                           tblptrh	equ	0xFF7
  5055                           tblptrl	equ	0xFF6
  5056                           tablat	equ	0xFF5
  5057                           prodh	equ	0xFF4
  5058                           prodl	equ	0xFF3
  5059                           intcon	equ	0xFF2
  5060                           intcon2	equ	0xFF1
  5061                           postinc0	equ	0xFEE
  5062                           fsr0h	equ	0xFEA
  5063                           fsr0l	equ	0xFE9
  5064                           wreg	equ	0xFE8
  5065                           fsr1h	equ	0xFE2
  5066                           fsr1l	equ	0xFE1
  5067                           indf2	equ	0xFDF
  5068                           postinc2	equ	0xFDE
  5069                           postdec2	equ	0xFDD
  5070                           fsr2h	equ	0xFDA
  5071                           fsr2l	equ	0xFD9
  5072                           status	equ	0xFD8
  5073                           
  5074 ;; *************** function _strcpy *****************
  5075 ;; Defined at:
  5076 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strcpy.c"
  5077 ;; Parameters:    Size  Location     Type
  5078 ;;  to              2    0[COMRAM] PTR unsigned char 
  5079 ;;		 -> string(26), 
  5080 ;;  from            2    2[COMRAM] PTR const unsigned char 
  5081 ;;		 -> string_aux(26), 
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;  cp              2    4[COMRAM] PTR unsigned char 
  5084 ;;		 -> string(26), 
  5085 ;; Return value:  Size  Location     Type
  5086 ;;                  2    0[COMRAM] PTR unsigned char 
  5087 ;; Registers used:
  5088 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5094 ;;      Params:         4       0       0       0       0       0       0       0       0
  5095 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5096 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5097 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5098 ;;Total ram usage:        6 bytes
  5099 ;; Hardware stack levels used:    1
  5100 ;; This function calls:
  5101 ;;		Nothing
  5102 ;; This function is called by:
  5103 ;;		_interruptions
  5104 ;; This function uses a non-reentrant model
  5105 ;;
  5106                           
  5107                           	psect	text30
  5108  001570                     __ptext30:
  5109                           	opt stack 0
  5110  001570                     _strcpy:
  5111                           	opt stack 27
  5112                           
  5113                           ;incstack = 0
  5114  001570  C001  F005         	movff	strcpy@to,strcpy@cp
  5115  001574  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  5116  001578  D004               	goto	i2l1879
  5117  00157A                     i2l1877:
  5118  00157A  4A05               	infsnz	strcpy@cp,f,c
  5119  00157C  2A06               	incf	strcpy@cp+1,f,c
  5120  00157E  4A03               	infsnz	strcpy@from,f,c
  5121  001580  2A04               	incf	strcpy@from+1,f,c
  5122  001582                     i2l1879:
  5123  001582  C003  FFD9         	movff	strcpy@from,fsr2l
  5124  001586  C004  FFDA         	movff	strcpy@from+1,fsr2h
  5125  00158A  C005  FFE1         	movff	strcpy@cp,fsr1l
  5126  00158E  C006  FFE2         	movff	strcpy@cp+1,fsr1h
  5127  001592  CFDF FFE7          	movff	indf2,indf1
  5128  001596  50E7               	movf	indf1,w,c
  5129  001598  B4D8               	btfsc	status,2,c
  5130  00159A  0012               	return	
  5131  00159C  D7EE               	goto	i2l1877
  5132  00159E                     __end_of_strcpy:
  5133                           	opt stack 0
  5134                           pclatu	equ	0xFFB
  5135                           pclath	equ	0xFFA
  5136                           tblptru	equ	0xFF8
  5137                           tblptrh	equ	0xFF7
  5138                           tblptrl	equ	0xFF6
  5139                           tablat	equ	0xFF5
  5140                           prodh	equ	0xFF4
  5141                           prodl	equ	0xFF3
  5142                           intcon	equ	0xFF2
  5143                           intcon2	equ	0xFF1
  5144                           postinc0	equ	0xFEE
  5145                           fsr0h	equ	0xFEA
  5146                           fsr0l	equ	0xFE9
  5147                           wreg	equ	0xFE8
  5148                           indf1	equ	0xFE7
  5149                           fsr1h	equ	0xFE2
  5150                           fsr1l	equ	0xFE1
  5151                           indf2	equ	0xFDF
  5152                           postinc2	equ	0xFDE
  5153                           postdec2	equ	0xFDD
  5154                           fsr2h	equ	0xFDA
  5155                           fsr2l	equ	0xFD9
  5156                           status	equ	0xFD8
  5157                           
  5158 ;; *************** function ___awmod *****************
  5159 ;; Defined at:
  5160 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;  dividend        2    0[COMRAM] int 
  5163 ;;  divisor         2    2[COMRAM] int 
  5164 ;; Auto vars:     Size  Location     Type
  5165 ;;  sign            1    5[COMRAM] unsigned char 
  5166 ;;  counter         1    4[COMRAM] unsigned char 
  5167 ;; Return value:  Size  Location     Type
  5168 ;;                  2    0[COMRAM] int 
  5169 ;; Registers used:
  5170 ;;		wreg, status,2, status,0
  5171 ;; Tracked objects:
  5172 ;;		On entry : 0/0
  5173 ;;		On exit  : 0/0
  5174 ;;		Unchanged: 0/0
  5175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5176 ;;      Params:         4       0       0       0       0       0       0       0       0
  5177 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5178 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5179 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5180 ;;Total ram usage:        6 bytes
  5181 ;; Hardware stack levels used:    1
  5182 ;; This function calls:
  5183 ;;		Nothing
  5184 ;; This function is called by:
  5185 ;;		_interruptions
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189                           	psect	text31
  5190  0012E0                     __ptext31:
  5191                           	opt stack 0
  5192  0012E0                     ___awmod:
  5193                           	opt stack 27
  5194                           
  5195                           ;incstack = 0
  5196  0012E0  0E00               	movlw	0
  5197  0012E2  6E06               	movwf	___awmod@sign,c
  5198  0012E4  AE02               	btfss	___awmod@dividend+1,7,c
  5199  0012E6  D006               	goto	i2l2067
  5200  0012E8  6C01               	negf	___awmod@dividend,c
  5201  0012EA  1E02               	comf	___awmod@dividend+1,f,c
  5202  0012EC  B0D8               	btfsc	status,0,c
  5203  0012EE  2A02               	incf	___awmod@dividend+1,f,c
  5204  0012F0  0E01               	movlw	1
  5205  0012F2  6E06               	movwf	___awmod@sign,c
  5206  0012F4                     i2l2067:
  5207  0012F4  AE04               	btfss	___awmod@divisor+1,7,c
  5208  0012F6  D004               	goto	i2l2071
  5209  0012F8  6C03               	negf	___awmod@divisor,c
  5210  0012FA  1E04               	comf	___awmod@divisor+1,f,c
  5211  0012FC  B0D8               	btfsc	status,0,c
  5212  0012FE  2A04               	incf	___awmod@divisor+1,f,c
  5213  001300                     i2l2071:
  5214  001300  5003               	movf	___awmod@divisor,w,c
  5215  001302  1004               	iorwf	___awmod@divisor+1,w,c
  5216  001304  B4D8               	btfsc	status,2,c
  5217  001306  D018               	goto	i2l2087
  5218  001308  0E01               	movlw	1
  5219  00130A  6E05               	movwf	___awmod@counter,c
  5220  00130C  D004               	goto	i2l2077
  5221  00130E                     i2l2075:
  5222  00130E  90D8               	bcf	status,0,c
  5223  001310  3603               	rlcf	___awmod@divisor,f,c
  5224  001312  3604               	rlcf	___awmod@divisor+1,f,c
  5225  001314  2A05               	incf	___awmod@counter,f,c
  5226  001316                     i2l2077:
  5227  001316  AE04               	btfss	___awmod@divisor+1,7,c
  5228  001318  D7FA               	goto	i2l2075
  5229  00131A                     i2l2079:
  5230  00131A  5003               	movf	___awmod@divisor,w,c
  5231  00131C  5C01               	subwf	___awmod@dividend,w,c
  5232  00131E  5004               	movf	___awmod@divisor+1,w,c
  5233  001320  5802               	subwfb	___awmod@dividend+1,w,c
  5234  001322  A0D8               	btfss	status,0,c
  5235  001324  D004               	goto	i2l2083
  5236  001326  5003               	movf	___awmod@divisor,w,c
  5237  001328  5E01               	subwf	___awmod@dividend,f,c
  5238  00132A  5004               	movf	___awmod@divisor+1,w,c
  5239  00132C  5A02               	subwfb	___awmod@dividend+1,f,c
  5240  00132E                     i2l2083:
  5241  00132E  90D8               	bcf	status,0,c
  5242  001330  3204               	rrcf	___awmod@divisor+1,f,c
  5243  001332  3203               	rrcf	___awmod@divisor,f,c
  5244  001334  2E05               	decfsz	___awmod@counter,f,c
  5245  001336  D7F1               	goto	i2l2079
  5246  001338                     i2l2087:
  5247  001338  5006               	movf	___awmod@sign,w,c
  5248  00133A  B4D8               	btfsc	status,2,c
  5249  00133C  D004               	goto	i2l2091
  5250  00133E  6C01               	negf	___awmod@dividend,c
  5251  001340  1E02               	comf	___awmod@dividend+1,f,c
  5252  001342  B0D8               	btfsc	status,0,c
  5253  001344  2A02               	incf	___awmod@dividend+1,f,c
  5254  001346                     i2l2091:
  5255  001346  C001  F001         	movff	___awmod@dividend,?___awmod
  5256  00134A  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5257  00134E  0012               	return	
  5258  001350                     __end_of___awmod:
  5259                           	opt stack 0
  5260                           pclatu	equ	0xFFB
  5261                           pclath	equ	0xFFA
  5262                           tblptru	equ	0xFF8
  5263                           tblptrh	equ	0xFF7
  5264                           tblptrl	equ	0xFF6
  5265                           tablat	equ	0xFF5
  5266                           prodh	equ	0xFF4
  5267                           prodl	equ	0xFF3
  5268                           intcon	equ	0xFF2
  5269                           intcon2	equ	0xFF1
  5270                           postinc0	equ	0xFEE
  5271                           fsr0h	equ	0xFEA
  5272                           fsr0l	equ	0xFE9
  5273                           wreg	equ	0xFE8
  5274                           indf1	equ	0xFE7
  5275                           fsr1h	equ	0xFE2
  5276                           fsr1l	equ	0xFE1
  5277                           indf2	equ	0xFDF
  5278                           postinc2	equ	0xFDE
  5279                           postdec2	equ	0xFDD
  5280                           fsr2h	equ	0xFDA
  5281                           fsr2l	equ	0xFD9
  5282                           status	equ	0xFD8
  5283                           pclatu	equ	0xFFB
  5284                           pclath	equ	0xFFA
  5285                           tblptru	equ	0xFF8
  5286                           tblptrh	equ	0xFF7
  5287                           tblptrl	equ	0xFF6
  5288                           tablat	equ	0xFF5
  5289                           prodh	equ	0xFF4
  5290                           prodl	equ	0xFF3
  5291                           intcon	equ	0xFF2
  5292                           intcon2	equ	0xFF1
  5293                           postinc0	equ	0xFEE
  5294                           fsr0h	equ	0xFEA
  5295                           fsr0l	equ	0xFE9
  5296                           wreg	equ	0xFE8
  5297                           indf1	equ	0xFE7
  5298                           fsr1h	equ	0xFE2
  5299                           fsr1l	equ	0xFE1
  5300                           indf2	equ	0xFDF
  5301                           postinc2	equ	0xFDE
  5302                           postdec2	equ	0xFDD
  5303                           fsr2h	equ	0xFDA
  5304                           fsr2l	equ	0xFD9
  5305                           status	equ	0xFD8
  5306                           
  5307                           	psect	rparam
  5308  0000                     pclatu	equ	0xFFB
  5309                           pclath	equ	0xFFA
  5310                           tblptru	equ	0xFF8
  5311                           tblptrh	equ	0xFF7
  5312                           tblptrl	equ	0xFF6
  5313                           tablat	equ	0xFF5
  5314                           prodh	equ	0xFF4
  5315                           prodl	equ	0xFF3
  5316                           intcon	equ	0xFF2
  5317                           intcon2	equ	0xFF1
  5318                           postinc0	equ	0xFEE
  5319                           fsr0h	equ	0xFEA
  5320                           fsr0l	equ	0xFE9
  5321                           wreg	equ	0xFE8
  5322                           indf1	equ	0xFE7
  5323                           fsr1h	equ	0xFE2
  5324                           fsr1l	equ	0xFE1
  5325                           indf2	equ	0xFDF
  5326                           postinc2	equ	0xFDE
  5327                           postdec2	equ	0xFDD
  5328                           fsr2h	equ	0xFDA
  5329                           fsr2l	equ	0xFD9
  5330                           status	equ	0xFD8
  5331                           
  5332                           	psect	temp
  5333  00004A                     btemp:
  5334                           	opt stack 0
  5335  00004A                     	ds	1
  5336  0000                     int$flags	set	btemp
  5337                           pclatu	equ	0xFFB
  5338                           pclath	equ	0xFFA
  5339                           tblptru	equ	0xFF8
  5340                           tblptrh	equ	0xFF7
  5341                           tblptrl	equ	0xFF6
  5342                           tablat	equ	0xFF5
  5343                           prodh	equ	0xFF4
  5344                           prodl	equ	0xFF3
  5345                           intcon	equ	0xFF2
  5346                           intcon2	equ	0xFF1
  5347                           postinc0	equ	0xFEE
  5348                           fsr0h	equ	0xFEA
  5349                           fsr0l	equ	0xFE9
  5350                           wreg	equ	0xFE8
  5351                           indf1	equ	0xFE7
  5352                           fsr1h	equ	0xFE2
  5353                           fsr1l	equ	0xFE1
  5354                           indf2	equ	0xFDF
  5355                           postinc2	equ	0xFDE
  5356                           postdec2	equ	0xFDD
  5357                           fsr2h	equ	0xFDA
  5358                           fsr2l	equ	0xFD9
  5359                           status	equ	0xFD8


Data Sizes:
    Strings     174
    Constant    18
    Data        1
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      73
    BANK0           160     36      65
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 26
		 -> string_aux(COMRAM[26]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 26
		 -> string(BANK0[26]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 26
		 -> string(BANK0[26]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_8(CODE[7]), STR_7(CODE[16]), STR_6(CODE[28]), STR_5(CODE[27]), 
		 -> STR_4(CODE[25]), STR_3(CODE[33]), STR_2(CODE[21]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 26
		 -> string(BANK0[26]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptions in COMRAM

    _interruptions->i2_printf
    i2_printf->i2___lwmod
    i2___lwmod->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_printf
    _write_RTC_I2c->_I2C_Idle
    _write_RTC_I2c->_I2C_Write_Byte
    _read_RTC_I2c->_I2C_Idle
    _read_RTC_I2c->_I2C_Write_Byte
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _interruptions in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptions in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptions in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptions in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptions in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptions in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptions in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptions in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    3895
                                             30 BANK0      6     6      0
                     _InitI2C_Master
                           _configAD
                  _configADInterrupt
                        _configRS232
                        _configTimer
              _configUSARTInterrupts
                             _printf
                       _read_RTC_I2c
                       _selectChanel
                      _write_RTC_I2c
 ---------------------------------------------------------------------------------
 (1) _write_RTC_I2c                                        0     0      0      31
                           _I2C_Idle
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (1) _selectChanel                                         1     1      0     403
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_RTC_I2c                                         1     1      0      62
                                              1 BANK0      1     1      0
                           _I2C_Idle
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Byte                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Send_NACK                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Read_Byte                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Idle                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    23      4    3229
                                             12 BANK0     18    14      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     392
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _configUSARTInterrupts                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configRS232                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configADInterrupt                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configAD                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitI2C_Master                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _interruptions                                       16    16      0    2246
                                             28 COMRAM    16    16      0
                            ___awmod
                             _strcpy
                           i2_printf
 ---------------------------------------------------------------------------------
 (4) i2_printf                                            25    23      2    1619
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4     203
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     424
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitI2C_Master
   _configAD
   _configADInterrupt
   _configRS232
   _configTimer
   _configUSARTInterrupts
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _read_RTC_I2c
     _I2C_Idle
     _I2C_ReStart
     _I2C_Read_Byte
     _I2C_Send_NACK
     _I2C_Start
     _I2C_Stop
     _I2C_Write_Byte
   _selectChanel
   _write_RTC_I2c
     _I2C_Idle
     _I2C_Start
     _I2C_Stop
     _I2C_Write_Byte

 _interruptions (ROOT)
   ___awmod
   _strcpy
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     24      41       5       40.6%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     2C      49       1       77.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8A      20        0.0%
DATA                 0      0      8A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Dec 14 16:24:27 2015

                             _i 002D              __size_of_I2C_Start 000A                     _SSPSTATbits 000FC7  
                            l41 16E2                              l35 16F6                              l53 16C0  
                            l29 16EC                              l65 16CA                              l59 1696  
         __end_of_interruptions 1162             ___wmul@multiplicand 0062              i2___lwdiv@dividend 0001  
                   __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                             l119 16A4  
                           l340 0B18                             l760 12D6                             l770 1414  
                           _GIE 007F97                    __CFG_CPB$OFF 000000                    __CFG_CPD$OFF 000000  
                           _RX9 007D5E                             _TX9 007D66                    __CFG_BOR$OFF 000000  
          __size_of_I2C_ReStart 000A                             _val 0241                    ___awmod@sign 0006  
            I2C_Write_Byte@Byte 0060                             prod 000FF3                             wreg 000FE8  
                  __CFG_FOSC$HS 000000                     main@channel 007F                    __CFG_LVP$OFF 000000  
                  __CFG_WDT$OFF 000000                            l2323 167A                            l2421 118C  
                          l2503 0A04                            l2505 0A0A                            l2441 11F0  
                          l2433 11C8                            l2425 11A0                            l2417 117A  
                          l2355 1286                            l2339 15BE                            l2357 1292  
                          l2541 0AD0                            l2517 0A40                            l2533 0A7C  
                          l2461 1254                            l2453 122C                            l2445 1204  
                          l2437 11DC                            l2429 11B4                            l2367 12C8  
                          l2359 1298                            l2383 1406                            l2375 13D0  
                          l2551 0AFE                            l2519 0A46                            l2535 0A8E  
                          l2471 08E4                            l2377 13DC                            l2473 08F6  
                          l2457 1240                            l2449 1218                            l2379 13E2  
                          l2555 0B1E                            l2563 0BB8                            l2539 0AC6  
                          l2491 09A8                            l2483 0930                            l2467 08D0  
                          l2557 0B6A                            l2565 0BCA                            l2549 0AF2  
                          l2493 09AE                            l2477 0900                            l2567 0BD2  
                          l2671 0F12                            l2663 0EE4                            l2497 09B6  
                          l2569 0BDE                            l2681 0F46                            l2499 09E8  
                          l2675 0F26                            l2667 0EFA                            l2685 0F5E  
                          l2677 0F30                            _ADFM 007E07                            STR_1 08BE  
                          STR_2 0884                            STR_3 0813                            STR_4 086B  
                          STR_5 0850                            STR_6 0834                            STR_7 08AA  
                          STR_8 08BA                            STR_9 0899                            _BRGH 007D62  
                          _CREN 007D5C                            _FERR 007D5A                            u2447 0F02  
                          u2457 0F4E                            u2467 0F84                            u2477 0FB4  
                          u2487 0FE4                            u2497 100E                            _PEIE 007F96  
                          _RCIE 007CED                            _RCIF 007CF5                            _OERR 007D59  
                          _SPEN 007D5F                            _TXIE 007CEC                            _TXIF 007CF4  
                          _TXEN 007D65                            _SYNC 007D64                            _main 0EA2  
              __end_of_I2C_Idle 168E                            fsr0h 000FEA                            fsr1h 000FE2  
            i2___lwdiv@quotient 0005                            fsr0l 000FE9                            fsr2h 000FDA  
                          indf1 000FE7                            fsr1l 000FE1                            indf2 000FDF  
                          fsr2l 000FD9                            btemp 004A                __end_of_I2C_Stop 16EA  
                          pclat 000FFA                            prodh 000FF4                            prodl 000FF3  
                          start 0016                   __CFG_IESO$OFF 000000                 __end_ofi2_putch 16E0  
                 __CFG_MCLRE$ON 000000      __size_of_configADInterrupt 000A                    ___param_bank 000010  
                 __CFG_PLLDIV$1 000000                           ?_main 0001                           _BRG16 007DC3  
               __end_of___awmod 1350                 __end_of___lwdiv 12E0                 __end_of___lwmod 141E  
                         i2l119 16D6                           i2l340 0DDA                           i2l264 106E  
                         i2l273 1126                           i2l266 1068                           i2l760 1466  
                         i2l770 14F6                           _RCREG 000FAE                           _SPBRG 000FAF  
                 __CFG_USBDIV$1 000000                           _SSPIF 007CF3                           _RXDTP 007DC5  
                         _TXREG 000FAD                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000  
                    i2isdigit@c 0003                 __end_of_dpowers 080B          __size_of_I2C_Read_Byte 000C  
               __end_of_isdigit 15C8                           _putch 16A0                           main@i 0080  
             __end_of_I2C_Start 16F4                  __pbitbssCOMRAM 0240                           tablat 000FF5  
              __end_ofi2___wmul 15EE          __size_of_I2C_Send_NACK 000C                           status 000FD8  
                __CFG_ICPRT$OFF 000000                   i2printf@width 001A                ??_InitI2C_Master 0060  
              __end_ofi2_printf 0EA2              __size_ofi2___lwdiv 0052              __size_ofi2___lwmod 0042  
               __initialization 1500                    __end_of_main 102A                      i2printf@ap 0014  
            __size_ofi2_isdigit 001E                   ?_read_RTC_I2c 0001                          ??_main 007E  
                 __activetblptr 000002           _configUSARTInterrupts 16AE                 __CFG_CCP2MX$OFF 000000  
                        _ADRESH 000FC4                          _ADRESL 000FC3                          ?_putch 0001  
                        i2l2101 0C16                          i2l2103 0C24                          i2l2121 0CB6  
                        i2l2113 0C58                          i2l2123 0CBA                          i2l2107 0C2A  
                        i2l2133 0D08                          i2l2221 10B4                          i2l2071 1300  
                        i2l2135 0D0C                          i2l2127 0CC0                          i2l2129 0CEE  
                        i2l2241 110C                          i2l2233 10EE                          i2l2091 1346  
                        i2l2083 132E                          i2l2075 130E                          i2l2067 12F4  
                        i2l2171 0DA4                          i2l2147 0D38                          i2l2163 0D68  
                        i2l2077 1316                          i2l2181 0DC6                          i2l2149 0D3C  
                        i2l2165 0D78                          i2l2229 10E6                          i2l2079 131A  
                        i2l2087 1338                          i2l2185 0DE0                          i2l2193 0E6A  
                        i2l2169 0D9C                          i2l2097 0C06                          i2l2187 0E24  
                        i2l2195 0E7A                          i2l2179 0DBE                          i2l2197 0E80  
                        i2l2199 0E88                          i2l1755 1626                          i2l1765 1434  
                        i2l1767 143C                          i2l1777 145C                          i2l1769 1440  
                        i2l1793 14EC                          i2l1785 14CC                          i2l1787 14D4  
                        i2l1877 157A                          i2l1789 14D8                          i2l1879 1582  
                     ??i2_putch 0001                          _TMR0IP 007F8A                          _SSPADD 000FC8  
                        _SSPBUF 000FC9            __size_of_configRS232 0018                  __CFG_XINST$OFF 000000  
              __end_of_configAD 1662            __size_of_configTimer 001A                   _I2C_Read_Byte 16C8  
                        ___wmul 153A                       ??___awmod 0005                       ??___lwdiv 0064  
                     ??___lwmod 006B                  ??_read_RTC_I2c 0061                          clear_0 1506  
                        clear_1 1514                 ___awmod@divisor 0003                   _I2C_Send_NACK 16BC  
               ___awmod@counter 0005                          _printf 08C2                          _strcpy 1570  
                        _string 0087                       ?_I2C_Idle 0001                    __pdataCOMRAM 0049  
                     ??_isdigit 0060                       ?_I2C_Stop 0001               __end_ofi2___lwdiv 1470  
                  __mediumconst 0000               __end_ofi2___lwmod 1500                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8          __size_of_write_RTC_I2c 006C  
             __end_ofi2_isdigit 162E                      __accesstop 0060         __end_of__initialization 152C  
               __CFG_PBADEN$OFF 000000                   ___rparam_used 000001                  ?_I2C_Read_Byte 0001  
            i2___lwmod@dividend 0008                  __pcstackCOMRAM 0001                   __end_of_putch 16AE  
                   i2printf@idx 0013                  ?_I2C_Send_NACK 0001                     i2printf@val 0018  
        ?_configUSARTInterrupts 0001                       ?i2___wmul 0001                      ??_I2C_Idle 0060  
                   i2putch@byte 0001                      ??_I2C_Stop 0060                       ?i2_printf 000D  
                       ??_putch 0060                      __pbssBANK0 0084                      _hasAnError 0240  
                 ?_selectChanel 0001                         ?___wmul 0060                   _write_RTC_I2c 1350  
       __size_of_I2C_Write_Byte 0012                   ??_I2C_ReStart 0060                         ?_printf 006C  
                       ?_strcpy 0001                      ??i2___wmul 0005                      ??i2_printf 000F  
                     ?_configAD 0001                         _SSPCON1 000FC6                         _SSPCON2 000FC5  
                       _SSPSTAT 000FC7            __end_of_read_RTC_I2c 14BE                 __CFG_VREGEN$OFF 000000  
        __size_of_interruptions 115A                         i2_putch 16D4                       _I2C_Start 16EA  
               ??_I2C_Read_Byte 0060                  ??_selectChanel 0060                         __Hparam 0000  
       read_RTC_I2c@pos_memoria 0061                         __Lparam 0000                  ?_write_RTC_I2c 0001  
               ??_I2C_Send_NACK 0060                         ___awmod 12E0                 __size_of___wmul 0036  
                       ___lwdiv 1268                         ___lwmod 13BC                    __psmallconst 0800  
               __CFG_STVREN$OFF 000000                         __pcinit 1500                         __ramtop 0800  
                       __ptext0 0EA2                         __ptext1 1350                         __ptext2 1162  
                       __ptext3 1470                         __ptext4 168E                         __ptext5 16E0  
                       __ptext6 16EA                         __ptext7 16BC                         __ptext8 16C8  
                       __ptext9 16F4                 __size_of_printf 033A                       _T0CONbits 000FD5  
               __size_of_strcpy 002E               __end_of_hexpowers 0813                         _dpowers 0801  
                       _leitura 0086                         _isdigit 159E                ___awmod@dividend 0001  
           __end_of_I2C_ReStart 16FE                      ??_configAD 0060                  __pintcode_body 102A  
          end_of_initialization 152C                   __Lmediumconst 0000                         int_func 102A  
           i2___wmul@multiplier 0001                      ?_I2C_Start 0001                         printf@c 007D  
                       printf@f 006C                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE                   _interruptions 0008                       _PORTDbits 000F83  
                     _TRISBbits 000F93               __size_of_I2C_Idle 0014               __size_of_I2C_Stop 000A  
                    main@i_1063 0082               i2___lwdiv@divisor 0003                       i2___lwdiv 141E  
                     i2___lwmod 14BE               i2___lwdiv@counter 0007                   ??_configRS232 0060  
                   printf@width 007B                   ??_configTimer 0060                       i2_isdigit 1610  
               ??_write_RTC_I2c 0061                      _string_aux 002E         ??_configUSARTInterrupts 0060  
                _I2C_Write_Byte 168E                  ?_interruptions 0001                  __end_of___wmul 1570  
                 __pidataCOMRAM 1708                     _I2C_ReStart 16F4         __size_of_InitI2C_Master 0022  
              i2___wmul@product 0005                  __end_of_printf 0BFC                    i2printf@flag 0017  
                __end_of_strcpy 159E                    i2printf@prec 0016             start_initialization 1500  
          __end_of_selectChanel 1268               __size_ofi2___wmul 0026           __size_of_read_RTC_I2c 004E  
                     i2printf@c 001C                       i2printf@f 000D                      ?i2___lwdiv 0001  
                    ?i2___lwmod 0008               __size_ofi2_printf 02A6                     ??_I2C_Start 0060  
                    ?i2_isdigit 0001             __end_of_configRS232 167A          __end_of_I2C_Write_Byte 16A0  
                      ??___wmul 0064             __end_of_configTimer 1648                __CFG_LPT1OSC$OFF 000000  
                  _read_RTC_I2c 1470                        ??_printf 0070                        ??_strcpy 0005  
                   __pbssCOMRAM 002D                   __pcstackBANK0 0060               i2___lwmod@divisor 000A  
             i2___lwmod@counter 000C                    _isdigit$1318 0061               __size_of_configAD 001A  
                      ?i2_putch 0001                ___lwdiv@dividend 0060                 ?_I2C_Write_Byte 0001  
                     __pintcode 0008                 ??_interruptions 001D                        ?___awmod 0001  
                      ?___lwdiv 0060                        ?___lwmod 0067                     __smallconst 0800  
                      _I2C_Idle 167A                        ?_isdigit 0001                        _I2C_Stop 16E0  
                     _hexpowers 080B                ___lwdiv@quotient 0065                     ??i2___lwdiv 0005  
                   ??i2___lwmod 000C                  __size_of_putch 000E                    _receivedData 0049  
                   _configRS232 1662                  ___wmul@product 0064                        _PIE1bits 000F9D  
                   ??i2_isdigit 0001                     _configTimer 162E                        _PIR1bits 000F9E  
                      i2u186_40 1118                        i2u187_45 111A                        i2u188_45 1122  
                      i2u188_47 1124           __end_of_I2C_Read_Byte 16D4                __CFG_WDTPS$32768 000000  
         __end_of_I2C_Send_NACK 16C8           __size_of_selectChanel 0106                  _InitI2C_Master 15EE  
                    _ADCON0bits 000FC2                      _ADCON1bits 000FC1                      _ADCON2bits 000FC0  
             ___wmul@multiplier 0060                        i2___wmul 15C8                      printf@flag 007A  
                    printf@prec 0077                        i2_printf 0BFC             selectChanel@channel 0060  
              __size_ofi2_putch 000C                        __Hrparam 0000                    _selectChanel 1162  
                      __Lrparam 0000          __end_of_InitI2C_Master 1610                __size_of___awmod 0070  
         i2___wmul@multiplicand 0003                __size_of___lwdiv 0078  __size_of_configUSARTInterrupts 000E  
              __size_of___lwmod 0062   __end_of_configUSARTInterrupts 16BC                    ?_I2C_ReStart 0001  
                      _data_ADC 0084                __size_of_isdigit 002A                 ___lwdiv@divisor 0062  
               ___lwdiv@counter 0064                        __ptext10 167A                        __ptext11 08C2  
                      __ptext20 16FE                        __ptext12 16A0                        __ptext21 1648  
                      __ptext13 159E                        __ptext30 1570                        __ptext22 15EE  
                      __ptext14 153A                        __ptext31 12E0                        __ptext15 13BC  
                      __ptext24 0BFC                        __ptext16 1268                        __ptext25 16D4  
                      __ptext17 16AE                        __ptext26 1610                        __ptext18 162E  
                      __ptext27 15C8                        __ptext19 1662                        __ptext28 14BE  
                      __ptext29 141E                        _configAD 1648                      strcpy@from 0003  
                i2_isdigit$1318 0002                   __size_of_main 0188           __end_of_write_RTC_I2c 13BC  
                      int$flags 004A               _configADInterrupt 16FE                 ?_InitI2C_Master 0001  
                     printf@idx 0074                       printf@val 0078              ?_configADInterrupt 0001  
         __CFG_CPUDIV$OSC1_PLL2 000000                       putch@byte 0060                      _INTCONbits 000FF2  
           ??_configADInterrupt 0060                        isdigit@c 0062                        intlevel2 0000  
              ___lwmod@dividend 0067                ??_I2C_Write_Byte 0060       __end_of_configADInterrupt 1708  
                      printf@ap 0075                 ___lwmod@divisor 0069                        strcpy@cp 0005  
                      strcpy@to 0001                 ___lwmod@counter 006B                     _SSPCON1bits 000FC6  
                   _SSPCON2bits 000FC5                    ?_configRS232 0001                    ?_configTimer 0001  
