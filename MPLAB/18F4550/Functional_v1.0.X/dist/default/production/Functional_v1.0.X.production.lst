

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Mar 28 16:04:08 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	idataCOMRAM
    52  00170C                     __pidataCOMRAM:
    53                           	opt stack 0
    54                           
    55                           ;initializer for _receivedData
    56  00170C  58                 	db	88
    57                           
    58                           	psect	smallconst
    59  000800                     __psmallconst:
    60                           	opt stack 0
    61  000800  00                 	db	0
    62  000801                     _dpowers:
    63                           	opt stack 0
    64  000801  0001               	dw	1
    65  000803  000A               	dw	10
    66  000805  0064               	dw	100
    67  000807  03E8               	dw	1000
    68  000809  2710               	dw	10000
    69  00080B                     __end_of_dpowers:
    70                           	opt stack 0
    71  00080B                     _hexpowers:
    72                           	opt stack 0
    73  00080B  0001               	dw	1
    74  00080D  0010               	dw	16
    75  00080F  0100               	dw	256
    76  000811  1000               	dw	4096
    77  000813                     __end_of_hexpowers:
    78                           	opt stack 0
    79  0000                     _ADCON0bits	set	4034
    80  0000                     _ADCON1bits	set	4033
    81  0000                     _ADCON2bits	set	4032
    82  0000                     _ADRESH	set	4036
    83  0000                     _ADRESL	set	4035
    84  0000                     _INTCONbits	set	4082
    85  0000                     _PIE1bits	set	3997
    86  0000                     _PIR1bits	set	3998
    87  0000                     _PORTDbits	set	3971
    88  0000                     _RCREG	set	4014
    89  0000                     _SPBRG	set	4015
    90  0000                     _SSPADD	set	4040
    91  0000                     _SSPBUF	set	4041
    92  0000                     _SSPCON1	set	4038
    93  0000                     _SSPCON1bits	set	4038
    94  0000                     _SSPCON2	set	4037
    95  0000                     _SSPCON2bits	set	4037
    96  0000                     _SSPSTAT	set	4039
    97  0000                     _SSPSTATbits	set	4039
    98  0000                     _T0CONbits	set	4053
    99  0000                     _TRISBbits	set	3987
   100  0000                     _TXREG	set	4013
   101  0000                     _ADFM	set	32263
   102  0000                     _BRG16	set	32195
   103  0000                     _BRGH	set	32098
   104  0000                     _CREN	set	32092
   105  0000                     _FERR	set	32090
   106  0000                     _GIE	set	32663
   107  0000                     _OERR	set	32089
   108  0000                     _PEIE	set	32662
   109  0000                     _RCIE	set	31981
   110  0000                     _RCIF	set	31989
   111  0000                     _RX9	set	32094
   112  0000                     _RXDTP	set	32197
   113  0000                     _SPEN	set	32095
   114  0000                     _SSPIF	set	31987
   115  0000                     _SYNC	set	32100
   116  0000                     _TMR0IP	set	32650
   117  0000                     _TRISD3	set	31915
   118  0000                     _TRISD4	set	31916
   119  0000                     _TX9	set	32102
   120  0000                     _TXEN	set	32101
   121  0000                     _TXIE	set	31980
   122  0000                     _TXIF	set	31988
   123  000813                     STR_3:
   124  000813  0A                 	db	10
   125  000814  0A                 	db	10
   126  000815  0D                 	db	13
   127  000816  4C                 	db	76	;'L'
   128  000817  65                 	db	101	;'e'
   129  000818  74                 	db	116	;'t'
   130  000819  20                 	db	32
   131  00081A  54                 	db	84	;'T'
   132  00081B  68                 	db	104	;'h'
   133  00081C  65                 	db	101	;'e'
   134  00081D  20                 	db	32
   135  00081E  43                 	db	67	;'C'
   136  00081F  61                 	db	97	;'a'
   137  000820  72                 	db	114	;'r'
   138  000821  6E                 	db	110	;'n'
   139  000822  61                 	db	97	;'a'
   140  000823  67                 	db	103	;'g'
   141  000824  65                 	db	101	;'e'
   142  000825  20                 	db	32
   143  000826  42                 	db	66	;'B'
   144  000827  65                 	db	101	;'e'
   145  000828  67                 	db	103	;'g'
   146  000829  69                 	db	105	;'i'
   147  00082A  6E                 	db	110	;'n'
   148  00082B  2C                 	db	44
   149  00082C  20                 	db	32
   150  00082D  6E                 	db	110	;'n'
   151  00082E  6F                 	db	111	;'o'
   152  00082F  77                 	db	119	;'w'
   153  000830  21                 	db	33
   154  000831  0A                 	db	10
   155  000832  0A                 	db	10
   156  000833  00                 	db	0
   157  000834                     STR_6:
   158  000834  0A                 	db	10
   159  000835  0D                 	db	13
   160  000836  4C                 	db	76	;'L'
   161  000837  65                 	db	101	;'e'
   162  000838  69                 	db	105	;'i'
   163  000839  74                 	db	116	;'t'
   164  00083A  75                 	db	117	;'u'
   165  00083B  72                 	db	114	;'r'
   166  00083C  61                 	db	97	;'a'
   167  00083D  20                 	db	32
   168  00083E  53                 	db	83	;'S'
   169  00083F  65                 	db	101	;'e'
   170  000840  67                 	db	103	;'g'
   171  000841  75                 	db	117	;'u'
   172  000842  6E                 	db	110	;'n'
   173  000843  64                 	db	100	;'d'
   174  000844  6F                 	db	111	;'o'
   175  000845  3A                 	db	58	;':'
   176  000846  20                 	db	32
   177  000847  5B                 	db	91	;'['
   178  000848  20                 	db	32
   179  000849  25                 	db	37
   180  00084A  30                 	db	48	;'0'
   181  00084B  32                 	db	50	;'2'
   182  00084C  58                 	db	88	;'X'
   183  00084D  20                 	db	32
   184  00084E  5D                 	db	93	;']'
   185  00084F  00                 	db	0
   186  000850                     STR_5:
   187  000850  0A                 	db	10
   188  000851  0D                 	db	13
   189  000852  4C                 	db	76	;'L'
   190  000853  65                 	db	101	;'e'
   191  000854  69                 	db	105	;'i'
   192  000855  74                 	db	116	;'t'
   193  000856  75                 	db	117	;'u'
   194  000857  72                 	db	114	;'r'
   195  000858  61                 	db	97	;'a'
   196  000859  20                 	db	32
   197  00085A  4D                 	db	77	;'M'
   198  00085B  69                 	db	105	;'i'
   199  00085C  6E                 	db	110	;'n'
   200  00085D  75                 	db	117	;'u'
   201  00085E  74                 	db	116	;'t'
   202  00085F  6F                 	db	111	;'o'
   203  000860  3A                 	db	58	;':'
   204  000861  20                 	db	32
   205  000862  5B                 	db	91	;'['
   206  000863  20                 	db	32
   207  000864  25                 	db	37
   208  000865  30                 	db	48	;'0'
   209  000866  32                 	db	50	;'2'
   210  000867  58                 	db	88	;'X'
   211  000868  20                 	db	32
   212  000869  5D                 	db	93	;']'
   213  00086A  00                 	db	0
   214  00086B                     STR_4:
   215  00086B  0A                 	db	10
   216  00086C  0D                 	db	13
   217  00086D  4C                 	db	76	;'L'
   218  00086E  65                 	db	101	;'e'
   219  00086F  69                 	db	105	;'i'
   220  000870  74                 	db	116	;'t'
   221  000871  75                 	db	117	;'u'
   222  000872  72                 	db	114	;'r'
   223  000873  61                 	db	97	;'a'
   224  000874  20                 	db	32
   225  000875  48                 	db	72	;'H'
   226  000876  6F                 	db	111	;'o'
   227  000877  72                 	db	114	;'r'
   228  000878  61                 	db	97	;'a'
   229  000879  3A                 	db	58	;':'
   230  00087A  20                 	db	32
   231  00087B  5B                 	db	91	;'['
   232  00087C  20                 	db	32
   233  00087D  25                 	db	37
   234  00087E  30                 	db	48	;'0'
   235  00087F  32                 	db	50	;'2'
   236  000880  58                 	db	88	;'X'
   237  000881  20                 	db	32
   238  000882  5D                 	db	93	;']'
   239  000883  00                 	db	0
   240  000884                     STR_2:
   241  000884  0A                 	db	10
   242  000885  0A                 	db	10
   243  000886  0D                 	db	13
   244  000887  77                 	db	119	;'w'
   245  000888  72                 	db	114	;'r'
   246  000889  69                 	db	105	;'i'
   247  00088A  74                 	db	116	;'t'
   248  00088B  65                 	db	101	;'e'
   249  00088C  5F                 	db	95	;'_'
   250  00088D  52                 	db	82	;'R'
   251  00088E  54                 	db	84	;'T'
   252  00088F  43                 	db	67	;'C'
   253  000890  5F                 	db	95	;'_'
   254  000891  49                 	db	73	;'I'
   255  000892  32                 	db	50	;'2'
   256  000893  63                 	db	99	;'c'
   257  000894  28                 	db	40
   258  000895  29                 	db	41
   259  000896  0A                 	db	10
   260  000897  0A                 	db	10
   261  000898  00                 	db	0
   262  000899                     STR_9:
   263  000899  30                 	db	48	;'0'
   264  00089A  31                 	db	49	;'1'
   265  00089B  32                 	db	50	;'2'
   266  00089C  33                 	db	51	;'3'
   267  00089D  34                 	db	52	;'4'
   268  00089E  35                 	db	53	;'5'
   269  00089F  36                 	db	54	;'6'
   270  0008A0  37                 	db	55	;'7'
   271  0008A1  38                 	db	56	;'8'
   272  0008A2  39                 	db	57	;'9'
   273  0008A3  41                 	db	65	;'A'
   274  0008A4  42                 	db	66	;'B'
   275  0008A5  43                 	db	67	;'C'
   276  0008A6  44                 	db	68	;'D'
   277  0008A7  45                 	db	69	;'E'
   278  0008A8  46                 	db	70	;'F'
   279  0008A9  00                 	db	0
   280  0008AA                     STR_7:
   281  0008AA  0A                 	db	10
   282  0008AB  0D                 	db	13
   283  0008AC  52                 	db	82	;'R'
   284  0008AD  65                 	db	101	;'e'
   285  0008AE  67                 	db	103	;'g'
   286  0008AF  69                 	db	105	;'i'
   287  0008B0  73                 	db	115	;'s'
   288  0008B1  74                 	db	116	;'t'
   289  0008B2  72                 	db	114	;'r'
   290  0008B3  6F                 	db	111	;'o'
   291  0008B4  75                 	db	117	;'u'
   292  0008B5  20                 	db	32
   293  0008B6  25                 	db	37
   294  0008B7  75                 	db	117	;'u'
   295  0008B8  00                 	db	0
   296  0008B9                     STR_8:
   297  0008B9  0A                 	db	10
   298  0008BA  0D                 	db	13
   299  0008BB  0A                 	db	10
   300  0008BC  0D                 	db	13
   301  0008BD  0A                 	db	10
   302  0008BE  0D                 	db	13
   303  0008BF  00                 	db	0
   304  0000                     
   305                           ; #config settings
   306  0008C0  00                 	db	0	; dummy byte at the end
   307  0000                     
   308                           	psect	cinit
   309  001504                     __pcinit:
   310                           	opt stack 0
   311  001504                     start_initialization:
   312                           	opt stack 0
   313  001504                     __initialization:
   314                           	opt stack 0
   315                           
   316                           ; Clear objects allocated to BANK0 (29 bytes)
   317  001504  EE00  F084         	lfsr	0,__pbssBANK0
   318  001508  0E1D               	movlw	29
   319  00150A                     clear_0:
   320  00150A  6AEE               	clrf	postinc0,c
   321  00150C  06E8               	decf	wreg,f,c
   322  00150E  E1FD               	bnz	clear_0
   323                           
   324                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   325  001510  6A48               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   326                           
   327                           ; Clear objects allocated to COMRAM (27 bytes)
   328  001512  EE00  F02D         	lfsr	0,__pbssCOMRAM
   329  001516  0E1B               	movlw	27
   330  001518                     clear_1:
   331  001518  6AEE               	clrf	postinc0,c
   332  00151A  06E8               	decf	wreg,f,c
   333  00151C  E1FD               	bnz	clear_1
   334                           
   335                           ; Initialize objects allocated to COMRAM (1 bytes)
   336                           ; load TBLPTR registers with __pidataCOMRAM
   337  00151E  0E0C               	movlw	low __pidataCOMRAM
   338  001520  6EF6               	movwf	tblptrl,c
   339  001522  0E17               	movlw	high __pidataCOMRAM
   340  001524  6EF7               	movwf	tblptrh,c
   341  001526  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   342  001528  6EF8               	movwf	tblptru,c
   343  00152A  0009               	tblrd		*+	;fetch initializer
   344  00152C  CFF5 F049          	movff	tablat,__pdataCOMRAM
   345  001530                     end_of_initialization:
   346                           	opt stack 0
   347  001530                     __end_of__initialization:
   348                           	opt stack 0
   349  001530  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   350  001532  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   351  001534  0E00               	movlw	low (__Lmediumconst shr (0+16))
   352  001536  6EF8               	movwf	tblptru,c
   353  001538  0100               	movlb	0
   354  00153A  EF51  F007         	goto	_main	;jump to C main() function
   355                           tblptru	equ	0xFF8
   356                           tblptrh	equ	0xFF7
   357                           tblptrl	equ	0xFF6
   358                           tablat	equ	0xFF5
   359                           postinc0	equ	0xFEE
   360                           wreg	equ	0xFE8
   361                           
   362                           	psect	bitbssCOMRAM
   363  000240                     __pbitbssCOMRAM:
   364                           	opt stack 0
   365  000240                     _hasAnError:
   366                           	opt stack 0
   367  000240                     	ds	1
   368  000241                     _val:
   369                           	opt stack 0
   370  000241                     	ds	1
   371                           tblptru	equ	0xFF8
   372                           tblptrh	equ	0xFF7
   373                           tblptrl	equ	0xFF6
   374                           tablat	equ	0xFF5
   375                           postinc0	equ	0xFEE
   376                           wreg	equ	0xFE8
   377                           
   378                           	psect	bssCOMRAM
   379  00002D                     __pbssCOMRAM:
   380                           	opt stack 0
   381  00002D                     _i:
   382                           	opt stack 0
   383  00002D                     	ds	1
   384  00002E                     _string_aux:
   385                           	opt stack 0
   386  00002E                     	ds	26
   387                           tblptru	equ	0xFF8
   388                           tblptrh	equ	0xFF7
   389                           tblptrl	equ	0xFF6
   390                           tablat	equ	0xFF5
   391                           postinc0	equ	0xFEE
   392                           wreg	equ	0xFE8
   393                           
   394                           	psect	dataCOMRAM
   395  000049                     __pdataCOMRAM:
   396                           	opt stack 0
   397  000049                     _receivedData:
   398                           	opt stack 0
   399  000049                     	ds	1
   400                           tblptru	equ	0xFF8
   401                           tblptrh	equ	0xFF7
   402                           tblptrl	equ	0xFF6
   403                           tablat	equ	0xFF5
   404                           postinc0	equ	0xFEE
   405                           wreg	equ	0xFE8
   406                           
   407                           	psect	bssBANK0
   408  000084                     __pbssBANK0:
   409                           	opt stack 0
   410  000084                     _data_ADC:
   411                           	opt stack 0
   412  000084                     	ds	2
   413  000086                     _leitura:
   414                           	opt stack 0
   415  000086                     	ds	1
   416  000087                     _string:
   417                           	opt stack 0
   418  000087                     	ds	26
   419                           tblptru	equ	0xFF8
   420                           tblptrh	equ	0xFF7
   421                           tblptrl	equ	0xFF6
   422                           tablat	equ	0xFF5
   423                           postinc0	equ	0xFEE
   424                           wreg	equ	0xFE8
   425                           
   426                           	psect	cstackBANK0
   427  000060                     __pcstackBANK0:
   428                           	opt stack 0
   429  000060                     ??_isdigit:
   430  000060                     ??_I2C_Idle:
   431  000060                     ?___wmul:
   432                           	opt stack 0
   433  000060                     ?___lwdiv:
   434                           	opt stack 0
   435  000060                     I2C_Write_Byte@Byte:
   436                           	opt stack 0
   437  000060                     putch@byte:
   438                           	opt stack 0
   439  000060                     selectChanel@channel:
   440                           	opt stack 0
   441  000060                     ___wmul@multiplier:
   442                           	opt stack 0
   443  000060                     ___lwdiv@dividend:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x0
   447  000060                     	ds	1
   448  000061                     read_RTC_I2c@pos_memoria:
   449                           	opt stack 0
   450  000061                     _isdigit$1320:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x1
   454  000061                     	ds	1
   455  000062                     isdigit@c:
   456                           	opt stack 0
   457  000062                     ___wmul@multiplicand:
   458                           	opt stack 0
   459  000062                     ___lwdiv@divisor:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x2
   463  000062                     	ds	2
   464  000064                     ___lwdiv@counter:
   465                           	opt stack 0
   466  000064                     ___wmul@product:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0x4
   470  000064                     	ds	1
   471  000065                     ___lwdiv@quotient:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x5
   475  000065                     	ds	2
   476  000067                     ?___lwmod:
   477                           	opt stack 0
   478  000067                     ___lwmod@dividend:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x7
   482  000067                     	ds	2
   483  000069                     ___lwmod@divisor:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x9
   487  000069                     	ds	2
   488  00006B                     ___lwmod@counter:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0xB
   492  00006B                     	ds	1
   493  00006C                     ?_printf:
   494                           	opt stack 0
   495  00006C                     printf@f:
   496                           	opt stack 0
   497                           
   498                           ; 2 bytes @ 0xC
   499  00006C                     	ds	4
   500  000070                     ??_printf:
   501                           
   502                           ; 0 bytes @ 0x10
   503  000070                     	ds	4
   504  000074                     printf@idx:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x14
   508  000074                     	ds	1
   509  000075                     printf@ap:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x15
   513  000075                     	ds	2
   514  000077                     printf@prec:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x17
   518  000077                     	ds	1
   519  000078                     printf@val:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x18
   523  000078                     	ds	2
   524  00007A                     printf@flag:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x1A
   528  00007A                     	ds	1
   529  00007B                     printf@width:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x1B
   533  00007B                     	ds	2
   534  00007D                     printf@c:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x1D
   538  00007D                     	ds	1
   539  00007E                     ??_main:
   540                           
   541                           ; 0 bytes @ 0x1E
   542  00007E                     	ds	1
   543  00007F                     main@channel:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x1F
   547  00007F                     	ds	1
   548  000080                     main@i:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x20
   552  000080                     	ds	2
   553  000082                     main@i_1065:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x22
   557  000082                     	ds	2
   558                           tblptru	equ	0xFF8
   559                           tblptrh	equ	0xFF7
   560                           tblptrl	equ	0xFF6
   561                           tablat	equ	0xFF5
   562                           postinc0	equ	0xFEE
   563                           wreg	equ	0xFE8
   564                           
   565                           	psect	cstackCOMRAM
   566  000001                     __pcstackCOMRAM:
   567                           	opt stack 0
   568  000001                     ??i2_isdigit:
   569  000001                     ?___awmod:
   570                           	opt stack 0
   571  000001                     ?i2___wmul:
   572                           	opt stack 0
   573  000001                     ?i2___lwdiv:
   574                           	opt stack 0
   575  000001                     i2putch@byte:
   576                           	opt stack 0
   577  000001                     ___awmod@dividend:
   578                           	opt stack 0
   579  000001                     strcpy@to:
   580                           	opt stack 0
   581  000001                     i2___wmul@multiplier:
   582                           	opt stack 0
   583  000001                     i2___lwdiv@dividend:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x0
   587  000001                     	ds	1
   588  000002                     i2_isdigit$1320:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x1
   592  000002                     	ds	1
   593  000003                     i2isdigit@c:
   594                           	opt stack 0
   595  000003                     ___awmod@divisor:
   596                           	opt stack 0
   597  000003                     strcpy@from:
   598                           	opt stack 0
   599  000003                     i2___wmul@multiplicand:
   600                           	opt stack 0
   601  000003                     i2___lwdiv@divisor:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x2
   605  000003                     	ds	2
   606  000005                     ___awmod@counter:
   607                           	opt stack 0
   608  000005                     strcpy@cp:
   609                           	opt stack 0
   610  000005                     i2___wmul@product:
   611                           	opt stack 0
   612  000005                     i2___lwdiv@quotient:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x4
   616  000005                     	ds	1
   617  000006                     ___awmod@sign:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x5
   621  000006                     	ds	1
   622  000007                     i2___lwdiv@counter:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x6
   626  000007                     	ds	1
   627  000008                     ?i2___lwmod:
   628                           	opt stack 0
   629  000008                     i2___lwmod@dividend:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x7
   633  000008                     	ds	2
   634  00000A                     i2___lwmod@divisor:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x9
   638  00000A                     	ds	2
   639  00000C                     i2___lwmod@counter:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0xB
   643  00000C                     	ds	1
   644  00000D                     ?i2_printf:
   645                           	opt stack 0
   646  00000D                     i2printf@f:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0xC
   650  00000D                     	ds	2
   651  00000F                     ??i2_printf:
   652                           
   653                           ; 0 bytes @ 0xE
   654  00000F                     	ds	4
   655  000013                     i2printf@idx:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x12
   659  000013                     	ds	1
   660  000014                     i2printf@ap:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x13
   664  000014                     	ds	2
   665  000016                     i2printf@prec:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x15
   669  000016                     	ds	1
   670  000017                     i2printf@flag:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x16
   674  000017                     	ds	1
   675  000018                     i2printf@val:
   676                           	opt stack 0
   677                           
   678                           ; 2 bytes @ 0x17
   679  000018                     	ds	2
   680  00001A                     i2printf@width:
   681                           	opt stack 0
   682                           
   683                           ; 2 bytes @ 0x19
   684  00001A                     	ds	2
   685  00001C                     i2printf@c:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x1B
   689  00001C                     	ds	1
   690  00001D                     ??_interruptions:
   691                           
   692                           ; 0 bytes @ 0x1C
   693  00001D                     	ds	16
   694                           tblptru	equ	0xFF8
   695                           tblptrh	equ	0xFF7
   696                           tblptrl	equ	0xFF6
   697                           tablat	equ	0xFF5
   698                           postinc0	equ	0xFEE
   699                           wreg	equ	0xFE8
   700                           
   701 ;;
   702 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   703 ;;
   704 ;; *************** function _main *****************
   705 ;; Defined at:
   706 ;;		line 122 in file "main.c"
   707 ;; Parameters:    Size  Location     Type
   708 ;;		None
   709 ;; Auto vars:     Size  Location     Type
   710 ;;  i               2   34[BANK0 ] int 
   711 ;;  i               2   32[BANK0 ] int 
   712 ;;  channel         1   31[BANK0 ] unsigned char 
   713 ;; Return value:  Size  Location     Type
   714 ;;		None               void
   715 ;; Registers used:
   716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   717 ;; Tracked objects:
   718 ;;		On entry : 0/0
   719 ;;		On exit  : 0/0
   720 ;;		Unchanged: 0/0
   721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   722 ;;      Params:         0       0       0       0       0       0       0       0       0
   723 ;;      Locals:         0       5       0       0       0       0       0       0       0
   724 ;;      Temps:          0       1       0       0       0       0       0       0       0
   725 ;;      Totals:         0       6       0       0       0       0       0       0       0
   726 ;;Total ram usage:        6 bytes
   727 ;; Hardware stack levels required when called:    5
   728 ;; This function calls:
   729 ;;		_InitI2C_Master
   730 ;;		_configAD
   731 ;;		_configADInterrupt
   732 ;;		_configRS232
   733 ;;		_configTimer
   734 ;;		_configUSARTInterrupts
   735 ;;		_printf
   736 ;;		_read_RTC_I2c
   737 ;;		_selectChanel
   738 ;;		_write_RTC_I2c
   739 ;; This function is called by:
   740 ;;		Startup code after reset
   741 ;; This function uses a non-reentrant model
   742 ;;
   743                           
   744                           	psect	text0
   745  000EA2                     __ptext0:
   746                           	opt stack 0
   747  000EA2                     _main:
   748                           	opt stack 26
   749                           
   750                           ;main.c: 123: TRISD3 = 0;
   751                           
   752                           ;incstack = 0
   753  000EA2  9695               	bcf	3989,3,c	;volatile
   754                           
   755                           ;main.c: 124: TRISD4 = 0;
   756  000EA4  9895               	bcf	3989,4,c	;volatile
   757                           
   758                           ;main.c: 126: configTimer();
   759  000EA6  EC19  F00B         	call	_configTimer	;wreg free
   760                           
   761                           ;main.c: 129: configADInterrupt();
   762  000EAA  EC81  F00B         	call	_configADInterrupt	;wreg free
   763                           
   764                           ;main.c: 130: configAD();
   765  000EAE  EC26  F00B         	call	_configAD	;wreg free
   766                           
   767                           ;main.c: 133: configRS232();
   768  000EB2  EC33  F00B         	call	_configRS232	;wreg free
   769                           
   770                           ;main.c: 134: configUSARTInterrupts();
   771  000EB6  EC59  F00B         	call	_configUSARTInterrupts	;wreg free
   772                           
   773                           ;main.c: 138: InitI2C_Master();
   774  000EBA  ECF9  F00A         	call	_InitI2C_Master	;wreg free
   775                           
   776                           ;main.c: 141: unsigned char channel = 1;
   777  000EBE  0E01               	movlw	1
   778  000EC0  0100               	movlb	0	; () banked
   779  000EC2  6F7F               	movwf	main@channel& (0+255),b
   780                           
   781                           ; BSR set to: 0
   782                           ;main.c: 142: selectChanel(channel);
   783  000EC4  0100               	movlb	0	; () banked
   784  000EC6  517F               	movf	main@channel& (0+255),w,b
   785  000EC8  ECB3  F008         	call	_selectChanel
   786                           
   787                           ;main.c: 143: ADCON0bits.GODONE = 1;
   788  000ECC  82C2               	bsf	4034,1,c	;volatile
   789                           
   790                           ;main.c: 146: printf("\n\n\rwrite_RTC_I2c()\n\n");
   791  000ECE  0E84               	movlw	low STR_2
   792  000ED0  0100               	movlb	0	; () banked
   793  000ED2  6F6C               	movwf	printf@f& (0+255),b
   794  000ED4  0E08               	movlw	high STR_2
   795  000ED6  0100               	movlb	0	; () banked
   796  000ED8  6F6D               	movwf	(printf@f+1)& (0+255),b
   797  000EDA  EC61  F004         	call	_printf	;wreg free
   798                           
   799                           ;main.c: 148: for(int i=0; i<(2000/20); i++)
   800  000EDE  0E00               	movlw	0
   801  000EE0  0100               	movlb	0	; () banked
   802  000EE2  6F81               	movwf	(main@i+1)& (0+255),b
   803  000EE4  0E00               	movlw	0
   804  000EE6  6F80               	movwf	main@i& (0+255),b
   805  000EE8                     l2673:
   806                           
   807                           ; BSR set to: 0
   808  000EE8  0100               	movlb	0	; () banked
   809  000EEA  BF81               	btfsc	(main@i+1)& (0+255),7,b
   810  000EEC  D008               	goto	l2677
   811  000EEE  0100               	movlb	0	; () banked
   812  000EF0  5181               	movf	(main@i+1)& (0+255),w,b
   813  000EF2  E111               	bnz	l2681
   814  000EF4  0E64               	movlw	100
   815  000EF6  0100               	movlb	0	; () banked
   816  000EF8  5D80               	subwf	main@i& (0+255),w,b
   817  000EFA  B0D8               	btfsc	status,0,c
   818  000EFC  D00C               	goto	l2681
   819  000EFE                     l2677:
   820                           
   821                           ; BSR set to: 0
   822                           ;main.c: 149: {
   823                           ;main.c: 150: _delay((unsigned long)((20)*(20000000/4000.0)));
   824  000EFE  0E82               	movlw	130
   825  000F00  0100               	movlb	0	; () banked
   826  000F02  6F7E               	movwf	??_main& (0+255),b
   827  000F04  0EDE               	movlw	222
   828  000F06                     u2447:
   829  000F06  2EE8               	decfsz	wreg,f,c
   830  000F08  D7FE               	goto	u2447
   831  000F0A  2F7E               	decfsz	??_main& (0+255),f,b
   832  000F0C  D7FC               	goto	u2447
   833  000F0E  0100               	movlb	0	; () banked
   834  000F10  4B80               	infsnz	main@i& (0+255),f,b
   835  000F12  2B81               	incf	(main@i+1)& (0+255),f,b
   836  000F14  D7E9               	goto	l2673
   837  000F16                     l2681:
   838                           
   839                           ; BSR set to: 0
   840                           ;main.c: 151: }
   841                           ;main.c: 152: write_RTC_I2c();
   842  000F16  ECAA  F009         	call	_write_RTC_I2c	;wreg free
   843                           
   844                           ;main.c: 154: printf("\n\n\rLet The Carnage Begin, now!\n\n");
   845  000F1A  0E13               	movlw	low STR_3
   846  000F1C  0100               	movlb	0	; () banked
   847  000F1E  6F6C               	movwf	printf@f& (0+255),b
   848  000F20  0E08               	movlw	high STR_3
   849  000F22  0100               	movlb	0	; () banked
   850  000F24  6F6D               	movwf	(printf@f+1)& (0+255),b
   851  000F26  EC61  F004         	call	_printf	;wreg free
   852  000F2A                     l2685:
   853                           
   854                           ;main.c: 157: for(int i=0; i<(2000/20); i++)
   855  000F2A  0E00               	movlw	0
   856  000F2C  0100               	movlb	0	; () banked
   857  000F2E  6F83               	movwf	(main@i_1065+1)& (0+255),b
   858  000F30  0E00               	movlw	0
   859  000F32  6F82               	movwf	main@i_1065& (0+255),b
   860  000F34                     l2687:
   861                           
   862                           ; BSR set to: 0
   863  000F34  0100               	movlb	0	; () banked
   864  000F36  BF83               	btfsc	(main@i_1065+1)& (0+255),7,b
   865  000F38  D008               	goto	l2691
   866  000F3A  0100               	movlb	0	; () banked
   867  000F3C  5183               	movf	(main@i_1065+1)& (0+255),w,b
   868  000F3E  E111               	bnz	l2695
   869  000F40  0E64               	movlw	100
   870  000F42  0100               	movlb	0	; () banked
   871  000F44  5D82               	subwf	main@i_1065& (0+255),w,b
   872  000F46  B0D8               	btfsc	status,0,c
   873  000F48  D00C               	goto	l2695
   874  000F4A                     l2691:
   875                           
   876                           ; BSR set to: 0
   877                           ;main.c: 158: {
   878                           ;main.c: 159: _delay((unsigned long)((20)*(20000000/4000.0)));
   879  000F4A  0E82               	movlw	130
   880  000F4C  0100               	movlb	0	; () banked
   881  000F4E  6F7E               	movwf	??_main& (0+255),b
   882  000F50  0EDE               	movlw	222
   883  000F52                     u2457:
   884  000F52  2EE8               	decfsz	wreg,f,c
   885  000F54  D7FE               	goto	u2457
   886  000F56  2F7E               	decfsz	??_main& (0+255),f,b
   887  000F58  D7FC               	goto	u2457
   888  000F5A  0100               	movlb	0	; () banked
   889  000F5C  4B82               	infsnz	main@i_1065& (0+255),f,b
   890  000F5E  2B83               	incf	(main@i_1065+1)& (0+255),f,b
   891  000F60  D7E9               	goto	l2687
   892  000F62                     l2695:
   893                           
   894                           ; BSR set to: 0
   895                           ;main.c: 160: }
   896                           ;main.c: 163: read_RTC_I2c(0x02);
   897  000F62  0E02               	movlw	2
   898  000F64  EC3A  F00A         	call	_read_RTC_I2c
   899                           
   900                           ;main.c: 164: printf("\n\rLeitura Hora: [ %02X ]", leitura);
   901  000F68  0E6B               	movlw	low STR_4
   902  000F6A  0100               	movlb	0	; () banked
   903  000F6C  6F6C               	movwf	printf@f& (0+255),b
   904  000F6E  0E08               	movlw	high STR_4
   905  000F70  0100               	movlb	0	; () banked
   906  000F72  6F6D               	movwf	(printf@f+1)& (0+255),b
   907  000F74  C086  F06E         	movff	_leitura,?_printf+2
   908  000F78  0100               	movlb	0	; () banked
   909  000F7A  6B6F               	clrf	(?_printf+3)& (0+255),b
   910  000F7C  EC61  F004         	call	_printf	;wreg free
   911                           
   912                           ;main.c: 166: _delay((unsigned long)((10)*(20000000/4000.0)));
   913  000F80  0E41               	movlw	65
   914  000F82  0100               	movlb	0	; () banked
   915  000F84  6F7E               	movwf	??_main& (0+255),b
   916  000F86  0EEE               	movlw	238
   917  000F88                     u2467:
   918  000F88  2EE8               	decfsz	wreg,f,c
   919  000F8A  D7FE               	goto	u2467
   920  000F8C  2F7E               	decfsz	??_main& (0+255),f,b
   921  000F8E  D7FC               	goto	u2467
   922  000F90  D000               	nop2	
   923                           
   924                           ;main.c: 169: read_RTC_I2c(0x01);
   925  000F92  0E01               	movlw	1
   926  000F94  EC3A  F00A         	call	_read_RTC_I2c
   927                           
   928                           ;main.c: 170: printf("\n\rLeitura Minuto: [ %02X ]", leitura);
   929  000F98  0E50               	movlw	low STR_5
   930  000F9A  0100               	movlb	0	; () banked
   931  000F9C  6F6C               	movwf	printf@f& (0+255),b
   932  000F9E  0E08               	movlw	high STR_5
   933  000FA0  0100               	movlb	0	; () banked
   934  000FA2  6F6D               	movwf	(printf@f+1)& (0+255),b
   935  000FA4  C086  F06E         	movff	_leitura,?_printf+2
   936  000FA8  0100               	movlb	0	; () banked
   937  000FAA  6B6F               	clrf	(?_printf+3)& (0+255),b
   938  000FAC  EC61  F004         	call	_printf	;wreg free
   939                           
   940                           ;main.c: 172: _delay((unsigned long)((10)*(20000000/4000.0)));
   941  000FB0  0E41               	movlw	65
   942  000FB2  0100               	movlb	0	; () banked
   943  000FB4  6F7E               	movwf	??_main& (0+255),b
   944  000FB6  0EEE               	movlw	238
   945  000FB8                     u2477:
   946  000FB8  2EE8               	decfsz	wreg,f,c
   947  000FBA  D7FE               	goto	u2477
   948  000FBC  2F7E               	decfsz	??_main& (0+255),f,b
   949  000FBE  D7FC               	goto	u2477
   950  000FC0  D000               	nop2	
   951                           
   952                           ;main.c: 175: read_RTC_I2c(0x00);
   953  000FC2  0E00               	movlw	0
   954  000FC4  EC3A  F00A         	call	_read_RTC_I2c
   955                           
   956                           ;main.c: 176: printf("\n\rLeitura Segundo: [ %02X ]", leitura);
   957  000FC8  0E34               	movlw	low STR_6
   958  000FCA  0100               	movlb	0	; () banked
   959  000FCC  6F6C               	movwf	printf@f& (0+255),b
   960  000FCE  0E08               	movlw	high STR_6
   961  000FD0  0100               	movlb	0	; () banked
   962  000FD2  6F6D               	movwf	(printf@f+1)& (0+255),b
   963  000FD4  C086  F06E         	movff	_leitura,?_printf+2
   964  000FD8  0100               	movlb	0	; () banked
   965  000FDA  6B6F               	clrf	(?_printf+3)& (0+255),b
   966  000FDC  EC61  F004         	call	_printf	;wreg free
   967                           
   968                           ;main.c: 178: _delay((unsigned long)((10)*(20000000/4000.0)));
   969  000FE0  0E41               	movlw	65
   970  000FE2  0100               	movlb	0	; () banked
   971  000FE4  6F7E               	movwf	??_main& (0+255),b
   972  000FE6  0EEE               	movlw	238
   973  000FE8                     u2487:
   974  000FE8  2EE8               	decfsz	wreg,f,c
   975  000FEA  D7FE               	goto	u2487
   976  000FEC  2F7E               	decfsz	??_main& (0+255),f,b
   977  000FEE  D7FC               	goto	u2487
   978  000FF0  D000               	nop2	
   979                           
   980                           ;main.c: 180: printf("\n\rRegistrou %u", data_ADC);
   981  000FF2  0EAA               	movlw	low STR_7
   982  000FF4  0100               	movlb	0	; () banked
   983  000FF6  6F6C               	movwf	printf@f& (0+255),b
   984  000FF8  0E08               	movlw	high STR_7
   985  000FFA  0100               	movlb	0	; () banked
   986  000FFC  6F6D               	movwf	(printf@f+1)& (0+255),b
   987  000FFE  C084  F06E         	movff	_data_ADC,?_printf+2
   988  001002  C085  F06F         	movff	_data_ADC+1,?_printf+3
   989  001006  EC61  F004         	call	_printf	;wreg free
   990                           
   991                           ;main.c: 182: _delay((unsigned long)((10)*(20000000/4000.0)));
   992  00100A  0E41               	movlw	65
   993  00100C  0100               	movlb	0	; () banked
   994  00100E  6F7E               	movwf	??_main& (0+255),b
   995  001010  0EEE               	movlw	238
   996  001012                     u2497:
   997  001012  2EE8               	decfsz	wreg,f,c
   998  001014  D7FE               	goto	u2497
   999  001016  2F7E               	decfsz	??_main& (0+255),f,b
  1000  001018  D7FC               	goto	u2497
  1001  00101A  D000               	nop2	
  1002                           
  1003                           ;main.c: 184: printf("\n\r\n\r\n\r");
  1004  00101C  0EB9               	movlw	low STR_8
  1005  00101E  0100               	movlb	0	; () banked
  1006  001020  6F6C               	movwf	printf@f& (0+255),b
  1007  001022  0E08               	movlw	high STR_8
  1008  001024  0100               	movlb	0	; () banked
  1009  001026  6F6D               	movwf	(printf@f+1)& (0+255),b
  1010  001028  EC61  F004         	call	_printf	;wreg free
  1011  00102C  D77E               	goto	l2685
  1012  00102E                     __end_of_main:
  1013                           	opt stack 0
  1014                           tblptru	equ	0xFF8
  1015                           tblptrh	equ	0xFF7
  1016                           tblptrl	equ	0xFF6
  1017                           tablat	equ	0xFF5
  1018                           postinc0	equ	0xFEE
  1019                           wreg	equ	0xFE8
  1020                           status	equ	0xFD8
  1021                           
  1022 ;; *************** function _write_RTC_I2c *****************
  1023 ;; Defined at:
  1024 ;;		line 77 in file "main.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;		None
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;		None
  1029 ;; Return value:  Size  Location     Type
  1030 ;;		None               void
  1031 ;; Registers used:
  1032 ;;		wreg, status,2, status,0, cstack
  1033 ;; Tracked objects:
  1034 ;;		On entry : 0/0
  1035 ;;		On exit  : 0/0
  1036 ;;		Unchanged: 0/0
  1037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1038 ;;      Params:         0       0       0       0       0       0       0       0       0
  1039 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1040 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1041 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1042 ;;Total ram usage:        0 bytes
  1043 ;; Hardware stack levels used:    1
  1044 ;; Hardware stack levels required when called:    4
  1045 ;; This function calls:
  1046 ;;		_I2C_Idle
  1047 ;;		_I2C_Start
  1048 ;;		_I2C_Stop
  1049 ;;		_I2C_Write_Byte
  1050 ;; This function is called by:
  1051 ;;		_main
  1052 ;; This function uses a non-reentrant model
  1053 ;;
  1054                           
  1055                           	psect	text1
  1056  001354                     __ptext1:
  1057                           	opt stack 0
  1058  001354                     _write_RTC_I2c:
  1059                           	opt stack 26
  1060                           
  1061                           ;main.c: 79: I2C_Idle();
  1062                           
  1063                           ;incstack = 0
  1064  001354  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1065                           
  1066                           ;main.c: 80: I2C_Start();
  1067  001358  EC77  F00B         	call	_I2C_Start	;wreg free
  1068                           
  1069                           ;main.c: 81: I2C_Idle();
  1070  00135C  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1071                           
  1072                           ;main.c: 82: I2C_Write_Byte(0xD0);
  1073  001360  0ED0               	movlw	208
  1074  001362  EC49  F00B         	call	_I2C_Write_Byte
  1075                           
  1076                           ;main.c: 83: I2C_Idle();
  1077  001366  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1078                           
  1079                           ;main.c: 84: I2C_Write_Byte(0x00);
  1080  00136A  0E00               	movlw	0
  1081  00136C  EC49  F00B         	call	_I2C_Write_Byte
  1082                           
  1083                           ;main.c: 85: I2C_Idle();
  1084  001370  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1085                           
  1086                           ;main.c: 86: I2C_Write_Byte(0x00);
  1087  001374  0E00               	movlw	0
  1088  001376  EC49  F00B         	call	_I2C_Write_Byte
  1089                           
  1090                           ;main.c: 87: I2C_Idle();
  1091  00137A  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1092                           
  1093                           ;main.c: 88: I2C_Write_Byte(0x08);
  1094  00137E  0E08               	movlw	8
  1095  001380  EC49  F00B         	call	_I2C_Write_Byte
  1096                           
  1097                           ;main.c: 89: I2C_Idle();
  1098  001384  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1099                           
  1100                           ;main.c: 90: I2C_Write_Byte(0x08);
  1101  001388  0E08               	movlw	8
  1102  00138A  EC49  F00B         	call	_I2C_Write_Byte
  1103                           
  1104                           ;main.c: 91: I2C_Idle();
  1105  00138E  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1106                           
  1107                           ;main.c: 92: I2C_Write_Byte(0x04);
  1108  001392  0E04               	movlw	4
  1109  001394  EC49  F00B         	call	_I2C_Write_Byte
  1110                           
  1111                           ;main.c: 93: I2C_Idle();
  1112  001398  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1113                           
  1114                           ;main.c: 94: I2C_Write_Byte(0x17);
  1115  00139C  0E17               	movlw	23
  1116  00139E  EC49  F00B         	call	_I2C_Write_Byte
  1117                           
  1118                           ;main.c: 95: I2C_Idle();
  1119  0013A2  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1120                           
  1121                           ;main.c: 96: I2C_Write_Byte(0x04);
  1122  0013A6  0E04               	movlw	4
  1123  0013A8  EC49  F00B         	call	_I2C_Write_Byte
  1124                           
  1125                           ;main.c: 97: I2C_Idle();
  1126  0013AC  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1127                           
  1128                           ;main.c: 98: I2C_Write_Byte(0x13);
  1129  0013B0  0E13               	movlw	19
  1130  0013B2  EC49  F00B         	call	_I2C_Write_Byte
  1131                           
  1132                           ;main.c: 99: I2C_Idle();
  1133  0013B6  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1134                           
  1135                           ;main.c: 100: I2C_Stop();
  1136  0013BA  EC72  F00B         	call	_I2C_Stop	;wreg free
  1137  0013BE  0012               	return		;funcret
  1138  0013C0                     __end_of_write_RTC_I2c:
  1139                           	opt stack 0
  1140                           tblptru	equ	0xFF8
  1141                           tblptrh	equ	0xFF7
  1142                           tblptrl	equ	0xFF6
  1143                           tablat	equ	0xFF5
  1144                           postinc0	equ	0xFEE
  1145                           wreg	equ	0xFE8
  1146                           status	equ	0xFD8
  1147                           
  1148 ;; *************** function _selectChanel *****************
  1149 ;; Defined at:
  1150 ;;		line 44 in file "ad.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;  channel         1    wreg     unsigned char 
  1153 ;; Auto vars:     Size  Location     Type
  1154 ;;  channel         1    0[BANK0 ] unsigned char 
  1155 ;; Return value:  Size  Location     Type
  1156 ;;		None               void
  1157 ;; Registers used:
  1158 ;;		wreg, status,2, status,0
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1164 ;;      Params:         0       0       0       0       0       0       0       0       0
  1165 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1166 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1167 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1168 ;;Total ram usage:        1 bytes
  1169 ;; Hardware stack levels used:    1
  1170 ;; Hardware stack levels required when called:    3
  1171 ;; This function calls:
  1172 ;;		Nothing
  1173 ;; This function is called by:
  1174 ;;		_main
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text2
  1179  001166                     __ptext2:
  1180                           	opt stack 0
  1181  001166                     _selectChanel:
  1182                           	opt stack 27
  1183                           
  1184                           ;incstack = 0
  1185                           ;selectChanel@channel stored from wreg
  1186  001166  0100               	movlb	0	; () banked
  1187  001168  6F60               	movwf	selectChanel@channel& (0+255),b
  1188                           
  1189                           ;ad.c: 45: if(channel == 0){
  1190  00116A  0100               	movlb	0	; () banked
  1191  00116C  5160               	movf	selectChanel@channel& (0+255),w,b
  1192  00116E  0100               	movlb	0	; () banked
  1193  001170  A4D8               	btfss	status,2,c
  1194  001172  D005               	goto	l2425
  1195                           
  1196                           ; BSR set to: 0
  1197                           ;ad.c: 46: ADCON0bits.CHS3 = 0;
  1198  001174  9AC2               	bcf	4034,5,c	;volatile
  1199                           
  1200                           ;ad.c: 47: ADCON0bits.CHS2 = 0;
  1201  001176  98C2               	bcf	4034,4,c	;volatile
  1202                           
  1203                           ;ad.c: 48: ADCON0bits.CHS1 = 0;
  1204  001178  96C2               	bcf	4034,3,c	;volatile
  1205                           
  1206                           ;ad.c: 49: ADCON0bits.CHS0 = 0;
  1207  00117A  94C2               	bcf	4034,2,c	;volatile
  1208                           
  1209                           ;ad.c: 50: }
  1210  00117C  0012               	return	
  1211  00117E                     l2425:
  1212                           
  1213                           ; BSR set to: 0
  1214                           ;ad.c: 51: else if(channel == 1){
  1215  00117E  0100               	movlb	0	; () banked
  1216  001180  0560               	decf	selectChanel@channel& (0+255),w,b
  1217  001182  A4D8               	btfss	status,2,c
  1218  001184  D005               	goto	l2429
  1219                           
  1220                           ; BSR set to: 0
  1221                           ;ad.c: 52: ADCON0bits.CHS3 = 0;
  1222  001186  9AC2               	bcf	4034,5,c	;volatile
  1223                           
  1224                           ;ad.c: 53: ADCON0bits.CHS2 = 0;
  1225  001188  98C2               	bcf	4034,4,c	;volatile
  1226                           
  1227                           ;ad.c: 54: ADCON0bits.CHS1 = 0;
  1228  00118A  96C2               	bcf	4034,3,c	;volatile
  1229                           
  1230                           ;ad.c: 55: ADCON0bits.CHS0 = 1;
  1231  00118C  84C2               	bsf	4034,2,c	;volatile
  1232                           
  1233                           ;ad.c: 56: }
  1234  00118E  0012               	return	
  1235  001190                     l2429:
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;ad.c: 57: else if(channel == 2){
  1239  001190  0E02               	movlw	2
  1240  001192  0100               	movlb	0	; () banked
  1241  001194  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1242  001196  A4D8               	btfss	status,2,c
  1243  001198  D005               	goto	l2433
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;ad.c: 58: ADCON0bits.CHS3 = 0;
  1247  00119A  9AC2               	bcf	4034,5,c	;volatile
  1248                           
  1249                           ;ad.c: 59: ADCON0bits.CHS2 = 0;
  1250  00119C  98C2               	bcf	4034,4,c	;volatile
  1251                           
  1252                           ;ad.c: 60: ADCON0bits.CHS1 = 1;
  1253  00119E  86C2               	bsf	4034,3,c	;volatile
  1254                           
  1255                           ;ad.c: 61: ADCON0bits.CHS0 = 0;
  1256  0011A0  94C2               	bcf	4034,2,c	;volatile
  1257                           
  1258                           ;ad.c: 62: }
  1259  0011A2  0012               	return	
  1260  0011A4                     l2433:
  1261                           
  1262                           ; BSR set to: 0
  1263                           ;ad.c: 63: else if(channel == 3){
  1264  0011A4  0E03               	movlw	3
  1265  0011A6  0100               	movlb	0	; () banked
  1266  0011A8  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1267  0011AA  A4D8               	btfss	status,2,c
  1268  0011AC  D005               	goto	l2437
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;ad.c: 64: ADCON0bits.CHS3 = 0;
  1272  0011AE  9AC2               	bcf	4034,5,c	;volatile
  1273                           
  1274                           ;ad.c: 65: ADCON0bits.CHS2 = 0;
  1275  0011B0  98C2               	bcf	4034,4,c	;volatile
  1276                           
  1277                           ;ad.c: 66: ADCON0bits.CHS1 = 1;
  1278  0011B2  86C2               	bsf	4034,3,c	;volatile
  1279                           
  1280                           ;ad.c: 67: ADCON0bits.CHS0 = 1;
  1281  0011B4  84C2               	bsf	4034,2,c	;volatile
  1282                           
  1283                           ;ad.c: 68: }
  1284  0011B6  0012               	return	
  1285  0011B8                     l2437:
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;ad.c: 69: else if(channel == 4){
  1289  0011B8  0E04               	movlw	4
  1290  0011BA  0100               	movlb	0	; () banked
  1291  0011BC  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1292  0011BE  A4D8               	btfss	status,2,c
  1293  0011C0  D005               	goto	l2441
  1294                           
  1295                           ; BSR set to: 0
  1296                           ;ad.c: 70: ADCON0bits.CHS3 = 0;
  1297  0011C2  9AC2               	bcf	4034,5,c	;volatile
  1298                           
  1299                           ;ad.c: 71: ADCON0bits.CHS2 = 1;
  1300  0011C4  88C2               	bsf	4034,4,c	;volatile
  1301                           
  1302                           ;ad.c: 72: ADCON0bits.CHS1 = 0;
  1303  0011C6  96C2               	bcf	4034,3,c	;volatile
  1304                           
  1305                           ;ad.c: 73: ADCON0bits.CHS0 = 0;
  1306  0011C8  94C2               	bcf	4034,2,c	;volatile
  1307                           
  1308                           ;ad.c: 74: }
  1309  0011CA  0012               	return	
  1310  0011CC                     l2441:
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;ad.c: 75: else if(channel == 5){
  1314  0011CC  0E05               	movlw	5
  1315  0011CE  0100               	movlb	0	; () banked
  1316  0011D0  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1317  0011D2  A4D8               	btfss	status,2,c
  1318  0011D4  D005               	goto	l2445
  1319                           
  1320                           ; BSR set to: 0
  1321                           ;ad.c: 76: ADCON0bits.CHS3 = 0;
  1322  0011D6  9AC2               	bcf	4034,5,c	;volatile
  1323                           
  1324                           ;ad.c: 77: ADCON0bits.CHS2 = 1;
  1325  0011D8  88C2               	bsf	4034,4,c	;volatile
  1326                           
  1327                           ;ad.c: 78: ADCON0bits.CHS1 = 0;
  1328  0011DA  96C2               	bcf	4034,3,c	;volatile
  1329                           
  1330                           ;ad.c: 79: ADCON0bits.CHS0 = 1;
  1331  0011DC  84C2               	bsf	4034,2,c	;volatile
  1332                           
  1333                           ;ad.c: 80: }
  1334  0011DE  0012               	return	
  1335  0011E0                     l2445:
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;ad.c: 81: else if(channel == 6){
  1339  0011E0  0E06               	movlw	6
  1340  0011E2  0100               	movlb	0	; () banked
  1341  0011E4  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1342  0011E6  A4D8               	btfss	status,2,c
  1343  0011E8  D005               	goto	l2449
  1344                           
  1345                           ; BSR set to: 0
  1346                           ;ad.c: 82: ADCON0bits.CHS3 = 0;
  1347  0011EA  9AC2               	bcf	4034,5,c	;volatile
  1348                           
  1349                           ;ad.c: 83: ADCON0bits.CHS2 = 1;
  1350  0011EC  88C2               	bsf	4034,4,c	;volatile
  1351                           
  1352                           ;ad.c: 84: ADCON0bits.CHS1 = 1;
  1353  0011EE  86C2               	bsf	4034,3,c	;volatile
  1354                           
  1355                           ;ad.c: 85: ADCON0bits.CHS0 = 0;
  1356  0011F0  94C2               	bcf	4034,2,c	;volatile
  1357                           
  1358                           ;ad.c: 86: }
  1359  0011F2  0012               	return	
  1360  0011F4                     l2449:
  1361                           
  1362                           ; BSR set to: 0
  1363                           ;ad.c: 87: else if(channel == 7){
  1364  0011F4  0E07               	movlw	7
  1365  0011F6  0100               	movlb	0	; () banked
  1366  0011F8  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1367  0011FA  A4D8               	btfss	status,2,c
  1368  0011FC  D005               	goto	l2453
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;ad.c: 88: ADCON0bits.CHS3 = 0;
  1372  0011FE  9AC2               	bcf	4034,5,c	;volatile
  1373                           
  1374                           ;ad.c: 89: ADCON0bits.CHS2 = 1;
  1375  001200  88C2               	bsf	4034,4,c	;volatile
  1376                           
  1377                           ;ad.c: 90: ADCON0bits.CHS1 = 1;
  1378  001202  86C2               	bsf	4034,3,c	;volatile
  1379                           
  1380                           ;ad.c: 91: ADCON0bits.CHS0 = 1;
  1381  001204  84C2               	bsf	4034,2,c	;volatile
  1382                           
  1383                           ;ad.c: 92: }
  1384  001206  0012               	return	
  1385  001208                     l2453:
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;ad.c: 93: else if(channel == 8){
  1389  001208  0E08               	movlw	8
  1390  00120A  0100               	movlb	0	; () banked
  1391  00120C  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1392  00120E  A4D8               	btfss	status,2,c
  1393  001210  D005               	goto	l2457
  1394                           
  1395                           ; BSR set to: 0
  1396                           ;ad.c: 94: ADCON0bits.CHS3 = 1;
  1397  001212  8AC2               	bsf	4034,5,c	;volatile
  1398                           
  1399                           ;ad.c: 95: ADCON0bits.CHS2 = 0;
  1400  001214  98C2               	bcf	4034,4,c	;volatile
  1401                           
  1402                           ;ad.c: 96: ADCON0bits.CHS1 = 0;
  1403  001216  96C2               	bcf	4034,3,c	;volatile
  1404                           
  1405                           ;ad.c: 97: ADCON0bits.CHS0 = 0;
  1406  001218  94C2               	bcf	4034,2,c	;volatile
  1407                           
  1408                           ;ad.c: 98: }
  1409  00121A  0012               	return	
  1410  00121C                     l2457:
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;ad.c: 99: else if(channel == 9){
  1414  00121C  0E09               	movlw	9
  1415  00121E  0100               	movlb	0	; () banked
  1416  001220  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1417  001222  A4D8               	btfss	status,2,c
  1418  001224  D005               	goto	l2461
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;ad.c: 100: ADCON0bits.CHS3 = 1;
  1422  001226  8AC2               	bsf	4034,5,c	;volatile
  1423                           
  1424                           ;ad.c: 101: ADCON0bits.CHS2 = 0;
  1425  001228  98C2               	bcf	4034,4,c	;volatile
  1426                           
  1427                           ;ad.c: 102: ADCON0bits.CHS1 = 0;
  1428  00122A  96C2               	bcf	4034,3,c	;volatile
  1429                           
  1430                           ;ad.c: 103: ADCON0bits.CHS0 = 1;
  1431  00122C  84C2               	bsf	4034,2,c	;volatile
  1432                           
  1433                           ;ad.c: 104: }
  1434  00122E  0012               	return	
  1435  001230                     l2461:
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;ad.c: 105: else if(channel == 10){
  1439  001230  0E0A               	movlw	10
  1440  001232  0100               	movlb	0	; () banked
  1441  001234  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1442  001236  A4D8               	btfss	status,2,c
  1443  001238  D005               	goto	l2465
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;ad.c: 106: ADCON0bits.CHS3 = 1;
  1447  00123A  8AC2               	bsf	4034,5,c	;volatile
  1448                           
  1449                           ;ad.c: 107: ADCON0bits.CHS2 = 0;
  1450  00123C  98C2               	bcf	4034,4,c	;volatile
  1451                           
  1452                           ;ad.c: 108: ADCON0bits.CHS1 = 1;
  1453  00123E  86C2               	bsf	4034,3,c	;volatile
  1454                           
  1455                           ;ad.c: 109: ADCON0bits.CHS0 = 0;
  1456  001240  94C2               	bcf	4034,2,c	;volatile
  1457                           
  1458                           ;ad.c: 110: }
  1459  001242  0012               	return	
  1460  001244                     l2465:
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;ad.c: 111: else if(channel == 11){
  1464  001244  0E0B               	movlw	11
  1465  001246  0100               	movlb	0	; () banked
  1466  001248  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1467  00124A  A4D8               	btfss	status,2,c
  1468  00124C  D005               	goto	l2469
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;ad.c: 112: ADCON0bits.CHS3 = 1;
  1472  00124E  8AC2               	bsf	4034,5,c	;volatile
  1473                           
  1474                           ;ad.c: 113: ADCON0bits.CHS2 = 0;
  1475  001250  98C2               	bcf	4034,4,c	;volatile
  1476                           
  1477                           ;ad.c: 114: ADCON0bits.CHS1 = 1;
  1478  001252  86C2               	bsf	4034,3,c	;volatile
  1479                           
  1480                           ;ad.c: 115: ADCON0bits.CHS0 = 1;
  1481  001254  84C2               	bsf	4034,2,c	;volatile
  1482                           
  1483                           ;ad.c: 116: }
  1484  001256  0012               	return	
  1485  001258                     l2469:
  1486                           
  1487                           ; BSR set to: 0
  1488                           ;ad.c: 117: else if(channel == 12){
  1489  001258  0E0C               	movlw	12
  1490  00125A  0100               	movlb	0	; () banked
  1491  00125C  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1492  00125E  A4D8               	btfss	status,2,c
  1493  001260  0012               	return	
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;ad.c: 118: ADCON0bits.CHS3 = 1;
  1497  001262  8AC2               	bsf	4034,5,c	;volatile
  1498                           
  1499                           ;ad.c: 119: ADCON0bits.CHS2 = 1;
  1500  001264  88C2               	bsf	4034,4,c	;volatile
  1501                           
  1502                           ;ad.c: 120: ADCON0bits.CHS1 = 0;
  1503  001266  96C2               	bcf	4034,3,c	;volatile
  1504                           
  1505                           ;ad.c: 121: ADCON0bits.CHS0 = 0;
  1506  001268  94C2               	bcf	4034,2,c	;volatile
  1507                           
  1508                           ; BSR set to: 0
  1509                           
  1510                           ; BSR set to: 0
  1511                           
  1512                           ; BSR set to: 0
  1513                           
  1514                           ; BSR set to: 0
  1515                           
  1516                           ; BSR set to: 0
  1517                           
  1518                           ; BSR set to: 0
  1519                           
  1520                           ; BSR set to: 0
  1521                           
  1522                           ; BSR set to: 0
  1523                           
  1524                           ; BSR set to: 0
  1525                           
  1526                           ; BSR set to: 0
  1527                           
  1528                           ; BSR set to: 0
  1529                           
  1530                           ; BSR set to: 0
  1531  00126A  0012               	return	
  1532  00126C                     __end_of_selectChanel:
  1533                           	opt stack 0
  1534                           tblptru	equ	0xFF8
  1535                           tblptrh	equ	0xFF7
  1536                           tblptrl	equ	0xFF6
  1537                           tablat	equ	0xFF5
  1538                           postinc0	equ	0xFEE
  1539                           wreg	equ	0xFE8
  1540                           status	equ	0xFD8
  1541                           
  1542 ;; *************** function _read_RTC_I2c *****************
  1543 ;; Defined at:
  1544 ;;		line 103 in file "main.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;  pos_memoria     1    wreg     unsigned char 
  1547 ;; Auto vars:     Size  Location     Type
  1548 ;;  pos_memoria     1    1[BANK0 ] unsigned char 
  1549 ;; Return value:  Size  Location     Type
  1550 ;;		None               void
  1551 ;; Registers used:
  1552 ;;		wreg, status,2, status,0, cstack
  1553 ;; Tracked objects:
  1554 ;;		On entry : 0/0
  1555 ;;		On exit  : 0/0
  1556 ;;		Unchanged: 0/0
  1557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1558 ;;      Params:         0       0       0       0       0       0       0       0       0
  1559 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1560 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1561 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1562 ;;Total ram usage:        1 bytes
  1563 ;; Hardware stack levels used:    1
  1564 ;; Hardware stack levels required when called:    4
  1565 ;; This function calls:
  1566 ;;		_I2C_Idle
  1567 ;;		_I2C_ReStart
  1568 ;;		_I2C_Read_Byte
  1569 ;;		_I2C_Send_NACK
  1570 ;;		_I2C_Start
  1571 ;;		_I2C_Stop
  1572 ;;		_I2C_Write_Byte
  1573 ;; This function is called by:
  1574 ;;		_main
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578                           	psect	text3
  1579  001474                     __ptext3:
  1580                           	opt stack 0
  1581  001474                     _read_RTC_I2c:
  1582                           	opt stack 26
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;incstack = 0
  1586                           ;read_RTC_I2c@pos_memoria stored from wreg
  1587  001474  0100               	movlb	0	; () banked
  1588  001476  6F61               	movwf	read_RTC_I2c@pos_memoria& (0+255),b
  1589                           
  1590                           ;main.c: 105: I2C_Idle();
  1591  001478  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1592                           
  1593                           ;main.c: 106: I2C_Start();
  1594  00147C  EC77  F00B         	call	_I2C_Start	;wreg free
  1595                           
  1596                           ;main.c: 107: I2C_Idle();
  1597  001480  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1598                           
  1599                           ;main.c: 108: I2C_Write_Byte(0xD0);
  1600  001484  0ED0               	movlw	208
  1601  001486  EC49  F00B         	call	_I2C_Write_Byte
  1602                           
  1603                           ;main.c: 109: I2C_Idle();
  1604  00148A  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1605                           
  1606                           ;main.c: 110: I2C_Write_Byte(pos_memoria);
  1607  00148E  0100               	movlb	0	; () banked
  1608  001490  5161               	movf	read_RTC_I2c@pos_memoria& (0+255),w,b
  1609  001492  EC49  F00B         	call	_I2C_Write_Byte
  1610                           
  1611                           ;main.c: 111: I2C_Idle();
  1612  001496  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1613                           
  1614                           ;main.c: 112: I2C_ReStart();
  1615  00149A  EC7C  F00B         	call	_I2C_ReStart	;wreg free
  1616                           
  1617                           ;main.c: 113: I2C_Idle();
  1618  00149E  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1619                           
  1620                           ;main.c: 114: I2C_Write_Byte(0xD1);
  1621  0014A2  0ED1               	movlw	209
  1622  0014A4  EC49  F00B         	call	_I2C_Write_Byte
  1623                           
  1624                           ;main.c: 115: I2C_Idle();
  1625  0014A8  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1626                           
  1627                           ;main.c: 116: leitura = I2C_Read_Byte();
  1628  0014AC  EC66  F00B         	call	_I2C_Read_Byte	;wreg free
  1629  0014B0  0100               	movlb	0	; () banked
  1630  0014B2  6F86               	movwf	_leitura& (0+255),b
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;main.c: 117: I2C_Idle();
  1634  0014B4  EC3F  F00B         	call	_I2C_Idle	;wreg free
  1635                           
  1636                           ;main.c: 118: I2C_Send_NACK();
  1637  0014B8  EC60  F00B         	call	_I2C_Send_NACK	;wreg free
  1638                           
  1639                           ;main.c: 119: I2C_Stop();
  1640  0014BC  EC72  F00B         	call	_I2C_Stop	;wreg free
  1641  0014C0  0012               	return		;funcret
  1642  0014C2                     __end_of_read_RTC_I2c:
  1643                           	opt stack 0
  1644                           tblptru	equ	0xFF8
  1645                           tblptrh	equ	0xFF7
  1646                           tblptrl	equ	0xFF6
  1647                           tablat	equ	0xFF5
  1648                           postinc0	equ	0xFEE
  1649                           wreg	equ	0xFE8
  1650                           status	equ	0xFD8
  1651                           
  1652 ;; *************** function _I2C_Write_Byte *****************
  1653 ;; Defined at:
  1654 ;;		line 82 in file "i2c.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;  Byte            1    wreg     unsigned char 
  1657 ;; Auto vars:     Size  Location     Type
  1658 ;;  Byte            1    0[BANK0 ] unsigned char 
  1659 ;; Return value:  Size  Location     Type
  1660 ;;		None               void
  1661 ;; Registers used:
  1662 ;;		wreg
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1668 ;;      Params:         0       0       0       0       0       0       0       0       0
  1669 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1670 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1671 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1672 ;;Total ram usage:        1 bytes
  1673 ;; Hardware stack levels used:    1
  1674 ;; Hardware stack levels required when called:    3
  1675 ;; This function calls:
  1676 ;;		Nothing
  1677 ;; This function is called by:
  1678 ;;		_write_RTC_I2c
  1679 ;;		_read_RTC_I2c
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           	psect	text4
  1684  001692                     __ptext4:
  1685                           	opt stack 0
  1686  001692                     _I2C_Write_Byte:
  1687                           	opt stack 26
  1688                           
  1689                           ;incstack = 0
  1690                           ;I2C_Write_Byte@Byte stored from wreg
  1691  001692  0100               	movlb	0	; () banked
  1692  001694  6F60               	movwf	I2C_Write_Byte@Byte& (0+255),b
  1693                           
  1694                           ;i2c.c: 84: SSPBUF = Byte;
  1695  001696  C060  FFC9         	movff	I2C_Write_Byte@Byte,4041	;volatile
  1696  00169A                     l59:
  1697  00169A  A69E               	btfss	3998,3,c	;volatile
  1698  00169C  D7FE               	goto	l59
  1699                           
  1700                           ;i2c.c: 86: SSPIF = 0;
  1701  00169E  969E               	bcf	3998,3,c	;volatile
  1702                           
  1703                           ;i2c.c: 87: return SSPCON2bits.ACKSTAT;
  1704                           ;	Return value of _I2C_Write_Byte is never used
  1705  0016A0  50C5               	movf	4037,w,c	;volatile
  1706  0016A2  0012               	return		;funcret
  1707  0016A4                     __end_of_I2C_Write_Byte:
  1708                           	opt stack 0
  1709                           tblptru	equ	0xFF8
  1710                           tblptrh	equ	0xFF7
  1711                           tblptrl	equ	0xFF6
  1712                           tablat	equ	0xFF5
  1713                           postinc0	equ	0xFEE
  1714                           wreg	equ	0xFE8
  1715                           status	equ	0xFD8
  1716                           
  1717 ;; *************** function _I2C_Stop *****************
  1718 ;; Defined at:
  1719 ;;		line 62 in file "i2c.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;		None
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;		None
  1724 ;; Return value:  Size  Location     Type
  1725 ;;		None               void
  1726 ;; Registers used:
  1727 ;;		None
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1733 ;;      Params:         0       0       0       0       0       0       0       0       0
  1734 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1735 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1736 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1737 ;;Total ram usage:        0 bytes
  1738 ;; Hardware stack levels used:    1
  1739 ;; Hardware stack levels required when called:    3
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		_write_RTC_I2c
  1744 ;;		_read_RTC_I2c
  1745 ;; This function uses a non-reentrant model
  1746 ;;
  1747                           
  1748                           	psect	text5
  1749  0016E4                     __ptext5:
  1750                           	opt stack 0
  1751  0016E4                     _I2C_Stop:
  1752                           	opt stack 26
  1753                           
  1754                           ;i2c.c: 63: SSPCON2bits.PEN = 1;
  1755                           
  1756                           ;incstack = 0
  1757  0016E4  84C5               	bsf	4037,2,c	;volatile
  1758  0016E6                     l41:
  1759  0016E6  A69E               	btfss	3998,3,c	;volatile
  1760  0016E8  D7FE               	goto	l41
  1761                           
  1762                           ;i2c.c: 65: SSPIF = 0;
  1763  0016EA  969E               	bcf	3998,3,c	;volatile
  1764  0016EC  0012               	return		;funcret
  1765  0016EE                     __end_of_I2C_Stop:
  1766                           	opt stack 0
  1767                           tblptru	equ	0xFF8
  1768                           tblptrh	equ	0xFF7
  1769                           tblptrl	equ	0xFF6
  1770                           tablat	equ	0xFF5
  1771                           postinc0	equ	0xFEE
  1772                           wreg	equ	0xFE8
  1773                           status	equ	0xFD8
  1774                           
  1775 ;; *************** function _I2C_Start *****************
  1776 ;; Defined at:
  1777 ;;		line 48 in file "i2c.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;		None
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;		None
  1782 ;; Return value:  Size  Location     Type
  1783 ;;		None               void
  1784 ;; Registers used:
  1785 ;;		None
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : 0/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1791 ;;      Params:         0       0       0       0       0       0       0       0       0
  1792 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1793 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1794 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1795 ;;Total ram usage:        0 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; Hardware stack levels required when called:    3
  1798 ;; This function calls:
  1799 ;;		Nothing
  1800 ;; This function is called by:
  1801 ;;		_write_RTC_I2c
  1802 ;;		_read_RTC_I2c
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text6
  1807  0016EE                     __ptext6:
  1808                           	opt stack 0
  1809  0016EE                     _I2C_Start:
  1810                           	opt stack 26
  1811                           
  1812                           ;i2c.c: 50: SSPCON2bits.SEN = 1;
  1813                           
  1814                           ;incstack = 0
  1815  0016EE  80C5               	bsf	4037,0,c	;volatile
  1816  0016F0                     l29:
  1817  0016F0  A69E               	btfss	3998,3,c	;volatile
  1818  0016F2  D7FE               	goto	l29
  1819                           
  1820                           ;i2c.c: 52: SSPIF = 0;
  1821  0016F4  969E               	bcf	3998,3,c	;volatile
  1822  0016F6  0012               	return		;funcret
  1823  0016F8                     __end_of_I2C_Start:
  1824                           	opt stack 0
  1825                           tblptru	equ	0xFF8
  1826                           tblptrh	equ	0xFF7
  1827                           tblptrl	equ	0xFF6
  1828                           tablat	equ	0xFF5
  1829                           postinc0	equ	0xFEE
  1830                           wreg	equ	0xFE8
  1831                           status	equ	0xFD8
  1832                           
  1833 ;; *************** function _I2C_Send_NACK *****************
  1834 ;; Defined at:
  1835 ;;		line 75 in file "i2c.c"
  1836 ;; Parameters:    Size  Location     Type
  1837 ;;		None
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;		None
  1840 ;; Return value:  Size  Location     Type
  1841 ;;		None               void
  1842 ;; Registers used:
  1843 ;;		None
  1844 ;; Tracked objects:
  1845 ;;		On entry : 0/0
  1846 ;;		On exit  : 0/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1849 ;;      Params:         0       0       0       0       0       0       0       0       0
  1850 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1851 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1852 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1853 ;;Total ram usage:        0 bytes
  1854 ;; Hardware stack levels used:    1
  1855 ;; Hardware stack levels required when called:    3
  1856 ;; This function calls:
  1857 ;;		Nothing
  1858 ;; This function is called by:
  1859 ;;		_read_RTC_I2c
  1860 ;; This function uses a non-reentrant model
  1861 ;;
  1862                           
  1863                           	psect	text7
  1864  0016C0                     __ptext7:
  1865                           	opt stack 0
  1866  0016C0                     _I2C_Send_NACK:
  1867                           	opt stack 26
  1868                           
  1869                           ;i2c.c: 76: SSPCON2bits.ACKDT = 1;
  1870                           
  1871                           ;incstack = 0
  1872  0016C0  8AC5               	bsf	4037,5,c	;volatile
  1873                           
  1874                           ;i2c.c: 77: SSPCON2bits.ACKEN = 1;
  1875  0016C2  88C5               	bsf	4037,4,c	;volatile
  1876  0016C4                     l53:
  1877  0016C4  A69E               	btfss	3998,3,c	;volatile
  1878  0016C6  D7FE               	goto	l53
  1879                           
  1880                           ;i2c.c: 79: SSPIF = 0;
  1881  0016C8  969E               	bcf	3998,3,c	;volatile
  1882  0016CA  0012               	return		;funcret
  1883  0016CC                     __end_of_I2C_Send_NACK:
  1884                           	opt stack 0
  1885                           tblptru	equ	0xFF8
  1886                           tblptrh	equ	0xFF7
  1887                           tblptrl	equ	0xFF6
  1888                           tablat	equ	0xFF5
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           status	equ	0xFD8
  1892                           
  1893 ;; *************** function _I2C_Read_Byte *****************
  1894 ;; Defined at:
  1895 ;;		line 90 in file "i2c.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;		None
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;		None
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  1    wreg      unsigned char 
  1902 ;; Registers used:
  1903 ;;		wreg, status,2
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1909 ;;      Params:         0       0       0       0       0       0       0       0       0
  1910 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1911 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1912 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1913 ;;Total ram usage:        0 bytes
  1914 ;; Hardware stack levels used:    1
  1915 ;; Hardware stack levels required when called:    3
  1916 ;; This function calls:
  1917 ;;		Nothing
  1918 ;; This function is called by:
  1919 ;;		_read_RTC_I2c
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922                           
  1923                           	psect	text8
  1924  0016CC                     __ptext8:
  1925                           	opt stack 0
  1926  0016CC                     _I2C_Read_Byte:
  1927                           	opt stack 26
  1928                           
  1929                           ;i2c.c: 92: SSPCON2bits.RCEN = 1;
  1930                           
  1931                           ;incstack = 0
  1932  0016CC  86C5               	bsf	4037,3,c	;volatile
  1933  0016CE                     l65:
  1934  0016CE  A69E               	btfss	3998,3,c	;volatile
  1935  0016D0  D7FE               	goto	l65
  1936                           
  1937                           ;i2c.c: 94: SSPIF = 0;
  1938  0016D2  969E               	bcf	3998,3,c	;volatile
  1939                           
  1940                           ;i2c.c: 96: return SSPBUF;
  1941  0016D4  50C9               	movf	4041,w,c	;volatile
  1942  0016D6  0012               	return	
  1943  0016D8                     __end_of_I2C_Read_Byte:
  1944                           	opt stack 0
  1945                           tblptru	equ	0xFF8
  1946                           tblptrh	equ	0xFF7
  1947                           tblptrl	equ	0xFF6
  1948                           tablat	equ	0xFF5
  1949                           postinc0	equ	0xFEE
  1950                           wreg	equ	0xFE8
  1951                           status	equ	0xFD8
  1952                           
  1953 ;; *************** function _I2C_ReStart *****************
  1954 ;; Defined at:
  1955 ;;		line 55 in file "i2c.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;		None
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;		None
  1960 ;; Return value:  Size  Location     Type
  1961 ;;		None               void
  1962 ;; Registers used:
  1963 ;;		None
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1969 ;;      Params:         0       0       0       0       0       0       0       0       0
  1970 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1971 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1972 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1973 ;;Total ram usage:        0 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:    3
  1976 ;; This function calls:
  1977 ;;		Nothing
  1978 ;; This function is called by:
  1979 ;;		_read_RTC_I2c
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           	psect	text9
  1984  0016F8                     __ptext9:
  1985                           	opt stack 0
  1986  0016F8                     _I2C_ReStart:
  1987                           	opt stack 26
  1988                           
  1989                           ;i2c.c: 57: SSPCON2bits.RSEN = 1;
  1990                           
  1991                           ;incstack = 0
  1992  0016F8  82C5               	bsf	4037,1,c	;volatile
  1993  0016FA                     l35:
  1994  0016FA  A69E               	btfss	3998,3,c	;volatile
  1995  0016FC  D7FE               	goto	l35
  1996                           
  1997                           ;i2c.c: 59: SSPIF = 0;
  1998  0016FE  969E               	bcf	3998,3,c	;volatile
  1999  001700  0012               	return		;funcret
  2000  001702                     __end_of_I2C_ReStart:
  2001                           	opt stack 0
  2002                           tblptru	equ	0xFF8
  2003                           tblptrh	equ	0xFF7
  2004                           tblptrl	equ	0xFF6
  2005                           tablat	equ	0xFF5
  2006                           postinc0	equ	0xFEE
  2007                           wreg	equ	0xFE8
  2008                           status	equ	0xFD8
  2009                           
  2010 ;; *************** function _I2C_Idle *****************
  2011 ;; Defined at:
  2012 ;;		line 99 in file "i2c.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;		None
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;		None
  2017 ;; Return value:  Size  Location     Type
  2018 ;;		None               void
  2019 ;; Registers used:
  2020 ;;		wreg, status,2, status,0
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2026 ;;      Params:         0       0       0       0       0       0       0       0       0
  2027 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2028 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2029 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2030 ;;Total ram usage:        1 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:    3
  2033 ;; This function calls:
  2034 ;;		Nothing
  2035 ;; This function is called by:
  2036 ;;		_write_RTC_I2c
  2037 ;;		_read_RTC_I2c
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	text10
  2042  00167E                     __ptext10:
  2043                           	opt stack 0
  2044  00167E                     _I2C_Idle:
  2045                           	opt stack 26
  2046  00167E                     l2331:
  2047  00167E  CFC5 F060          	movff	4037,??_I2C_Idle	;volatile
  2048  001682  0E1F               	movlw	31
  2049  001684  0100               	movlb	0	; () banked
  2050  001686  1760               	andwf	??_I2C_Idle& (0+255),f,b
  2051  001688  A4D8               	btfss	status,2,c
  2052  00168A  D7F9               	goto	l2331
  2053                           
  2054                           ; BSR set to: 0
  2055  00168C  A4C7               	btfss	4039,2,c	;volatile
  2056  00168E  0012               	return	
  2057  001690  D7F6               	goto	l2331
  2058  001692                     __end_of_I2C_Idle:
  2059                           	opt stack 0
  2060                           tblptru	equ	0xFF8
  2061                           tblptrh	equ	0xFF7
  2062                           tblptrl	equ	0xFF6
  2063                           tablat	equ	0xFF5
  2064                           postinc0	equ	0xFEE
  2065                           wreg	equ	0xFE8
  2066                           status	equ	0xFD8
  2067                           
  2068 ;; *************** function _printf *****************
  2069 ;; Defined at:
  2070 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  2073 ;;		 -> STR_8(7), STR_7(15), STR_6(28), STR_5(27), 
  2074 ;;		 -> STR_4(25), STR_3(33), STR_2(21), STR_1(3), 
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  idx             1   20[BANK0 ] unsigned char 
  2077 ;;  tmpval          4    0        struct .
  2078 ;;  cp              3    0        PTR const unsigned char 
  2079 ;;  width           2   27[BANK0 ] int 
  2080 ;;  val             2   24[BANK0 ] unsigned int 
  2081 ;;  ap              2   21[BANK0 ] PTR void [1]
  2082 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2083 ;;  len             2    0        unsigned int 
  2084 ;;  c               1   29[BANK0 ] char 
  2085 ;;  flag            1   26[BANK0 ] unsigned char 
  2086 ;;  prec            1   23[BANK0 ] char 
  2087 ;; Return value:  Size  Location     Type
  2088 ;;                  2   12[BANK0 ] int 
  2089 ;; Registers used:
  2090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2091 ;; Tracked objects:
  2092 ;;		On entry : 0/0
  2093 ;;		On exit  : 0/0
  2094 ;;		Unchanged: 0/0
  2095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2096 ;;      Params:         0       4       0       0       0       0       0       0       0
  2097 ;;      Locals:         0      10       0       0       0       0       0       0       0
  2098 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2099 ;;      Totals:         0      18       0       0       0       0       0       0       0
  2100 ;;Total ram usage:       18 bytes
  2101 ;; Hardware stack levels used:    1
  2102 ;; Hardware stack levels required when called:    4
  2103 ;; This function calls:
  2104 ;;		___lwdiv
  2105 ;;		___lwmod
  2106 ;;		___wmul
  2107 ;;		_isdigit
  2108 ;;		_putch
  2109 ;; This function is called by:
  2110 ;;		_main
  2111 ;; This function uses a non-reentrant model
  2112 ;;
  2113                           
  2114                           	psect	text11
  2115  0008C2                     __ptext11:
  2116                           	opt stack 0
  2117  0008C2                     _printf:
  2118                           	opt stack 26
  2119                           
  2120                           ;doprnt.c: 466: va_list ap;
  2121                           ;doprnt.c: 499: signed char c;
  2122                           ;doprnt.c: 501: int width;
  2123                           ;doprnt.c: 506: signed char prec;
  2124                           ;doprnt.c: 508: unsigned char flag;
  2125                           ;doprnt.c: 523: union {
  2126                           ;doprnt.c: 524: unsigned long vd;
  2127                           ;doprnt.c: 525: double integ;
  2128                           ;doprnt.c: 526: } tmpval;
  2129                           ;doprnt.c: 528: unsigned int val;
  2130                           ;doprnt.c: 529: unsigned len;
  2131                           ;doprnt.c: 530: const char * cp;
  2132                           ;doprnt.c: 533: *ap = __va_start();
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;incstack = 0
  2136  0008C2  0E6E               	movlw	low (?_printf+2)
  2137  0008C4  0100               	movlb	0	; () banked
  2138  0008C6  6F75               	movwf	printf@ap& (0+255),b
  2139  0008C8  0E00               	movlw	high (?_printf+2)
  2140  0008CA  0100               	movlb	0	; () banked
  2141  0008CC  6F76               	movwf	(printf@ap+1)& (0+255),b
  2142                           
  2143                           ;doprnt.c: 536: while(c = *f++) {
  2144  0008CE  D187               	goto	l2577
  2145  0008D0                     l2475:
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;doprnt.c: 538: if(c != '%')
  2149  0008D0  0E25               	movlw	37
  2150  0008D2  0100               	movlb	0	; () banked
  2151  0008D4  197D               	xorwf	printf@c& (0+255),w,b
  2152  0008D6  B4D8               	btfsc	status,2,c
  2153  0008D8  D005               	goto	l2479
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;doprnt.c: 540: {
  2157                           ;doprnt.c: 541: (putch(c) );
  2158  0008DA  0100               	movlb	0	; () banked
  2159  0008DC  517D               	movf	printf@c& (0+255),w,b
  2160  0008DE  EC52  F00B         	call	_putch
  2161                           
  2162                           ;doprnt.c: 542: continue;
  2163  0008E2  D17D               	goto	l2577
  2164  0008E4                     l2479:
  2165                           
  2166                           ;doprnt.c: 543: }
  2167                           ;doprnt.c: 546: width = 0;
  2168  0008E4  0E00               	movlw	0
  2169  0008E6  0100               	movlb	0	; () banked
  2170  0008E8  6F7C               	movwf	(printf@width+1)& (0+255),b
  2171  0008EA  0E00               	movlw	0
  2172  0008EC  6F7B               	movwf	printf@width& (0+255),b
  2173                           
  2174                           ;doprnt.c: 548: flag = 0;
  2175  0008EE  0E00               	movlw	0
  2176  0008F0  0100               	movlb	0	; () banked
  2177  0008F2  6F7A               	movwf	printf@flag& (0+255),b
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;doprnt.c: 551: switch(*f) {
  2181                           
  2182                           ;doprnt.c: 550: for(;;) {
  2183  0008F4  D005               	goto	l2485
  2184  0008F6                     l2481:
  2185                           
  2186                           ;doprnt.c: 580: flag |= 0x04;
  2187  0008F6  0100               	movlb	0	; () banked
  2188  0008F8  857A               	bsf	printf@flag& (0+255),2,b
  2189                           
  2190                           ;doprnt.c: 581: f++;
  2191  0008FA  0100               	movlb	0	; () banked
  2192  0008FC  4B6C               	infsnz	printf@f& (0+255),f,b
  2193  0008FE  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2194  000900                     l2485:
  2195  000900  C06C  FFF6         	movff	printf@f,tblptrl
  2196  000904  C06D  FFF7         	movff	printf@f+1,tblptrh
  2197  000908                     	if	0	;tblptru may be non-zero
  2198  000908                     	endif
  2199  000908                     	if	0	;tblptru may be non-zero
  2200  000908                     	endif
  2201  000908  0008               	tblrd		*
  2202  00090A  50F5               	movf	tablat,w,c
  2203                           
  2204                           ; Switch size 1, requested type "space"
  2205                           ; Number of cases is 1, Range of values is 48 to 48
  2206                           ; switch strategies available:
  2207                           ; Name         Instructions Cycles
  2208                           ; simple_byte            4     3 (average)
  2209                           ;	Chosen strategy is simple_byte
  2210  00090C  0A30               	xorlw	48	; case 48
  2211  00090E  B4D8               	btfsc	status,2,c
  2212  000910  D7F2               	goto	l2481
  2213                           
  2214                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2215                           
  2216                           ;doprnt.c: 586: }
  2217                           
  2218                           ;doprnt.c: 585: break;
  2219  000912  C06C  FFF6         	movff	printf@f,tblptrl
  2220  000916  C06D  FFF7         	movff	printf@f+1,tblptrh
  2221  00091A                     	if	0	;tblptru may be non-zero
  2222  00091A                     	endif
  2223  00091A                     	if	0	;tblptru may be non-zero
  2224  00091A                     	endif
  2225  00091A  0008               	tblrd		*
  2226  00091C  50F5               	movf	tablat,w,c
  2227  00091E  ECD1  F00A         	call	_isdigit
  2228  000922  A0D8               	btfss	status,0,c
  2229  000924  D048               	goto	l2505
  2230                           
  2231                           ;doprnt.c: 598: width = 0;
  2232  000926  0E00               	movlw	0
  2233  000928  0100               	movlb	0	; () banked
  2234  00092A  6F7C               	movwf	(printf@width+1)& (0+255),b
  2235  00092C  0E00               	movlw	0
  2236  00092E  6F7B               	movwf	printf@width& (0+255),b
  2237  000930                     l2491:
  2238                           
  2239                           ;doprnt.c: 600: width *= 10;
  2240  000930  C07B  F060         	movff	printf@width,___wmul@multiplier
  2241  000934  C07C  F061         	movff	printf@width+1,___wmul@multiplier+1
  2242  000938  0E00               	movlw	0
  2243  00093A  0100               	movlb	0	; () banked
  2244  00093C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2245  00093E  0E0A               	movlw	10
  2246  000940  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2247  000942  EC9F  F00A         	call	___wmul	;wreg free
  2248  000946  C060  F07B         	movff	?___wmul,printf@width
  2249  00094A  C061  F07C         	movff	?___wmul+1,printf@width+1
  2250                           
  2251                           ;doprnt.c: 601: width += *f++ - '0';
  2252  00094E  0ED0               	movlw	208
  2253  000950  0100               	movlb	0	; () banked
  2254  000952  6F70               	movwf	??_printf& (0+255),b
  2255  000954  0EFF               	movlw	255
  2256  000956  0100               	movlb	0	; () banked
  2257  000958  6F71               	movwf	(??_printf+1)& (0+255),b
  2258  00095A  C06C  FFF6         	movff	printf@f,tblptrl
  2259  00095E  C06D  FFF7         	movff	printf@f+1,tblptrh
  2260  000962                     	if	0	;tblptru may be non-zero
  2261  000962                     	endif
  2262  000962                     	if	0	;tblptru may be non-zero
  2263  000962                     	endif
  2264  000962  0008               	tblrd		*
  2265  000964  50F5               	movf	tablat,w,c
  2266  000966  0100               	movlb	0	; () banked
  2267  000968  6F72               	movwf	(??_printf+2)& (0+255),b
  2268  00096A  6B73               	clrf	(??_printf+3)& (0+255),b
  2269  00096C  0100               	movlb	0	; () banked
  2270  00096E  5170               	movf	??_printf& (0+255),w,b
  2271  000970  0100               	movlb	0	; () banked
  2272  000972  2772               	addwf	(??_printf+2)& (0+255),f,b
  2273  000974  0100               	movlb	0	; () banked
  2274  000976  5171               	movf	(??_printf+1)& (0+255),w,b
  2275  000978  0100               	movlb	0	; () banked
  2276  00097A  2373               	addwfc	(??_printf+3)& (0+255),f,b
  2277  00097C  0100               	movlb	0	; () banked
  2278  00097E  5172               	movf	(??_printf+2)& (0+255),w,b
  2279  000980  0100               	movlb	0	; () banked
  2280  000982  277B               	addwf	printf@width& (0+255),f,b
  2281  000984  0100               	movlb	0	; () banked
  2282  000986  5173               	movf	(??_printf+3)& (0+255),w,b
  2283  000988  0100               	movlb	0	; () banked
  2284  00098A  237C               	addwfc	(printf@width+1)& (0+255),f,b
  2285                           
  2286                           ; BSR set to: 0
  2287  00098C  0100               	movlb	0	; () banked
  2288  00098E  4B6C               	infsnz	printf@f& (0+255),f,b
  2289  000990  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2293  000992  C06C  FFF6         	movff	printf@f,tblptrl
  2294  000996  C06D  FFF7         	movff	printf@f+1,tblptrh
  2295  00099A                     	if	0	;tblptru may be non-zero
  2296  00099A                     	endif
  2297  00099A                     	if	0	;tblptru may be non-zero
  2298  00099A                     	endif
  2299  00099A  0008               	tblrd		*
  2300  00099C  50F5               	movf	tablat,w,c
  2301  00099E  ECD1  F00A         	call	_isdigit
  2302  0009A2  A0D8               	btfss	status,0,c
  2303  0009A4  D008               	goto	l2505
  2304  0009A6  D7C4               	goto	l2491
  2305  0009A8                     l2499:
  2306                           
  2307                           ;doprnt.c: 718: case 'x':
  2308                           ;doprnt.c: 721: flag |= 0x80;
  2309  0009A8  0100               	movlb	0	; () banked
  2310  0009AA  8F7A               	bsf	printf@flag& (0+255),7,b
  2311                           
  2312                           ;doprnt.c: 723: break;
  2313  0009AC  D01D               	goto	l2507
  2314  0009AE                     l2501:
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;doprnt.c: 818: flag |= 0xC0;
  2318  0009AE  0EC0               	movlw	192
  2319  0009B0  0100               	movlb	0	; () banked
  2320  0009B2  137A               	iorwf	printf@flag& (0+255),f,b
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;doprnt.c: 822: }
  2324                           
  2325                           ;doprnt.c: 819: break;
  2326  0009B4  D019               	goto	l2507
  2327  0009B6                     l2505:
  2328  0009B6  C06C  FFF6         	movff	printf@f,tblptrl
  2329  0009BA  C06D  FFF7         	movff	printf@f+1,tblptrh
  2330  0009BE  0100               	movlb	0	; () banked
  2331  0009C0  4B6C               	infsnz	printf@f& (0+255),f,b
  2332  0009C2  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2333  0009C4                     	if	0	;tblptru may be non-zero
  2334  0009C4                     	endif
  2335  0009C4                     	if	0	;tblptru may be non-zero
  2336  0009C4                     	endif
  2337  0009C4  0008               	tblrd		*
  2338  0009C6  CFF5 F07D          	movff	tablat,printf@c
  2339  0009CA  0100               	movlb	0	; () banked
  2340  0009CC  517D               	movf	printf@c& (0+255),w,b
  2341                           
  2342                           ; Switch size 1, requested type "space"
  2343                           ; Number of cases is 4, Range of values is 0 to 120
  2344                           ; switch strategies available:
  2345                           ; Name         Instructions Cycles
  2346                           ; simple_byte           13     7 (average)
  2347                           ;	Chosen strategy is simple_byte
  2348  0009CE  0A00               	xorlw	0	; case 0
  2349  0009D0  B4D8               	btfsc	status,2,c
  2350  0009D2  0012               	return	
  2351  0009D4  0A58               	xorlw	88	; case 88
  2352  0009D6  B4D8               	btfsc	status,2,c
  2353  0009D8  D7E7               	goto	l2499
  2354  0009DA  0A2D               	xorlw	45	; case 117
  2355  0009DC  B4D8               	btfsc	status,2,c
  2356  0009DE  D7E7               	goto	l2501
  2357  0009E0  0A0D               	xorlw	13	; case 120
  2358  0009E2  B4D8               	btfsc	status,2,c
  2359  0009E4  D7E1               	goto	l2499
  2360  0009E6  D0FB               	goto	l2577
  2361  0009E8                     l2507:
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;doprnt.c: 1273: {
  2365                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2366  0009E8  C075  FFD9         	movff	printf@ap,fsr2l
  2367  0009EC  C076  FFDA         	movff	printf@ap+1,fsr2h
  2368  0009F0  CFDE F078          	movff	postinc2,printf@val
  2369  0009F4  CFDD F079          	movff	postdec2,printf@val+1
  2370                           
  2371                           ; BSR set to: 0
  2372  0009F8  0E02               	movlw	2
  2373  0009FA  0100               	movlb	0	; () banked
  2374  0009FC  2775               	addwf	printf@ap& (0+255),f,b
  2375  0009FE  0E00               	movlw	0
  2376  000A00  2376               	addwfc	(printf@ap+1)& (0+255),f,b
  2377                           
  2378                           ;doprnt.c: 1287: }
  2379                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2380  000A02  D03C               	goto	l2541
  2381  000A04                     l2511:
  2382                           
  2383                           ; BSR set to: 0
  2384                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2385  000A04  0E01               	movlw	1
  2386  000A06  0100               	movlb	0	; () banked
  2387  000A08  6F7D               	movwf	printf@c& (0+255),b
  2388  000A0A                     l2513:
  2389                           
  2390                           ; BSR set to: 0
  2391  000A0A  0E05               	movlw	5
  2392  000A0C  0100               	movlb	0	; () banked
  2393  000A0E  197D               	xorwf	printf@c& (0+255),w,b
  2394  000A10  B4D8               	btfsc	status,2,c
  2395  000A12  D03D               	goto	l2543
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;doprnt.c: 1306: if(val < dpowers[c])
  2399                           
  2400                           ; BSR set to: 0
  2401                           
  2402                           ; BSR set to: 0
  2403  000A14  0100               	movlb	0	; () banked
  2404  000A16  517D               	movf	printf@c& (0+255),w,b
  2405  000A18  0D02               	mullw	2
  2406  000A1A  0E01               	movlw	low _dpowers
  2407  000A1C  24F3               	addwf	prodl,w,c
  2408  000A1E  6EF6               	movwf	tblptrl,c
  2409  000A20  0E08               	movlw	high _dpowers
  2410  000A22  20F4               	addwfc	prodh,w,c
  2411  000A24  6EF7               	movwf	tblptrh,c
  2412  000A26                     	if	0	;There are less than 3 active tblptr bytes
  2413  000A26                     	endif
  2414  000A26  0009               	tblrd		*+
  2415  000A28  50F5               	movf	tablat,w,c
  2416  000A2A  0100               	movlb	0	; () banked
  2417  000A2C  5D78               	subwf	printf@val& (0+255),w,b
  2418  000A2E  0009               	tblrd		*+
  2419  000A30  50F5               	movf	tablat,w,c
  2420  000A32  0100               	movlb	0	; () banked
  2421  000A34  5979               	subwfb	(printf@val+1)& (0+255),w,b
  2422  000A36  A0D8               	btfss	status,0,c
  2423  000A38  D02A               	goto	l2543
  2424                           
  2425                           ; BSR set to: 0
  2426                           
  2427                           ; BSR set to: 0
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;doprnt.c: 1307: break;
  2431  000A3A  0100               	movlb	0	; () banked
  2432  000A3C  2B7D               	incf	printf@c& (0+255),f,b
  2433  000A3E  D7E5               	goto	l2513
  2434  000A40                     l2525:
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2438  000A40  0E01               	movlw	1
  2439  000A42  0100               	movlb	0	; () banked
  2440  000A44  6F7D               	movwf	printf@c& (0+255),b
  2441  000A46                     l2527:
  2442                           
  2443                           ; BSR set to: 0
  2444  000A46  0E04               	movlw	4
  2445  000A48  0100               	movlb	0	; () banked
  2446  000A4A  197D               	xorwf	printf@c& (0+255),w,b
  2447  000A4C  B4D8               	btfsc	status,2,c
  2448  000A4E  D01F               	goto	l2543
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2452                           
  2453                           ; BSR set to: 0
  2454                           
  2455                           ; BSR set to: 0
  2456  000A50  0100               	movlb	0	; () banked
  2457  000A52  517D               	movf	printf@c& (0+255),w,b
  2458  000A54  0D02               	mullw	2
  2459  000A56  0E0B               	movlw	low _hexpowers
  2460  000A58  24F3               	addwf	prodl,w,c
  2461  000A5A  6EF6               	movwf	tblptrl,c
  2462  000A5C  0E08               	movlw	high _hexpowers
  2463  000A5E  20F4               	addwfc	prodh,w,c
  2464  000A60  6EF7               	movwf	tblptrh,c
  2465  000A62                     	if	0	;There are less than 3 active tblptr bytes
  2466  000A62                     	endif
  2467  000A62  0009               	tblrd		*+
  2468  000A64  50F5               	movf	tablat,w,c
  2469  000A66  0100               	movlb	0	; () banked
  2470  000A68  5D78               	subwf	printf@val& (0+255),w,b
  2471  000A6A  0009               	tblrd		*+
  2472  000A6C  50F5               	movf	tablat,w,c
  2473  000A6E  0100               	movlb	0	; () banked
  2474  000A70  5979               	subwfb	(printf@val+1)& (0+255),w,b
  2475  000A72  A0D8               	btfss	status,0,c
  2476  000A74  D00C               	goto	l2543
  2477                           
  2478                           ; BSR set to: 0
  2479                           
  2480                           ; BSR set to: 0
  2481                           
  2482                           ; BSR set to: 0
  2483                           ;doprnt.c: 1318: break;
  2484  000A76  0100               	movlb	0	; () banked
  2485  000A78  2B7D               	incf	printf@c& (0+255),f,b
  2486  000A7A  D7E5               	goto	l2527
  2487  000A7C                     l2541:
  2488                           
  2489                           ; BSR set to: 0
  2490  000A7C  0100               	movlb	0	; () banked
  2491  000A7E  517A               	movf	printf@flag& (0+255),w,b
  2492  000A80  0BC0               	andlw	192
  2493                           
  2494                           ; Switch size 1, requested type "space"
  2495                           ; Number of cases is 2, Range of values is 128 to 192
  2496                           ; switch strategies available:
  2497                           ; Name         Instructions Cycles
  2498                           ; simple_byte            7     4 (average)
  2499                           ;	Chosen strategy is simple_byte
  2500  000A82  0A80               	xorlw	128	; case 128
  2501  000A84  B4D8               	btfsc	status,2,c
  2502  000A86  D7DC               	goto	l2525
  2503  000A88  0A40               	xorlw	64	; case 192
  2504  000A8A  B4D8               	btfsc	status,2,c
  2505  000A8C  D7BB               	goto	l2511
  2506  000A8E                     l2543:
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;doprnt.c: 1381: if(width > c)
  2510  000A8E  0E80               	movlw	128
  2511  000A90  0100               	movlb	0	; () banked
  2512  000A92  BF7D               	btfsc	printf@c& (0+255),7,b
  2513  000A94  0E7F               	movlw	127
  2514  000A96  0100               	movlb	0	; () banked
  2515  000A98  6F70               	movwf	??_printf& (0+255),b
  2516  000A9A  0100               	movlb	0	; () banked
  2517  000A9C  517B               	movf	printf@width& (0+255),w,b
  2518  000A9E  0100               	movlb	0	; () banked
  2519  000AA0  5D7D               	subwf	printf@c& (0+255),w,b
  2520  000AA2  0100               	movlb	0	; () banked
  2521  000AA4  517C               	movf	(printf@width+1)& (0+255),w,b
  2522  000AA6  0A80               	xorlw	128
  2523  000AA8  0100               	movlb	0	; () banked
  2524  000AAA  5970               	subwfb	??_printf& (0+255),w,b
  2525  000AAC  B0D8               	btfsc	status,0,c
  2526  000AAE  D00B               	goto	l2547
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;doprnt.c: 1382: width -= c;
  2530  000AB0  0100               	movlb	0	; () banked
  2531  000AB2  517D               	movf	printf@c& (0+255),w,b
  2532  000AB4  0100               	movlb	0	; () banked
  2533  000AB6  5F7B               	subwf	printf@width& (0+255),f,b
  2534  000AB8  0E00               	movlw	0
  2535  000ABA  0100               	movlb	0	; () banked
  2536  000ABC  BF7D               	btfsc	printf@c& (0+255),7,b
  2537  000ABE  0EFF               	movlw	255
  2538  000AC0  0100               	movlb	0	; () banked
  2539  000AC2  5B7C               	subwfb	(printf@width+1)& (0+255),f,b
  2540  000AC4  D005               	goto	l2549
  2541  000AC6                     l2547:
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;doprnt.c: 1383: else
  2545                           ;doprnt.c: 1384: width = 0;
  2546  000AC6  0E00               	movlw	0
  2547  000AC8  0100               	movlb	0	; () banked
  2548  000ACA  6F7C               	movwf	(printf@width+1)& (0+255),b
  2549  000ACC  0E00               	movlw	0
  2550  000ACE  6F7B               	movwf	printf@width& (0+255),b
  2551  000AD0                     l2549:
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;doprnt.c: 1387: if(flag & 0x04) {
  2555  000AD0  0100               	movlb	0	; () banked
  2556  000AD2  A57A               	btfss	printf@flag& (0+255),2,b
  2557  000AD4  D00E               	goto	l2557
  2558  000AD6                     
  2559                           ; BSR set to: 0
  2560                           ;doprnt.c: 1415: if(width)
  2561  000AD6  0100               	movlb	0	; () banked
  2562  000AD8  517B               	movf	printf@width& (0+255),w,b
  2563  000ADA  0100               	movlb	0	; () banked
  2564  000ADC  117C               	iorwf	(printf@width+1)& (0+255),w,b
  2565  000ADE  B4D8               	btfsc	status,2,c
  2566  000AE0  D01B               	goto	l344
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;doprnt.c: 1417: (putch('0') );
  2570                           
  2571                           ; BSR set to: 0
  2572                           
  2573                           ;doprnt.c: 1416: do
  2574  000AE2  0E30               	movlw	48
  2575  000AE4  EC52  F00B         	call	_putch
  2576                           
  2577                           ;doprnt.c: 1418: while(--width);
  2578  000AE8  0100               	movlb	0	; () banked
  2579  000AEA  077B               	decf	printf@width& (0+255),f,b
  2580  000AEC  A0D8               	btfss	status,0,c
  2581  000AEE  077C               	decf	(printf@width+1)& (0+255),f,b
  2582  000AF0  D7F2               	goto	L1
  2583  000AF2                     l2557:
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;doprnt.c: 1422: {
  2587                           ;doprnt.c: 1424: if(width
  2588                           ;doprnt.c: 1428: )
  2589  000AF2  0100               	movlb	0	; () banked
  2590  000AF4  517B               	movf	printf@width& (0+255),w,b
  2591  000AF6  0100               	movlb	0	; () banked
  2592  000AF8  117C               	iorwf	(printf@width+1)& (0+255),w,b
  2593  000AFA  B4D8               	btfsc	status,2,c
  2594  000AFC  D00D               	goto	l344
  2595  000AFE                     l2559:
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;doprnt.c: 1430: (putch(' ') );
  2599  000AFE  0E20               	movlw	32
  2600  000B00  EC52  F00B         	call	_putch
  2601                           
  2602                           ;doprnt.c: 1431: while(--width);
  2603  000B04  0100               	movlb	0	; () banked
  2604  000B06  077B               	decf	printf@width& (0+255),f,b
  2605  000B08  A0D8               	btfss	status,0,c
  2606  000B0A  077C               	decf	(printf@width+1)& (0+255),f,b
  2607  000B0C  0100               	movlb	0	; () banked
  2608  000B0E  517B               	movf	printf@width& (0+255),w,b
  2609  000B10  0100               	movlb	0	; () banked
  2610  000B12  117C               	iorwf	(printf@width+1)& (0+255),w,b
  2611  000B14  A4D8               	btfss	status,2,c
  2612  000B16  D7F3               	goto	l2559
  2613  000B18                     l344:
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;doprnt.c: 1469: }
  2617                           ;doprnt.c: 1472: prec = c;
  2618  000B18  C07D  F077         	movff	printf@c,printf@prec
  2619                           
  2620                           ;doprnt.c: 1474: while(prec--) {
  2621  000B1C  D05A               	goto	l2575
  2622  000B1E                     l2563:
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2626  000B1E  0100               	movlb	0	; () banked
  2627  000B20  5177               	movf	printf@prec& (0+255),w,b
  2628  000B22  0D02               	mullw	2
  2629  000B24  0E01               	movlw	low _dpowers
  2630  000B26  24F3               	addwf	prodl,w,c
  2631  000B28  6EF6               	movwf	tblptrl,c
  2632  000B2A  0E08               	movlw	high _dpowers
  2633  000B2C  20F4               	addwfc	prodh,w,c
  2634  000B2E  6EF7               	movwf	tblptrh,c
  2635  000B30                     	if	0	;There are less than 3 active tblptr bytes
  2636  000B30                     	endif
  2637  000B30  0009               	tblrd		*+
  2638  000B32  CFF5 F062          	movff	tablat,___lwdiv@divisor
  2639  000B36  000A               	tblrd		*-
  2640  000B38  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  2641  000B3C  C078  F060         	movff	printf@val,___lwdiv@dividend
  2642  000B40  C079  F061         	movff	printf@val+1,___lwdiv@dividend+1
  2643  000B44  EC36  F009         	call	___lwdiv	;wreg free
  2644  000B48  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  2645  000B4C  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  2646  000B50  0E00               	movlw	0
  2647  000B52  0100               	movlb	0	; () banked
  2648  000B54  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  2649  000B56  0E0A               	movlw	10
  2650  000B58  6F69               	movwf	___lwmod@divisor& (0+255),b
  2651  000B5A  ECE0  F009         	call	___lwmod	;wreg free
  2652  000B5E  0100               	movlb	0	; () banked
  2653  000B60  5167               	movf	?___lwmod& (0+255),w,b
  2654  000B62  0F30               	addlw	48
  2655  000B64  0100               	movlb	0	; () banked
  2656  000B66  6F7D               	movwf	printf@c& (0+255),b
  2657                           
  2658                           ;doprnt.c: 1491: break;
  2659  000B68  D030               	goto	l2573
  2660  000B6A                     l2565:
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;doprnt.c: 1499: {
  2664                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2665  000B6A  C078  F060         	movff	printf@val,___lwdiv@dividend
  2666  000B6E  C079  F061         	movff	printf@val+1,___lwdiv@dividend+1
  2667  000B72  0100               	movlb	0	; () banked
  2668  000B74  5177               	movf	printf@prec& (0+255),w,b
  2669  000B76  0D02               	mullw	2
  2670  000B78  0E0B               	movlw	low _hexpowers
  2671  000B7A  24F3               	addwf	prodl,w,c
  2672  000B7C  6EF6               	movwf	tblptrl,c
  2673  000B7E  0E08               	movlw	high _hexpowers
  2674  000B80  20F4               	addwfc	prodh,w,c
  2675  000B82  6EF7               	movwf	tblptrh,c
  2676  000B84                     	if	0	;There are less than 3 active tblptr bytes
  2677  000B84                     	endif
  2678  000B84  0009               	tblrd		*+
  2679  000B86  CFF5 F062          	movff	tablat,___lwdiv@divisor
  2680  000B8A  000A               	tblrd		*-
  2681  000B8C  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  2682  000B90  EC36  F009         	call	___lwdiv	;wreg free
  2683  000B94  0100               	movlb	0	; () banked
  2684  000B96  5160               	movf	?___lwdiv& (0+255),w,b
  2685  000B98  0B0F               	andlw	15
  2686  000B9A  0100               	movlb	0	; () banked
  2687  000B9C  6F74               	movwf	printf@idx& (0+255),b
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  2691  000B9E  0100               	movlb	0	; () banked
  2692  000BA0  5174               	movf	printf@idx& (0+255),w,b
  2693  000BA2  0D01               	mullw	1
  2694  000BA4  0E99               	movlw	low STR_9
  2695  000BA6  24F3               	addwf	prodl,w,c
  2696  000BA8  6EF6               	movwf	tblptrl,c
  2697  000BAA  0E08               	movlw	high STR_9
  2698  000BAC  20F4               	addwfc	prodh,w,c
  2699  000BAE  6EF7               	movwf	tblptrh,c
  2700  000BB0                     	if	0	;There are less than 3 active tblptr bytes
  2701  000BB0                     	endif
  2702  000BB0  0008               	tblrd		*
  2703  000BB2  CFF5 F07D          	movff	tablat,printf@c
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;doprnt.c: 1523: }
  2707                           
  2708                           ;doprnt.c: 1508: }
  2709                           ;doprnt.c: 1510: break;
  2710  000BB6  D009               	goto	l2573
  2711  000BB8                     l2571:
  2712                           
  2713                           ; BSR set to: 0
  2714  000BB8  0100               	movlb	0	; () banked
  2715  000BBA  517A               	movf	printf@flag& (0+255),w,b
  2716  000BBC  0BC0               	andlw	192
  2717                           
  2718                           ; Switch size 1, requested type "space"
  2719                           ; Number of cases is 2, Range of values is 128 to 192
  2720                           ; switch strategies available:
  2721                           ; Name         Instructions Cycles
  2722                           ; simple_byte            7     4 (average)
  2723                           ;	Chosen strategy is simple_byte
  2724  000BBE  0A80               	xorlw	128	; case 128
  2725  000BC0  B4D8               	btfsc	status,2,c
  2726  000BC2  D7D3               	goto	l2565
  2727  000BC4  0A40               	xorlw	64	; case 192
  2728  000BC6  B4D8               	btfsc	status,2,c
  2729  000BC8  D7AA               	goto	l2563
  2730  000BCA                     l2573:
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;doprnt.c: 1524: (putch(c) );
  2734  000BCA  0100               	movlb	0	; () banked
  2735  000BCC  517D               	movf	printf@c& (0+255),w,b
  2736  000BCE  EC52  F00B         	call	_putch
  2737  000BD2                     l2575:
  2738  000BD2  0100               	movlb	0	; () banked
  2739  000BD4  0777               	decf	printf@prec& (0+255),f,b
  2740  000BD6  0100               	movlb	0	; () banked
  2741  000BD8  2977               	incf	printf@prec& (0+255),w,b
  2742  000BDA  A4D8               	btfss	status,2,c
  2743  000BDC  D7ED               	goto	l2571
  2744  000BDE                     l2577:
  2745  000BDE  C06C  FFF6         	movff	printf@f,tblptrl
  2746  000BE2  C06D  FFF7         	movff	printf@f+1,tblptrh
  2747  000BE6  0100               	movlb	0	; () banked
  2748  000BE8  4B6C               	infsnz	printf@f& (0+255),f,b
  2749  000BEA  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2750  000BEC                     	if	0	;tblptru may be non-zero
  2751  000BEC                     	endif
  2752  000BEC                     	if	0	;tblptru may be non-zero
  2753  000BEC                     	endif
  2754  000BEC  0008               	tblrd		*
  2755  000BEE  CFF5 F07D          	movff	tablat,printf@c
  2756  000BF2  0100               	movlb	0	; () banked
  2757  000BF4  517D               	movf	printf@c& (0+255),w,b
  2758  000BF6  B4D8               	btfsc	status,2,c
  2759  000BF8  0012               	return	
  2760  000BFA  D66A               	goto	l2475
  2761  000BFC                     __end_of_printf:
  2762                           	opt stack 0
  2763                           tblptru	equ	0xFF8
  2764                           tblptrh	equ	0xFF7
  2765                           tblptrl	equ	0xFF6
  2766                           tablat	equ	0xFF5
  2767                           prodh	equ	0xFF4
  2768                           prodl	equ	0xFF3
  2769                           postinc0	equ	0xFEE
  2770                           wreg	equ	0xFE8
  2771                           postinc2	equ	0xFDE
  2772                           postdec2	equ	0xFDD
  2773                           fsr2h	equ	0xFDA
  2774                           fsr2l	equ	0xFD9
  2775                           status	equ	0xFD8
  2776                           
  2777 ;; *************** function _putch *****************
  2778 ;; Defined at:
  2779 ;;		line 46 in file "usart.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  byte            1    wreg     unsigned char 
  2782 ;; Auto vars:     Size  Location     Type
  2783 ;;  byte            1    0[BANK0 ] unsigned char 
  2784 ;; Return value:  Size  Location     Type
  2785 ;;		None               void
  2786 ;; Registers used:
  2787 ;;		wreg
  2788 ;; Tracked objects:
  2789 ;;		On entry : 0/0
  2790 ;;		On exit  : 0/0
  2791 ;;		Unchanged: 0/0
  2792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2793 ;;      Params:         0       0       0       0       0       0       0       0       0
  2794 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2795 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2796 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2797 ;;Total ram usage:        1 bytes
  2798 ;; Hardware stack levels used:    1
  2799 ;; Hardware stack levels required when called:    3
  2800 ;; This function calls:
  2801 ;;		Nothing
  2802 ;; This function is called by:
  2803 ;;		_printf
  2804 ;;		_getche
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text12
  2809  0016A4                     __ptext12:
  2810                           	opt stack 0
  2811  0016A4                     _putch:
  2812                           	opt stack 26
  2813                           
  2814                           ;incstack = 0
  2815                           ;putch@byte stored from wreg
  2816  0016A4  0100               	movlb	0	; () banked
  2817  0016A6  6F60               	movwf	putch@byte& (0+255),b
  2818  0016A8                     l119:
  2819  0016A8  A89E               	btfss	3998,4,c	;volatile
  2820  0016AA  D7FE               	goto	l119
  2821                           
  2822                           ;usart.c: 50: TXREG = byte;
  2823  0016AC  C060  FFAD         	movff	putch@byte,4013	;volatile
  2824  0016B0  0012               	return		;funcret
  2825  0016B2                     __end_of_putch:
  2826                           	opt stack 0
  2827                           tblptru	equ	0xFF8
  2828                           tblptrh	equ	0xFF7
  2829                           tblptrl	equ	0xFF6
  2830                           tablat	equ	0xFF5
  2831                           prodh	equ	0xFF4
  2832                           prodl	equ	0xFF3
  2833                           postinc0	equ	0xFEE
  2834                           wreg	equ	0xFE8
  2835                           postinc2	equ	0xFDE
  2836                           postdec2	equ	0xFDD
  2837                           fsr2h	equ	0xFDA
  2838                           fsr2l	equ	0xFD9
  2839                           status	equ	0xFD8
  2840                           
  2841 ;; *************** function _isdigit *****************
  2842 ;; Defined at:
  2843 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  2844 ;; Parameters:    Size  Location     Type
  2845 ;;  c               1    wreg     unsigned char 
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;  c               1    2[BANK0 ] unsigned char 
  2848 ;; Return value:  Size  Location     Type
  2849 ;;		None               void
  2850 ;; Registers used:
  2851 ;;		wreg, status,2, status,0
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2857 ;;      Params:         0       0       0       0       0       0       0       0       0
  2858 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2859 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2860 ;;      Totals:         0       3       0       0       0       0       0       0       0
  2861 ;;Total ram usage:        3 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:    3
  2864 ;; This function calls:
  2865 ;;		Nothing
  2866 ;; This function is called by:
  2867 ;;		_printf
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           	psect	text13
  2872  0015A2                     __ptext13:
  2873                           	opt stack 0
  2874  0015A2                     _isdigit:
  2875                           	opt stack 26
  2876                           
  2877                           ;incstack = 0
  2878                           ;isdigit@c stored from wreg
  2879  0015A2  0100               	movlb	0	; () banked
  2880  0015A4  6F62               	movwf	isdigit@c& (0+255),b
  2881  0015A6  0E00               	movlw	0
  2882  0015A8  0100               	movlb	0	; () banked
  2883  0015AA  6F61               	movwf	_isdigit$1320& (0+255),b
  2884                           
  2885                           ; BSR set to: 0
  2886  0015AC  0E3A               	movlw	58
  2887  0015AE  0100               	movlb	0	; () banked
  2888  0015B0  6162               	cpfslt	isdigit@c& (0+255),b
  2889  0015B2  D007               	goto	l2347
  2890                           
  2891                           ; BSR set to: 0
  2892  0015B4  0E2F               	movlw	47
  2893  0015B6  0100               	movlb	0	; () banked
  2894  0015B8  6562               	cpfsgt	isdigit@c& (0+255),b
  2895  0015BA  D003               	goto	l2347
  2896                           
  2897                           ; BSR set to: 0
  2898  0015BC  0E01               	movlw	1
  2899  0015BE  0100               	movlb	0	; () banked
  2900  0015C0  6F61               	movwf	_isdigit$1320& (0+255),b
  2901  0015C2                     l2347:
  2902                           
  2903                           ; BSR set to: 0
  2904  0015C2  C061  F060         	movff	_isdigit$1320,??_isdigit
  2905  0015C6  0100               	movlb	0	; () banked
  2906  0015C8  3160               	rrcf	??_isdigit& (0+255),w,b
  2907  0015CA  0012               	return	
  2908  0015CC                     __end_of_isdigit:
  2909                           	opt stack 0
  2910                           tblptru	equ	0xFF8
  2911                           tblptrh	equ	0xFF7
  2912                           tblptrl	equ	0xFF6
  2913                           tablat	equ	0xFF5
  2914                           prodh	equ	0xFF4
  2915                           prodl	equ	0xFF3
  2916                           postinc0	equ	0xFEE
  2917                           wreg	equ	0xFE8
  2918                           postinc2	equ	0xFDE
  2919                           postdec2	equ	0xFDD
  2920                           fsr2h	equ	0xFDA
  2921                           fsr2l	equ	0xFD9
  2922                           status	equ	0xFD8
  2923                           
  2924 ;; *************** function ___wmul *****************
  2925 ;; Defined at:
  2926 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2929 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;  product         2    4[BANK0 ] unsigned int 
  2932 ;; Return value:  Size  Location     Type
  2933 ;;                  2    0[BANK0 ] unsigned int 
  2934 ;; Registers used:
  2935 ;;		wreg, status,2, status,0, prodl, prodh
  2936 ;; Tracked objects:
  2937 ;;		On entry : 0/0
  2938 ;;		On exit  : 0/0
  2939 ;;		Unchanged: 0/0
  2940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2941 ;;      Params:         0       4       0       0       0       0       0       0       0
  2942 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2943 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2944 ;;      Totals:         0       6       0       0       0       0       0       0       0
  2945 ;;Total ram usage:        6 bytes
  2946 ;; Hardware stack levels used:    1
  2947 ;; Hardware stack levels required when called:    3
  2948 ;; This function calls:
  2949 ;;		Nothing
  2950 ;; This function is called by:
  2951 ;;		_printf
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           	psect	text14
  2956  00153E                     __ptext14:
  2957                           	opt stack 0
  2958  00153E                     ___wmul:
  2959                           	opt stack 26
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;incstack = 0
  2963  00153E  0100               	movlb	0	; () banked
  2964  001540  5160               	movf	___wmul@multiplier& (0+255),w,b
  2965  001542  0100               	movlb	0	; () banked
  2966  001544  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2967  001546  CFF3 F064          	movff	prodl,___wmul@product
  2968  00154A  CFF4 F065          	movff	prodh,___wmul@product+1
  2969  00154E  0100               	movlb	0	; () banked
  2970  001550  5160               	movf	___wmul@multiplier& (0+255),w,b
  2971  001552  0100               	movlb	0	; () banked
  2972  001554  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2973  001556  50F3               	movf	prodl,w,c
  2974  001558  0100               	movlb	0	; () banked
  2975  00155A  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2976  00155C  0100               	movlb	0	; () banked
  2977  00155E  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2978  001560  0100               	movlb	0	; () banked
  2979  001562  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2980  001564  50F3               	movf	prodl,w,c
  2981  001566  0100               	movlb	0	; () banked
  2982  001568  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2983                           
  2984                           ; BSR set to: 0
  2985  00156A  C064  F060         	movff	___wmul@product,?___wmul
  2986  00156E  C065  F061         	movff	___wmul@product+1,?___wmul+1
  2987  001572  0012               	return	
  2988  001574                     __end_of___wmul:
  2989                           	opt stack 0
  2990                           tblptru	equ	0xFF8
  2991                           tblptrh	equ	0xFF7
  2992                           tblptrl	equ	0xFF6
  2993                           tablat	equ	0xFF5
  2994                           prodh	equ	0xFF4
  2995                           prodl	equ	0xFF3
  2996                           postinc0	equ	0xFEE
  2997                           wreg	equ	0xFE8
  2998                           postinc2	equ	0xFDE
  2999                           postdec2	equ	0xFDD
  3000                           fsr2h	equ	0xFDA
  3001                           fsr2l	equ	0xFD9
  3002                           status	equ	0xFD8
  3003                           
  3004 ;; *************** function ___lwmod *****************
  3005 ;; Defined at:
  3006 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  dividend        2    7[BANK0 ] unsigned int 
  3009 ;;  divisor         2    9[BANK0 ] unsigned int 
  3010 ;; Auto vars:     Size  Location     Type
  3011 ;;  counter         1   11[BANK0 ] unsigned char 
  3012 ;; Return value:  Size  Location     Type
  3013 ;;                  2    7[BANK0 ] unsigned int 
  3014 ;; Registers used:
  3015 ;;		wreg, status,2, status,0
  3016 ;; Tracked objects:
  3017 ;;		On entry : 0/0
  3018 ;;		On exit  : 0/0
  3019 ;;		Unchanged: 0/0
  3020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3021 ;;      Params:         0       4       0       0       0       0       0       0       0
  3022 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3023 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3024 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3025 ;;Total ram usage:        5 bytes
  3026 ;; Hardware stack levels used:    1
  3027 ;; Hardware stack levels required when called:    3
  3028 ;; This function calls:
  3029 ;;		Nothing
  3030 ;; This function is called by:
  3031 ;;		_printf
  3032 ;; This function uses a non-reentrant model
  3033 ;;
  3034                           
  3035                           	psect	text15
  3036  0013C0                     __ptext15:
  3037                           	opt stack 0
  3038  0013C0                     ___lwmod:
  3039                           	opt stack 26
  3040                           
  3041                           ; BSR set to: 0
  3042                           ;incstack = 0
  3043  0013C0  0100               	movlb	0	; () banked
  3044  0013C2  5169               	movf	___lwmod@divisor& (0+255),w,b
  3045  0013C4  0100               	movlb	0	; () banked
  3046  0013C6  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3047  0013C8  B4D8               	btfsc	status,2,c
  3048  0013CA  D026               	goto	l774
  3049                           
  3050                           ; BSR set to: 0
  3051  0013CC  0E01               	movlw	1
  3052  0013CE  0100               	movlb	0	; () banked
  3053  0013D0  6F6B               	movwf	___lwmod@counter& (0+255),b
  3054  0013D2  D006               	goto	l2385
  3055  0013D4                     l2383:
  3056                           
  3057                           ; BSR set to: 0
  3058  0013D4  0100               	movlb	0	; () banked
  3059  0013D6  90D8               	bcf	status,0,c
  3060  0013D8  3769               	rlcf	___lwmod@divisor& (0+255),f,b
  3061  0013DA  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3062  0013DC  0100               	movlb	0	; () banked
  3063  0013DE  2B6B               	incf	___lwmod@counter& (0+255),f,b
  3064  0013E0                     l2385:
  3065                           
  3066                           ; BSR set to: 0
  3067  0013E0  0100               	movlb	0	; () banked
  3068  0013E2  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3069  0013E4  D7F7               	goto	l2383
  3070  0013E6                     l2387:
  3071                           
  3072                           ; BSR set to: 0
  3073  0013E6  0100               	movlb	0	; () banked
  3074  0013E8  5169               	movf	___lwmod@divisor& (0+255),w,b
  3075  0013EA  0100               	movlb	0	; () banked
  3076  0013EC  5D67               	subwf	___lwmod@dividend& (0+255),w,b
  3077  0013EE  0100               	movlb	0	; () banked
  3078  0013F0  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3079  0013F2  0100               	movlb	0	; () banked
  3080  0013F4  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3081  0013F6  A0D8               	btfss	status,0,c
  3082  0013F8  D008               	goto	l2391
  3083                           
  3084                           ; BSR set to: 0
  3085  0013FA  0100               	movlb	0	; () banked
  3086  0013FC  5169               	movf	___lwmod@divisor& (0+255),w,b
  3087  0013FE  0100               	movlb	0	; () banked
  3088  001400  5F67               	subwf	___lwmod@dividend& (0+255),f,b
  3089  001402  0100               	movlb	0	; () banked
  3090  001404  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3091  001406  0100               	movlb	0	; () banked
  3092  001408  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3093  00140A                     l2391:
  3094                           
  3095                           ; BSR set to: 0
  3096  00140A  0100               	movlb	0	; () banked
  3097  00140C  90D8               	bcf	status,0,c
  3098  00140E  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3099  001410  3369               	rrcf	___lwmod@divisor& (0+255),f,b
  3100                           
  3101                           ; BSR set to: 0
  3102  001412  0100               	movlb	0	; () banked
  3103  001414  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
  3104  001416  D7E7               	goto	l2387
  3105  001418                     l774:
  3106                           
  3107                           ; BSR set to: 0
  3108  001418  C067  F067         	movff	___lwmod@dividend,?___lwmod
  3109  00141C  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
  3110                           
  3111                           ; BSR set to: 0
  3112  001420  0012               	return		;funcret
  3113  001422                     __end_of___lwmod:
  3114                           	opt stack 0
  3115                           tblptru	equ	0xFF8
  3116                           tblptrh	equ	0xFF7
  3117                           tblptrl	equ	0xFF6
  3118                           tablat	equ	0xFF5
  3119                           prodh	equ	0xFF4
  3120                           prodl	equ	0xFF3
  3121                           postinc0	equ	0xFEE
  3122                           wreg	equ	0xFE8
  3123                           postinc2	equ	0xFDE
  3124                           postdec2	equ	0xFDD
  3125                           fsr2h	equ	0xFDA
  3126                           fsr2l	equ	0xFD9
  3127                           status	equ	0xFD8
  3128                           
  3129 ;; *************** function ___lwdiv *****************
  3130 ;; Defined at:
  3131 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;  dividend        2    0[BANK0 ] unsigned int 
  3134 ;;  divisor         2    2[BANK0 ] unsigned int 
  3135 ;; Auto vars:     Size  Location     Type
  3136 ;;  quotient        2    5[BANK0 ] unsigned int 
  3137 ;;  counter         1    4[BANK0 ] unsigned char 
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  2    0[BANK0 ] unsigned int 
  3140 ;; Registers used:
  3141 ;;		wreg, status,2, status,0
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3147 ;;      Params:         0       4       0       0       0       0       0       0       0
  3148 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3149 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3150 ;;      Totals:         0       7       0       0       0       0       0       0       0
  3151 ;;Total ram usage:        7 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    3
  3154 ;; This function calls:
  3155 ;;		Nothing
  3156 ;; This function is called by:
  3157 ;;		_printf
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           	psect	text16
  3162  00126C                     __ptext16:
  3163                           	opt stack 0
  3164  00126C                     ___lwdiv:
  3165                           	opt stack 26
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;incstack = 0
  3169  00126C  0E00               	movlw	0
  3170  00126E  0100               	movlb	0	; () banked
  3171  001270  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3172  001272  0E00               	movlw	0
  3173  001274  6F65               	movwf	___lwdiv@quotient& (0+255),b
  3174                           
  3175                           ; BSR set to: 0
  3176  001276  0100               	movlb	0	; () banked
  3177  001278  5162               	movf	___lwdiv@divisor& (0+255),w,b
  3178  00127A  0100               	movlb	0	; () banked
  3179  00127C  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3180  00127E  B4D8               	btfsc	status,2,c
  3181  001280  D02C               	goto	l764
  3182                           
  3183                           ; BSR set to: 0
  3184  001282  0E01               	movlw	1
  3185  001284  0100               	movlb	0	; () banked
  3186  001286  6F64               	movwf	___lwdiv@counter& (0+255),b
  3187  001288  D006               	goto	l2365
  3188  00128A                     l2363:
  3189                           
  3190                           ; BSR set to: 0
  3191  00128A  0100               	movlb	0	; () banked
  3192  00128C  90D8               	bcf	status,0,c
  3193  00128E  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  3194  001290  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3195  001292  0100               	movlb	0	; () banked
  3196  001294  2B64               	incf	___lwdiv@counter& (0+255),f,b
  3197  001296                     l2365:
  3198                           
  3199                           ; BSR set to: 0
  3200  001296  0100               	movlb	0	; () banked
  3201  001298  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3202  00129A  D7F7               	goto	l2363
  3203  00129C                     l2367:
  3204                           
  3205                           ; BSR set to: 0
  3206  00129C  0100               	movlb	0	; () banked
  3207  00129E  90D8               	bcf	status,0,c
  3208  0012A0  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  3209  0012A2  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3210                           
  3211                           ; BSR set to: 0
  3212  0012A4  0100               	movlb	0	; () banked
  3213  0012A6  5162               	movf	___lwdiv@divisor& (0+255),w,b
  3214  0012A8  0100               	movlb	0	; () banked
  3215  0012AA  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  3216  0012AC  0100               	movlb	0	; () banked
  3217  0012AE  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3218  0012B0  0100               	movlb	0	; () banked
  3219  0012B2  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3220  0012B4  A0D8               	btfss	status,0,c
  3221  0012B6  D00A               	goto	l2375
  3222                           
  3223                           ; BSR set to: 0
  3224  0012B8  0100               	movlb	0	; () banked
  3225  0012BA  5162               	movf	___lwdiv@divisor& (0+255),w,b
  3226  0012BC  0100               	movlb	0	; () banked
  3227  0012BE  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  3228  0012C0  0100               	movlb	0	; () banked
  3229  0012C2  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3230  0012C4  0100               	movlb	0	; () banked
  3231  0012C6  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3232                           
  3233                           ; BSR set to: 0
  3234  0012C8  0100               	movlb	0	; () banked
  3235  0012CA  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  3236  0012CC                     l2375:
  3237                           
  3238                           ; BSR set to: 0
  3239  0012CC  0100               	movlb	0	; () banked
  3240  0012CE  90D8               	bcf	status,0,c
  3241  0012D0  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3242  0012D2  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  3243                           
  3244                           ; BSR set to: 0
  3245  0012D4  0100               	movlb	0	; () banked
  3246  0012D6  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  3247  0012D8  D7E1               	goto	l2367
  3248  0012DA                     l764:
  3249                           
  3250                           ; BSR set to: 0
  3251  0012DA  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  3252  0012DE  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3253                           
  3254                           ; BSR set to: 0
  3255  0012E2  0012               	return		;funcret
  3256  0012E4                     __end_of___lwdiv:
  3257                           	opt stack 0
  3258                           tblptru	equ	0xFF8
  3259                           tblptrh	equ	0xFF7
  3260                           tblptrl	equ	0xFF6
  3261                           tablat	equ	0xFF5
  3262                           prodh	equ	0xFF4
  3263                           prodl	equ	0xFF3
  3264                           postinc0	equ	0xFEE
  3265                           wreg	equ	0xFE8
  3266                           postinc2	equ	0xFDE
  3267                           postdec2	equ	0xFDD
  3268                           fsr2h	equ	0xFDA
  3269                           fsr2l	equ	0xFD9
  3270                           status	equ	0xFD8
  3271                           
  3272 ;; *************** function _configUSARTInterrupts *****************
  3273 ;; Defined at:
  3274 ;;		line 32 in file "usart.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;		None
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;		None
  3279 ;; Return value:  Size  Location     Type
  3280 ;;		None               void
  3281 ;; Registers used:
  3282 ;;		None
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3288 ;;      Params:         0       0       0       0       0       0       0       0       0
  3289 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3290 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3291 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3292 ;;Total ram usage:        0 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:    3
  3295 ;; This function calls:
  3296 ;;		Nothing
  3297 ;; This function is called by:
  3298 ;;		_main
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text17
  3303  0016B2                     __ptext17:
  3304                           	opt stack 0
  3305  0016B2                     _configUSARTInterrupts:
  3306                           	opt stack 27
  3307                           
  3308                           ;usart.c: 35: TXIE = 0;
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;incstack = 0
  3312  0016B2  989D               	bcf	3997,4,c	;volatile
  3313                           
  3314                           ;usart.c: 36: TXIF = 0;
  3315  0016B4  989E               	bcf	3998,4,c	;volatile
  3316                           
  3317                           ;usart.c: 39: RCIE = 1;
  3318  0016B6  8A9D               	bsf	3997,5,c	;volatile
  3319                           
  3320                           ;usart.c: 40: RCIF = 0;
  3321  0016B8  9A9E               	bcf	3998,5,c	;volatile
  3322                           
  3323                           ;usart.c: 42: PEIE = 1;
  3324  0016BA  8CF2               	bsf	intcon,6,c	;volatile
  3325                           
  3326                           ;usart.c: 43: GIE = 1;
  3327  0016BC  8EF2               	bsf	intcon,7,c	;volatile
  3328  0016BE  0012               	return		;funcret
  3329  0016C0                     __end_of_configUSARTInterrupts:
  3330                           	opt stack 0
  3331                           tblptru	equ	0xFF8
  3332                           tblptrh	equ	0xFF7
  3333                           tblptrl	equ	0xFF6
  3334                           tablat	equ	0xFF5
  3335                           prodh	equ	0xFF4
  3336                           prodl	equ	0xFF3
  3337                           intcon	equ	0xFF2
  3338                           postinc0	equ	0xFEE
  3339                           wreg	equ	0xFE8
  3340                           postinc2	equ	0xFDE
  3341                           postdec2	equ	0xFDD
  3342                           fsr2h	equ	0xFDA
  3343                           fsr2l	equ	0xFD9
  3344                           status	equ	0xFD8
  3345                           
  3346 ;; *************** function _configTimer *****************
  3347 ;; Defined at:
  3348 ;;		line 17 in file "timer0.c"
  3349 ;; Parameters:    Size  Location     Type
  3350 ;;		None
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;		None
  3353 ;; Return value:  Size  Location     Type
  3354 ;;		None               void
  3355 ;; Registers used:
  3356 ;;		None
  3357 ;; Tracked objects:
  3358 ;;		On entry : 0/0
  3359 ;;		On exit  : 0/0
  3360 ;;		Unchanged: 0/0
  3361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3362 ;;      Params:         0       0       0       0       0       0       0       0       0
  3363 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3364 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3365 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3366 ;;Total ram usage:        0 bytes
  3367 ;; Hardware stack levels used:    1
  3368 ;; Hardware stack levels required when called:    3
  3369 ;; This function calls:
  3370 ;;		Nothing
  3371 ;; This function is called by:
  3372 ;;		_main
  3373 ;; This function uses a non-reentrant model
  3374 ;;
  3375                           
  3376                           	psect	text18
  3377  001632                     __ptext18:
  3378                           	opt stack 0
  3379  001632                     _configTimer:
  3380                           	opt stack 27
  3381                           
  3382                           ;timer0.c: 18: T0CONbits.T0CS = 0;
  3383                           
  3384                           ;incstack = 0
  3385  001632  9AD5               	bcf	4053,5,c	;volatile
  3386                           
  3387                           ;timer0.c: 19: T0CONbits.T0SE = 0;
  3388  001634  98D5               	bcf	4053,4,c	;volatile
  3389                           
  3390                           ;timer0.c: 20: T0CONbits.PSA = 0;
  3391  001636  96D5               	bcf	4053,3,c	;volatile
  3392                           
  3393                           ;timer0.c: 21: T0CONbits.T08BIT = 0;
  3394  001638  9CD5               	bcf	4053,6,c	;volatile
  3395                           
  3396                           ;timer0.c: 24: T0CONbits.T0PS2 = 1;
  3397  00163A  84D5               	bsf	4053,2,c	;volatile
  3398                           
  3399                           ;timer0.c: 25: T0CONbits.T0PS1 = 0;
  3400  00163C  92D5               	bcf	4053,1,c	;volatile
  3401                           
  3402                           ;timer0.c: 26: T0CONbits.T0PS0 = 1;
  3403  00163E  80D5               	bsf	4053,0,c	;volatile
  3404                           
  3405                           ;timer0.c: 28: TMR0IP = 1;
  3406  001640  84F1               	bsf	intcon2,2,c	;volatile
  3407                           
  3408                           ;timer0.c: 30: INTCONbits.TMR0IF = 0;
  3409  001642  94F2               	bcf	intcon,2,c	;volatile
  3410                           
  3411                           ;timer0.c: 31: INTCONbits.TMR0IE = 1;
  3412  001644  8AF2               	bsf	intcon,5,c	;volatile
  3413                           
  3414                           ;timer0.c: 32: INTCONbits.GIE = 1;
  3415  001646  8EF2               	bsf	intcon,7,c	;volatile
  3416                           
  3417                           ;timer0.c: 33: INTCONbits.PEIE = 1;
  3418  001648  8CF2               	bsf	intcon,6,c	;volatile
  3419  00164A  0012               	return		;funcret
  3420  00164C                     __end_of_configTimer:
  3421                           	opt stack 0
  3422                           tblptru	equ	0xFF8
  3423                           tblptrh	equ	0xFF7
  3424                           tblptrl	equ	0xFF6
  3425                           tablat	equ	0xFF5
  3426                           prodh	equ	0xFF4
  3427                           prodl	equ	0xFF3
  3428                           intcon	equ	0xFF2
  3429                           intcon2	equ	0xFF1
  3430                           postinc0	equ	0xFEE
  3431                           wreg	equ	0xFE8
  3432                           postinc2	equ	0xFDE
  3433                           postdec2	equ	0xFDD
  3434                           fsr2h	equ	0xFDA
  3435                           fsr2l	equ	0xFD9
  3436                           status	equ	0xFD8
  3437                           
  3438 ;; *************** function _configRS232 *****************
  3439 ;; Defined at:
  3440 ;;		line 9 in file "usart.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;		None
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;		None
  3445 ;; Return value:  Size  Location     Type
  3446 ;;		None               void
  3447 ;; Registers used:
  3448 ;;		wreg, status,2
  3449 ;; Tracked objects:
  3450 ;;		On entry : 0/0
  3451 ;;		On exit  : 0/0
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3454 ;;      Params:         0       0       0       0       0       0       0       0       0
  3455 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3456 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3457 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3458 ;;Total ram usage:        0 bytes
  3459 ;; Hardware stack levels used:    1
  3460 ;; Hardware stack levels required when called:    3
  3461 ;; This function calls:
  3462 ;;		Nothing
  3463 ;; This function is called by:
  3464 ;;		_main
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           	psect	text19
  3469  001666                     __ptext19:
  3470                           	opt stack 0
  3471  001666                     _configRS232:
  3472                           	opt stack 27
  3473                           
  3474                           ;usart.c: 13: TX9 = 0;
  3475                           
  3476                           ;incstack = 0
  3477  001666  9CAC               	bcf	4012,6,c	;volatile
  3478                           
  3479                           ;usart.c: 14: TXEN = 1;
  3480  001668  8AAC               	bsf	4012,5,c	;volatile
  3481                           
  3482                           ;usart.c: 15: SYNC = 0;
  3483  00166A  98AC               	bcf	4012,4,c	;volatile
  3484                           
  3485                           ;usart.c: 16: BRGH = 1;
  3486  00166C  84AC               	bsf	4012,2,c	;volatile
  3487                           
  3488                           ;usart.c: 19: SPEN = 1;
  3489  00166E  8EAB               	bsf	4011,7,c	;volatile
  3490                           
  3491                           ;usart.c: 20: RX9 = 0;
  3492  001670  9CAB               	bcf	4011,6,c	;volatile
  3493                           
  3494                           ;usart.c: 21: CREN = 1;
  3495  001672  88AB               	bsf	4011,4,c	;volatile
  3496                           
  3497                           ;usart.c: 26: BRG16 = 0;
  3498  001674  96B8               	bcf	4024,3,c	;volatile
  3499                           
  3500                           ;usart.c: 27: SPBRG = 129;
  3501  001676  0E81               	movlw	129
  3502  001678  6EAF               	movwf	4015,c	;volatile
  3503                           
  3504                           ;usart.c: 29: RXDTP = 0;
  3505  00167A  9AB8               	bcf	4024,5,c	;volatile
  3506  00167C  0012               	return		;funcret
  3507  00167E                     __end_of_configRS232:
  3508                           	opt stack 0
  3509                           tblptru	equ	0xFF8
  3510                           tblptrh	equ	0xFF7
  3511                           tblptrl	equ	0xFF6
  3512                           tablat	equ	0xFF5
  3513                           prodh	equ	0xFF4
  3514                           prodl	equ	0xFF3
  3515                           intcon	equ	0xFF2
  3516                           intcon2	equ	0xFF1
  3517                           postinc0	equ	0xFEE
  3518                           wreg	equ	0xFE8
  3519                           postinc2	equ	0xFDE
  3520                           postdec2	equ	0xFDD
  3521                           fsr2h	equ	0xFDA
  3522                           fsr2l	equ	0xFD9
  3523                           status	equ	0xFD8
  3524                           
  3525 ;; *************** function _configADInterrupt *****************
  3526 ;; Defined at:
  3527 ;;		line 11 in file "ad.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;		None
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;		None
  3532 ;; Return value:  Size  Location     Type
  3533 ;;		None               void
  3534 ;; Registers used:
  3535 ;;		None
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3541 ;;      Params:         0       0       0       0       0       0       0       0       0
  3542 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3543 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3544 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3545 ;;Total ram usage:        0 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; Hardware stack levels required when called:    3
  3548 ;; This function calls:
  3549 ;;		Nothing
  3550 ;; This function is called by:
  3551 ;;		_main
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           	psect	text20
  3556  001702                     __ptext20:
  3557                           	opt stack 0
  3558  001702                     _configADInterrupt:
  3559                           	opt stack 27
  3560                           
  3561                           ;ad.c: 12: PIR1bits.ADIF = 0;
  3562                           
  3563                           ;incstack = 0
  3564  001702  9C9E               	bcf	3998,6,c	;volatile
  3565                           
  3566                           ;ad.c: 13: PIE1bits.ADIE = 1;
  3567  001704  8C9D               	bsf	3997,6,c	;volatile
  3568                           
  3569                           ;ad.c: 15: INTCONbits.GIE = 1;
  3570  001706  8EF2               	bsf	intcon,7,c	;volatile
  3571                           
  3572                           ;ad.c: 16: INTCONbits.PEIE = 1;
  3573  001708  8CF2               	bsf	intcon,6,c	;volatile
  3574  00170A  0012               	return		;funcret
  3575  00170C                     __end_of_configADInterrupt:
  3576                           	opt stack 0
  3577                           tblptru	equ	0xFF8
  3578                           tblptrh	equ	0xFF7
  3579                           tblptrl	equ	0xFF6
  3580                           tablat	equ	0xFF5
  3581                           prodh	equ	0xFF4
  3582                           prodl	equ	0xFF3
  3583                           intcon	equ	0xFF2
  3584                           intcon2	equ	0xFF1
  3585                           postinc0	equ	0xFEE
  3586                           wreg	equ	0xFE8
  3587                           postinc2	equ	0xFDE
  3588                           postdec2	equ	0xFDD
  3589                           fsr2h	equ	0xFDA
  3590                           fsr2l	equ	0xFD9
  3591                           status	equ	0xFD8
  3592                           
  3593 ;; *************** function _configAD *****************
  3594 ;; Defined at:
  3595 ;;		line 19 in file "ad.c"
  3596 ;; Parameters:    Size  Location     Type
  3597 ;;		None
  3598 ;; Auto vars:     Size  Location     Type
  3599 ;;		None
  3600 ;; Return value:  Size  Location     Type
  3601 ;;		None               void
  3602 ;; Registers used:
  3603 ;;		None
  3604 ;; Tracked objects:
  3605 ;;		On entry : 0/0
  3606 ;;		On exit  : 0/0
  3607 ;;		Unchanged: 0/0
  3608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3609 ;;      Params:         0       0       0       0       0       0       0       0       0
  3610 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3611 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3612 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3613 ;;Total ram usage:        0 bytes
  3614 ;; Hardware stack levels used:    1
  3615 ;; Hardware stack levels required when called:    3
  3616 ;; This function calls:
  3617 ;;		Nothing
  3618 ;; This function is called by:
  3619 ;;		_main
  3620 ;; This function uses a non-reentrant model
  3621 ;;
  3622                           
  3623                           	psect	text21
  3624  00164C                     __ptext21:
  3625                           	opt stack 0
  3626  00164C                     _configAD:
  3627                           	opt stack 27
  3628                           
  3629                           ;ad.c: 20: ADCON0bits.ADON = 1;
  3630                           
  3631                           ;incstack = 0
  3632  00164C  80C2               	bsf	4034,0,c	;volatile
  3633                           
  3634                           ;ad.c: 24: ADFM = 1;
  3635  00164E  8EC0               	bsf	4032,7,c	;volatile
  3636                           
  3637                           ;ad.c: 27: ADCON1bits.PCFG3 = 0;
  3638  001650  96C1               	bcf	4033,3,c	;volatile
  3639                           
  3640                           ;ad.c: 28: ADCON1bits.PCFG2 = 1;
  3641  001652  84C1               	bsf	4033,2,c	;volatile
  3642                           
  3643                           ;ad.c: 29: ADCON1bits.PCFG1 = 0;
  3644  001654  92C1               	bcf	4033,1,c	;volatile
  3645                           
  3646                           ;ad.c: 30: ADCON1bits.PCFG0 = 1;
  3647  001656  80C1               	bsf	4033,0,c	;volatile
  3648                           
  3649                           ;ad.c: 33: ADCON2bits.ACQT2 = 0;
  3650  001658  9AC0               	bcf	4032,5,c	;volatile
  3651                           
  3652                           ;ad.c: 34: ADCON2bits.ACQT1 = 0;
  3653  00165A  98C0               	bcf	4032,4,c	;volatile
  3654                           
  3655                           ;ad.c: 35: ADCON2bits.ACQT0 = 1;
  3656  00165C  86C0               	bsf	4032,3,c	;volatile
  3657                           
  3658                           ;ad.c: 38: ADCON2bits.ADCS2 = 1;
  3659  00165E  84C0               	bsf	4032,2,c	;volatile
  3660                           
  3661                           ;ad.c: 39: ADCON2bits.ADCS1 = 0;
  3662  001660  92C0               	bcf	4032,1,c	;volatile
  3663                           
  3664                           ;ad.c: 40: ADCON2bits.ADCS0 = 1;
  3665  001662  80C0               	bsf	4032,0,c	;volatile
  3666  001664  0012               	return		;funcret
  3667  001666                     __end_of_configAD:
  3668                           	opt stack 0
  3669                           tblptru	equ	0xFF8
  3670                           tblptrh	equ	0xFF7
  3671                           tblptrl	equ	0xFF6
  3672                           tablat	equ	0xFF5
  3673                           prodh	equ	0xFF4
  3674                           prodl	equ	0xFF3
  3675                           intcon	equ	0xFF2
  3676                           intcon2	equ	0xFF1
  3677                           postinc0	equ	0xFEE
  3678                           wreg	equ	0xFE8
  3679                           postinc2	equ	0xFDE
  3680                           postdec2	equ	0xFDD
  3681                           fsr2h	equ	0xFDA
  3682                           fsr2l	equ	0xFD9
  3683                           status	equ	0xFD8
  3684                           
  3685 ;; *************** function _InitI2C_Master *****************
  3686 ;; Defined at:
  3687 ;;		line 4 in file "i2c.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;		None
  3690 ;; Auto vars:     Size  Location     Type
  3691 ;;		None
  3692 ;; Return value:  Size  Location     Type
  3693 ;;		None               void
  3694 ;; Registers used:
  3695 ;;		wreg, status,2
  3696 ;; Tracked objects:
  3697 ;;		On entry : 0/0
  3698 ;;		On exit  : 0/0
  3699 ;;		Unchanged: 0/0
  3700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3701 ;;      Params:         0       0       0       0       0       0       0       0       0
  3702 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3703 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3704 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3705 ;;Total ram usage:        0 bytes
  3706 ;; Hardware stack levels used:    1
  3707 ;; Hardware stack levels required when called:    3
  3708 ;; This function calls:
  3709 ;;		Nothing
  3710 ;; This function is called by:
  3711 ;;		_main
  3712 ;; This function uses a non-reentrant model
  3713 ;;
  3714                           
  3715                           	psect	text22
  3716  0015F2                     __ptext22:
  3717                           	opt stack 0
  3718  0015F2                     _InitI2C_Master:
  3719                           	opt stack 27
  3720                           
  3721                           ;i2c.c: 6: TRISBbits.RB0 = 1;
  3722                           
  3723                           ;incstack = 0
  3724  0015F2  8093               	bsf	3987,0,c	;volatile
  3725                           
  3726                           ;i2c.c: 7: TRISBbits.RB1 = 1;
  3727  0015F4  8293               	bsf	3987,1,c	;volatile
  3728                           
  3729                           ;i2c.c: 9: SSPADD = ( 20000000 / (4*100000) ) - 1;
  3730  0015F6  0E31               	movlw	49
  3731  0015F8  6EC8               	movwf	4040,c	;volatile
  3732                           
  3733                           ;i2c.c: 12: SSPIF = 0;
  3734  0015FA  969E               	bcf	3998,3,c	;volatile
  3735                           
  3736                           ;i2c.c: 15: SSPSTAT = 0;
  3737  0015FC  0E00               	movlw	0
  3738  0015FE  6EC7               	movwf	4039,c	;volatile
  3739                           
  3740                           ;i2c.c: 16: SSPSTATbits.SMP = 1;
  3741  001600  8EC7               	bsf	4039,7,c	;volatile
  3742                           
  3743                           ;i2c.c: 17: SSPSTATbits.CKE = 0;
  3744  001602  9CC7               	bcf	4039,6,c	;volatile
  3745                           
  3746                           ;i2c.c: 20: SSPCON1 = 0;
  3747  001604  0E00               	movlw	0
  3748  001606  6EC6               	movwf	4038,c	;volatile
  3749                           
  3750                           ;i2c.c: 21: SSPCON1bits.SSPM = 0b1000;
  3751  001608  50C6               	movf	4038,w,c	;volatile
  3752  00160A  0BF0               	andlw	-16
  3753  00160C  0908               	iorlw	8
  3754  00160E  6EC6               	movwf	4038,c	;volatile
  3755                           
  3756                           ;i2c.c: 22: SSPCON1bits.SSPEN = 1;
  3757  001610  8AC6               	bsf	4038,5,c	;volatile
  3758  001612  0012               	return		;funcret
  3759  001614                     __end_of_InitI2C_Master:
  3760                           	opt stack 0
  3761                           tblptru	equ	0xFF8
  3762                           tblptrh	equ	0xFF7
  3763                           tblptrl	equ	0xFF6
  3764                           tablat	equ	0xFF5
  3765                           prodh	equ	0xFF4
  3766                           prodl	equ	0xFF3
  3767                           intcon	equ	0xFF2
  3768                           intcon2	equ	0xFF1
  3769                           postinc0	equ	0xFEE
  3770                           wreg	equ	0xFE8
  3771                           postinc2	equ	0xFDE
  3772                           postdec2	equ	0xFDD
  3773                           fsr2h	equ	0xFDA
  3774                           fsr2l	equ	0xFD9
  3775                           status	equ	0xFD8
  3776                           
  3777 ;; *************** function _interruptions *****************
  3778 ;; Defined at:
  3779 ;;		line 31 in file "main.c"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;		None
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;		None
  3784 ;; Return value:  Size  Location     Type
  3785 ;;		None               void
  3786 ;; Registers used:
  3787 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3788 ;; Tracked objects:
  3789 ;;		On entry : 0/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3793 ;;      Params:         0       0       0       0       0       0       0       0       0
  3794 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3795 ;;      Temps:         16       0       0       0       0       0       0       0       0
  3796 ;;      Totals:        16       0       0       0       0       0       0       0       0
  3797 ;;Total ram usage:       16 bytes
  3798 ;; Hardware stack levels used:    1
  3799 ;; Hardware stack levels required when called:    2
  3800 ;; This function calls:
  3801 ;;		___awmod
  3802 ;;		_strcpy
  3803 ;;		i2_printf
  3804 ;; This function is called by:
  3805 ;;		Interrupt level 2
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           	psect	intcode
  3810  000008                     __pintcode:
  3811                           	opt stack 0
  3812  000008                     _interruptions:
  3813                           	opt stack 26
  3814                           
  3815                           ;incstack = 0
  3816  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3817  00000A  CFFA F01F          	movff	pclath,??_interruptions+2
  3818  00000E  CFFB F020          	movff	pclatu,??_interruptions+3
  3819  000012  ED17  F008         	call	int_func,f	;refresh shadow registers
  3820                           pclatu	equ	0xFFB
  3821                           pclath	equ	0xFFA
  3822                           tblptru	equ	0xFF8
  3823                           tblptrh	equ	0xFF7
  3824                           tblptrl	equ	0xFF6
  3825                           tablat	equ	0xFF5
  3826                           prodh	equ	0xFF4
  3827                           prodl	equ	0xFF3
  3828                           intcon	equ	0xFF2
  3829                           intcon2	equ	0xFF1
  3830                           postinc0	equ	0xFEE
  3831                           wreg	equ	0xFE8
  3832                           postinc2	equ	0xFDE
  3833                           postdec2	equ	0xFDD
  3834                           fsr2h	equ	0xFDA
  3835                           fsr2l	equ	0xFD9
  3836                           status	equ	0xFD8
  3837                           
  3838                           	psect	intcode_body
  3839  00102E                     __pintcode_body:
  3840                           	opt stack 26
  3841  00102E                     int_func:
  3842                           	opt stack 26
  3843  00102E  0006               	pop		; remove dummy address from shadow register refresh
  3844  001030  CFE9 F021          	movff	fsr0l,??_interruptions+4
  3845  001034  CFEA F022          	movff	fsr0h,??_interruptions+5
  3846  001038  CFE1 F023          	movff	fsr1l,??_interruptions+6
  3847  00103C  CFE2 F024          	movff	fsr1h,??_interruptions+7
  3848  001040  CFD9 F025          	movff	fsr2l,??_interruptions+8
  3849  001044  CFDA F026          	movff	fsr2h,??_interruptions+9
  3850  001048  CFF3 F027          	movff	prodl,??_interruptions+10
  3851  00104C  CFF4 F028          	movff	prodh,??_interruptions+11
  3852  001050  CFF6 F029          	movff	tblptrl,??_interruptions+12
  3853  001054  CFF7 F02A          	movff	tblptrh,??_interruptions+13
  3854  001058  CFF8 F02B          	movff	tblptru,??_interruptions+14
  3855  00105C  CFF5 F02C          	movff	tablat,??_interruptions+15
  3856                           
  3857                           ;main.c: 33: if (RCIF){
  3858  001060  AA9E               	btfss	3998,5,c	;volatile
  3859  001062  D047               	goto	i2l2239
  3860                           
  3861                           ;main.c: 34: if (FERR || OERR)
  3862  001064  B4AB               	btfsc	4011,2,c	;volatile
  3863  001066  D002               	goto	i2l270
  3864  001068  A2AB               	btfss	4011,1,c	;volatile
  3865  00106A  D003               	goto	i2l268
  3866  00106C                     i2l270:
  3867                           
  3868                           ;main.c: 35: {
  3869                           ;main.c: 36: CREN = 0;
  3870  00106C  98AB               	bcf	4011,4,c	;volatile
  3871                           
  3872                           ;main.c: 37: hasAnError = 1;
  3873  00106E  8048               	bsf	_hasAnError/(0+8),_hasAnError& (0+7),c
  3874                           
  3875                           ;main.c: 38: CREN = 1;
  3876  001070  88AB               	bsf	4011,4,c	;volatile
  3877  001072                     i2l268:
  3878                           
  3879                           ;main.c: 39: }
  3880                           ;main.c: 41: receivedData = RCREG;
  3881  001072  CFAE F049          	movff	4014,_receivedData	;volatile
  3882                           
  3883                           ;main.c: 43: if(receivedData == '\r')
  3884  001076  0E0D               	movlw	13
  3885  001078  1849               	xorwf	_receivedData,w,c
  3886  00107A  A4D8               	btfss	status,2,c
  3887  00107C  D01D               	goto	i2l2227
  3888                           
  3889                           ;main.c: 44: {
  3890                           ;main.c: 45: string_aux[i] = '\0';
  3891  00107E  502D               	movf	_i,w,c
  3892  001080  0D01               	mullw	1
  3893  001082  0E2E               	movlw	low _string_aux
  3894  001084  24F3               	addwf	prodl,w,c
  3895  001086  6ED9               	movwf	fsr2l,c
  3896  001088  0E00               	movlw	high _string_aux
  3897  00108A  20F4               	addwfc	prodh,w,c
  3898  00108C  6EDA               	movwf	fsr2h,c
  3899  00108E  0E00               	movlw	0
  3900  001090  6EDF               	movwf	indf2,c
  3901                           
  3902                           ;main.c: 46: strcpy(string,string_aux);
  3903  001092  0E87               	movlw	low _string
  3904  001094  6E01               	movwf	strcpy@to,c
  3905  001096  0E00               	movlw	high _string
  3906  001098  6E02               	movwf	strcpy@to+1,c
  3907  00109A  0E2E               	movlw	low _string_aux
  3908  00109C  6E03               	movwf	strcpy@from,c
  3909  00109E  0E00               	movlw	high _string_aux
  3910  0010A0  6E04               	movwf	strcpy@from+1,c
  3911  0010A2  ECBA  F00A         	call	_strcpy	;wreg free
  3912                           
  3913                           ;main.c: 47: printf("\n\r");
  3914  0010A6  0EBD               	movlw	low (STR_8+4)
  3915  0010A8  6E0D               	movwf	i2printf@f,c
  3916  0010AA  0E08               	movlw	high (STR_8+4)
  3917  0010AC  6E0E               	movwf	i2printf@f+1,c
  3918  0010AE  ECFE  F005         	call	i2_printf	;wreg free
  3919                           
  3920                           ;main.c: 48: i = 0;
  3921  0010B2  0E00               	movlw	0
  3922  0010B4  6E2D               	movwf	_i,c
  3923                           
  3924                           ;main.c: 49: }else
  3925  0010B6  D01D               	goto	i2l2239
  3926  0010B8                     i2l2227:
  3927                           
  3928                           ;main.c: 50: {
  3929                           ;main.c: 51: if(i < 25)
  3930  0010B8  0E19               	movlw	25
  3931  0010BA  602D               	cpfslt	_i,c
  3932  0010BC  D016               	goto	i2l2235
  3933                           
  3934                           ;main.c: 52: {
  3935                           ;main.c: 53: i = i%25;
  3936  0010BE  C02D  F001         	movff	_i,___awmod@dividend
  3937  0010C2  6A02               	clrf	___awmod@dividend+1,c
  3938  0010C4  0E00               	movlw	0
  3939  0010C6  6E04               	movwf	___awmod@divisor+1,c
  3940  0010C8  0E19               	movlw	25
  3941  0010CA  6E03               	movwf	___awmod@divisor,c
  3942  0010CC  EC72  F009         	call	___awmod	;wreg free
  3943  0010D0  5001               	movf	?___awmod,w,c
  3944  0010D2  6E2D               	movwf	_i,c
  3945                           
  3946                           ;main.c: 54: string_aux[i] = receivedData;
  3947  0010D4  502D               	movf	_i,w,c
  3948  0010D6  0D01               	mullw	1
  3949  0010D8  0E2E               	movlw	low _string_aux
  3950  0010DA  24F3               	addwf	prodl,w,c
  3951  0010DC  6ED9               	movwf	fsr2l,c
  3952  0010DE  0E00               	movlw	high _string_aux
  3953  0010E0  20F4               	addwfc	prodh,w,c
  3954  0010E2  6EDA               	movwf	fsr2h,c
  3955  0010E4  C049  FFDF         	movff	_receivedData,indf2
  3956                           
  3957                           ;main.c: 55: i++;
  3958  0010E8  2A2D               	incf	_i,f,c
  3959  0010EA                     i2l2235:
  3960                           
  3961                           ;main.c: 56: }
  3962                           ;main.c: 57: if(i == 25)
  3963  0010EA  0E19               	movlw	25
  3964  0010EC  182D               	xorwf	_i,w,c
  3965  0010EE  B4D8               	btfsc	status,2,c
  3966                           
  3967                           ;main.c: 58: i++;
  3968  0010F0  2A2D               	incf	_i,f,c
  3969  0010F2                     i2l2239:
  3970                           
  3971                           ;main.c: 59: }
  3972                           ;main.c: 60: }
  3973                           ;main.c: 62: if(PIR1bits.ADIF){
  3974  0010F2  AC9E               	btfss	3998,6,c	;volatile
  3975  0010F4  D00D               	goto	i2l2247
  3976                           
  3977                           ;main.c: 63: data_ADC = ((ADRESH<<8) + ADRESL);
  3978  0010F6  50C4               	movf	4036,w,c	;volatile
  3979  0010F8  6E1E               	movwf	(??_interruptions+1)& (0+255),c
  3980  0010FA  6A1D               	clrf	??_interruptions& (0+255),c
  3981  0010FC  50C3               	movf	4035,w,c	;volatile
  3982  0010FE  241D               	addwf	??_interruptions,w,c
  3983  001100  0100               	movlb	0	; () banked
  3984  001102  6F84               	movwf	_data_ADC& (0+255),b
  3985  001104  0E00               	movlw	0
  3986  001106  201E               	addwfc	??_interruptions+1,w,c
  3987  001108  0100               	movlb	0	; () banked
  3988  00110A  6F85               	movwf	(_data_ADC+1)& (0+255),b
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;main.c: 64: ADCON0bits.GODONE = 1;
  3992  00110C  82C2               	bsf	4034,1,c	;volatile
  3993                           
  3994                           ; BSR set to: 0
  3995                           ;main.c: 65: PIR1bits.ADIF = 0;
  3996  00110E  9C9E               	bcf	3998,6,c	;volatile
  3997  001110                     i2l2247:
  3998                           
  3999                           ;main.c: 66: }
  4000                           ;main.c: 68: if(INTCONbits.TMR0IF){
  4001  001110  A4F2               	btfss	intcon,2,c	;volatile
  4002  001112  D00B               	goto	i2l277
  4003                           
  4004                           ;main.c: 69: val = ~val;
  4005  001114  B248               	btfsc	_val/(0+8),_val& (0+7),c
  4006  001116  D002               	goto	i2u186_40
  4007  001118  8248               	bsf	_val/(0+8),_val& (0+7),c
  4008  00111A  D001               	goto	i2u187_45
  4009  00111C                     i2u186_40:
  4010  00111C  9248               	bcf	_val/(0+8),_val& (0+7),c
  4011  00111E                     i2u187_45:
  4012                           
  4013                           ;main.c: 70: PORTDbits.RD4 = val;
  4014  00111E  A248               	btfss	_val/(0+8),_val& (0+7),c
  4015  001120  D002               	bra	i2u188_45
  4016  001122  8883               	bsf	3971,4,c	;volatile
  4017  001124  D001               	bra	i2u188_47
  4018  001126                     i2u188_45:
  4019  001126  9883               	bcf	3971,4,c	;volatile
  4020  001128                     i2u188_47:
  4021                           
  4022                           ;main.c: 72: INTCONbits.TMR0IF = 0;
  4023  001128  94F2               	bcf	intcon,2,c	;volatile
  4024  00112A                     i2l277:
  4025  00112A  C02C  FFF5         	movff	??_interruptions+15,tablat
  4026  00112E  C02B  FFF8         	movff	??_interruptions+14,tblptru
  4027  001132  C02A  FFF7         	movff	??_interruptions+13,tblptrh
  4028  001136  C029  FFF6         	movff	??_interruptions+12,tblptrl
  4029  00113A  C028  FFF4         	movff	??_interruptions+11,prodh
  4030  00113E  C027  FFF3         	movff	??_interruptions+10,prodl
  4031  001142  C026  FFDA         	movff	??_interruptions+9,fsr2h
  4032  001146  C025  FFD9         	movff	??_interruptions+8,fsr2l
  4033  00114A  C024  FFE2         	movff	??_interruptions+7,fsr1h
  4034  00114E  C023  FFE1         	movff	??_interruptions+6,fsr1l
  4035  001152  C022  FFEA         	movff	??_interruptions+5,fsr0h
  4036  001156  C021  FFE9         	movff	??_interruptions+4,fsr0l
  4037  00115A  C020  FFFB         	movff	??_interruptions+3,pclatu
  4038  00115E  C01F  FFFA         	movff	??_interruptions+2,pclath
  4039  001162  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4040  001164  0011               	retfie		f
  4041  001166                     __end_of_interruptions:
  4042                           	opt stack 0
  4043                           pclatu	equ	0xFFB
  4044                           pclath	equ	0xFFA
  4045                           tblptru	equ	0xFF8
  4046                           tblptrh	equ	0xFF7
  4047                           tblptrl	equ	0xFF6
  4048                           tablat	equ	0xFF5
  4049                           prodh	equ	0xFF4
  4050                           prodl	equ	0xFF3
  4051                           intcon	equ	0xFF2
  4052                           intcon2	equ	0xFF1
  4053                           postinc0	equ	0xFEE
  4054                           fsr0h	equ	0xFEA
  4055                           fsr0l	equ	0xFE9
  4056                           wreg	equ	0xFE8
  4057                           fsr1h	equ	0xFE2
  4058                           fsr1l	equ	0xFE1
  4059                           indf2	equ	0xFDF
  4060                           postinc2	equ	0xFDE
  4061                           postdec2	equ	0xFDD
  4062                           fsr2h	equ	0xFDA
  4063                           fsr2l	equ	0xFD9
  4064                           status	equ	0xFD8
  4065                           
  4066 ;; *************** function i2_printf *****************
  4067 ;; Defined at:
  4068 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4069 ;; Parameters:    Size  Location     Type
  4070 ;;  f               2   12[COMRAM] PTR const unsigned char 
  4071 ;;		 -> STR_8(7), STR_7(15), STR_6(28), STR_5(27), 
  4072 ;;		 -> STR_4(25), STR_3(33), STR_2(21), STR_1(3), 
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;  printf          4    0        struct .
  4075 ;;  printf          3    0        PTR const unsigned char 
  4076 ;;  printf          2   25[COMRAM] int 
  4077 ;;  printf          2   23[COMRAM] unsigned int 
  4078 ;;  printf          2   19[COMRAM] PTR void [1]
  4079 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4080 ;;  printf          2    0        unsigned int 
  4081 ;;  printf          1   27[COMRAM] char 
  4082 ;;  printf          1   22[COMRAM] unsigned char 
  4083 ;;  printf          1   21[COMRAM] char 
  4084 ;;  printf          1   18[COMRAM] unsigned char 
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  2   12[COMRAM] int 
  4087 ;; Registers used:
  4088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4094 ;;      Params:         2       0       0       0       0       0       0       0       0
  4095 ;;      Locals:        10       0       0       0       0       0       0       0       0
  4096 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4097 ;;      Totals:        16       0       0       0       0       0       0       0       0
  4098 ;;Total ram usage:       16 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; Hardware stack levels required when called:    1
  4101 ;; This function calls:
  4102 ;;		i2___lwdiv
  4103 ;;		i2___lwmod
  4104 ;;		i2___wmul
  4105 ;;		i2_isdigit
  4106 ;;		i2_putch
  4107 ;; This function is called by:
  4108 ;;		_interruptions
  4109 ;; This function uses a non-reentrant model
  4110 ;;
  4111                           
  4112                           	psect	text24
  4113  000BFC                     __ptext24:
  4114                           	opt stack 0
  4115  000BFC                     i2_printf:
  4116                           	opt stack 26
  4117                           
  4118                           ;doprnt.c: 466: va_list ap;
  4119                           ;doprnt.c: 499: signed char c;
  4120                           ;doprnt.c: 501: int width;
  4121                           ;doprnt.c: 506: signed char prec;
  4122                           ;doprnt.c: 508: unsigned char flag;
  4123                           ;doprnt.c: 523: union {
  4124                           ;doprnt.c: 524: unsigned long vd;
  4125                           ;doprnt.c: 525: double integ;
  4126                           ;doprnt.c: 526: } tmpval;
  4127                           ;doprnt.c: 528: unsigned int val;
  4128                           ;doprnt.c: 529: unsigned len;
  4129                           ;doprnt.c: 530: const char * cp;
  4130                           ;doprnt.c: 533: *ap = __va_start();
  4131                           
  4132                           ;incstack = 0
  4133  000BFC  0E0F               	movlw	low (?i2_printf+2)
  4134  000BFE  6E14               	movwf	i2printf@ap,c
  4135  000C00  0E00               	movlw	high (?i2_printf+2)
  4136  000C02  6E15               	movwf	i2printf@ap+1,c
  4137                           
  4138                           ;doprnt.c: 536: while(c = *f++) {
  4139  000C04  D141               	goto	i2l2205
  4140  000C06                     i2l2103:
  4141                           
  4142                           ;doprnt.c: 538: if(c != '%')
  4143  000C06  0E25               	movlw	37
  4144  000C08  181C               	xorwf	i2printf@c,w,c
  4145  000C0A  B4D8               	btfsc	status,2,c
  4146  000C0C  D004               	goto	i2l2107
  4147                           
  4148                           ;doprnt.c: 540: {
  4149                           ;doprnt.c: 541: (putch(c) );
  4150  000C0E  501C               	movf	i2printf@c,w,c
  4151  000C10  EC6C  F00B         	call	i2_putch
  4152                           
  4153                           ;doprnt.c: 542: continue;
  4154  000C14  D139               	goto	i2l2205
  4155  000C16                     i2l2107:
  4156                           
  4157                           ;doprnt.c: 543: }
  4158                           ;doprnt.c: 546: width = 0;
  4159  000C16  0E00               	movlw	0
  4160  000C18  6E1B               	movwf	i2printf@width+1,c
  4161  000C1A  0E00               	movlw	0
  4162  000C1C  6E1A               	movwf	i2printf@width,c
  4163                           
  4164                           ;doprnt.c: 548: flag = 0;
  4165  000C1E  0E00               	movlw	0
  4166  000C20  6E17               	movwf	i2printf@flag,c
  4167                           
  4168                           ;doprnt.c: 551: switch(*f) {
  4169                           
  4170                           ;doprnt.c: 550: for(;;) {
  4171  000C22  D003               	goto	i2l2113
  4172  000C24                     i2l2109:
  4173                           
  4174                           ;doprnt.c: 580: flag |= 0x04;
  4175  000C24  8417               	bsf	i2printf@flag,2,c
  4176                           
  4177                           ;doprnt.c: 581: f++;
  4178  000C26  4A0D               	infsnz	i2printf@f,f,c
  4179  000C28  2A0E               	incf	i2printf@f+1,f,c
  4180  000C2A                     i2l2113:
  4181  000C2A  C00D  FFF6         	movff	i2printf@f,tblptrl
  4182  000C2E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4183  000C32                     	if	0	;tblptru may be non-zero
  4184  000C32                     	endif
  4185  000C32                     	if	0	;tblptru may be non-zero
  4186  000C32                     	endif
  4187  000C32  0008               	tblrd		*
  4188  000C34  50F5               	movf	tablat,w,c
  4189                           
  4190                           ; Switch size 1, requested type "space"
  4191                           ; Number of cases is 1, Range of values is 48 to 48
  4192                           ; switch strategies available:
  4193                           ; Name         Instructions Cycles
  4194                           ; simple_byte            4     3 (average)
  4195                           ;	Chosen strategy is simple_byte
  4196  000C36  0A30               	xorlw	48	; case 48
  4197  000C38  B4D8               	btfsc	status,2,c
  4198  000C3A  D7F4               	goto	i2l2109
  4199                           
  4200                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4201                           
  4202                           ;doprnt.c: 586: }
  4203                           
  4204                           ;doprnt.c: 585: break;
  4205  000C3C  C00D  FFF6         	movff	i2printf@f,tblptrl
  4206  000C40  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4207  000C44                     	if	0	;tblptru may be non-zero
  4208  000C44                     	endif
  4209  000C44                     	if	0	;tblptru may be non-zero
  4210  000C44                     	endif
  4211  000C44  0008               	tblrd		*
  4212  000C46  50F5               	movf	tablat,w,c
  4213  000C48  EC0A  F00B         	call	i2_isdigit
  4214  000C4C  A0D8               	btfss	status,0,c
  4215  000C4E  D038               	goto	i2l2133
  4216                           
  4217                           ;doprnt.c: 598: width = 0;
  4218  000C50  0E00               	movlw	0
  4219  000C52  6E1B               	movwf	i2printf@width+1,c
  4220  000C54  0E00               	movlw	0
  4221  000C56  6E1A               	movwf	i2printf@width,c
  4222  000C58                     i2l2119:
  4223                           
  4224                           ;doprnt.c: 600: width *= 10;
  4225  000C58  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
  4226  000C5C  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  4227  000C60  0E00               	movlw	0
  4228  000C62  6E04               	movwf	i2___wmul@multiplicand+1,c
  4229  000C64  0E0A               	movlw	10
  4230  000C66  6E03               	movwf	i2___wmul@multiplicand,c
  4231  000C68  ECE6  F00A         	call	i2___wmul	;wreg free
  4232  000C6C  C001  F01A         	movff	?i2___wmul,i2printf@width
  4233  000C70  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
  4234                           
  4235                           ;doprnt.c: 601: width += *f++ - '0';
  4236  000C74  0ED0               	movlw	208
  4237  000C76  6E0F               	movwf	??i2_printf& (0+255),c
  4238  000C78  0EFF               	movlw	255
  4239  000C7A  6E10               	movwf	(??i2_printf+1)& (0+255),c
  4240  000C7C  C00D  FFF6         	movff	i2printf@f,tblptrl
  4241  000C80  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4242  000C84                     	if	0	;tblptru may be non-zero
  4243  000C84                     	endif
  4244  000C84                     	if	0	;tblptru may be non-zero
  4245  000C84                     	endif
  4246  000C84  0008               	tblrd		*
  4247  000C86  50F5               	movf	tablat,w,c
  4248  000C88  6E11               	movwf	(??i2_printf+2)& (0+255),c
  4249  000C8A  6A12               	clrf	(??i2_printf+3)& (0+255),c
  4250  000C8C  500F               	movf	??i2_printf,w,c
  4251  000C8E  2611               	addwf	??i2_printf+2,f,c
  4252  000C90  5010               	movf	??i2_printf+1,w,c
  4253  000C92  2212               	addwfc	??i2_printf+3,f,c
  4254  000C94  5011               	movf	??i2_printf+2,w,c
  4255  000C96  261A               	addwf	i2printf@width,f,c
  4256  000C98  5012               	movf	??i2_printf+3,w,c
  4257  000C9A  221B               	addwfc	i2printf@width+1,f,c
  4258  000C9C  4A0D               	infsnz	i2printf@f,f,c
  4259  000C9E  2A0E               	incf	i2printf@f+1,f,c
  4260                           
  4261                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4262  000CA0  C00D  FFF6         	movff	i2printf@f,tblptrl
  4263  000CA4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4264  000CA8                     	if	0	;tblptru may be non-zero
  4265  000CA8                     	endif
  4266  000CA8                     	if	0	;tblptru may be non-zero
  4267  000CA8                     	endif
  4268  000CA8  0008               	tblrd		*
  4269  000CAA  50F5               	movf	tablat,w,c
  4270  000CAC  EC0A  F00B         	call	i2_isdigit
  4271  000CB0  A0D8               	btfss	status,0,c
  4272  000CB2  D006               	goto	i2l2133
  4273  000CB4  D7D1               	goto	i2l2119
  4274  000CB6                     i2l2127:
  4275                           
  4276                           ;doprnt.c: 718: case 'x':
  4277                           ;doprnt.c: 721: flag |= 0x80;
  4278  000CB6  8E17               	bsf	i2printf@flag,7,c
  4279                           
  4280                           ;doprnt.c: 723: break;
  4281  000CB8  D01A               	goto	i2l2135
  4282  000CBA                     i2l2129:
  4283                           
  4284                           ;doprnt.c: 818: flag |= 0xC0;
  4285  000CBA  0EC0               	movlw	192
  4286  000CBC  1217               	iorwf	i2printf@flag,f,c
  4287                           
  4288                           ;doprnt.c: 822: }
  4289                           
  4290                           ;doprnt.c: 819: break;
  4291  000CBE  D017               	goto	i2l2135
  4292  000CC0                     i2l2133:
  4293  000CC0  C00D  FFF6         	movff	i2printf@f,tblptrl
  4294  000CC4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4295  000CC8  4A0D               	infsnz	i2printf@f,f,c
  4296  000CCA  2A0E               	incf	i2printf@f+1,f,c
  4297  000CCC                     	if	0	;tblptru may be non-zero
  4298  000CCC                     	endif
  4299  000CCC                     	if	0	;tblptru may be non-zero
  4300  000CCC                     	endif
  4301  000CCC  0008               	tblrd		*
  4302  000CCE  CFF5 F01C          	movff	tablat,i2printf@c
  4303  000CD2  501C               	movf	i2printf@c,w,c
  4304                           
  4305                           ; Switch size 1, requested type "space"
  4306                           ; Number of cases is 4, Range of values is 0 to 120
  4307                           ; switch strategies available:
  4308                           ; Name         Instructions Cycles
  4309                           ; simple_byte           13     7 (average)
  4310                           ;	Chosen strategy is simple_byte
  4311  000CD4  0A00               	xorlw	0	; case 0
  4312  000CD6  B4D8               	btfsc	status,2,c
  4313  000CD8  0012               	return	
  4314  000CDA  0A58               	xorlw	88	; case 88
  4315  000CDC  B4D8               	btfsc	status,2,c
  4316  000CDE  D7EB               	goto	i2l2127
  4317  000CE0  0A2D               	xorlw	45	; case 117
  4318  000CE2  B4D8               	btfsc	status,2,c
  4319  000CE4  D7EA               	goto	i2l2129
  4320  000CE6  0A0D               	xorlw	13	; case 120
  4321  000CE8  B4D8               	btfsc	status,2,c
  4322  000CEA  D7E5               	goto	i2l2127
  4323  000CEC  D0CD               	goto	i2l2205
  4324  000CEE                     i2l2135:
  4325                           
  4326                           ;doprnt.c: 1273: {
  4327                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4328  000CEE  C014  FFD9         	movff	i2printf@ap,fsr2l
  4329  000CF2  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  4330  000CF6  CFDE F018          	movff	postinc2,i2printf@val
  4331  000CFA  CFDD F019          	movff	postdec2,i2printf@val+1
  4332  000CFE  0E02               	movlw	2
  4333  000D00  2614               	addwf	i2printf@ap,f,c
  4334  000D02  0E00               	movlw	0
  4335  000D04  2215               	addwfc	i2printf@ap+1,f,c
  4336                           
  4337                           ;doprnt.c: 1287: }
  4338                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  4339  000D06  D030               	goto	i2l2169
  4340  000D08                     i2l2139:
  4341                           
  4342                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4343  000D08  0E01               	movlw	1
  4344  000D0A  6E1C               	movwf	i2printf@c,c
  4345  000D0C                     i2l2141:
  4346  000D0C  0E05               	movlw	5
  4347  000D0E  181C               	xorwf	i2printf@c,w,c
  4348  000D10  B4D8               	btfsc	status,2,c
  4349  000D12  D032               	goto	i2l2171
  4350                           
  4351                           ;doprnt.c: 1306: if(val < dpowers[c])
  4352  000D14  501C               	movf	i2printf@c,w,c
  4353  000D16  0D02               	mullw	2
  4354  000D18  0E01               	movlw	low _dpowers
  4355  000D1A  24F3               	addwf	prodl,w,c
  4356  000D1C  6EF6               	movwf	tblptrl,c
  4357  000D1E  0E08               	movlw	high _dpowers
  4358  000D20  20F4               	addwfc	prodh,w,c
  4359  000D22  6EF7               	movwf	tblptrh,c
  4360  000D24                     	if	0	;There are less than 3 active tblptr bytes
  4361  000D24                     	endif
  4362  000D24  0009               	tblrd		*+
  4363  000D26  50F5               	movf	tablat,w,c
  4364  000D28  5C18               	subwf	i2printf@val,w,c
  4365  000D2A  0009               	tblrd		*+
  4366  000D2C  50F5               	movf	tablat,w,c
  4367  000D2E  5819               	subwfb	i2printf@val+1,w,c
  4368  000D30  A0D8               	btfss	status,0,c
  4369  000D32  D022               	goto	i2l2171
  4370                           
  4371                           ;doprnt.c: 1307: break;
  4372  000D34  2A1C               	incf	i2printf@c,f,c
  4373  000D36  D7EA               	goto	i2l2141
  4374  000D38                     i2l2153:
  4375                           
  4376                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4377  000D38  0E01               	movlw	1
  4378  000D3A  6E1C               	movwf	i2printf@c,c
  4379  000D3C                     i2l2155:
  4380  000D3C  0E04               	movlw	4
  4381  000D3E  181C               	xorwf	i2printf@c,w,c
  4382  000D40  B4D8               	btfsc	status,2,c
  4383  000D42  D01A               	goto	i2l2171
  4384                           
  4385                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4386  000D44  501C               	movf	i2printf@c,w,c
  4387  000D46  0D02               	mullw	2
  4388  000D48  0E0B               	movlw	low _hexpowers
  4389  000D4A  24F3               	addwf	prodl,w,c
  4390  000D4C  6EF6               	movwf	tblptrl,c
  4391  000D4E  0E08               	movlw	high _hexpowers
  4392  000D50  20F4               	addwfc	prodh,w,c
  4393  000D52  6EF7               	movwf	tblptrh,c
  4394  000D54                     	if	0	;There are less than 3 active tblptr bytes
  4395  000D54                     	endif
  4396  000D54  0009               	tblrd		*+
  4397  000D56  50F5               	movf	tablat,w,c
  4398  000D58  5C18               	subwf	i2printf@val,w,c
  4399  000D5A  0009               	tblrd		*+
  4400  000D5C  50F5               	movf	tablat,w,c
  4401  000D5E  5819               	subwfb	i2printf@val+1,w,c
  4402  000D60  A0D8               	btfss	status,0,c
  4403  000D62  D00A               	goto	i2l2171
  4404                           
  4405                           ;doprnt.c: 1318: break;
  4406  000D64  2A1C               	incf	i2printf@c,f,c
  4407  000D66  D7EA               	goto	i2l2155
  4408  000D68                     i2l2169:
  4409  000D68  5017               	movf	i2printf@flag,w,c
  4410  000D6A  0BC0               	andlw	192
  4411                           
  4412                           ; Switch size 1, requested type "space"
  4413                           ; Number of cases is 2, Range of values is 128 to 192
  4414                           ; switch strategies available:
  4415                           ; Name         Instructions Cycles
  4416                           ; simple_byte            7     4 (average)
  4417                           ;	Chosen strategy is simple_byte
  4418  000D6C  0A80               	xorlw	128	; case 128
  4419  000D6E  B4D8               	btfsc	status,2,c
  4420  000D70  D7E3               	goto	i2l2153
  4421  000D72  0A40               	xorlw	64	; case 192
  4422  000D74  B4D8               	btfsc	status,2,c
  4423  000D76  D7C8               	goto	i2l2139
  4424  000D78                     i2l2171:
  4425                           
  4426                           ;doprnt.c: 1381: if(width > c)
  4427  000D78  0E80               	movlw	128
  4428  000D7A  BE1C               	btfsc	i2printf@c,7,c
  4429  000D7C  0E7F               	movlw	127
  4430  000D7E  6E0F               	movwf	??i2_printf& (0+255),c
  4431  000D80  501A               	movf	i2printf@width,w,c
  4432  000D82  5C1C               	subwf	i2printf@c,w,c
  4433  000D84  501B               	movf	i2printf@width+1,w,c
  4434  000D86  0A80               	xorlw	128
  4435  000D88  580F               	subwfb	??i2_printf& (0+255),w,c
  4436  000D8A  B0D8               	btfsc	status,0,c
  4437  000D8C  D007               	goto	i2l2175
  4438                           
  4439                           ;doprnt.c: 1382: width -= c;
  4440  000D8E  501C               	movf	i2printf@c,w,c
  4441  000D90  5E1A               	subwf	i2printf@width,f,c
  4442  000D92  0E00               	movlw	0
  4443  000D94  BE1C               	btfsc	i2printf@c,7,c
  4444  000D96  0EFF               	movlw	255
  4445  000D98  5A1B               	subwfb	i2printf@width+1,f,c
  4446  000D9A  D004               	goto	i2l2177
  4447  000D9C                     i2l2175:
  4448                           
  4449                           ;doprnt.c: 1383: else
  4450                           ;doprnt.c: 1384: width = 0;
  4451  000D9C  0E00               	movlw	0
  4452  000D9E  6E1B               	movwf	i2printf@width+1,c
  4453  000DA0  0E00               	movlw	0
  4454  000DA2  6E1A               	movwf	i2printf@width,c
  4455  000DA4                     i2l2177:
  4456                           
  4457                           ;doprnt.c: 1387: if(flag & 0x04) {
  4458  000DA4  A417               	btfss	i2printf@flag,2,c
  4459  000DA6  D00B               	goto	i2l2185
  4460  000DA8                     
  4461                           ;doprnt.c: 1415: if(width)
  4462  000DA8  501A               	movf	i2printf@width,w,c
  4463  000DAA  101B               	iorwf	i2printf@width+1,w,c
  4464  000DAC  B4D8               	btfsc	status,2,c
  4465  000DAE  D015               	goto	i2l344
  4466                           
  4467                           ;doprnt.c: 1417: (putch('0') );
  4468                           
  4469                           ;doprnt.c: 1416: do
  4470  000DB0  0E30               	movlw	48
  4471  000DB2  EC6C  F00B         	call	i2_putch
  4472                           
  4473                           ;doprnt.c: 1418: while(--width);
  4474  000DB6  061A               	decf	i2printf@width,f,c
  4475  000DB8  A0D8               	btfss	status,0,c
  4476  000DBA  061B               	decf	i2printf@width+1,f,c
  4477  000DBC  D7F5               	goto	L2
  4478  000DBE                     i2l2185:
  4479                           
  4480                           ;doprnt.c: 1422: {
  4481                           ;doprnt.c: 1424: if(width
  4482                           ;doprnt.c: 1428: )
  4483  000DBE  501A               	movf	i2printf@width,w,c
  4484  000DC0  101B               	iorwf	i2printf@width+1,w,c
  4485  000DC2  B4D8               	btfsc	status,2,c
  4486  000DC4  D00A               	goto	i2l344
  4487  000DC6                     i2l2187:
  4488                           
  4489                           ;doprnt.c: 1430: (putch(' ') );
  4490  000DC6  0E20               	movlw	32
  4491  000DC8  EC6C  F00B         	call	i2_putch
  4492                           
  4493                           ;doprnt.c: 1431: while(--width);
  4494  000DCC  061A               	decf	i2printf@width,f,c
  4495  000DCE  A0D8               	btfss	status,0,c
  4496  000DD0  061B               	decf	i2printf@width+1,f,c
  4497  000DD2  501A               	movf	i2printf@width,w,c
  4498  000DD4  101B               	iorwf	i2printf@width+1,w,c
  4499  000DD6  A4D8               	btfss	status,2,c
  4500  000DD8  D7F6               	goto	i2l2187
  4501  000DDA                     i2l344:
  4502                           
  4503                           ;doprnt.c: 1469: }
  4504                           ;doprnt.c: 1472: prec = c;
  4505  000DDA  C01C  F016         	movff	i2printf@c,i2printf@prec
  4506                           
  4507                           ;doprnt.c: 1474: while(prec--) {
  4508  000DDE  D050               	goto	i2l2203
  4509  000DE0                     i2l2191:
  4510                           
  4511                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4512  000DE0  5016               	movf	i2printf@prec,w,c
  4513  000DE2  0D02               	mullw	2
  4514  000DE4  0E01               	movlw	low _dpowers
  4515  000DE6  24F3               	addwf	prodl,w,c
  4516  000DE8  6EF6               	movwf	tblptrl,c
  4517  000DEA  0E08               	movlw	high _dpowers
  4518  000DEC  20F4               	addwfc	prodh,w,c
  4519  000DEE  6EF7               	movwf	tblptrh,c
  4520  000DF0                     	if	0	;There are less than 3 active tblptr bytes
  4521  000DF0                     	endif
  4522  000DF0  0009               	tblrd		*+
  4523  000DF2  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4524  000DF6  000A               	tblrd		*-
  4525  000DF8  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4526  000DFC  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4527  000E00  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4528  000E04  EC11  F00A         	call	i2___lwdiv	;wreg free
  4529  000E08  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  4530  000E0C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  4531  000E10  0E00               	movlw	0
  4532  000E12  6E0B               	movwf	i2___lwmod@divisor+1,c
  4533  000E14  0E0A               	movlw	10
  4534  000E16  6E0A               	movwf	i2___lwmod@divisor,c
  4535  000E18  EC61  F00A         	call	i2___lwmod	;wreg free
  4536  000E1C  5008               	movf	?i2___lwmod,w,c
  4537  000E1E  0F30               	addlw	48
  4538  000E20  6E1C               	movwf	i2printf@c,c
  4539                           
  4540                           ;doprnt.c: 1491: break;
  4541  000E22  D02B               	goto	i2l2201
  4542  000E24                     i2l2193:
  4543                           
  4544                           ;doprnt.c: 1499: {
  4545                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4546  000E24  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4547  000E28  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4548  000E2C  5016               	movf	i2printf@prec,w,c
  4549  000E2E  0D02               	mullw	2
  4550  000E30  0E0B               	movlw	low _hexpowers
  4551  000E32  24F3               	addwf	prodl,w,c
  4552  000E34  6EF6               	movwf	tblptrl,c
  4553  000E36  0E08               	movlw	high _hexpowers
  4554  000E38  20F4               	addwfc	prodh,w,c
  4555  000E3A  6EF7               	movwf	tblptrh,c
  4556  000E3C                     	if	0	;There are less than 3 active tblptr bytes
  4557  000E3C                     	endif
  4558  000E3C  0009               	tblrd		*+
  4559  000E3E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4560  000E42  000A               	tblrd		*-
  4561  000E44  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4562  000E48  EC11  F00A         	call	i2___lwdiv	;wreg free
  4563  000E4C  5001               	movf	?i2___lwdiv,w,c
  4564  000E4E  0B0F               	andlw	15
  4565  000E50  6E13               	movwf	i2printf@idx,c
  4566                           
  4567                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  4568  000E52  5013               	movf	i2printf@idx,w,c
  4569  000E54  0D01               	mullw	1
  4570  000E56  0E99               	movlw	low STR_9
  4571  000E58  24F3               	addwf	prodl,w,c
  4572  000E5A  6EF6               	movwf	tblptrl,c
  4573  000E5C  0E08               	movlw	high STR_9
  4574  000E5E  20F4               	addwfc	prodh,w,c
  4575  000E60  6EF7               	movwf	tblptrh,c
  4576  000E62                     	if	0	;There are less than 3 active tblptr bytes
  4577  000E62                     	endif
  4578  000E62  0008               	tblrd		*
  4579  000E64  CFF5 F01C          	movff	tablat,i2printf@c
  4580                           
  4581                           ;doprnt.c: 1523: }
  4582                           
  4583                           ;doprnt.c: 1508: }
  4584                           ;doprnt.c: 1510: break;
  4585  000E68  D008               	goto	i2l2201
  4586  000E6A                     i2l2199:
  4587  000E6A  5017               	movf	i2printf@flag,w,c
  4588  000E6C  0BC0               	andlw	192
  4589                           
  4590                           ; Switch size 1, requested type "space"
  4591                           ; Number of cases is 2, Range of values is 128 to 192
  4592                           ; switch strategies available:
  4593                           ; Name         Instructions Cycles
  4594                           ; simple_byte            7     4 (average)
  4595                           ;	Chosen strategy is simple_byte
  4596  000E6E  0A80               	xorlw	128	; case 128
  4597  000E70  B4D8               	btfsc	status,2,c
  4598  000E72  D7D8               	goto	i2l2193
  4599  000E74  0A40               	xorlw	64	; case 192
  4600  000E76  B4D8               	btfsc	status,2,c
  4601  000E78  D7B3               	goto	i2l2191
  4602  000E7A                     i2l2201:
  4603                           
  4604                           ;doprnt.c: 1524: (putch(c) );
  4605  000E7A  501C               	movf	i2printf@c,w,c
  4606  000E7C  EC6C  F00B         	call	i2_putch
  4607  000E80                     i2l2203:
  4608  000E80  0616               	decf	i2printf@prec,f,c
  4609  000E82  2816               	incf	i2printf@prec,w,c
  4610  000E84  A4D8               	btfss	status,2,c
  4611  000E86  D7F1               	goto	i2l2199
  4612  000E88                     i2l2205:
  4613  000E88  C00D  FFF6         	movff	i2printf@f,tblptrl
  4614  000E8C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4615  000E90  4A0D               	infsnz	i2printf@f,f,c
  4616  000E92  2A0E               	incf	i2printf@f+1,f,c
  4617  000E94                     	if	0	;tblptru may be non-zero
  4618  000E94                     	endif
  4619  000E94                     	if	0	;tblptru may be non-zero
  4620  000E94                     	endif
  4621  000E94  0008               	tblrd		*
  4622  000E96  CFF5 F01C          	movff	tablat,i2printf@c
  4623  000E9A  501C               	movf	i2printf@c,w,c
  4624  000E9C  B4D8               	btfsc	status,2,c
  4625  000E9E  0012               	return	
  4626  000EA0  D6B2               	goto	i2l2103
  4627  000EA2                     __end_ofi2_printf:
  4628                           	opt stack 0
  4629                           pclatu	equ	0xFFB
  4630                           pclath	equ	0xFFA
  4631                           tblptru	equ	0xFF8
  4632                           tblptrh	equ	0xFF7
  4633                           tblptrl	equ	0xFF6
  4634                           tablat	equ	0xFF5
  4635                           prodh	equ	0xFF4
  4636                           prodl	equ	0xFF3
  4637                           intcon	equ	0xFF2
  4638                           intcon2	equ	0xFF1
  4639                           postinc0	equ	0xFEE
  4640                           fsr0h	equ	0xFEA
  4641                           fsr0l	equ	0xFE9
  4642                           wreg	equ	0xFE8
  4643                           fsr1h	equ	0xFE2
  4644                           fsr1l	equ	0xFE1
  4645                           indf2	equ	0xFDF
  4646                           postinc2	equ	0xFDE
  4647                           postdec2	equ	0xFDD
  4648                           fsr2h	equ	0xFDA
  4649                           fsr2l	equ	0xFD9
  4650                           status	equ	0xFD8
  4651                           
  4652 ;; *************** function i2_putch *****************
  4653 ;; Defined at:
  4654 ;;		line 46 in file "usart.c"
  4655 ;; Parameters:    Size  Location     Type
  4656 ;;  byte            1    wreg     unsigned char 
  4657 ;; Auto vars:     Size  Location     Type
  4658 ;;  byte            1    0[COMRAM] unsigned char 
  4659 ;; Return value:  Size  Location     Type
  4660 ;;		None               void
  4661 ;; Registers used:
  4662 ;;		wreg
  4663 ;; Tracked objects:
  4664 ;;		On entry : 0/0
  4665 ;;		On exit  : 0/0
  4666 ;;		Unchanged: 0/0
  4667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4668 ;;      Params:         0       0       0       0       0       0       0       0       0
  4669 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4670 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4671 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4672 ;;Total ram usage:        1 bytes
  4673 ;; Hardware stack levels used:    1
  4674 ;; This function calls:
  4675 ;;		Nothing
  4676 ;; This function is called by:
  4677 ;;		i2_printf
  4678 ;; This function uses a non-reentrant model
  4679 ;;
  4680                           
  4681                           	psect	text25
  4682  0016D8                     __ptext25:
  4683                           	opt stack 0
  4684  0016D8                     i2_putch:
  4685                           	opt stack 26
  4686                           
  4687                           ;incstack = 0
  4688                           ;i2putch@byte stored from wreg
  4689  0016D8  6E01               	movwf	i2putch@byte,c
  4690  0016DA                     i2l119:
  4691  0016DA  A89E               	btfss	3998,4,c	;volatile
  4692  0016DC  D7FE               	goto	i2l119
  4693                           
  4694                           ;usart.c: 50: TXREG = byte;
  4695  0016DE  C001  FFAD         	movff	i2putch@byte,4013	;volatile
  4696  0016E2  0012               	return		;funcret
  4697  0016E4                     __end_ofi2_putch:
  4698                           	opt stack 0
  4699                           pclatu	equ	0xFFB
  4700                           pclath	equ	0xFFA
  4701                           tblptru	equ	0xFF8
  4702                           tblptrh	equ	0xFF7
  4703                           tblptrl	equ	0xFF6
  4704                           tablat	equ	0xFF5
  4705                           prodh	equ	0xFF4
  4706                           prodl	equ	0xFF3
  4707                           intcon	equ	0xFF2
  4708                           intcon2	equ	0xFF1
  4709                           postinc0	equ	0xFEE
  4710                           fsr0h	equ	0xFEA
  4711                           fsr0l	equ	0xFE9
  4712                           wreg	equ	0xFE8
  4713                           fsr1h	equ	0xFE2
  4714                           fsr1l	equ	0xFE1
  4715                           indf2	equ	0xFDF
  4716                           postinc2	equ	0xFDE
  4717                           postdec2	equ	0xFDD
  4718                           fsr2h	equ	0xFDA
  4719                           fsr2l	equ	0xFD9
  4720                           status	equ	0xFD8
  4721                           
  4722 ;; *************** function i2_isdigit *****************
  4723 ;; Defined at:
  4724 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;  c               1    wreg     unsigned char 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;  c               1    2[COMRAM] unsigned char 
  4729 ;; Return value:  Size  Location     Type
  4730 ;;		None               void
  4731 ;; Registers used:
  4732 ;;		wreg, status,2, status,0
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4738 ;;      Params:         0       0       0       0       0       0       0       0       0
  4739 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4740 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4741 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4742 ;;Total ram usage:        3 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; This function calls:
  4745 ;;		Nothing
  4746 ;; This function is called by:
  4747 ;;		i2_printf
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           	psect	text26
  4752  001614                     __ptext26:
  4753                           	opt stack 0
  4754  001614                     i2_isdigit:
  4755                           	opt stack 26
  4756                           
  4757                           ;incstack = 0
  4758                           ;i2isdigit@c stored from wreg
  4759  001614  6E03               	movwf	i2isdigit@c,c
  4760  001616  0E00               	movlw	0
  4761  001618  6E02               	movwf	i2_isdigit$1320,c
  4762  00161A  0E3A               	movlw	58
  4763  00161C  6003               	cpfslt	i2isdigit@c,c
  4764  00161E  D005               	goto	i2l1761
  4765  001620  0E2F               	movlw	47
  4766  001622  6403               	cpfsgt	i2isdigit@c,c
  4767  001624  D002               	goto	i2l1761
  4768  001626  0E01               	movlw	1
  4769  001628  6E02               	movwf	i2_isdigit$1320,c
  4770  00162A                     i2l1761:
  4771  00162A  C002  F001         	movff	i2_isdigit$1320,??i2_isdigit
  4772  00162E  3001               	rrcf	??i2_isdigit,w,c
  4773  001630  0012               	return	
  4774  001632                     __end_ofi2_isdigit:
  4775                           	opt stack 0
  4776                           pclatu	equ	0xFFB
  4777                           pclath	equ	0xFFA
  4778                           tblptru	equ	0xFF8
  4779                           tblptrh	equ	0xFF7
  4780                           tblptrl	equ	0xFF6
  4781                           tablat	equ	0xFF5
  4782                           prodh	equ	0xFF4
  4783                           prodl	equ	0xFF3
  4784                           intcon	equ	0xFF2
  4785                           intcon2	equ	0xFF1
  4786                           postinc0	equ	0xFEE
  4787                           fsr0h	equ	0xFEA
  4788                           fsr0l	equ	0xFE9
  4789                           wreg	equ	0xFE8
  4790                           fsr1h	equ	0xFE2
  4791                           fsr1l	equ	0xFE1
  4792                           indf2	equ	0xFDF
  4793                           postinc2	equ	0xFDE
  4794                           postdec2	equ	0xFDD
  4795                           fsr2h	equ	0xFDA
  4796                           fsr2l	equ	0xFD9
  4797                           status	equ	0xFD8
  4798                           
  4799 ;; *************** function i2___wmul *****************
  4800 ;; Defined at:
  4801 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;  multiplier      2    0[COMRAM] unsigned int 
  4804 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;  __wmul          2    4[COMRAM] unsigned int 
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  2    0[COMRAM] unsigned int 
  4809 ;; Registers used:
  4810 ;;		wreg, status,2, status,0, prodl, prodh
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4816 ;;      Params:         4       0       0       0       0       0       0       0       0
  4817 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4818 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4819 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4820 ;;Total ram usage:        6 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; This function calls:
  4823 ;;		Nothing
  4824 ;; This function is called by:
  4825 ;;		i2_printf
  4826 ;; This function uses a non-reentrant model
  4827 ;;
  4828                           
  4829                           	psect	text27
  4830  0015CC                     __ptext27:
  4831                           	opt stack 0
  4832  0015CC                     i2___wmul:
  4833                           	opt stack 26
  4834                           
  4835                           ;incstack = 0
  4836  0015CC  5001               	movf	i2___wmul@multiplier,w,c
  4837  0015CE  0203               	mulwf	i2___wmul@multiplicand,c
  4838  0015D0  CFF3 F005          	movff	prodl,i2___wmul@product
  4839  0015D4  CFF4 F006          	movff	prodh,i2___wmul@product+1
  4840  0015D8  5001               	movf	i2___wmul@multiplier,w,c
  4841  0015DA  0204               	mulwf	i2___wmul@multiplicand+1,c
  4842  0015DC  50F3               	movf	prodl,w,c
  4843  0015DE  2606               	addwf	i2___wmul@product+1,f,c
  4844  0015E0  5002               	movf	i2___wmul@multiplier+1,w,c
  4845  0015E2  0203               	mulwf	i2___wmul@multiplicand,c
  4846  0015E4  50F3               	movf	prodl,w,c
  4847  0015E6  2606               	addwf	i2___wmul@product+1,f,c
  4848  0015E8  C005  F001         	movff	i2___wmul@product,?i2___wmul
  4849  0015EC  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  4850  0015F0  0012               	return	
  4851  0015F2                     __end_ofi2___wmul:
  4852                           	opt stack 0
  4853                           pclatu	equ	0xFFB
  4854                           pclath	equ	0xFFA
  4855                           tblptru	equ	0xFF8
  4856                           tblptrh	equ	0xFF7
  4857                           tblptrl	equ	0xFF6
  4858                           tablat	equ	0xFF5
  4859                           prodh	equ	0xFF4
  4860                           prodl	equ	0xFF3
  4861                           intcon	equ	0xFF2
  4862                           intcon2	equ	0xFF1
  4863                           postinc0	equ	0xFEE
  4864                           fsr0h	equ	0xFEA
  4865                           fsr0l	equ	0xFE9
  4866                           wreg	equ	0xFE8
  4867                           fsr1h	equ	0xFE2
  4868                           fsr1l	equ	0xFE1
  4869                           indf2	equ	0xFDF
  4870                           postinc2	equ	0xFDE
  4871                           postdec2	equ	0xFDD
  4872                           fsr2h	equ	0xFDA
  4873                           fsr2l	equ	0xFD9
  4874                           status	equ	0xFD8
  4875                           
  4876 ;; *************** function i2___lwmod *****************
  4877 ;; Defined at:
  4878 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  4879 ;; Parameters:    Size  Location     Type
  4880 ;;  dividend        2    7[COMRAM] unsigned int 
  4881 ;;  divisor         2    9[COMRAM] unsigned int 
  4882 ;; Auto vars:     Size  Location     Type
  4883 ;;  __lwmod         1   11[COMRAM] unsigned char 
  4884 ;; Return value:  Size  Location     Type
  4885 ;;                  2    7[COMRAM] unsigned int 
  4886 ;; Registers used:
  4887 ;;		wreg, status,2, status,0
  4888 ;; Tracked objects:
  4889 ;;		On entry : 0/0
  4890 ;;		On exit  : 0/0
  4891 ;;		Unchanged: 0/0
  4892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4893 ;;      Params:         4       0       0       0       0       0       0       0       0
  4894 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4895 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4896 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4897 ;;Total ram usage:        5 bytes
  4898 ;; Hardware stack levels used:    1
  4899 ;; This function calls:
  4900 ;;		Nothing
  4901 ;; This function is called by:
  4902 ;;		i2_printf
  4903 ;; This function uses a non-reentrant model
  4904 ;;
  4905                           
  4906                           	psect	text28
  4907  0014C2                     __ptext28:
  4908                           	opt stack 0
  4909  0014C2                     i2___lwmod:
  4910                           	opt stack 26
  4911                           
  4912                           ;incstack = 0
  4913  0014C2  500A               	movf	i2___lwmod@divisor,w,c
  4914  0014C4  100B               	iorwf	i2___lwmod@divisor+1,w,c
  4915  0014C6  B4D8               	btfsc	status,2,c
  4916  0014C8  D018               	goto	i2l774
  4917  0014CA  0E01               	movlw	1
  4918  0014CC  6E0C               	movwf	i2___lwmod@counter,c
  4919  0014CE  D004               	goto	i2l1793
  4920  0014D0                     i2l1791:
  4921  0014D0  90D8               	bcf	status,0,c
  4922  0014D2  360A               	rlcf	i2___lwmod@divisor,f,c
  4923  0014D4  360B               	rlcf	i2___lwmod@divisor+1,f,c
  4924  0014D6  2A0C               	incf	i2___lwmod@counter,f,c
  4925  0014D8                     i2l1793:
  4926  0014D8  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  4927  0014DA  D7FA               	goto	i2l1791
  4928  0014DC                     i2l1795:
  4929  0014DC  500A               	movf	i2___lwmod@divisor,w,c
  4930  0014DE  5C08               	subwf	i2___lwmod@dividend,w,c
  4931  0014E0  500B               	movf	i2___lwmod@divisor+1,w,c
  4932  0014E2  5809               	subwfb	i2___lwmod@dividend+1,w,c
  4933  0014E4  A0D8               	btfss	status,0,c
  4934  0014E6  D004               	goto	i2l1799
  4935  0014E8  500A               	movf	i2___lwmod@divisor,w,c
  4936  0014EA  5E08               	subwf	i2___lwmod@dividend,f,c
  4937  0014EC  500B               	movf	i2___lwmod@divisor+1,w,c
  4938  0014EE  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  4939  0014F0                     i2l1799:
  4940  0014F0  90D8               	bcf	status,0,c
  4941  0014F2  320B               	rrcf	i2___lwmod@divisor+1,f,c
  4942  0014F4  320A               	rrcf	i2___lwmod@divisor,f,c
  4943  0014F6  2E0C               	decfsz	i2___lwmod@counter,f,c
  4944  0014F8  D7F1               	goto	i2l1795
  4945  0014FA                     i2l774:
  4946  0014FA  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  4947  0014FE  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  4948  001502  0012               	return		;funcret
  4949  001504                     __end_ofi2___lwmod:
  4950                           	opt stack 0
  4951                           pclatu	equ	0xFFB
  4952                           pclath	equ	0xFFA
  4953                           tblptru	equ	0xFF8
  4954                           tblptrh	equ	0xFF7
  4955                           tblptrl	equ	0xFF6
  4956                           tablat	equ	0xFF5
  4957                           prodh	equ	0xFF4
  4958                           prodl	equ	0xFF3
  4959                           intcon	equ	0xFF2
  4960                           intcon2	equ	0xFF1
  4961                           postinc0	equ	0xFEE
  4962                           fsr0h	equ	0xFEA
  4963                           fsr0l	equ	0xFE9
  4964                           wreg	equ	0xFE8
  4965                           fsr1h	equ	0xFE2
  4966                           fsr1l	equ	0xFE1
  4967                           indf2	equ	0xFDF
  4968                           postinc2	equ	0xFDE
  4969                           postdec2	equ	0xFDD
  4970                           fsr2h	equ	0xFDA
  4971                           fsr2l	equ	0xFD9
  4972                           status	equ	0xFD8
  4973                           
  4974 ;; *************** function i2___lwdiv *****************
  4975 ;; Defined at:
  4976 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;  dividend        2    0[COMRAM] unsigned int 
  4979 ;;  divisor         2    2[COMRAM] unsigned int 
  4980 ;; Auto vars:     Size  Location     Type
  4981 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  4982 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  4983 ;; Return value:  Size  Location     Type
  4984 ;;                  2    0[COMRAM] unsigned int 
  4985 ;; Registers used:
  4986 ;;		wreg, status,2, status,0
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4992 ;;      Params:         4       0       0       0       0       0       0       0       0
  4993 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4994 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4995 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4996 ;;Total ram usage:        7 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; This function calls:
  4999 ;;		Nothing
  5000 ;; This function is called by:
  5001 ;;		i2_printf
  5002 ;; This function uses a non-reentrant model
  5003 ;;
  5004                           
  5005                           	psect	text29
  5006  001422                     __ptext29:
  5007                           	opt stack 0
  5008  001422                     i2___lwdiv:
  5009                           	opt stack 26
  5010                           
  5011                           ;incstack = 0
  5012  001422  0E00               	movlw	0
  5013  001424  6E06               	movwf	i2___lwdiv@quotient+1,c
  5014  001426  0E00               	movlw	0
  5015  001428  6E05               	movwf	i2___lwdiv@quotient,c
  5016  00142A  5003               	movf	i2___lwdiv@divisor,w,c
  5017  00142C  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  5018  00142E  B4D8               	btfsc	status,2,c
  5019  001430  D01C               	goto	i2l764
  5020  001432  0E01               	movlw	1
  5021  001434  6E07               	movwf	i2___lwdiv@counter,c
  5022  001436  D004               	goto	i2l1773
  5023  001438                     i2l1771:
  5024  001438  90D8               	bcf	status,0,c
  5025  00143A  3603               	rlcf	i2___lwdiv@divisor,f,c
  5026  00143C  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  5027  00143E  2A07               	incf	i2___lwdiv@counter,f,c
  5028  001440                     i2l1773:
  5029  001440  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  5030  001442  D7FA               	goto	i2l1771
  5031  001444                     i2l1775:
  5032  001444  90D8               	bcf	status,0,c
  5033  001446  3605               	rlcf	i2___lwdiv@quotient,f,c
  5034  001448  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  5035  00144A  5003               	movf	i2___lwdiv@divisor,w,c
  5036  00144C  5C01               	subwf	i2___lwdiv@dividend,w,c
  5037  00144E  5004               	movf	i2___lwdiv@divisor+1,w,c
  5038  001450  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  5039  001452  A0D8               	btfss	status,0,c
  5040  001454  D005               	goto	i2l1783
  5041  001456  5003               	movf	i2___lwdiv@divisor,w,c
  5042  001458  5E01               	subwf	i2___lwdiv@dividend,f,c
  5043  00145A  5004               	movf	i2___lwdiv@divisor+1,w,c
  5044  00145C  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  5045  00145E  8005               	bsf	i2___lwdiv@quotient,0,c
  5046  001460                     i2l1783:
  5047  001460  90D8               	bcf	status,0,c
  5048  001462  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  5049  001464  3203               	rrcf	i2___lwdiv@divisor,f,c
  5050  001466  2E07               	decfsz	i2___lwdiv@counter,f,c
  5051  001468  D7ED               	goto	i2l1775
  5052  00146A                     i2l764:
  5053  00146A  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  5054  00146E  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  5055  001472  0012               	return		;funcret
  5056  001474                     __end_ofi2___lwdiv:
  5057                           	opt stack 0
  5058                           pclatu	equ	0xFFB
  5059                           pclath	equ	0xFFA
  5060                           tblptru	equ	0xFF8
  5061                           tblptrh	equ	0xFF7
  5062                           tblptrl	equ	0xFF6
  5063                           tablat	equ	0xFF5
  5064                           prodh	equ	0xFF4
  5065                           prodl	equ	0xFF3
  5066                           intcon	equ	0xFF2
  5067                           intcon2	equ	0xFF1
  5068                           postinc0	equ	0xFEE
  5069                           fsr0h	equ	0xFEA
  5070                           fsr0l	equ	0xFE9
  5071                           wreg	equ	0xFE8
  5072                           fsr1h	equ	0xFE2
  5073                           fsr1l	equ	0xFE1
  5074                           indf2	equ	0xFDF
  5075                           postinc2	equ	0xFDE
  5076                           postdec2	equ	0xFDD
  5077                           fsr2h	equ	0xFDA
  5078                           fsr2l	equ	0xFD9
  5079                           status	equ	0xFD8
  5080                           
  5081 ;; *************** function _strcpy *****************
  5082 ;; Defined at:
  5083 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strcpy.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;  to              2    0[COMRAM] PTR unsigned char 
  5086 ;;		 -> string(26), 
  5087 ;;  from            2    2[COMRAM] PTR const unsigned char 
  5088 ;;		 -> string_aux(26), 
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;  cp              2    4[COMRAM] PTR unsigned char 
  5091 ;;		 -> string(26), 
  5092 ;; Return value:  Size  Location     Type
  5093 ;;                  2    0[COMRAM] PTR unsigned char 
  5094 ;; Registers used:
  5095 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5096 ;; Tracked objects:
  5097 ;;		On entry : 0/0
  5098 ;;		On exit  : 0/0
  5099 ;;		Unchanged: 0/0
  5100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5101 ;;      Params:         4       0       0       0       0       0       0       0       0
  5102 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5103 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5104 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5105 ;;Total ram usage:        6 bytes
  5106 ;; Hardware stack levels used:    1
  5107 ;; This function calls:
  5108 ;;		Nothing
  5109 ;; This function is called by:
  5110 ;;		_interruptions
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           	psect	text30
  5115  001574                     __ptext30:
  5116                           	opt stack 0
  5117  001574                     _strcpy:
  5118                           	opt stack 27
  5119                           
  5120                           ;incstack = 0
  5121  001574  C001  F005         	movff	strcpy@to,strcpy@cp
  5122  001578  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  5123  00157C  D004               	goto	i2l1885
  5124  00157E                     i2l1883:
  5125  00157E  4A05               	infsnz	strcpy@cp,f,c
  5126  001580  2A06               	incf	strcpy@cp+1,f,c
  5127  001582  4A03               	infsnz	strcpy@from,f,c
  5128  001584  2A04               	incf	strcpy@from+1,f,c
  5129  001586                     i2l1885:
  5130  001586  C003  FFD9         	movff	strcpy@from,fsr2l
  5131  00158A  C004  FFDA         	movff	strcpy@from+1,fsr2h
  5132  00158E  C005  FFE1         	movff	strcpy@cp,fsr1l
  5133  001592  C006  FFE2         	movff	strcpy@cp+1,fsr1h
  5134  001596  CFDF FFE7          	movff	indf2,indf1
  5135  00159A  50E7               	movf	indf1,w,c
  5136  00159C  B4D8               	btfsc	status,2,c
  5137  00159E  0012               	return	
  5138  0015A0  D7EE               	goto	i2l1883
  5139  0015A2                     __end_of_strcpy:
  5140                           	opt stack 0
  5141                           pclatu	equ	0xFFB
  5142                           pclath	equ	0xFFA
  5143                           tblptru	equ	0xFF8
  5144                           tblptrh	equ	0xFF7
  5145                           tblptrl	equ	0xFF6
  5146                           tablat	equ	0xFF5
  5147                           prodh	equ	0xFF4
  5148                           prodl	equ	0xFF3
  5149                           intcon	equ	0xFF2
  5150                           intcon2	equ	0xFF1
  5151                           postinc0	equ	0xFEE
  5152                           fsr0h	equ	0xFEA
  5153                           fsr0l	equ	0xFE9
  5154                           wreg	equ	0xFE8
  5155                           indf1	equ	0xFE7
  5156                           fsr1h	equ	0xFE2
  5157                           fsr1l	equ	0xFE1
  5158                           indf2	equ	0xFDF
  5159                           postinc2	equ	0xFDE
  5160                           postdec2	equ	0xFDD
  5161                           fsr2h	equ	0xFDA
  5162                           fsr2l	equ	0xFD9
  5163                           status	equ	0xFD8
  5164                           
  5165 ;; *************** function ___awmod *****************
  5166 ;; Defined at:
  5167 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;  dividend        2    0[COMRAM] int 
  5170 ;;  divisor         2    2[COMRAM] int 
  5171 ;; Auto vars:     Size  Location     Type
  5172 ;;  sign            1    5[COMRAM] unsigned char 
  5173 ;;  counter         1    4[COMRAM] unsigned char 
  5174 ;; Return value:  Size  Location     Type
  5175 ;;                  2    0[COMRAM] int 
  5176 ;; Registers used:
  5177 ;;		wreg, status,2, status,0
  5178 ;; Tracked objects:
  5179 ;;		On entry : 0/0
  5180 ;;		On exit  : 0/0
  5181 ;;		Unchanged: 0/0
  5182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5183 ;;      Params:         4       0       0       0       0       0       0       0       0
  5184 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5185 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5186 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5187 ;;Total ram usage:        6 bytes
  5188 ;; Hardware stack levels used:    1
  5189 ;; This function calls:
  5190 ;;		Nothing
  5191 ;; This function is called by:
  5192 ;;		_interruptions
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           	psect	text31
  5197  0012E4                     __ptext31:
  5198                           	opt stack 0
  5199  0012E4                     ___awmod:
  5200                           	opt stack 27
  5201                           
  5202                           ;incstack = 0
  5203  0012E4  0E00               	movlw	0
  5204  0012E6  6E06               	movwf	___awmod@sign,c
  5205  0012E8  AE02               	btfss	___awmod@dividend+1,7,c
  5206  0012EA  D006               	goto	i2l2073
  5207  0012EC  6C01               	negf	___awmod@dividend,c
  5208  0012EE  1E02               	comf	___awmod@dividend+1,f,c
  5209  0012F0  B0D8               	btfsc	status,0,c
  5210  0012F2  2A02               	incf	___awmod@dividend+1,f,c
  5211  0012F4  0E01               	movlw	1
  5212  0012F6  6E06               	movwf	___awmod@sign,c
  5213  0012F8                     i2l2073:
  5214  0012F8  AE04               	btfss	___awmod@divisor+1,7,c
  5215  0012FA  D004               	goto	i2l2077
  5216  0012FC  6C03               	negf	___awmod@divisor,c
  5217  0012FE  1E04               	comf	___awmod@divisor+1,f,c
  5218  001300  B0D8               	btfsc	status,0,c
  5219  001302  2A04               	incf	___awmod@divisor+1,f,c
  5220  001304                     i2l2077:
  5221  001304  5003               	movf	___awmod@divisor,w,c
  5222  001306  1004               	iorwf	___awmod@divisor+1,w,c
  5223  001308  B4D8               	btfsc	status,2,c
  5224  00130A  D018               	goto	i2l2093
  5225  00130C  0E01               	movlw	1
  5226  00130E  6E05               	movwf	___awmod@counter,c
  5227  001310  D004               	goto	i2l2083
  5228  001312                     i2l2081:
  5229  001312  90D8               	bcf	status,0,c
  5230  001314  3603               	rlcf	___awmod@divisor,f,c
  5231  001316  3604               	rlcf	___awmod@divisor+1,f,c
  5232  001318  2A05               	incf	___awmod@counter,f,c
  5233  00131A                     i2l2083:
  5234  00131A  AE04               	btfss	___awmod@divisor+1,7,c
  5235  00131C  D7FA               	goto	i2l2081
  5236  00131E                     i2l2085:
  5237  00131E  5003               	movf	___awmod@divisor,w,c
  5238  001320  5C01               	subwf	___awmod@dividend,w,c
  5239  001322  5004               	movf	___awmod@divisor+1,w,c
  5240  001324  5802               	subwfb	___awmod@dividend+1,w,c
  5241  001326  A0D8               	btfss	status,0,c
  5242  001328  D004               	goto	i2l2089
  5243  00132A  5003               	movf	___awmod@divisor,w,c
  5244  00132C  5E01               	subwf	___awmod@dividend,f,c
  5245  00132E  5004               	movf	___awmod@divisor+1,w,c
  5246  001330  5A02               	subwfb	___awmod@dividend+1,f,c
  5247  001332                     i2l2089:
  5248  001332  90D8               	bcf	status,0,c
  5249  001334  3204               	rrcf	___awmod@divisor+1,f,c
  5250  001336  3203               	rrcf	___awmod@divisor,f,c
  5251  001338  2E05               	decfsz	___awmod@counter,f,c
  5252  00133A  D7F1               	goto	i2l2085
  5253  00133C                     i2l2093:
  5254  00133C  5006               	movf	___awmod@sign,w,c
  5255  00133E  B4D8               	btfsc	status,2,c
  5256  001340  D004               	goto	i2l2097
  5257  001342  6C01               	negf	___awmod@dividend,c
  5258  001344  1E02               	comf	___awmod@dividend+1,f,c
  5259  001346  B0D8               	btfsc	status,0,c
  5260  001348  2A02               	incf	___awmod@dividend+1,f,c
  5261  00134A                     i2l2097:
  5262  00134A  C001  F001         	movff	___awmod@dividend,?___awmod
  5263  00134E  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5264  001352  0012               	return	
  5265  001354                     __end_of___awmod:
  5266                           	opt stack 0
  5267                           pclatu	equ	0xFFB
  5268                           pclath	equ	0xFFA
  5269                           tblptru	equ	0xFF8
  5270                           tblptrh	equ	0xFF7
  5271                           tblptrl	equ	0xFF6
  5272                           tablat	equ	0xFF5
  5273                           prodh	equ	0xFF4
  5274                           prodl	equ	0xFF3
  5275                           intcon	equ	0xFF2
  5276                           intcon2	equ	0xFF1
  5277                           postinc0	equ	0xFEE
  5278                           fsr0h	equ	0xFEA
  5279                           fsr0l	equ	0xFE9
  5280                           wreg	equ	0xFE8
  5281                           indf1	equ	0xFE7
  5282                           fsr1h	equ	0xFE2
  5283                           fsr1l	equ	0xFE1
  5284                           indf2	equ	0xFDF
  5285                           postinc2	equ	0xFDE
  5286                           postdec2	equ	0xFDD
  5287                           fsr2h	equ	0xFDA
  5288                           fsr2l	equ	0xFD9
  5289                           status	equ	0xFD8
  5290                           pclatu	equ	0xFFB
  5291                           pclath	equ	0xFFA
  5292                           tblptru	equ	0xFF8
  5293                           tblptrh	equ	0xFF7
  5294                           tblptrl	equ	0xFF6
  5295                           tablat	equ	0xFF5
  5296                           prodh	equ	0xFF4
  5297                           prodl	equ	0xFF3
  5298                           intcon	equ	0xFF2
  5299                           intcon2	equ	0xFF1
  5300                           postinc0	equ	0xFEE
  5301                           fsr0h	equ	0xFEA
  5302                           fsr0l	equ	0xFE9
  5303                           wreg	equ	0xFE8
  5304                           indf1	equ	0xFE7
  5305                           fsr1h	equ	0xFE2
  5306                           fsr1l	equ	0xFE1
  5307                           indf2	equ	0xFDF
  5308                           postinc2	equ	0xFDE
  5309                           postdec2	equ	0xFDD
  5310                           fsr2h	equ	0xFDA
  5311                           fsr2l	equ	0xFD9
  5312                           status	equ	0xFD8
  5313                           
  5314                           	psect	rparam
  5315  0000                     pclatu	equ	0xFFB
  5316                           pclath	equ	0xFFA
  5317                           tblptru	equ	0xFF8
  5318                           tblptrh	equ	0xFF7
  5319                           tblptrl	equ	0xFF6
  5320                           tablat	equ	0xFF5
  5321                           prodh	equ	0xFF4
  5322                           prodl	equ	0xFF3
  5323                           intcon	equ	0xFF2
  5324                           intcon2	equ	0xFF1
  5325                           postinc0	equ	0xFEE
  5326                           fsr0h	equ	0xFEA
  5327                           fsr0l	equ	0xFE9
  5328                           wreg	equ	0xFE8
  5329                           indf1	equ	0xFE7
  5330                           fsr1h	equ	0xFE2
  5331                           fsr1l	equ	0xFE1
  5332                           indf2	equ	0xFDF
  5333                           postinc2	equ	0xFDE
  5334                           postdec2	equ	0xFDD
  5335                           fsr2h	equ	0xFDA
  5336                           fsr2l	equ	0xFD9
  5337                           status	equ	0xFD8
  5338                           
  5339                           	psect	temp
  5340  00004A                     btemp:
  5341                           	opt stack 0
  5342  00004A                     	ds	1
  5343  0000                     int$flags	set	btemp
  5344                           pclatu	equ	0xFFB
  5345                           pclath	equ	0xFFA
  5346                           tblptru	equ	0xFF8
  5347                           tblptrh	equ	0xFF7
  5348                           tblptrl	equ	0xFF6
  5349                           tablat	equ	0xFF5
  5350                           prodh	equ	0xFF4
  5351                           prodl	equ	0xFF3
  5352                           intcon	equ	0xFF2
  5353                           intcon2	equ	0xFF1
  5354                           postinc0	equ	0xFEE
  5355                           fsr0h	equ	0xFEA
  5356                           fsr0l	equ	0xFE9
  5357                           wreg	equ	0xFE8
  5358                           indf1	equ	0xFE7
  5359                           fsr1h	equ	0xFE2
  5360                           fsr1l	equ	0xFE1
  5361                           indf2	equ	0xFDF
  5362                           postinc2	equ	0xFDE
  5363                           postdec2	equ	0xFDD
  5364                           fsr2h	equ	0xFDA
  5365                           fsr2l	equ	0xFD9
  5366                           status	equ	0xFD8


Data Sizes:
    Strings     173
    Constant    18
    Data        1
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      73
    BANK0           160     36      65
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 26
		 -> string_aux(COMRAM[26]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 26
		 -> string(BANK0[26]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 26
		 -> string(BANK0[26]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_8(CODE[7]), STR_7(CODE[15]), STR_6(CODE[28]), STR_5(CODE[27]), 
		 -> STR_4(CODE[25]), STR_3(CODE[33]), STR_2(CODE[21]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 26
		 -> string(BANK0[26]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptions in COMRAM

    _interruptions->i2_printf
    i2_printf->i2___lwmod
    i2___lwmod->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_printf
    _write_RTC_I2c->_I2C_Idle
    _write_RTC_I2c->_I2C_Write_Byte
    _read_RTC_I2c->_I2C_Idle
    _read_RTC_I2c->_I2C_Write_Byte
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _interruptions in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptions in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptions in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptions in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptions in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptions in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptions in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptions in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    3895
                                             30 BANK0      6     6      0
                     _InitI2C_Master
                           _configAD
                  _configADInterrupt
                        _configRS232
                        _configTimer
              _configUSARTInterrupts
                             _printf
                       _read_RTC_I2c
                       _selectChanel
                      _write_RTC_I2c
 ---------------------------------------------------------------------------------
 (1) _write_RTC_I2c                                        0     0      0      31
                           _I2C_Idle
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (1) _selectChanel                                         1     1      0     403
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_RTC_I2c                                         1     1      0      62
                                              1 BANK0      1     1      0
                           _I2C_Idle
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Byte                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Send_NACK                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Read_Byte                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Idle                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    23      4    3229
                                             12 BANK0     18    14      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     392
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _configUSARTInterrupts                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configRS232                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configADInterrupt                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configAD                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitI2C_Master                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _interruptions                                       16    16      0    2246
                                             28 COMRAM    16    16      0
                            ___awmod
                             _strcpy
                           i2_printf
 ---------------------------------------------------------------------------------
 (4) i2_printf                                            25    23      2    1619
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4     203
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     424
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitI2C_Master
   _configAD
   _configADInterrupt
   _configRS232
   _configTimer
   _configUSARTInterrupts
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _read_RTC_I2c
     _I2C_Idle
     _I2C_ReStart
     _I2C_Read_Byte
     _I2C_Send_NACK
     _I2C_Start
     _I2C_Stop
     _I2C_Write_Byte
   _selectChanel
   _write_RTC_I2c
     _I2C_Idle
     _I2C_Start
     _I2C_Stop
     _I2C_Write_Byte

 _interruptions (ROOT)
   ___awmod
   _strcpy
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     24      41       5       40.6%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     2C      49       1       77.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8A      20        0.0%
DATA                 0      0      8A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Mar 28 16:04:08 2016

                             _i 002D              __size_of_I2C_Start 000A                     _SSPSTATbits 000FC7  
                            l41 16E6                              l35 16FA                              l53 16C4  
                            l29 16F0                              l65 16CE                              l59 169A  
         __end_of_interruptions 1166             ___wmul@multiplicand 0062              i2___lwdiv@dividend 0001  
                   __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                             l119 16A8  
                           l344 0B18                             l764 12DA                             l774 1418  
                           _GIE 007F97                    __CFG_CPB$OFF 000000                    __CFG_CPD$OFF 000000  
                           _RX9 007D5E                             _TX9 007D66                    __CFG_BOR$OFF 000000  
          __size_of_I2C_ReStart 000A                             _val 0241                    ___awmod@sign 0006  
            I2C_Write_Byte@Byte 0060                             prod 000FF3                             wreg 000FE8  
                  __CFG_FOSC$HS 000000                     main@channel 007F                    __CFG_LVP$OFF 000000  
                  __CFG_WDT$OFF 000000                            l2331 167E                            l2501 09AE  
                          l2511 0A04                            l2513 0A0A                            l2505 09B6  
                          l2441 11CC                            l2433 11A4                            l2425 117E  
                          l2363 128A                            l2347 15C2                            l2507 09E8  
                          l2365 1296                            l2525 0A40                            l2541 0A7C  
                          l2461 1230                            l2453 1208                            l2445 11E0  
                          l2437 11B8                            l2429 1190                            l2375 12CC  
                          l2367 129C                            l2391 140A                            l2383 13D4  
                          l2527 0A46                            l2543 0A8E                            l2385 13E0  
                          l2481 08F6                            l2465 1244                            l2457 121C  
                          l2449 11F4                            l2387 13E6                            l2563 0B1E  
                          l2571 0BB8                            l2547 0AC6                            l2491 0930  
                          l2475 08D0                            l2565 0B6A                            l2573 0BCA  
                          l2557 0AF2                            l2549 0AD0                            l2485 0900  
                          l2469 1258                            l2575 0BD2                            l2559 0AFE  
                          l2479 08E4                            l2577 0BDE                            l2681 0F16  
                          l2673 0EE8                            l2499 09A8                            l2691 0F4A  
                          l2685 0F2A                            l2677 0EFE                            l2695 0F62  
                          l2687 0F34                            _ADFM 007E07                            STR_1 08BD  
                          STR_2 0884                            STR_3 0813                            STR_4 086B  
                          STR_5 0850                            STR_6 0834                            STR_7 08AA  
                          STR_8 08B9                            STR_9 0899                            _BRGH 007D62  
                          _CREN 007D5C                            _FERR 007D5A                            u2447 0F06  
                          u2457 0F52                            u2467 0F88                            u2477 0FB8  
                          u2487 0FE8                            u2497 1012                            _PEIE 007F96  
                          _RCIE 007CED                            _RCIF 007CF5                            _OERR 007D59  
                          _SPEN 007D5F                            _TXIE 007CEC                            _TXIF 007CF4  
                          _TXEN 007D65                            _SYNC 007D64                            _main 0EA2  
              __end_of_I2C_Idle 1692                            fsr0h 000FEA                            fsr1h 000FE2  
            i2___lwdiv@quotient 0005                            fsr0l 000FE9                            fsr2h 000FDA  
                          indf1 000FE7                            fsr1l 000FE1                            indf2 000FDF  
                          fsr2l 000FD9                            btemp 004A                __end_of_I2C_Stop 16EE  
                          pclat 000FFA                            prodh 000FF4                            prodl 000FF3  
                          start 0016                   __CFG_IESO$OFF 000000                 __end_ofi2_putch 16E4  
                 __CFG_MCLRE$ON 000000      __size_of_configADInterrupt 000A                    ___param_bank 000010  
                 __CFG_PLLDIV$1 000000                           ?_main 0001                           _BRG16 007DC3  
               __end_of___awmod 1354                 __end_of___lwdiv 12E4                 __end_of___lwmod 1422  
                         i2l119 16DA                           i2l270 106C                           i2l344 0DDA  
                         i2l268 1072                           i2l277 112A                           i2l764 146A  
                         i2l774 14FA                           _RCREG 000FAE                           _SPBRG 000FAF  
                 __CFG_USBDIV$1 000000                           _SSPIF 007CF3                           _RXDTP 007DC5  
                         _TXREG 000FAD                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000  
                    i2isdigit@c 0003                 __end_of_dpowers 080B          __size_of_I2C_Read_Byte 000C  
               __end_of_isdigit 15CC                           _putch 16A4                           main@i 0080  
             __end_of_I2C_Start 16F8                  __pbitbssCOMRAM 0240                           tablat 000FF5  
              __end_ofi2___wmul 15F2          __size_of_I2C_Send_NACK 000C                           status 000FD8  
                __CFG_ICPRT$OFF 000000                   i2printf@width 001A                ??_InitI2C_Master 0060  
              __end_ofi2_printf 0EA2              __size_ofi2___lwdiv 0052              __size_ofi2___lwmod 0042  
               __initialization 1504                    __end_of_main 102E                      i2printf@ap 0014  
            __size_ofi2_isdigit 001E                   ?_read_RTC_I2c 0001                          ??_main 007E  
                 __activetblptr 000002           _configUSARTInterrupts 16B2                 __CFG_CCP2MX$OFF 000000  
                        _ADRESH 000FC4                          _ADRESL 000FC3                          ?_putch 0001  
                        i2l2103 0C06                          i2l2201 0E7A                          i2l2113 0C2A  
                        i2l2203 0E80                          i2l2107 0C16                          i2l2141 0D0C  
                        i2l2133 0CC0                          i2l2109 0C24                          i2l2205 0E88  
                        i2l2135 0CEE                          i2l2127 0CB6                          i2l2119 0C58  
                        i2l2081 1312                          i2l2073 12F8                          i2l2153 0D38  
                        i2l2129 0CBA                          i2l2083 131A                          i2l2155 0D3C  
                        i2l2171 0D78                          i2l2139 0D08                          i2l2235 10EA  
                        i2l2227 10B8                          i2l2085 131E                          i2l2093 133C  
                        i2l2077 1304                          i2l2191 0DE0                          i2l2175 0D9C  
                        i2l2247 1110                          i2l2239 10F2                          i2l2097 134A  
                        i2l2089 1332                          i2l2193 0E24                          i2l2185 0DBE  
                        i2l2177 0DA4                          i2l2169 0D68                          i2l2187 0DC6  
                        i2l2199 0E6A                          i2l1761 162A                          i2l1771 1438  
                        i2l1773 1440                          i2l1783 1460                          i2l1775 1444  
                        i2l1791 14D0                          i2l1793 14D8                          i2l1883 157E  
                        i2l1795 14DC                          i2l1885 1586                          i2l1799 14F0  
                     ??i2_putch 0001                          _TMR0IP 007F8A                          _SSPADD 000FC8  
                        _TRISD3 007CAB                          _TRISD4 007CAC                          _SSPBUF 000FC9  
          __size_of_configRS232 0018                  __CFG_XINST$OFF 000000                __end_of_configAD 1666  
          __size_of_configTimer 001A                   _I2C_Read_Byte 16CC                          ___wmul 153E  
                     ??___awmod 0005                       ??___lwdiv 0064                       ??___lwmod 006B  
                ??_read_RTC_I2c 0061                          clear_0 150A                          clear_1 1518  
               ___awmod@divisor 0003                   _I2C_Send_NACK 16C0                 ___awmod@counter 0005  
                        _printf 08C2                          _strcpy 1574                          _string 0087  
                     ?_I2C_Idle 0001                    __pdataCOMRAM 0049                       ??_isdigit 0060  
                     ?_I2C_Stop 0001               __end_ofi2___lwdiv 1474                    __mediumconst 0000  
             __end_ofi2___lwmod 1504                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8          __size_of_write_RTC_I2c 006C               __end_ofi2_isdigit 1632  
                    __accesstop 0060         __end_of__initialization 1530                 __CFG_PBADEN$OFF 000000  
                 ___rparam_used 000001                  ?_I2C_Read_Byte 0001              i2___lwmod@dividend 0008  
                __pcstackCOMRAM 0001                   __end_of_putch 16B2                     i2printf@idx 0013  
                ?_I2C_Send_NACK 0001                     i2printf@val 0018          ?_configUSARTInterrupts 0001  
                     ?i2___wmul 0001                      ??_I2C_Idle 0060                     i2putch@byte 0001  
                    ??_I2C_Stop 0060                       ?i2_printf 000D                         ??_putch 0060  
                    __pbssBANK0 0084                      _hasAnError 0240                   ?_selectChanel 0001  
                       ?___wmul 0060                   _write_RTC_I2c 1354         __size_of_I2C_Write_Byte 0012  
                 ??_I2C_ReStart 0060                         ?_printf 006C                         ?_strcpy 0001  
                    ??i2___wmul 0005                      ??i2_printf 000F                       ?_configAD 0001  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
          __end_of_read_RTC_I2c 14C2                 __CFG_VREGEN$OFF 000000          __size_of_interruptions 115E  
                       i2_putch 16D8                       _I2C_Start 16EE                 ??_I2C_Read_Byte 0060  
                ??_selectChanel 0060                         __Hparam 0000         read_RTC_I2c@pos_memoria 0061  
                       __Lparam 0000                  ?_write_RTC_I2c 0001                 ??_I2C_Send_NACK 0060  
                       ___awmod 12E4                 __size_of___wmul 0036                         ___lwdiv 126C  
                       ___lwmod 13C0                    __psmallconst 0800                 __CFG_STVREN$OFF 000000  
                       __pcinit 1504                         __ramtop 0800                         __ptext0 0EA2  
                       __ptext1 1354                         __ptext2 1166                         __ptext3 1474  
                       __ptext4 1692                         __ptext5 16E4                         __ptext6 16EE  
                       __ptext7 16C0                         __ptext8 16CC                         __ptext9 16F8  
               __size_of_printf 033A                       _T0CONbits 000FD5                 __size_of_strcpy 002E  
             __end_of_hexpowers 0813                         _dpowers 0801                         _leitura 0086  
                       _isdigit 15A2                ___awmod@dividend 0001             __end_of_I2C_ReStart 1702  
                    ??_configAD 0060                  __pintcode_body 102E            end_of_initialization 1530  
                 __Lmediumconst 0000                         int_func 102E             i2___wmul@multiplier 0001  
                    ?_I2C_Start 0001                         printf@c 007D                         printf@f 006C  
                       postdec2 000FDD                         postinc0 000FEE                         postinc2 000FDE  
                 _interruptions 0008                       _PORTDbits 000F83                       _TRISBbits 000F93  
             __size_of_I2C_Idle 0014               __size_of_I2C_Stop 000A                      main@i_1065 0082  
             i2___lwdiv@divisor 0003                       i2___lwdiv 1422                       i2___lwmod 14C2  
             i2___lwdiv@counter 0007                   ??_configRS232 0060                     printf@width 007B  
                 ??_configTimer 0060                       i2_isdigit 1614                 ??_write_RTC_I2c 0061  
                    _string_aux 002E         ??_configUSARTInterrupts 0060                  _I2C_Write_Byte 1692  
                ?_interruptions 0001                  __end_of___wmul 1574                   __pidataCOMRAM 170C  
                   _I2C_ReStart 16F8         __size_of_InitI2C_Master 0022                i2___wmul@product 0005  
                __end_of_printf 0BFC                    i2printf@flag 0017                  __end_of_strcpy 15A2  
                  i2printf@prec 0016             start_initialization 1504            __end_of_selectChanel 126C  
             __size_ofi2___wmul 0026           __size_of_read_RTC_I2c 004E                       i2printf@c 001C  
                     i2printf@f 000D                      ?i2___lwdiv 0001                      ?i2___lwmod 0008  
             __size_ofi2_printf 02A6                     ??_I2C_Start 0060                      ?i2_isdigit 0001  
           __end_of_configRS232 167E          __end_of_I2C_Write_Byte 16A4                        ??___wmul 0064  
           __end_of_configTimer 164C                __CFG_LPT1OSC$OFF 000000                    _read_RTC_I2c 1474  
                      ??_printf 0070                        ??_strcpy 0005                     __pbssCOMRAM 002D  
                 __pcstackBANK0 0060               i2___lwmod@divisor 000A               i2___lwmod@counter 000C  
                  _isdigit$1320 0061               __size_of_configAD 001A                        ?i2_putch 0001  
              ___lwdiv@dividend 0060                 ?_I2C_Write_Byte 0001                       __pintcode 0008  
               ??_interruptions 001D                        ?___awmod 0001                        ?___lwdiv 0060  
                      ?___lwmod 0067                     __smallconst 0800                        _I2C_Idle 167E  
                      ?_isdigit 0001                        _I2C_Stop 16E4                       _hexpowers 080B  
              ___lwdiv@quotient 0065                     ??i2___lwdiv 0005                     ??i2___lwmod 000C  
                __size_of_putch 000E                    _receivedData 0049                     _configRS232 1666  
                ___wmul@product 0064                        _PIE1bits 000F9D                     ??i2_isdigit 0001  
                   _configTimer 1632                        _PIR1bits 000F9E                        i2u186_40 111C  
                      i2u187_45 111E                        i2u188_45 1126                        i2u188_47 1128  
         __end_of_I2C_Read_Byte 16D8                __CFG_WDTPS$32768 000000           __end_of_I2C_Send_NACK 16CC  
         __size_of_selectChanel 0106                  _InitI2C_Master 15F2                      _ADCON0bits 000FC2  
                    _ADCON1bits 000FC1                      _ADCON2bits 000FC0               ___wmul@multiplier 0060  
                      i2___wmul 15CC                      printf@flag 007A                      printf@prec 0077  
                      i2_printf 0BFC             selectChanel@channel 0060                __size_ofi2_putch 000C  
                      __Hrparam 0000                    _selectChanel 1166                        __Lrparam 0000  
        __end_of_InitI2C_Master 1614                __size_of___awmod 0070           i2___wmul@multiplicand 0003  
              __size_of___lwdiv 0078  __size_of_configUSARTInterrupts 000E                __size_of___lwmod 0062  
 __end_of_configUSARTInterrupts 16C0                    ?_I2C_ReStart 0001                        _data_ADC 0084  
              __size_of_isdigit 002A                 ___lwdiv@divisor 0062                 ___lwdiv@counter 0064  
                      __ptext10 167E                        __ptext11 08C2                        __ptext20 1702  
                      __ptext12 16A4                        __ptext21 164C                        __ptext13 15A2  
                      __ptext30 1574                        __ptext22 15F2                        __ptext14 153E  
                      __ptext31 12E4                        __ptext15 13C0                        __ptext24 0BFC  
                      __ptext16 126C                        __ptext25 16D8                        __ptext17 16B2  
                      __ptext26 1614                        __ptext18 1632                        __ptext27 15CC  
                      __ptext19 1666                        __ptext28 14C2                        __ptext29 1422  
                      _configAD 164C                  i2_isdigit$1320 0002                      strcpy@from 0003  
                 __size_of_main 018C           __end_of_write_RTC_I2c 13C0                        int$flags 004A  
             _configADInterrupt 1702                 ?_InitI2C_Master 0001                       printf@idx 0074  
                     printf@val 0078              ?_configADInterrupt 0001           __CFG_CPUDIV$OSC1_PLL2 000000  
                     putch@byte 0060                      _INTCONbits 000FF2             ??_configADInterrupt 0060  
                      isdigit@c 0062                        intlevel2 0000                ___lwmod@dividend 0067  
              ??_I2C_Write_Byte 0060       __end_of_configADInterrupt 170C                        printf@ap 0075  
               ___lwmod@divisor 0069                        strcpy@cp 0005                        strcpy@to 0001  
               ___lwmod@counter 006B                     _SSPCON1bits 000FC6                     _SSPCON2bits 000FC5  
                  ?_configRS232 0001                    ?_configTimer 0001  
