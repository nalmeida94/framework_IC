

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Wed Apr 13 12:49:37 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           	psect	idataCOMRAM
    54  001670                     __pidataCOMRAM:
    55                           	opt stack 0
    56                           
    57                           ;initializer for _receivedData
    58  001670  58                 	db	88
    59                           
    60                           	psect	idataBANK0
    61  00166E                     __pidataBANK0:
    62                           	opt stack 0
    63                           
    64                           ;initializer for _channel
    65  00166E  01                 	db	1
    66                           
    67                           ;initializer for _id
    68  00166F  1B                 	db	27
    69                           
    70                           	psect	smallconst
    71  000800                     __psmallconst:
    72                           	opt stack 0
    73  000800  00                 	db	0
    74  000801                     _dpowers:
    75                           	opt stack 0
    76  000801  0001               	dw	1
    77  000803  000A               	dw	10
    78  000805  0064               	dw	100
    79  000807  03E8               	dw	1000
    80  000809  2710               	dw	10000
    81  00080B                     __end_of_dpowers:
    82                           	opt stack 0
    83  00080B                     _hexpowers:
    84                           	opt stack 0
    85  00080B  0001               	dw	1
    86  00080D  0010               	dw	16
    87  00080F  0100               	dw	256
    88  000811  1000               	dw	4096
    89  000813                     __end_of_hexpowers:
    90                           	opt stack 0
    91  0000                     _ADCON0bits	set	4034
    92  0000                     _ADCON1bits	set	4033
    93  0000                     _ADCON2bits	set	4032
    94  0000                     _ADRESH	set	4036
    95  0000                     _ADRESL	set	4035
    96  0000                     _INTCONbits	set	4082
    97  0000                     _PIE1bits	set	3997
    98  0000                     _PIR1bits	set	3998
    99  0000                     _PORTDbits	set	3971
   100  0000                     _RCREG	set	4014
   101  0000                     _SPBRG	set	4015
   102  0000                     _SSPADD	set	4040
   103  0000                     _SSPBUF	set	4041
   104  0000                     _SSPCON1	set	4038
   105  0000                     _SSPCON1bits	set	4038
   106  0000                     _SSPCON2	set	4037
   107  0000                     _SSPCON2bits	set	4037
   108  0000                     _SSPSTAT	set	4039
   109  0000                     _SSPSTATbits	set	4039
   110  0000                     _T0CONbits	set	4053
   111  0000                     _TRISBbits	set	3987
   112  0000                     _TRISDbits	set	3989
   113  0000                     _TXREG	set	4013
   114  0000                     _ADFM	set	32263
   115  0000                     _BRG16	set	32195
   116  0000                     _BRGH	set	32098
   117  0000                     _CREN	set	32092
   118  0000                     _FERR	set	32090
   119  0000                     _GIE	set	32663
   120  0000                     _OERR	set	32089
   121  0000                     _PEIE	set	32662
   122  0000                     _RCIE	set	31981
   123  0000                     _RCIF	set	31989
   124  0000                     _RX9	set	32094
   125  0000                     _RXDTP	set	32197
   126  0000                     _SPEN	set	32095
   127  0000                     _SSPIF	set	31987
   128  0000                     _SYNC	set	32100
   129  0000                     _TMR0IP	set	32650
   130  0000                     _TMR0ON	set	32431
   131  0000                     _TX9	set	32102
   132  0000                     _TXEN	set	32101
   133  0000                     _TXIE	set	31980
   134  0000                     _TXIF	set	31988
   135  000813                     STR_2:
   136  000813  25                 	db	37
   137  000814  75                 	db	117	;'u'
   138  000815  26                 	db	38
   139  000816  25                 	db	37
   140  000817  75                 	db	117	;'u'
   141  000818  26                 	db	38
   142  000819  32                 	db	50	;'2'
   143  00081A  30                 	db	48	;'0'
   144  00081B  25                 	db	37
   145  00081C  30                 	db	48	;'0'
   146  00081D  32                 	db	50	;'2'
   147  00081E  58                 	db	88	;'X'
   148  00081F  2D                 	db	45
   149  000820  25                 	db	37
   150  000821  30                 	db	48	;'0'
   151  000822  32                 	db	50	;'2'
   152  000823  58                 	db	88	;'X'
   153  000824  2D                 	db	45
   154  000825  25                 	db	37
   155  000826  30                 	db	48	;'0'
   156  000827  32                 	db	50	;'2'
   157  000828  58                 	db	88	;'X'
   158  000829  20                 	db	32
   159  00082A  25                 	db	37
   160  00082B  30                 	db	48	;'0'
   161  00082C  32                 	db	50	;'2'
   162  00082D  58                 	db	88	;'X'
   163  00082E  3A                 	db	58	;':'
   164  00082F  25                 	db	37
   165  000830  30                 	db	48	;'0'
   166  000831  32                 	db	50	;'2'
   167  000832  58                 	db	88	;'X'
   168  000833  3A                 	db	58	;':'
   169  000834  25                 	db	37
   170  000835  30                 	db	48	;'0'
   171  000836  32                 	db	50	;'2'
   172  000837  58                 	db	88	;'X'
   173  000838  00                 	db	0
   174  000839                     STR_4:
   175  000839  30                 	db	48	;'0'
   176  00083A  31                 	db	49	;'1'
   177  00083B  32                 	db	50	;'2'
   178  00083C  33                 	db	51	;'3'
   179  00083D  34                 	db	52	;'4'
   180  00083E  35                 	db	53	;'5'
   181  00083F  36                 	db	54	;'6'
   182  000840  37                 	db	55	;'7'
   183  000841  38                 	db	56	;'8'
   184  000842  39                 	db	57	;'9'
   185  000843  41                 	db	65	;'A'
   186  000844  42                 	db	66	;'B'
   187  000845  43                 	db	67	;'C'
   188  000846  44                 	db	68	;'D'
   189  000847  45                 	db	69	;'E'
   190  000848  46                 	db	70	;'F'
   191  000849  00                 	db	0
   192  00084A                     STR_1:
   193  00084A  0A                 	db	10
   194  00084B  0D                 	db	13
   195  00084C  00                 	db	0
   196  00084D                     STR_3:
   197  00084D  0A                 	db	10
   198  00084E  00                 	db	0
   199                           
   200                           ; #config settings
   201  00084F  00                 	db	0	; dummy byte at the end
   202  0000                     
   203                           	psect	cinit
   204  00136C                     __pcinit:
   205                           	opt stack 0
   206  00136C                     start_initialization:
   207                           	opt stack 0
   208  00136C                     __initialization:
   209                           	opt stack 0
   210                           
   211                           ; Clear objects allocated to BANK0 (36 bytes)
   212  00136C  EE00  F08D         	lfsr	0,__pbssBANK0
   213  001370  0E24               	movlw	36
   214  001372                     clear_0:
   215  001372  6AEE               	clrf	postinc0,c
   216  001374  06E8               	decf	wreg,f,c
   217  001376  E1FD               	bnz	clear_0
   218                           
   219                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   220  001378  6A48               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   221                           
   222                           ; Clear objects allocated to COMRAM (27 bytes)
   223  00137A  EE00  F02D         	lfsr	0,__pbssCOMRAM
   224  00137E  0E1B               	movlw	27
   225  001380                     clear_1:
   226  001380  6AEE               	clrf	postinc0,c
   227  001382  06E8               	decf	wreg,f,c
   228  001384  E1FD               	bnz	clear_1
   229                           
   230                           ; Initialize objects allocated to BANK0 (2 bytes)
   231                           ; load TBLPTR registers with __pidataBANK0
   232  001386  0E6E               	movlw	low __pidataBANK0
   233  001388  6EF6               	movwf	tblptrl,c
   234  00138A  0E16               	movlw	high __pidataBANK0
   235  00138C  6EF7               	movwf	tblptrh,c
   236  00138E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   237  001390  6EF8               	movwf	tblptru,c
   238  001392  0009               	tblrd		*+	;fetch initializer
   239  001394  CFF5 F0B1          	movff	tablat,__pdataBANK0
   240  001398  0009               	tblrd		*+	;fetch initializer
   241  00139A  CFF5 F0B2          	movff	tablat,__pdataBANK0+1
   242                           
   243                           ; Initialize objects allocated to COMRAM (1 bytes)
   244                           ; load TBLPTR registers with __pidataCOMRAM
   245  00139E  0E70               	movlw	low __pidataCOMRAM
   246  0013A0  6EF6               	movwf	tblptrl,c
   247  0013A2  0E16               	movlw	high __pidataCOMRAM
   248  0013A4  6EF7               	movwf	tblptrh,c
   249  0013A6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   250  0013A8  6EF8               	movwf	tblptru,c
   251  0013AA  0009               	tblrd		*+	;fetch initializer
   252  0013AC  CFF5 F049          	movff	tablat,__pdataCOMRAM
   253  0013B0                     end_of_initialization:
   254                           	opt stack 0
   255  0013B0                     __end_of__initialization:
   256                           	opt stack 0
   257  0013B0  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   258  0013B2  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   259  0013B4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   260  0013B6  6EF8               	movwf	tblptru,c
   261  0013B8  0100               	movlb	0
   262  0013BA  EF18  F007         	goto	_main	;jump to C main() function
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           tblptrl	equ	0xFF6
   266                           tablat	equ	0xFF5
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           
   270                           	psect	bitbssCOMRAM
   271  000240                     __pbitbssCOMRAM:
   272                           	opt stack 0
   273  000240                     _changing:
   274                           	opt stack 0
   275  000240                     	ds	1
   276  000241                     _hasAnError:
   277                           	opt stack 0
   278  000241                     	ds	1
   279                           tblptru	equ	0xFF8
   280                           tblptrh	equ	0xFF7
   281                           tblptrl	equ	0xFF6
   282                           tablat	equ	0xFF5
   283                           postinc0	equ	0xFEE
   284                           wreg	equ	0xFE8
   285                           
   286                           	psect	bssCOMRAM
   287  00002D                     __pbssCOMRAM:
   288                           	opt stack 0
   289  00002D                     _i:
   290                           	opt stack 0
   291  00002D                     	ds	1
   292  00002E                     _string_aux:
   293                           	opt stack 0
   294  00002E                     	ds	26
   295                           tblptru	equ	0xFF8
   296                           tblptrh	equ	0xFF7
   297                           tblptrl	equ	0xFF6
   298                           tablat	equ	0xFF5
   299                           postinc0	equ	0xFEE
   300                           wreg	equ	0xFE8
   301                           
   302                           	psect	dataCOMRAM
   303  000049                     __pdataCOMRAM:
   304                           	opt stack 0
   305  000049                     _receivedData:
   306                           	opt stack 0
   307  000049                     	ds	1
   308                           tblptru	equ	0xFF8
   309                           tblptrh	equ	0xFF7
   310                           tblptrl	equ	0xFF6
   311                           tablat	equ	0xFF5
   312                           postinc0	equ	0xFEE
   313                           wreg	equ	0xFE8
   314                           
   315                           	psect	bssBANK0
   316  00008D                     __pbssBANK0:
   317                           	opt stack 0
   318  00008D                     _data_ADC:
   319                           	opt stack 0
   320  00008D                     	ds	2
   321  00008F                     _ano:
   322                           	opt stack 0
   323  00008F                     	ds	1
   324  000090                     _dia:
   325                           	opt stack 0
   326  000090                     	ds	1
   327  000091                     _hora:
   328                           	opt stack 0
   329  000091                     	ds	1
   330  000092                     _leitura:
   331                           	opt stack 0
   332  000092                     	ds	1
   333  000093                     _mes:
   334                           	opt stack 0
   335  000093                     	ds	1
   336  000094                     _minuto:
   337                           	opt stack 0
   338  000094                     	ds	1
   339  000095                     _segundo:
   340                           	opt stack 0
   341  000095                     	ds	1
   342  000096                     _val:
   343                           	opt stack 0
   344  000096                     	ds	1
   345  000097                     _string:
   346                           	opt stack 0
   347  000097                     	ds	26
   348                           tblptru	equ	0xFF8
   349                           tblptrh	equ	0xFF7
   350                           tblptrl	equ	0xFF6
   351                           tablat	equ	0xFF5
   352                           postinc0	equ	0xFEE
   353                           wreg	equ	0xFE8
   354                           
   355                           	psect	dataBANK0
   356  0000B1                     __pdataBANK0:
   357                           	opt stack 0
   358  0000B1                     _channel:
   359                           	opt stack 0
   360  0000B1                     	ds	1
   361  0000B2                     _id:
   362                           	opt stack 0
   363  0000B2                     	ds	1
   364                           tblptru	equ	0xFF8
   365                           tblptrh	equ	0xFF7
   366                           tblptrl	equ	0xFF6
   367                           tablat	equ	0xFF5
   368                           postinc0	equ	0xFEE
   369                           wreg	equ	0xFE8
   370                           
   371                           	psect	cstackBANK0
   372  000060                     __pcstackBANK0:
   373                           	opt stack 0
   374  000060                     ??_isdigit:
   375  000060                     ??_I2C_Idle:
   376  000060                     ?___wmul:
   377                           	opt stack 0
   378  000060                     ?___lwdiv:
   379                           	opt stack 0
   380  000060                     selectChanel@channel:
   381                           	opt stack 0
   382  000060                     I2C_Write_Byte@Byte:
   383                           	opt stack 0
   384  000060                     putch@byte:
   385                           	opt stack 0
   386  000060                     ___wmul@multiplier:
   387                           	opt stack 0
   388  000060                     ___lwdiv@dividend:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x0
   392  000060                     	ds	1
   393  000061                     read_RTC_I2c@pos_memoria:
   394                           	opt stack 0
   395  000061                     _isdigit$1377:
   396                           	opt stack 0
   397                           
   398                           ; 1 bytes @ 0x1
   399  000061                     	ds	1
   400  000062                     isdigit@c:
   401                           	opt stack 0
   402  000062                     ___wmul@multiplicand:
   403                           	opt stack 0
   404  000062                     ___lwdiv@divisor:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x2
   408  000062                     	ds	2
   409  000064                     ___lwdiv@counter:
   410                           	opt stack 0
   411  000064                     ___wmul@product:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0x4
   415  000064                     	ds	1
   416  000065                     ___lwdiv@quotient:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x5
   420  000065                     	ds	2
   421  000067                     ?___lwmod:
   422                           	opt stack 0
   423  000067                     ___lwmod@dividend:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x7
   427  000067                     	ds	2
   428  000069                     ___lwmod@divisor:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x9
   432  000069                     	ds	2
   433  00006B                     ___lwmod@counter:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0xB
   437  00006B                     	ds	1
   438  00006C                     ?_printf:
   439                           	opt stack 0
   440  00006C                     printf@f:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0xC
   444  00006C                     	ds	18
   445  00007E                     ??_printf:
   446                           
   447                           ; 0 bytes @ 0x1E
   448  00007E                     	ds	4
   449  000082                     printf@idx:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x22
   453  000082                     	ds	1
   454  000083                     printf@ap:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0x23
   458  000083                     	ds	2
   459  000085                     printf@prec:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0x25
   463  000085                     	ds	1
   464  000086                     printf@val:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0x26
   468  000086                     	ds	2
   469  000088                     printf@flag:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x28
   473  000088                     	ds	1
   474  000089                     printf@width:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0x29
   478  000089                     	ds	2
   479  00008B                     printf@c:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x2B
   483  00008B                     	ds	1
   484  00008C                     ??_main:
   485                           
   486                           ; 0 bytes @ 0x2C
   487  00008C                     	ds	1
   488                           tblptru	equ	0xFF8
   489                           tblptrh	equ	0xFF7
   490                           tblptrl	equ	0xFF6
   491                           tablat	equ	0xFF5
   492                           postinc0	equ	0xFEE
   493                           wreg	equ	0xFE8
   494                           
   495                           	psect	cstackCOMRAM
   496  000001                     __pcstackCOMRAM:
   497                           	opt stack 0
   498  000001                     ??i2_isdigit:
   499  000001                     ?___awmod:
   500                           	opt stack 0
   501  000001                     ?i2___wmul:
   502                           	opt stack 0
   503  000001                     ?i2___lwdiv:
   504                           	opt stack 0
   505  000001                     i2putch@byte:
   506                           	opt stack 0
   507  000001                     ___awmod@dividend:
   508                           	opt stack 0
   509  000001                     strcpy@to:
   510                           	opt stack 0
   511  000001                     i2___wmul@multiplier:
   512                           	opt stack 0
   513  000001                     i2___lwdiv@dividend:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x0
   517  000001                     	ds	1
   518  000002                     i2_isdigit$1377:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x1
   522  000002                     	ds	1
   523  000003                     i2isdigit@c:
   524                           	opt stack 0
   525  000003                     ___awmod@divisor:
   526                           	opt stack 0
   527  000003                     strcpy@from:
   528                           	opt stack 0
   529  000003                     i2___wmul@multiplicand:
   530                           	opt stack 0
   531  000003                     i2___lwdiv@divisor:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x2
   535  000003                     	ds	2
   536  000005                     ___awmod@counter:
   537                           	opt stack 0
   538  000005                     strcpy@cp:
   539                           	opt stack 0
   540  000005                     i2___wmul@product:
   541                           	opt stack 0
   542  000005                     i2___lwdiv@quotient:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x4
   546  000005                     	ds	1
   547  000006                     ___awmod@sign:
   548                           	opt stack 0
   549                           
   550                           ; 1 bytes @ 0x5
   551  000006                     	ds	1
   552  000007                     i2___lwdiv@counter:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x6
   556  000007                     	ds	1
   557  000008                     ?i2___lwmod:
   558                           	opt stack 0
   559  000008                     i2___lwmod@dividend:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x7
   563  000008                     	ds	2
   564  00000A                     i2___lwmod@divisor:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x9
   568  00000A                     	ds	2
   569  00000C                     i2___lwmod@counter:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0xB
   573  00000C                     	ds	1
   574  00000D                     ?i2_printf:
   575                           	opt stack 0
   576  00000D                     i2printf@f:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0xC
   580  00000D                     	ds	2
   581  00000F                     ??i2_printf:
   582                           
   583                           ; 0 bytes @ 0xE
   584  00000F                     	ds	4
   585  000013                     i2printf@idx:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x12
   589  000013                     	ds	1
   590  000014                     i2printf@ap:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x13
   594  000014                     	ds	2
   595  000016                     i2printf@prec:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x15
   599  000016                     	ds	1
   600  000017                     i2printf@flag:
   601                           	opt stack 0
   602                           
   603                           ; 1 bytes @ 0x16
   604  000017                     	ds	1
   605  000018                     i2printf@val:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0x17
   609  000018                     	ds	2
   610  00001A                     i2printf@width:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x19
   614  00001A                     	ds	2
   615  00001C                     i2printf@c:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x1B
   619  00001C                     	ds	1
   620  00001D                     ??_interruptions:
   621                           
   622                           ; 0 bytes @ 0x1C
   623  00001D                     	ds	16
   624                           tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           
   631 ;;
   632 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   633 ;;
   634 ;; *************** function _main *****************
   635 ;; Defined at:
   636 ;;		line 139 in file "main.c"
   637 ;; Parameters:    Size  Location     Type
   638 ;;		None
   639 ;; Auto vars:     Size  Location     Type
   640 ;;		None
   641 ;; Return value:  Size  Location     Type
   642 ;;		None               void
   643 ;; Registers used:
   644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   645 ;; Tracked objects:
   646 ;;		On entry : 0/0
   647 ;;		On exit  : 0/0
   648 ;;		Unchanged: 0/0
   649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   650 ;;      Params:         0       0       0       0       0       0       0       0       0
   651 ;;      Locals:         0       0       0       0       0       0       0       0       0
   652 ;;      Temps:          0       1       0       0       0       0       0       0       0
   653 ;;      Totals:         0       1       0       0       0       0       0       0       0
   654 ;;Total ram usage:        1 bytes
   655 ;; Hardware stack levels required when called:    5
   656 ;; This function calls:
   657 ;;		_InitI2C_Master
   658 ;;		_configAD
   659 ;;		_configADInterrupt
   660 ;;		_configRS232
   661 ;;		_configTimer
   662 ;;		_configUSARTInterrupts
   663 ;;		_printf
   664 ;;		_read_RTC_I2c
   665 ;;		_selectChanel
   666 ;;		_write_RTC_I2c
   667 ;; This function is called by:
   668 ;;		Startup code after reset
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           	psect	text0
   673  000E30                     __ptext0:
   674                           	opt stack 0
   675  000E30                     _main:
   676                           	opt stack 26
   677                           
   678                           ;main.c: 140: TRISDbits.TRISD3 = 0;
   679                           
   680                           ;incstack = 0
   681  000E30  9695               	bcf	3989,3,c	;volatile
   682                           
   683                           ;main.c: 142: configTimer();
   684  000E32  ECCA  F00A         	call	_configTimer	;wreg free
   685                           
   686                           ;main.c: 145: configADInterrupt();
   687  000E36  EC32  F00B         	call	_configADInterrupt	;wreg free
   688                           
   689                           ;main.c: 146: configAD();
   690  000E3A  ECD7  F00A         	call	_configAD	;wreg free
   691                           
   692                           ;main.c: 149: configRS232();
   693  000E3E  ECE4  F00A         	call	_configRS232	;wreg free
   694                           
   695                           ;main.c: 150: configUSARTInterrupts();
   696  000E42  EC0A  F00B         	call	_configUSARTInterrupts	;wreg free
   697                           
   698                           ;main.c: 153: InitI2C_Master();
   699  000E46  ECAA  F00A         	call	_InitI2C_Master	;wreg free
   700                           
   701                           ;main.c: 156: selectChanel(channel);
   702  000E4A  0100               	movlb	0	; () banked
   703  000E4C  51B1               	movf	_channel& (0+255),w,b
   704  000E4E  EC58  F008         	call	_selectChanel
   705                           
   706                           ;main.c: 157: ADCON0bits.GODONE = 1;
   707  000E52  82C2               	bsf	4034,1,c	;volatile
   708                           
   709                           ;main.c: 160: write_RTC_I2c();
   710  000E54  EC4F  F009         	call	_write_RTC_I2c	;wreg free
   711                           
   712                           ;main.c: 162: TMR0ON = 1;
   713  000E58  8ED5               	bsf	4053,7,c	;volatile
   714  000E5A                     l2690:
   715                           
   716                           ;main.c: 166: if(val == 30){
   717  000E5A  0E1E               	movlw	30
   718  000E5C  0100               	movlb	0	; () banked
   719  000E5E  1996               	xorwf	_val& (0+255),w,b
   720  000E60  A4D8               	btfss	status,2,c
   721  000E62  D7FB               	goto	l2690
   722                           
   723                           ; BSR set to: 0
   724                           ;main.c: 168: read_RTC_I2c(0x04);
   725  000E64  0E04               	movlw	4
   726  000E66  EC08  F00A         	call	_read_RTC_I2c
   727                           
   728                           ;main.c: 169: dia = leitura;
   729  000E6A  C092  F090         	movff	_leitura,_dia
   730                           
   731                           ;main.c: 170: _delay((unsigned long)((10)*(20000000/4000.0)));
   732  000E6E  0E41               	movlw	65
   733  000E70  0100               	movlb	0	; () banked
   734  000E72  6F8C               	movwf	??_main& (0+255),b
   735  000E74  0EEE               	movlw	238
   736  000E76                     u2357:
   737  000E76  2EE8               	decfsz	wreg,f,c
   738  000E78  D7FE               	goto	u2357
   739  000E7A  2F8C               	decfsz	??_main& (0+255),f,b
   740  000E7C  D7FC               	goto	u2357
   741  000E7E  D000               	nop2	
   742                           
   743                           ;main.c: 173: read_RTC_I2c(0x05);
   744  000E80  0E05               	movlw	5
   745  000E82  EC08  F00A         	call	_read_RTC_I2c
   746                           
   747                           ;main.c: 174: mes = leitura;
   748  000E86  C092  F093         	movff	_leitura,_mes
   749                           
   750                           ;main.c: 175: _delay((unsigned long)((10)*(20000000/4000.0)));
   751  000E8A  0E41               	movlw	65
   752  000E8C  0100               	movlb	0	; () banked
   753  000E8E  6F8C               	movwf	??_main& (0+255),b
   754  000E90  0EEE               	movlw	238
   755  000E92                     u2367:
   756  000E92  2EE8               	decfsz	wreg,f,c
   757  000E94  D7FE               	goto	u2367
   758  000E96  2F8C               	decfsz	??_main& (0+255),f,b
   759  000E98  D7FC               	goto	u2367
   760  000E9A  D000               	nop2	
   761                           
   762                           ;main.c: 178: read_RTC_I2c(0x06);
   763  000E9C  0E06               	movlw	6
   764  000E9E  EC08  F00A         	call	_read_RTC_I2c
   765                           
   766                           ;main.c: 179: ano = leitura;
   767  000EA2  C092  F08F         	movff	_leitura,_ano
   768                           
   769                           ;main.c: 180: _delay((unsigned long)((10)*(20000000/4000.0)));
   770  000EA6  0E41               	movlw	65
   771  000EA8  0100               	movlb	0	; () banked
   772  000EAA  6F8C               	movwf	??_main& (0+255),b
   773  000EAC  0EEE               	movlw	238
   774  000EAE                     u2377:
   775  000EAE  2EE8               	decfsz	wreg,f,c
   776  000EB0  D7FE               	goto	u2377
   777  000EB2  2F8C               	decfsz	??_main& (0+255),f,b
   778  000EB4  D7FC               	goto	u2377
   779  000EB6  D000               	nop2	
   780                           
   781                           ;main.c: 183: read_RTC_I2c(0x02);
   782  000EB8  0E02               	movlw	2
   783  000EBA  EC08  F00A         	call	_read_RTC_I2c
   784                           
   785                           ;main.c: 184: hora = leitura;
   786  000EBE  C092  F091         	movff	_leitura,_hora
   787                           
   788                           ;main.c: 185: _delay((unsigned long)((10)*(20000000/4000.0)));
   789  000EC2  0E41               	movlw	65
   790  000EC4  0100               	movlb	0	; () banked
   791  000EC6  6F8C               	movwf	??_main& (0+255),b
   792  000EC8  0EEE               	movlw	238
   793  000ECA                     u2387:
   794  000ECA  2EE8               	decfsz	wreg,f,c
   795  000ECC  D7FE               	goto	u2387
   796  000ECE  2F8C               	decfsz	??_main& (0+255),f,b
   797  000ED0  D7FC               	goto	u2387
   798  000ED2  D000               	nop2	
   799                           
   800                           ;main.c: 188: read_RTC_I2c(0x01);
   801  000ED4  0E01               	movlw	1
   802  000ED6  EC08  F00A         	call	_read_RTC_I2c
   803                           
   804                           ;main.c: 189: minuto = leitura;
   805  000EDA  C092  F094         	movff	_leitura,_minuto
   806                           
   807                           ;main.c: 190: _delay((unsigned long)((10)*(20000000/4000.0)));
   808  000EDE  0E41               	movlw	65
   809  000EE0  0100               	movlb	0	; () banked
   810  000EE2  6F8C               	movwf	??_main& (0+255),b
   811  000EE4  0EEE               	movlw	238
   812  000EE6                     u2397:
   813  000EE6  2EE8               	decfsz	wreg,f,c
   814  000EE8  D7FE               	goto	u2397
   815  000EEA  2F8C               	decfsz	??_main& (0+255),f,b
   816  000EEC  D7FC               	goto	u2397
   817  000EEE  D000               	nop2	
   818                           
   819                           ;main.c: 193: read_RTC_I2c(0x00);
   820  000EF0  0E00               	movlw	0
   821  000EF2  EC08  F00A         	call	_read_RTC_I2c
   822                           
   823                           ;main.c: 194: segundo = leitura;
   824  000EF6  C092  F095         	movff	_leitura,_segundo
   825                           
   826                           ;main.c: 198: printf("%u&%u&20%02X-%02X-%02X %02X:%02X:%02X", id, data_ADC, ano, mes, di
      +                          a, hora, minuto, segundo);
   827  000EFA  0E13               	movlw	low STR_2
   828  000EFC  0100               	movlb	0	; () banked
   829  000EFE  6F6C               	movwf	printf@f& (0+255),b
   830  000F00  0E08               	movlw	high STR_2
   831  000F02  0100               	movlb	0	; () banked
   832  000F04  6F6D               	movwf	(printf@f+1)& (0+255),b
   833  000F06  C0B2  F06E         	movff	_id,?_printf+2
   834  000F0A  0100               	movlb	0	; () banked
   835  000F0C  6B6F               	clrf	(?_printf+3)& (0+255),b
   836  000F0E  C08D  F070         	movff	_data_ADC,?_printf+4
   837  000F12  C08E  F071         	movff	_data_ADC+1,?_printf+5
   838  000F16  C08F  F072         	movff	_ano,?_printf+6
   839  000F1A  0100               	movlb	0	; () banked
   840  000F1C  6B73               	clrf	(?_printf+7)& (0+255),b
   841  000F1E  C093  F074         	movff	_mes,?_printf+8
   842  000F22  0100               	movlb	0	; () banked
   843  000F24  6B75               	clrf	(?_printf+9)& (0+255),b
   844  000F26  C090  F076         	movff	_dia,?_printf+10
   845  000F2A  0100               	movlb	0	; () banked
   846  000F2C  6B77               	clrf	(?_printf+11)& (0+255),b
   847  000F2E  C091  F078         	movff	_hora,?_printf+12
   848  000F32  0100               	movlb	0	; () banked
   849  000F34  6B79               	clrf	(?_printf+13)& (0+255),b
   850  000F36  C094  F07A         	movff	_minuto,?_printf+14
   851  000F3A  0100               	movlb	0	; () banked
   852  000F3C  6B7B               	clrf	(?_printf+15)& (0+255),b
   853  000F3E  C095  F07C         	movff	_segundo,?_printf+16
   854  000F42  0100               	movlb	0	; () banked
   855  000F44  6B7D               	clrf	(?_printf+17)& (0+255),b
   856  000F46  EC28  F004         	call	_printf	;wreg free
   857                           
   858                           ;main.c: 200: _delay((unsigned long)((10)*(20000000/4000.0)));
   859  000F4A  0E41               	movlw	65
   860  000F4C  0100               	movlb	0	; () banked
   861  000F4E  6F8C               	movwf	??_main& (0+255),b
   862  000F50  0EEE               	movlw	238
   863  000F52                     u2407:
   864  000F52  2EE8               	decfsz	wreg,f,c
   865  000F54  D7FE               	goto	u2407
   866  000F56  2F8C               	decfsz	??_main& (0+255),f,b
   867  000F58  D7FC               	goto	u2407
   868  000F5A  D000               	nop2	
   869                           
   870                           ;main.c: 202: printf("\n");
   871  000F5C  0E4D               	movlw	low STR_3
   872  000F5E  0100               	movlb	0	; () banked
   873  000F60  6F6C               	movwf	printf@f& (0+255),b
   874  000F62  0E08               	movlw	high STR_3
   875  000F64  0100               	movlb	0	; () banked
   876  000F66  6F6D               	movwf	(printf@f+1)& (0+255),b
   877  000F68  EC28  F004         	call	_printf	;wreg free
   878                           
   879                           ;main.c: 203: val = 0;
   880  000F6C  0E00               	movlw	0
   881  000F6E  0100               	movlb	0	; () banked
   882  000F70  6F96               	movwf	_val& (0+255),b
   883                           
   884                           ; BSR set to: 0
   885                           
   886                           ; BSR set to: 0
   887  000F72  D773               	goto	l2690
   888  000F74                     __end_of_main:
   889                           	opt stack 0
   890                           tblptru	equ	0xFF8
   891                           tblptrh	equ	0xFF7
   892                           tblptrl	equ	0xFF6
   893                           tablat	equ	0xFF5
   894                           postinc0	equ	0xFEE
   895                           wreg	equ	0xFE8
   896                           status	equ	0xFD8
   897                           
   898 ;; *************** function _write_RTC_I2c *****************
   899 ;; Defined at:
   900 ;;		line 85 in file "main.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;		None
   903 ;; Auto vars:     Size  Location     Type
   904 ;;		None
   905 ;; Return value:  Size  Location     Type
   906 ;;		None               void
   907 ;; Registers used:
   908 ;;		wreg, status,2, status,0, cstack
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   914 ;;      Params:         0       0       0       0       0       0       0       0       0
   915 ;;      Locals:         0       0       0       0       0       0       0       0       0
   916 ;;      Temps:          0       0       0       0       0       0       0       0       0
   917 ;;      Totals:         0       0       0       0       0       0       0       0       0
   918 ;;Total ram usage:        0 bytes
   919 ;; Hardware stack levels used:    1
   920 ;; Hardware stack levels required when called:    4
   921 ;; This function calls:
   922 ;;		_I2C_Idle
   923 ;;		_I2C_Start
   924 ;;		_I2C_Stop
   925 ;;		_I2C_Write_Byte
   926 ;; This function is called by:
   927 ;;		_main
   928 ;; This function uses a non-reentrant model
   929 ;;
   930                           
   931                           	psect	text1
   932  00129E                     __ptext1:
   933                           	opt stack 0
   934  00129E                     _write_RTC_I2c:
   935                           	opt stack 26
   936                           
   937                           ;main.c: 87: I2C_Idle();
   938                           
   939                           ; BSR set to: 0
   940                           ;incstack = 0
   941  00129E  ECF0  F00A         	call	_I2C_Idle	;wreg free
   942                           
   943                           ;main.c: 88: I2C_Start();
   944  0012A2  EC28  F00B         	call	_I2C_Start	;wreg free
   945                           
   946                           ;main.c: 89: I2C_Idle();
   947  0012A6  ECF0  F00A         	call	_I2C_Idle	;wreg free
   948                           
   949                           ;main.c: 90: I2C_Write_Byte(0xD0);
   950  0012AA  0ED0               	movlw	208
   951  0012AC  ECFA  F00A         	call	_I2C_Write_Byte
   952                           
   953                           ;main.c: 91: I2C_Idle();
   954  0012B0  ECF0  F00A         	call	_I2C_Idle	;wreg free
   955                           
   956                           ;main.c: 92: I2C_Write_Byte(0x00);
   957  0012B4  0E00               	movlw	0
   958  0012B6  ECFA  F00A         	call	_I2C_Write_Byte
   959                           
   960                           ;main.c: 93: I2C_Idle();
   961  0012BA  ECF0  F00A         	call	_I2C_Idle	;wreg free
   962                           
   963                           ;main.c: 96: I2C_Write_Byte(0x00);
   964  0012BE  0E00               	movlw	0
   965  0012C0  ECFA  F00A         	call	_I2C_Write_Byte
   966                           
   967                           ;main.c: 97: I2C_Idle();
   968  0012C4  ECF0  F00A         	call	_I2C_Idle	;wreg free
   969                           
   970                           ;main.c: 99: I2C_Write_Byte(0x30);
   971  0012C8  0E30               	movlw	48
   972  0012CA  ECFA  F00A         	call	_I2C_Write_Byte
   973                           
   974                           ;main.c: 100: I2C_Idle();
   975  0012CE  ECF0  F00A         	call	_I2C_Idle	;wreg free
   976                           
   977                           ;main.c: 102: I2C_Write_Byte(0x14);
   978  0012D2  0E14               	movlw	20
   979  0012D4  ECFA  F00A         	call	_I2C_Write_Byte
   980                           
   981                           ;main.c: 103: I2C_Idle();
   982  0012D8  ECF0  F00A         	call	_I2C_Idle	;wreg free
   983                           
   984                           ;main.c: 105: I2C_Write_Byte(0x04);
   985  0012DC  0E04               	movlw	4
   986  0012DE  ECFA  F00A         	call	_I2C_Write_Byte
   987                           
   988                           ;main.c: 106: I2C_Idle();
   989  0012E2  ECF0  F00A         	call	_I2C_Idle	;wreg free
   990                           
   991                           ;main.c: 108: I2C_Write_Byte(0x22);
   992  0012E6  0E22               	movlw	34
   993  0012E8  ECFA  F00A         	call	_I2C_Write_Byte
   994                           
   995                           ;main.c: 109: I2C_Idle();
   996  0012EC  ECF0  F00A         	call	_I2C_Idle	;wreg free
   997                           
   998                           ;main.c: 111: I2C_Write_Byte(0x01);
   999  0012F0  0E01               	movlw	1
  1000  0012F2  ECFA  F00A         	call	_I2C_Write_Byte
  1001                           
  1002                           ;main.c: 112: I2C_Idle();
  1003  0012F6  ECF0  F00A         	call	_I2C_Idle	;wreg free
  1004                           
  1005                           ;main.c: 114: I2C_Write_Byte(0x16);
  1006  0012FA  0E16               	movlw	22
  1007  0012FC  ECFA  F00A         	call	_I2C_Write_Byte
  1008                           
  1009                           ;main.c: 115: I2C_Idle();
  1010  001300  ECF0  F00A         	call	_I2C_Idle	;wreg free
  1011                           
  1012                           ;main.c: 116: I2C_Stop();
  1013  001304  EC23  F00B         	call	_I2C_Stop	;wreg free
  1014  001308  0012               	return		;funcret
  1015  00130A                     __end_of_write_RTC_I2c:
  1016                           	opt stack 0
  1017                           tblptru	equ	0xFF8
  1018                           tblptrh	equ	0xFF7
  1019                           tblptrl	equ	0xFF6
  1020                           tablat	equ	0xFF5
  1021                           postinc0	equ	0xFEE
  1022                           wreg	equ	0xFE8
  1023                           status	equ	0xFD8
  1024                           
  1025 ;; *************** function _selectChanel *****************
  1026 ;; Defined at:
  1027 ;;		line 44 in file "ad.c"
  1028 ;; Parameters:    Size  Location     Type
  1029 ;;  channel         1    wreg     unsigned char 
  1030 ;; Auto vars:     Size  Location     Type
  1031 ;;  channel         1    0[BANK0 ] unsigned char 
  1032 ;; Return value:  Size  Location     Type
  1033 ;;		None               void
  1034 ;; Registers used:
  1035 ;;		wreg, status,2, status,0
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1041 ;;      Params:         0       0       0       0       0       0       0       0       0
  1042 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1043 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1044 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1045 ;;Total ram usage:        1 bytes
  1046 ;; Hardware stack levels used:    1
  1047 ;; Hardware stack levels required when called:    3
  1048 ;; This function calls:
  1049 ;;		Nothing
  1050 ;; This function is called by:
  1051 ;;		_main
  1052 ;; This function uses a non-reentrant model
  1053 ;;
  1054                           
  1055                           	psect	text2
  1056  0010B0                     __ptext2:
  1057                           	opt stack 0
  1058  0010B0                     _selectChanel:
  1059                           	opt stack 27
  1060                           
  1061                           ;incstack = 0
  1062                           ;selectChanel@channel stored from wreg
  1063  0010B0  0100               	movlb	0	; () banked
  1064  0010B2  6F60               	movwf	selectChanel@channel& (0+255),b
  1065                           
  1066                           ;ad.c: 45: if(channel == 0){
  1067  0010B4  0100               	movlb	0	; () banked
  1068  0010B6  5160               	movf	selectChanel@channel& (0+255),w,b
  1069  0010B8  0100               	movlb	0	; () banked
  1070  0010BA  A4D8               	btfss	status,2,c
  1071  0010BC  D005               	goto	l2426
  1072                           
  1073                           ; BSR set to: 0
  1074                           ;ad.c: 46: ADCON0bits.CHS3 = 0;
  1075  0010BE  9AC2               	bcf	4034,5,c	;volatile
  1076                           
  1077                           ;ad.c: 47: ADCON0bits.CHS2 = 0;
  1078  0010C0  98C2               	bcf	4034,4,c	;volatile
  1079                           
  1080                           ;ad.c: 48: ADCON0bits.CHS1 = 0;
  1081  0010C2  96C2               	bcf	4034,3,c	;volatile
  1082                           
  1083                           ;ad.c: 49: ADCON0bits.CHS0 = 0;
  1084  0010C4  94C2               	bcf	4034,2,c	;volatile
  1085                           
  1086                           ;ad.c: 50: }
  1087  0010C6  0012               	return	
  1088  0010C8                     l2426:
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;ad.c: 51: else if(channel == 1){
  1092  0010C8  0100               	movlb	0	; () banked
  1093  0010CA  0560               	decf	selectChanel@channel& (0+255),w,b
  1094  0010CC  A4D8               	btfss	status,2,c
  1095  0010CE  D005               	goto	l2430
  1096                           
  1097                           ; BSR set to: 0
  1098                           ;ad.c: 52: ADCON0bits.CHS3 = 0;
  1099  0010D0  9AC2               	bcf	4034,5,c	;volatile
  1100                           
  1101                           ;ad.c: 53: ADCON0bits.CHS2 = 0;
  1102  0010D2  98C2               	bcf	4034,4,c	;volatile
  1103                           
  1104                           ;ad.c: 54: ADCON0bits.CHS1 = 0;
  1105  0010D4  96C2               	bcf	4034,3,c	;volatile
  1106                           
  1107                           ;ad.c: 55: ADCON0bits.CHS0 = 1;
  1108  0010D6  84C2               	bsf	4034,2,c	;volatile
  1109                           
  1110                           ;ad.c: 56: }
  1111  0010D8  0012               	return	
  1112  0010DA                     l2430:
  1113                           
  1114                           ; BSR set to: 0
  1115                           ;ad.c: 57: else if(channel == 2){
  1116  0010DA  0E02               	movlw	2
  1117  0010DC  0100               	movlb	0	; () banked
  1118  0010DE  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1119  0010E0  A4D8               	btfss	status,2,c
  1120  0010E2  D005               	goto	l2434
  1121                           
  1122                           ; BSR set to: 0
  1123                           ;ad.c: 58: ADCON0bits.CHS3 = 0;
  1124  0010E4  9AC2               	bcf	4034,5,c	;volatile
  1125                           
  1126                           ;ad.c: 59: ADCON0bits.CHS2 = 0;
  1127  0010E6  98C2               	bcf	4034,4,c	;volatile
  1128                           
  1129                           ;ad.c: 60: ADCON0bits.CHS1 = 1;
  1130  0010E8  86C2               	bsf	4034,3,c	;volatile
  1131                           
  1132                           ;ad.c: 61: ADCON0bits.CHS0 = 0;
  1133  0010EA  94C2               	bcf	4034,2,c	;volatile
  1134                           
  1135                           ;ad.c: 62: }
  1136  0010EC  0012               	return	
  1137  0010EE                     l2434:
  1138                           
  1139                           ; BSR set to: 0
  1140                           ;ad.c: 63: else if(channel == 3){
  1141  0010EE  0E03               	movlw	3
  1142  0010F0  0100               	movlb	0	; () banked
  1143  0010F2  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1144  0010F4  A4D8               	btfss	status,2,c
  1145  0010F6  D005               	goto	l2438
  1146                           
  1147                           ; BSR set to: 0
  1148                           ;ad.c: 64: ADCON0bits.CHS3 = 0;
  1149  0010F8  9AC2               	bcf	4034,5,c	;volatile
  1150                           
  1151                           ;ad.c: 65: ADCON0bits.CHS2 = 0;
  1152  0010FA  98C2               	bcf	4034,4,c	;volatile
  1153                           
  1154                           ;ad.c: 66: ADCON0bits.CHS1 = 1;
  1155  0010FC  86C2               	bsf	4034,3,c	;volatile
  1156                           
  1157                           ;ad.c: 67: ADCON0bits.CHS0 = 1;
  1158  0010FE  84C2               	bsf	4034,2,c	;volatile
  1159                           
  1160                           ;ad.c: 68: }
  1161  001100  0012               	return	
  1162  001102                     l2438:
  1163                           
  1164                           ; BSR set to: 0
  1165                           ;ad.c: 69: else if(channel == 4){
  1166  001102  0E04               	movlw	4
  1167  001104  0100               	movlb	0	; () banked
  1168  001106  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1169  001108  A4D8               	btfss	status,2,c
  1170  00110A  D005               	goto	l2442
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;ad.c: 70: ADCON0bits.CHS3 = 0;
  1174  00110C  9AC2               	bcf	4034,5,c	;volatile
  1175                           
  1176                           ;ad.c: 71: ADCON0bits.CHS2 = 1;
  1177  00110E  88C2               	bsf	4034,4,c	;volatile
  1178                           
  1179                           ;ad.c: 72: ADCON0bits.CHS1 = 0;
  1180  001110  96C2               	bcf	4034,3,c	;volatile
  1181                           
  1182                           ;ad.c: 73: ADCON0bits.CHS0 = 0;
  1183  001112  94C2               	bcf	4034,2,c	;volatile
  1184                           
  1185                           ;ad.c: 74: }
  1186  001114  0012               	return	
  1187  001116                     l2442:
  1188                           
  1189                           ; BSR set to: 0
  1190                           ;ad.c: 75: else if(channel == 5){
  1191  001116  0E05               	movlw	5
  1192  001118  0100               	movlb	0	; () banked
  1193  00111A  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1194  00111C  A4D8               	btfss	status,2,c
  1195  00111E  D005               	goto	l2446
  1196                           
  1197                           ; BSR set to: 0
  1198                           ;ad.c: 76: ADCON0bits.CHS3 = 0;
  1199  001120  9AC2               	bcf	4034,5,c	;volatile
  1200                           
  1201                           ;ad.c: 77: ADCON0bits.CHS2 = 1;
  1202  001122  88C2               	bsf	4034,4,c	;volatile
  1203                           
  1204                           ;ad.c: 78: ADCON0bits.CHS1 = 0;
  1205  001124  96C2               	bcf	4034,3,c	;volatile
  1206                           
  1207                           ;ad.c: 79: ADCON0bits.CHS0 = 1;
  1208  001126  84C2               	bsf	4034,2,c	;volatile
  1209                           
  1210                           ;ad.c: 80: }
  1211  001128  0012               	return	
  1212  00112A                     l2446:
  1213                           
  1214                           ; BSR set to: 0
  1215                           ;ad.c: 81: else if(channel == 6){
  1216  00112A  0E06               	movlw	6
  1217  00112C  0100               	movlb	0	; () banked
  1218  00112E  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1219  001130  A4D8               	btfss	status,2,c
  1220  001132  D005               	goto	l2450
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;ad.c: 82: ADCON0bits.CHS3 = 0;
  1224  001134  9AC2               	bcf	4034,5,c	;volatile
  1225                           
  1226                           ;ad.c: 83: ADCON0bits.CHS2 = 1;
  1227  001136  88C2               	bsf	4034,4,c	;volatile
  1228                           
  1229                           ;ad.c: 84: ADCON0bits.CHS1 = 1;
  1230  001138  86C2               	bsf	4034,3,c	;volatile
  1231                           
  1232                           ;ad.c: 85: ADCON0bits.CHS0 = 0;
  1233  00113A  94C2               	bcf	4034,2,c	;volatile
  1234                           
  1235                           ;ad.c: 86: }
  1236  00113C  0012               	return	
  1237  00113E                     l2450:
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;ad.c: 87: else if(channel == 7){
  1241  00113E  0E07               	movlw	7
  1242  001140  0100               	movlb	0	; () banked
  1243  001142  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1244  001144  A4D8               	btfss	status,2,c
  1245  001146  D005               	goto	l2454
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;ad.c: 88: ADCON0bits.CHS3 = 0;
  1249  001148  9AC2               	bcf	4034,5,c	;volatile
  1250                           
  1251                           ;ad.c: 89: ADCON0bits.CHS2 = 1;
  1252  00114A  88C2               	bsf	4034,4,c	;volatile
  1253                           
  1254                           ;ad.c: 90: ADCON0bits.CHS1 = 1;
  1255  00114C  86C2               	bsf	4034,3,c	;volatile
  1256                           
  1257                           ;ad.c: 91: ADCON0bits.CHS0 = 1;
  1258  00114E  84C2               	bsf	4034,2,c	;volatile
  1259                           
  1260                           ;ad.c: 92: }
  1261  001150  0012               	return	
  1262  001152                     l2454:
  1263                           
  1264                           ; BSR set to: 0
  1265                           ;ad.c: 93: else if(channel == 8){
  1266  001152  0E08               	movlw	8
  1267  001154  0100               	movlb	0	; () banked
  1268  001156  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1269  001158  A4D8               	btfss	status,2,c
  1270  00115A  D005               	goto	l2458
  1271                           
  1272                           ; BSR set to: 0
  1273                           ;ad.c: 94: ADCON0bits.CHS3 = 1;
  1274  00115C  8AC2               	bsf	4034,5,c	;volatile
  1275                           
  1276                           ;ad.c: 95: ADCON0bits.CHS2 = 0;
  1277  00115E  98C2               	bcf	4034,4,c	;volatile
  1278                           
  1279                           ;ad.c: 96: ADCON0bits.CHS1 = 0;
  1280  001160  96C2               	bcf	4034,3,c	;volatile
  1281                           
  1282                           ;ad.c: 97: ADCON0bits.CHS0 = 0;
  1283  001162  94C2               	bcf	4034,2,c	;volatile
  1284                           
  1285                           ;ad.c: 98: }
  1286  001164  0012               	return	
  1287  001166                     l2458:
  1288                           
  1289                           ; BSR set to: 0
  1290                           ;ad.c: 99: else if(channel == 9){
  1291  001166  0E09               	movlw	9
  1292  001168  0100               	movlb	0	; () banked
  1293  00116A  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1294  00116C  A4D8               	btfss	status,2,c
  1295  00116E  D005               	goto	l2462
  1296                           
  1297                           ; BSR set to: 0
  1298                           ;ad.c: 100: ADCON0bits.CHS3 = 1;
  1299  001170  8AC2               	bsf	4034,5,c	;volatile
  1300                           
  1301                           ;ad.c: 101: ADCON0bits.CHS2 = 0;
  1302  001172  98C2               	bcf	4034,4,c	;volatile
  1303                           
  1304                           ;ad.c: 102: ADCON0bits.CHS1 = 0;
  1305  001174  96C2               	bcf	4034,3,c	;volatile
  1306                           
  1307                           ;ad.c: 103: ADCON0bits.CHS0 = 1;
  1308  001176  84C2               	bsf	4034,2,c	;volatile
  1309                           
  1310                           ;ad.c: 104: }
  1311  001178  0012               	return	
  1312  00117A                     l2462:
  1313                           
  1314                           ; BSR set to: 0
  1315                           ;ad.c: 105: else if(channel == 10){
  1316  00117A  0E0A               	movlw	10
  1317  00117C  0100               	movlb	0	; () banked
  1318  00117E  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1319  001180  A4D8               	btfss	status,2,c
  1320  001182  D005               	goto	l2466
  1321                           
  1322                           ; BSR set to: 0
  1323                           ;ad.c: 106: ADCON0bits.CHS3 = 1;
  1324  001184  8AC2               	bsf	4034,5,c	;volatile
  1325                           
  1326                           ;ad.c: 107: ADCON0bits.CHS2 = 0;
  1327  001186  98C2               	bcf	4034,4,c	;volatile
  1328                           
  1329                           ;ad.c: 108: ADCON0bits.CHS1 = 1;
  1330  001188  86C2               	bsf	4034,3,c	;volatile
  1331                           
  1332                           ;ad.c: 109: ADCON0bits.CHS0 = 0;
  1333  00118A  94C2               	bcf	4034,2,c	;volatile
  1334                           
  1335                           ;ad.c: 110: }
  1336  00118C  0012               	return	
  1337  00118E                     l2466:
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;ad.c: 111: else if(channel == 11){
  1341  00118E  0E0B               	movlw	11
  1342  001190  0100               	movlb	0	; () banked
  1343  001192  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1344  001194  A4D8               	btfss	status,2,c
  1345  001196  D005               	goto	l2470
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;ad.c: 112: ADCON0bits.CHS3 = 1;
  1349  001198  8AC2               	bsf	4034,5,c	;volatile
  1350                           
  1351                           ;ad.c: 113: ADCON0bits.CHS2 = 0;
  1352  00119A  98C2               	bcf	4034,4,c	;volatile
  1353                           
  1354                           ;ad.c: 114: ADCON0bits.CHS1 = 1;
  1355  00119C  86C2               	bsf	4034,3,c	;volatile
  1356                           
  1357                           ;ad.c: 115: ADCON0bits.CHS0 = 1;
  1358  00119E  84C2               	bsf	4034,2,c	;volatile
  1359                           
  1360                           ;ad.c: 116: }
  1361  0011A0  0012               	return	
  1362  0011A2                     l2470:
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;ad.c: 117: else if(channel == 12){
  1366  0011A2  0E0C               	movlw	12
  1367  0011A4  0100               	movlb	0	; () banked
  1368  0011A6  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1369  0011A8  A4D8               	btfss	status,2,c
  1370  0011AA  0012               	return	
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;ad.c: 118: ADCON0bits.CHS3 = 1;
  1374  0011AC  8AC2               	bsf	4034,5,c	;volatile
  1375                           
  1376                           ;ad.c: 119: ADCON0bits.CHS2 = 1;
  1377  0011AE  88C2               	bsf	4034,4,c	;volatile
  1378                           
  1379                           ;ad.c: 120: ADCON0bits.CHS1 = 0;
  1380  0011B0  96C2               	bcf	4034,3,c	;volatile
  1381                           
  1382                           ;ad.c: 121: ADCON0bits.CHS0 = 0;
  1383  0011B2  94C2               	bcf	4034,2,c	;volatile
  1384                           
  1385                           ; BSR set to: 0
  1386                           
  1387                           ; BSR set to: 0
  1388                           
  1389                           ; BSR set to: 0
  1390                           
  1391                           ; BSR set to: 0
  1392                           
  1393                           ; BSR set to: 0
  1394                           
  1395                           ; BSR set to: 0
  1396                           
  1397                           ; BSR set to: 0
  1398                           
  1399                           ; BSR set to: 0
  1400                           
  1401                           ; BSR set to: 0
  1402                           
  1403                           ; BSR set to: 0
  1404                           
  1405                           ; BSR set to: 0
  1406                           
  1407                           ; BSR set to: 0
  1408  0011B4  0012               	return	
  1409  0011B6                     __end_of_selectChanel:
  1410                           	opt stack 0
  1411                           tblptru	equ	0xFF8
  1412                           tblptrh	equ	0xFF7
  1413                           tblptrl	equ	0xFF6
  1414                           tablat	equ	0xFF5
  1415                           postinc0	equ	0xFEE
  1416                           wreg	equ	0xFE8
  1417                           status	equ	0xFD8
  1418                           
  1419 ;; *************** function _read_RTC_I2c *****************
  1420 ;; Defined at:
  1421 ;;		line 119 in file "main.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;  pos_memoria     1    wreg     unsigned char 
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;  pos_memoria     1    1[BANK0 ] unsigned char 
  1426 ;; Return value:  Size  Location     Type
  1427 ;;		None               void
  1428 ;; Registers used:
  1429 ;;		wreg, status,2, status,0, cstack
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1435 ;;      Params:         0       0       0       0       0       0       0       0       0
  1436 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1437 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1438 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1439 ;;Total ram usage:        1 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; Hardware stack levels required when called:    4
  1442 ;; This function calls:
  1443 ;;		_I2C_Idle
  1444 ;;		_I2C_ReStart
  1445 ;;		_I2C_Read_Byte
  1446 ;;		_I2C_Send_NACK
  1447 ;;		_I2C_Start
  1448 ;;		_I2C_Stop
  1449 ;;		_I2C_Write_Byte
  1450 ;; This function is called by:
  1451 ;;		_main
  1452 ;; This function uses a non-reentrant model
  1453 ;;
  1454                           
  1455                           	psect	text3
  1456  001410                     __ptext3:
  1457                           	opt stack 0
  1458  001410                     _read_RTC_I2c:
  1459                           	opt stack 26
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;incstack = 0
  1463                           ;read_RTC_I2c@pos_memoria stored from wreg
  1464  001410  0100               	movlb	0	; () banked
  1465  001412  6F61               	movwf	read_RTC_I2c@pos_memoria& (0+255),b
  1466                           
  1467                           ;main.c: 121: I2C_Idle();
  1468  001414  ECF0  F00A         	call	_I2C_Idle	;wreg free
  1469                           
  1470                           ;main.c: 122: I2C_Start();
  1471  001418  EC28  F00B         	call	_I2C_Start	;wreg free
  1472                           
  1473                           ;main.c: 123: I2C_Idle();
  1474  00141C  ECF0  F00A         	call	_I2C_Idle	;wreg free
  1475                           
  1476                           ;main.c: 124: I2C_Write_Byte(0xD0);
  1477  001420  0ED0               	movlw	208
  1478  001422  ECFA  F00A         	call	_I2C_Write_Byte
  1479                           
  1480                           ;main.c: 125: I2C_Idle();
  1481  001426  ECF0  F00A         	call	_I2C_Idle	;wreg free
  1482                           
  1483                           ;main.c: 126: I2C_Write_Byte(pos_memoria);
  1484  00142A  0100               	movlb	0	; () banked
  1485  00142C  5161               	movf	read_RTC_I2c@pos_memoria& (0+255),w,b
  1486  00142E  ECFA  F00A         	call	_I2C_Write_Byte
  1487                           
  1488                           ;main.c: 127: I2C_Idle();
  1489  001432  ECF0  F00A         	call	_I2C_Idle	;wreg free
  1490                           
  1491                           ;main.c: 128: I2C_ReStart();
  1492  001436  EC2D  F00B         	call	_I2C_ReStart	;wreg free
  1493                           
  1494                           ;main.c: 129: I2C_Idle();
  1495  00143A  ECF0  F00A         	call	_I2C_Idle	;wreg free
  1496                           
  1497                           ;main.c: 130: I2C_Write_Byte(0xD1);
  1498  00143E  0ED1               	movlw	209
  1499  001440  ECFA  F00A         	call	_I2C_Write_Byte
  1500                           
  1501                           ;main.c: 131: I2C_Idle();
  1502  001444  ECF0  F00A         	call	_I2C_Idle	;wreg free
  1503                           
  1504                           ;main.c: 132: leitura = I2C_Read_Byte();
  1505  001448  EC17  F00B         	call	_I2C_Read_Byte	;wreg free
  1506  00144C  0100               	movlb	0	; () banked
  1507  00144E  6F92               	movwf	_leitura& (0+255),b
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;main.c: 133: I2C_Idle();
  1511  001450  ECF0  F00A         	call	_I2C_Idle	;wreg free
  1512                           
  1513                           ;main.c: 134: I2C_Send_NACK();
  1514  001454  EC11  F00B         	call	_I2C_Send_NACK	;wreg free
  1515                           
  1516                           ;main.c: 135: I2C_Stop();
  1517  001458  EC23  F00B         	call	_I2C_Stop	;wreg free
  1518  00145C  0012               	return		;funcret
  1519  00145E                     __end_of_read_RTC_I2c:
  1520                           	opt stack 0
  1521                           tblptru	equ	0xFF8
  1522                           tblptrh	equ	0xFF7
  1523                           tblptrl	equ	0xFF6
  1524                           tablat	equ	0xFF5
  1525                           postinc0	equ	0xFEE
  1526                           wreg	equ	0xFE8
  1527                           status	equ	0xFD8
  1528                           
  1529 ;; *************** function _I2C_Write_Byte *****************
  1530 ;; Defined at:
  1531 ;;		line 82 in file "i2c.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;  Byte            1    wreg     unsigned char 
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;  Byte            1    0[BANK0 ] unsigned char 
  1536 ;; Return value:  Size  Location     Type
  1537 ;;		None               void
  1538 ;; Registers used:
  1539 ;;		wreg
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1545 ;;      Params:         0       0       0       0       0       0       0       0       0
  1546 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1547 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1548 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1549 ;;Total ram usage:        1 bytes
  1550 ;; Hardware stack levels used:    1
  1551 ;; Hardware stack levels required when called:    3
  1552 ;; This function calls:
  1553 ;;		Nothing
  1554 ;; This function is called by:
  1555 ;;		_write_RTC_I2c
  1556 ;;		_read_RTC_I2c
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           	psect	text4
  1561  0015F4                     __ptext4:
  1562                           	opt stack 0
  1563  0015F4                     _I2C_Write_Byte:
  1564                           	opt stack 26
  1565                           
  1566                           ;incstack = 0
  1567                           ;I2C_Write_Byte@Byte stored from wreg
  1568  0015F4  0100               	movlb	0	; () banked
  1569  0015F6  6F60               	movwf	I2C_Write_Byte@Byte& (0+255),b
  1570                           
  1571                           ;i2c.c: 84: SSPBUF = Byte;
  1572  0015F8  C060  FFC9         	movff	I2C_Write_Byte@Byte,4041	;volatile
  1573  0015FC                     l107:
  1574  0015FC  A69E               	btfss	3998,3,c	;volatile
  1575  0015FE  D7FE               	goto	l107
  1576                           
  1577                           ;i2c.c: 86: SSPIF = 0;
  1578  001600  969E               	bcf	3998,3,c	;volatile
  1579                           
  1580                           ;i2c.c: 87: return SSPCON2bits.ACKSTAT;
  1581                           ;	Return value of _I2C_Write_Byte is never used
  1582  001602  50C5               	movf	4037,w,c	;volatile
  1583  001604  0012               	return		;funcret
  1584  001606                     __end_of_I2C_Write_Byte:
  1585                           	opt stack 0
  1586                           tblptru	equ	0xFF8
  1587                           tblptrh	equ	0xFF7
  1588                           tblptrl	equ	0xFF6
  1589                           tablat	equ	0xFF5
  1590                           postinc0	equ	0xFEE
  1591                           wreg	equ	0xFE8
  1592                           status	equ	0xFD8
  1593                           
  1594 ;; *************** function _I2C_Stop *****************
  1595 ;; Defined at:
  1596 ;;		line 62 in file "i2c.c"
  1597 ;; Parameters:    Size  Location     Type
  1598 ;;		None
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;		None
  1601 ;; Return value:  Size  Location     Type
  1602 ;;		None               void
  1603 ;; Registers used:
  1604 ;;		None
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 0/0
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1610 ;;      Params:         0       0       0       0       0       0       0       0       0
  1611 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1612 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1613 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1614 ;;Total ram usage:        0 bytes
  1615 ;; Hardware stack levels used:    1
  1616 ;; Hardware stack levels required when called:    3
  1617 ;; This function calls:
  1618 ;;		Nothing
  1619 ;; This function is called by:
  1620 ;;		_write_RTC_I2c
  1621 ;;		_read_RTC_I2c
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text5
  1626  001646                     __ptext5:
  1627                           	opt stack 0
  1628  001646                     _I2C_Stop:
  1629                           	opt stack 26
  1630                           
  1631                           ;i2c.c: 63: SSPCON2bits.PEN = 1;
  1632                           
  1633                           ;incstack = 0
  1634  001646  84C5               	bsf	4037,2,c	;volatile
  1635  001648                     l89:
  1636  001648  A69E               	btfss	3998,3,c	;volatile
  1637  00164A  D7FE               	goto	l89
  1638                           
  1639                           ;i2c.c: 65: SSPIF = 0;
  1640  00164C  969E               	bcf	3998,3,c	;volatile
  1641  00164E  0012               	return		;funcret
  1642  001650                     __end_of_I2C_Stop:
  1643                           	opt stack 0
  1644                           tblptru	equ	0xFF8
  1645                           tblptrh	equ	0xFF7
  1646                           tblptrl	equ	0xFF6
  1647                           tablat	equ	0xFF5
  1648                           postinc0	equ	0xFEE
  1649                           wreg	equ	0xFE8
  1650                           status	equ	0xFD8
  1651                           
  1652 ;; *************** function _I2C_Start *****************
  1653 ;; Defined at:
  1654 ;;		line 48 in file "i2c.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;		None
  1657 ;; Auto vars:     Size  Location     Type
  1658 ;;		None
  1659 ;; Return value:  Size  Location     Type
  1660 ;;		None               void
  1661 ;; Registers used:
  1662 ;;		None
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1668 ;;      Params:         0       0       0       0       0       0       0       0       0
  1669 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1670 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1671 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1672 ;;Total ram usage:        0 bytes
  1673 ;; Hardware stack levels used:    1
  1674 ;; Hardware stack levels required when called:    3
  1675 ;; This function calls:
  1676 ;;		Nothing
  1677 ;; This function is called by:
  1678 ;;		_write_RTC_I2c
  1679 ;;		_read_RTC_I2c
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           	psect	text6
  1684  001650                     __ptext6:
  1685                           	opt stack 0
  1686  001650                     _I2C_Start:
  1687                           	opt stack 26
  1688                           
  1689                           ;i2c.c: 50: SSPCON2bits.SEN = 1;
  1690                           
  1691                           ;incstack = 0
  1692  001650  80C5               	bsf	4037,0,c	;volatile
  1693  001652                     l77:
  1694  001652  A69E               	btfss	3998,3,c	;volatile
  1695  001654  D7FE               	goto	l77
  1696                           
  1697                           ;i2c.c: 52: SSPIF = 0;
  1698  001656  969E               	bcf	3998,3,c	;volatile
  1699  001658  0012               	return		;funcret
  1700  00165A                     __end_of_I2C_Start:
  1701                           	opt stack 0
  1702                           tblptru	equ	0xFF8
  1703                           tblptrh	equ	0xFF7
  1704                           tblptrl	equ	0xFF6
  1705                           tablat	equ	0xFF5
  1706                           postinc0	equ	0xFEE
  1707                           wreg	equ	0xFE8
  1708                           status	equ	0xFD8
  1709                           
  1710 ;; *************** function _I2C_Send_NACK *****************
  1711 ;; Defined at:
  1712 ;;		line 75 in file "i2c.c"
  1713 ;; Parameters:    Size  Location     Type
  1714 ;;		None
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;		None
  1717 ;; Return value:  Size  Location     Type
  1718 ;;		None               void
  1719 ;; Registers used:
  1720 ;;		None
  1721 ;; Tracked objects:
  1722 ;;		On entry : 0/0
  1723 ;;		On exit  : 0/0
  1724 ;;		Unchanged: 0/0
  1725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1726 ;;      Params:         0       0       0       0       0       0       0       0       0
  1727 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1728 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1729 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1730 ;;Total ram usage:        0 bytes
  1731 ;; Hardware stack levels used:    1
  1732 ;; Hardware stack levels required when called:    3
  1733 ;; This function calls:
  1734 ;;		Nothing
  1735 ;; This function is called by:
  1736 ;;		_read_RTC_I2c
  1737 ;; This function uses a non-reentrant model
  1738 ;;
  1739                           
  1740                           	psect	text7
  1741  001622                     __ptext7:
  1742                           	opt stack 0
  1743  001622                     _I2C_Send_NACK:
  1744                           	opt stack 26
  1745                           
  1746                           ;i2c.c: 76: SSPCON2bits.ACKDT = 1;
  1747                           
  1748                           ;incstack = 0
  1749  001622  8AC5               	bsf	4037,5,c	;volatile
  1750                           
  1751                           ;i2c.c: 77: SSPCON2bits.ACKEN = 1;
  1752  001624  88C5               	bsf	4037,4,c	;volatile
  1753  001626                     l101:
  1754  001626  A69E               	btfss	3998,3,c	;volatile
  1755  001628  D7FE               	goto	l101
  1756                           
  1757                           ;i2c.c: 79: SSPIF = 0;
  1758  00162A  969E               	bcf	3998,3,c	;volatile
  1759  00162C  0012               	return		;funcret
  1760  00162E                     __end_of_I2C_Send_NACK:
  1761                           	opt stack 0
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           status	equ	0xFD8
  1769                           
  1770 ;; *************** function _I2C_Read_Byte *****************
  1771 ;; Defined at:
  1772 ;;		line 90 in file "i2c.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;		None
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;		None
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  1    wreg      unsigned char 
  1779 ;; Registers used:
  1780 ;;		wreg, status,2
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : 0/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1786 ;;      Params:         0       0       0       0       0       0       0       0       0
  1787 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1788 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1789 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1790 ;;Total ram usage:        0 bytes
  1791 ;; Hardware stack levels used:    1
  1792 ;; Hardware stack levels required when called:    3
  1793 ;; This function calls:
  1794 ;;		Nothing
  1795 ;; This function is called by:
  1796 ;;		_read_RTC_I2c
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800                           	psect	text8
  1801  00162E                     __ptext8:
  1802                           	opt stack 0
  1803  00162E                     _I2C_Read_Byte:
  1804                           	opt stack 26
  1805                           
  1806                           ;i2c.c: 92: SSPCON2bits.RCEN = 1;
  1807                           
  1808                           ;incstack = 0
  1809  00162E  86C5               	bsf	4037,3,c	;volatile
  1810  001630                     l113:
  1811  001630  A69E               	btfss	3998,3,c	;volatile
  1812  001632  D7FE               	goto	l113
  1813                           
  1814                           ;i2c.c: 94: SSPIF = 0;
  1815  001634  969E               	bcf	3998,3,c	;volatile
  1816                           
  1817                           ;i2c.c: 96: return SSPBUF;
  1818  001636  50C9               	movf	4041,w,c	;volatile
  1819  001638  0012               	return	
  1820  00163A                     __end_of_I2C_Read_Byte:
  1821                           	opt stack 0
  1822                           tblptru	equ	0xFF8
  1823                           tblptrh	equ	0xFF7
  1824                           tblptrl	equ	0xFF6
  1825                           tablat	equ	0xFF5
  1826                           postinc0	equ	0xFEE
  1827                           wreg	equ	0xFE8
  1828                           status	equ	0xFD8
  1829                           
  1830 ;; *************** function _I2C_ReStart *****************
  1831 ;; Defined at:
  1832 ;;		line 55 in file "i2c.c"
  1833 ;; Parameters:    Size  Location     Type
  1834 ;;		None
  1835 ;; Auto vars:     Size  Location     Type
  1836 ;;		None
  1837 ;; Return value:  Size  Location     Type
  1838 ;;		None               void
  1839 ;; Registers used:
  1840 ;;		None
  1841 ;; Tracked objects:
  1842 ;;		On entry : 0/0
  1843 ;;		On exit  : 0/0
  1844 ;;		Unchanged: 0/0
  1845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1846 ;;      Params:         0       0       0       0       0       0       0       0       0
  1847 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1848 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1849 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1850 ;;Total ram usage:        0 bytes
  1851 ;; Hardware stack levels used:    1
  1852 ;; Hardware stack levels required when called:    3
  1853 ;; This function calls:
  1854 ;;		Nothing
  1855 ;; This function is called by:
  1856 ;;		_read_RTC_I2c
  1857 ;; This function uses a non-reentrant model
  1858 ;;
  1859                           
  1860                           	psect	text9
  1861  00165A                     __ptext9:
  1862                           	opt stack 0
  1863  00165A                     _I2C_ReStart:
  1864                           	opt stack 26
  1865                           
  1866                           ;i2c.c: 57: SSPCON2bits.RSEN = 1;
  1867                           
  1868                           ;incstack = 0
  1869  00165A  82C5               	bsf	4037,1,c	;volatile
  1870  00165C                     l83:
  1871  00165C  A69E               	btfss	3998,3,c	;volatile
  1872  00165E  D7FE               	goto	l83
  1873                           
  1874                           ;i2c.c: 59: SSPIF = 0;
  1875  001660  969E               	bcf	3998,3,c	;volatile
  1876  001662  0012               	return		;funcret
  1877  001664                     __end_of_I2C_ReStart:
  1878                           	opt stack 0
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           status	equ	0xFD8
  1886                           
  1887 ;; *************** function _I2C_Idle *****************
  1888 ;; Defined at:
  1889 ;;		line 99 in file "i2c.c"
  1890 ;; Parameters:    Size  Location     Type
  1891 ;;		None
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;		None
  1894 ;; Return value:  Size  Location     Type
  1895 ;;		None               void
  1896 ;; Registers used:
  1897 ;;		wreg, status,2, status,0
  1898 ;; Tracked objects:
  1899 ;;		On entry : 0/0
  1900 ;;		On exit  : 0/0
  1901 ;;		Unchanged: 0/0
  1902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1903 ;;      Params:         0       0       0       0       0       0       0       0       0
  1904 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1905 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1906 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1907 ;;Total ram usage:        1 bytes
  1908 ;; Hardware stack levels used:    1
  1909 ;; Hardware stack levels required when called:    3
  1910 ;; This function calls:
  1911 ;;		Nothing
  1912 ;; This function is called by:
  1913 ;;		_write_RTC_I2c
  1914 ;;		_read_RTC_I2c
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           	psect	text10
  1919  0015E0                     __ptext10:
  1920                           	opt stack 0
  1921  0015E0                     _I2C_Idle:
  1922                           	opt stack 26
  1923  0015E0                     l2354:
  1924  0015E0  CFC5 F060          	movff	4037,??_I2C_Idle	;volatile
  1925  0015E4  0E1F               	movlw	31
  1926  0015E6  0100               	movlb	0	; () banked
  1927  0015E8  1760               	andwf	??_I2C_Idle& (0+255),f,b
  1928  0015EA  A4D8               	btfss	status,2,c
  1929  0015EC  D7F9               	goto	l2354
  1930                           
  1931                           ; BSR set to: 0
  1932  0015EE  A4C7               	btfss	4039,2,c	;volatile
  1933  0015F0  0012               	return	
  1934  0015F2  D7F6               	goto	l2354
  1935  0015F4                     __end_of_I2C_Idle:
  1936                           	opt stack 0
  1937                           tblptru	equ	0xFF8
  1938                           tblptrh	equ	0xFF7
  1939                           tblptrl	equ	0xFF6
  1940                           tablat	equ	0xFF5
  1941                           postinc0	equ	0xFEE
  1942                           wreg	equ	0xFE8
  1943                           status	equ	0xFD8
  1944                           
  1945 ;; *************** function _printf *****************
  1946 ;; Defined at:
  1947 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  1950 ;;		 -> STR_3(2), STR_2(38), STR_1(3), 
  1951 ;; Auto vars:     Size  Location     Type
  1952 ;;  idx             1   34[BANK0 ] unsigned char 
  1953 ;;  tmpval          4    0        struct .
  1954 ;;  cp              3    0        PTR const unsigned char 
  1955 ;;  width           2   41[BANK0 ] int 
  1956 ;;  val             2   38[BANK0 ] unsigned int 
  1957 ;;  ap              2   35[BANK0 ] PTR void [1]
  1958 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1959 ;;  len             2    0        unsigned int 
  1960 ;;  c               1   43[BANK0 ] char 
  1961 ;;  flag            1   40[BANK0 ] unsigned char 
  1962 ;;  prec            1   37[BANK0 ] char 
  1963 ;; Return value:  Size  Location     Type
  1964 ;;                  2   12[BANK0 ] int 
  1965 ;; Registers used:
  1966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1967 ;; Tracked objects:
  1968 ;;		On entry : 0/0
  1969 ;;		On exit  : 0/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1972 ;;      Params:         0      18       0       0       0       0       0       0       0
  1973 ;;      Locals:         0      10       0       0       0       0       0       0       0
  1974 ;;      Temps:          0       4       0       0       0       0       0       0       0
  1975 ;;      Totals:         0      32       0       0       0       0       0       0       0
  1976 ;;Total ram usage:       32 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:    4
  1979 ;; This function calls:
  1980 ;;		___lwdiv
  1981 ;;		___lwmod
  1982 ;;		___wmul
  1983 ;;		_isdigit
  1984 ;;		_putch
  1985 ;; This function is called by:
  1986 ;;		_main
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           	psect	text11
  1991  000850                     __ptext11:
  1992                           	opt stack 0
  1993  000850                     _printf:
  1994                           	opt stack 26
  1995                           
  1996                           ;doprnt.c: 466: va_list ap;
  1997                           ;doprnt.c: 499: signed char c;
  1998                           ;doprnt.c: 501: int width;
  1999                           ;doprnt.c: 506: signed char prec;
  2000                           ;doprnt.c: 508: unsigned char flag;
  2001                           ;doprnt.c: 523: union {
  2002                           ;doprnt.c: 524: unsigned long vd;
  2003                           ;doprnt.c: 525: double integ;
  2004                           ;doprnt.c: 526: } tmpval;
  2005                           ;doprnt.c: 528: unsigned int val;
  2006                           ;doprnt.c: 529: unsigned len;
  2007                           ;doprnt.c: 530: const char * cp;
  2008                           ;doprnt.c: 533: *ap = __va_start();
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;incstack = 0
  2012  000850  0E6E               	movlw	low (?_printf+2)
  2013  000852  0100               	movlb	0	; () banked
  2014  000854  6F83               	movwf	printf@ap& (0+255),b
  2015  000856  0E00               	movlw	high (?_printf+2)
  2016  000858  0100               	movlb	0	; () banked
  2017  00085A  6F84               	movwf	(printf@ap+1)& (0+255),b
  2018                           
  2019                           ;doprnt.c: 536: while(c = *f++) {
  2020  00085C  D187               	goto	l2590
  2021  00085E                     l2488:
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;doprnt.c: 538: if(c != '%')
  2025  00085E  0E25               	movlw	37
  2026  000860  0100               	movlb	0	; () banked
  2027  000862  198B               	xorwf	printf@c& (0+255),w,b
  2028  000864  B4D8               	btfsc	status,2,c
  2029  000866  D005               	goto	l2492
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;doprnt.c: 540: {
  2033                           ;doprnt.c: 541: (putch(c) );
  2034  000868  0100               	movlb	0	; () banked
  2035  00086A  518B               	movf	printf@c& (0+255),w,b
  2036  00086C  EC03  F00B         	call	_putch
  2037                           
  2038                           ;doprnt.c: 542: continue;
  2039  000870  D17D               	goto	l2590
  2040  000872                     l2492:
  2041                           
  2042                           ;doprnt.c: 543: }
  2043                           ;doprnt.c: 546: width = 0;
  2044  000872  0E00               	movlw	0
  2045  000874  0100               	movlb	0	; () banked
  2046  000876  6F8A               	movwf	(printf@width+1)& (0+255),b
  2047  000878  0E00               	movlw	0
  2048  00087A  6F89               	movwf	printf@width& (0+255),b
  2049                           
  2050                           ;doprnt.c: 548: flag = 0;
  2051  00087C  0E00               	movlw	0
  2052  00087E  0100               	movlb	0	; () banked
  2053  000880  6F88               	movwf	printf@flag& (0+255),b
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;doprnt.c: 551: switch(*f) {
  2057                           
  2058                           ;doprnt.c: 550: for(;;) {
  2059  000882  D005               	goto	l2498
  2060  000884                     l2494:
  2061                           
  2062                           ;doprnt.c: 580: flag |= 0x04;
  2063  000884  0100               	movlb	0	; () banked
  2064  000886  8588               	bsf	printf@flag& (0+255),2,b
  2065                           
  2066                           ;doprnt.c: 581: f++;
  2067  000888  0100               	movlb	0	; () banked
  2068  00088A  4B6C               	infsnz	printf@f& (0+255),f,b
  2069  00088C  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2070  00088E                     l2498:
  2071  00088E  C06C  FFF6         	movff	printf@f,tblptrl
  2072  000892  C06D  FFF7         	movff	printf@f+1,tblptrh
  2073  000896                     	if	0	;tblptru may be non-zero
  2074  000896                     	endif
  2075  000896                     	if	0	;tblptru may be non-zero
  2076  000896                     	endif
  2077  000896  0008               	tblrd		*
  2078  000898  50F5               	movf	tablat,w,c
  2079                           
  2080                           ; Switch size 1, requested type "space"
  2081                           ; Number of cases is 1, Range of values is 48 to 48
  2082                           ; switch strategies available:
  2083                           ; Name         Instructions Cycles
  2084                           ; simple_byte            4     3 (average)
  2085                           ;	Chosen strategy is simple_byte
  2086  00089A  0A30               	xorlw	48	; case 48
  2087  00089C  B4D8               	btfsc	status,2,c
  2088  00089E  D7F2               	goto	l2494
  2089                           
  2090                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2091                           
  2092                           ;doprnt.c: 586: }
  2093                           
  2094                           ;doprnt.c: 585: break;
  2095  0008A0  C06C  FFF6         	movff	printf@f,tblptrl
  2096  0008A4  C06D  FFF7         	movff	printf@f+1,tblptrh
  2097  0008A8                     	if	0	;tblptru may be non-zero
  2098  0008A8                     	endif
  2099  0008A8                     	if	0	;tblptru may be non-zero
  2100  0008A8                     	endif
  2101  0008A8  0008               	tblrd		*
  2102  0008AA  50F5               	movf	tablat,w,c
  2103  0008AC  EC82  F00A         	call	_isdigit
  2104  0008B0  A0D8               	btfss	status,0,c
  2105  0008B2  D048               	goto	l2518
  2106                           
  2107                           ;doprnt.c: 598: width = 0;
  2108  0008B4  0E00               	movlw	0
  2109  0008B6  0100               	movlb	0	; () banked
  2110  0008B8  6F8A               	movwf	(printf@width+1)& (0+255),b
  2111  0008BA  0E00               	movlw	0
  2112  0008BC  6F89               	movwf	printf@width& (0+255),b
  2113  0008BE                     l2504:
  2114                           
  2115                           ;doprnt.c: 600: width *= 10;
  2116  0008BE  C089  F060         	movff	printf@width,___wmul@multiplier
  2117  0008C2  C08A  F061         	movff	printf@width+1,___wmul@multiplier+1
  2118  0008C6  0E00               	movlw	0
  2119  0008C8  0100               	movlb	0	; () banked
  2120  0008CA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2121  0008CC  0E0A               	movlw	10
  2122  0008CE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2123  0008D0  EC50  F00A         	call	___wmul	;wreg free
  2124  0008D4  C060  F089         	movff	?___wmul,printf@width
  2125  0008D8  C061  F08A         	movff	?___wmul+1,printf@width+1
  2126                           
  2127                           ;doprnt.c: 601: width += *f++ - '0';
  2128  0008DC  0ED0               	movlw	208
  2129  0008DE  0100               	movlb	0	; () banked
  2130  0008E0  6F7E               	movwf	??_printf& (0+255),b
  2131  0008E2  0EFF               	movlw	255
  2132  0008E4  0100               	movlb	0	; () banked
  2133  0008E6  6F7F               	movwf	(??_printf+1)& (0+255),b
  2134  0008E8  C06C  FFF6         	movff	printf@f,tblptrl
  2135  0008EC  C06D  FFF7         	movff	printf@f+1,tblptrh
  2136  0008F0                     	if	0	;tblptru may be non-zero
  2137  0008F0                     	endif
  2138  0008F0                     	if	0	;tblptru may be non-zero
  2139  0008F0                     	endif
  2140  0008F0  0008               	tblrd		*
  2141  0008F2  50F5               	movf	tablat,w,c
  2142  0008F4  0100               	movlb	0	; () banked
  2143  0008F6  6F80               	movwf	(??_printf+2)& (0+255),b
  2144  0008F8  6B81               	clrf	(??_printf+3)& (0+255),b
  2145  0008FA  0100               	movlb	0	; () banked
  2146  0008FC  517E               	movf	??_printf& (0+255),w,b
  2147  0008FE  0100               	movlb	0	; () banked
  2148  000900  2780               	addwf	(??_printf+2)& (0+255),f,b
  2149  000902  0100               	movlb	0	; () banked
  2150  000904  517F               	movf	(??_printf+1)& (0+255),w,b
  2151  000906  0100               	movlb	0	; () banked
  2152  000908  2381               	addwfc	(??_printf+3)& (0+255),f,b
  2153  00090A  0100               	movlb	0	; () banked
  2154  00090C  5180               	movf	(??_printf+2)& (0+255),w,b
  2155  00090E  0100               	movlb	0	; () banked
  2156  000910  2789               	addwf	printf@width& (0+255),f,b
  2157  000912  0100               	movlb	0	; () banked
  2158  000914  5181               	movf	(??_printf+3)& (0+255),w,b
  2159  000916  0100               	movlb	0	; () banked
  2160  000918  238A               	addwfc	(printf@width+1)& (0+255),f,b
  2161                           
  2162                           ; BSR set to: 0
  2163  00091A  0100               	movlb	0	; () banked
  2164  00091C  4B6C               	infsnz	printf@f& (0+255),f,b
  2165  00091E  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2169  000920  C06C  FFF6         	movff	printf@f,tblptrl
  2170  000924  C06D  FFF7         	movff	printf@f+1,tblptrh
  2171  000928                     	if	0	;tblptru may be non-zero
  2172  000928                     	endif
  2173  000928                     	if	0	;tblptru may be non-zero
  2174  000928                     	endif
  2175  000928  0008               	tblrd		*
  2176  00092A  50F5               	movf	tablat,w,c
  2177  00092C  EC82  F00A         	call	_isdigit
  2178  000930  A0D8               	btfss	status,0,c
  2179  000932  D008               	goto	l2518
  2180  000934  D7C4               	goto	l2504
  2181  000936                     l2512:
  2182                           
  2183                           ;doprnt.c: 718: case 'x':
  2184                           ;doprnt.c: 721: flag |= 0x80;
  2185  000936  0100               	movlb	0	; () banked
  2186  000938  8F88               	bsf	printf@flag& (0+255),7,b
  2187                           
  2188                           ;doprnt.c: 723: break;
  2189  00093A  D01D               	goto	l2520
  2190  00093C                     l2514:
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;doprnt.c: 818: flag |= 0xC0;
  2194  00093C  0EC0               	movlw	192
  2195  00093E  0100               	movlb	0	; () banked
  2196  000940  1388               	iorwf	printf@flag& (0+255),f,b
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;doprnt.c: 822: }
  2200                           
  2201                           ;doprnt.c: 819: break;
  2202  000942  D019               	goto	l2520
  2203  000944                     l2518:
  2204  000944  C06C  FFF6         	movff	printf@f,tblptrl
  2205  000948  C06D  FFF7         	movff	printf@f+1,tblptrh
  2206  00094C  0100               	movlb	0	; () banked
  2207  00094E  4B6C               	infsnz	printf@f& (0+255),f,b
  2208  000950  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2209  000952                     	if	0	;tblptru may be non-zero
  2210  000952                     	endif
  2211  000952                     	if	0	;tblptru may be non-zero
  2212  000952                     	endif
  2213  000952  0008               	tblrd		*
  2214  000954  CFF5 F08B          	movff	tablat,printf@c
  2215  000958  0100               	movlb	0	; () banked
  2216  00095A  518B               	movf	printf@c& (0+255),w,b
  2217                           
  2218                           ; Switch size 1, requested type "space"
  2219                           ; Number of cases is 4, Range of values is 0 to 120
  2220                           ; switch strategies available:
  2221                           ; Name         Instructions Cycles
  2222                           ; simple_byte           13     7 (average)
  2223                           ;	Chosen strategy is simple_byte
  2224  00095C  0A00               	xorlw	0	; case 0
  2225  00095E  B4D8               	btfsc	status,2,c
  2226  000960  0012               	return	
  2227  000962  0A58               	xorlw	88	; case 88
  2228  000964  B4D8               	btfsc	status,2,c
  2229  000966  D7E7               	goto	l2512
  2230  000968  0A2D               	xorlw	45	; case 117
  2231  00096A  B4D8               	btfsc	status,2,c
  2232  00096C  D7E7               	goto	l2514
  2233  00096E  0A0D               	xorlw	13	; case 120
  2234  000970  B4D8               	btfsc	status,2,c
  2235  000972  D7E1               	goto	l2512
  2236  000974  D0FB               	goto	l2590
  2237  000976                     l2520:
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;doprnt.c: 1273: {
  2241                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2242  000976  C083  FFD9         	movff	printf@ap,fsr2l
  2243  00097A  C084  FFDA         	movff	printf@ap+1,fsr2h
  2244  00097E  CFDE F086          	movff	postinc2,printf@val
  2245  000982  CFDD F087          	movff	postdec2,printf@val+1
  2246                           
  2247                           ; BSR set to: 0
  2248  000986  0E02               	movlw	2
  2249  000988  0100               	movlb	0	; () banked
  2250  00098A  2783               	addwf	printf@ap& (0+255),f,b
  2251  00098C  0E00               	movlw	0
  2252  00098E  2384               	addwfc	(printf@ap+1)& (0+255),f,b
  2253                           
  2254                           ;doprnt.c: 1287: }
  2255                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2256  000990  D03C               	goto	l2554
  2257  000992                     l2524:
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2261  000992  0E01               	movlw	1
  2262  000994  0100               	movlb	0	; () banked
  2263  000996  6F8B               	movwf	printf@c& (0+255),b
  2264  000998                     l2526:
  2265                           
  2266                           ; BSR set to: 0
  2267  000998  0E05               	movlw	5
  2268  00099A  0100               	movlb	0	; () banked
  2269  00099C  198B               	xorwf	printf@c& (0+255),w,b
  2270  00099E  B4D8               	btfsc	status,2,c
  2271  0009A0  D03D               	goto	l2556
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;doprnt.c: 1306: if(val < dpowers[c])
  2275                           
  2276                           ; BSR set to: 0
  2277                           
  2278                           ; BSR set to: 0
  2279  0009A2  0100               	movlb	0	; () banked
  2280  0009A4  518B               	movf	printf@c& (0+255),w,b
  2281  0009A6  0D02               	mullw	2
  2282  0009A8  0E01               	movlw	low _dpowers
  2283  0009AA  24F3               	addwf	prodl,w,c
  2284  0009AC  6EF6               	movwf	tblptrl,c
  2285  0009AE  0E08               	movlw	high _dpowers
  2286  0009B0  20F4               	addwfc	prodh,w,c
  2287  0009B2  6EF7               	movwf	tblptrh,c
  2288  0009B4                     	if	0	;There are less than 3 active tblptr bytes
  2289  0009B4                     	endif
  2290  0009B4  0009               	tblrd		*+
  2291  0009B6  50F5               	movf	tablat,w,c
  2292  0009B8  0100               	movlb	0	; () banked
  2293  0009BA  5D86               	subwf	printf@val& (0+255),w,b
  2294  0009BC  0009               	tblrd		*+
  2295  0009BE  50F5               	movf	tablat,w,c
  2296  0009C0  0100               	movlb	0	; () banked
  2297  0009C2  5987               	subwfb	(printf@val+1)& (0+255),w,b
  2298  0009C4  A0D8               	btfss	status,0,c
  2299  0009C6  D02A               	goto	l2556
  2300                           
  2301                           ; BSR set to: 0
  2302                           
  2303                           ; BSR set to: 0
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;doprnt.c: 1307: break;
  2307  0009C8  0100               	movlb	0	; () banked
  2308  0009CA  2B8B               	incf	printf@c& (0+255),f,b
  2309  0009CC  D7E5               	goto	l2526
  2310  0009CE                     l2538:
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2314  0009CE  0E01               	movlw	1
  2315  0009D0  0100               	movlb	0	; () banked
  2316  0009D2  6F8B               	movwf	printf@c& (0+255),b
  2317  0009D4                     l2540:
  2318                           
  2319                           ; BSR set to: 0
  2320  0009D4  0E04               	movlw	4
  2321  0009D6  0100               	movlb	0	; () banked
  2322  0009D8  198B               	xorwf	printf@c& (0+255),w,b
  2323  0009DA  B4D8               	btfsc	status,2,c
  2324  0009DC  D01F               	goto	l2556
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2328                           
  2329                           ; BSR set to: 0
  2330                           
  2331                           ; BSR set to: 0
  2332  0009DE  0100               	movlb	0	; () banked
  2333  0009E0  518B               	movf	printf@c& (0+255),w,b
  2334  0009E2  0D02               	mullw	2
  2335  0009E4  0E0B               	movlw	low _hexpowers
  2336  0009E6  24F3               	addwf	prodl,w,c
  2337  0009E8  6EF6               	movwf	tblptrl,c
  2338  0009EA  0E08               	movlw	high _hexpowers
  2339  0009EC  20F4               	addwfc	prodh,w,c
  2340  0009EE  6EF7               	movwf	tblptrh,c
  2341  0009F0                     	if	0	;There are less than 3 active tblptr bytes
  2342  0009F0                     	endif
  2343  0009F0  0009               	tblrd		*+
  2344  0009F2  50F5               	movf	tablat,w,c
  2345  0009F4  0100               	movlb	0	; () banked
  2346  0009F6  5D86               	subwf	printf@val& (0+255),w,b
  2347  0009F8  0009               	tblrd		*+
  2348  0009FA  50F5               	movf	tablat,w,c
  2349  0009FC  0100               	movlb	0	; () banked
  2350  0009FE  5987               	subwfb	(printf@val+1)& (0+255),w,b
  2351  000A00  A0D8               	btfss	status,0,c
  2352  000A02  D00C               	goto	l2556
  2353                           
  2354                           ; BSR set to: 0
  2355                           
  2356                           ; BSR set to: 0
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;doprnt.c: 1318: break;
  2360  000A04  0100               	movlb	0	; () banked
  2361  000A06  2B8B               	incf	printf@c& (0+255),f,b
  2362  000A08  D7E5               	goto	l2540
  2363  000A0A                     l2554:
  2364                           
  2365                           ; BSR set to: 0
  2366  000A0A  0100               	movlb	0	; () banked
  2367  000A0C  5188               	movf	printf@flag& (0+255),w,b
  2368  000A0E  0BC0               	andlw	192
  2369                           
  2370                           ; Switch size 1, requested type "space"
  2371                           ; Number of cases is 2, Range of values is 128 to 192
  2372                           ; switch strategies available:
  2373                           ; Name         Instructions Cycles
  2374                           ; simple_byte            7     4 (average)
  2375                           ;	Chosen strategy is simple_byte
  2376  000A10  0A80               	xorlw	128	; case 128
  2377  000A12  B4D8               	btfsc	status,2,c
  2378  000A14  D7DC               	goto	l2538
  2379  000A16  0A40               	xorlw	64	; case 192
  2380  000A18  B4D8               	btfsc	status,2,c
  2381  000A1A  D7BB               	goto	l2524
  2382  000A1C                     l2556:
  2383                           
  2384                           ; BSR set to: 0
  2385                           ;doprnt.c: 1381: if(width > c)
  2386  000A1C  0E80               	movlw	128
  2387  000A1E  0100               	movlb	0	; () banked
  2388  000A20  BF8B               	btfsc	printf@c& (0+255),7,b
  2389  000A22  0E7F               	movlw	127
  2390  000A24  0100               	movlb	0	; () banked
  2391  000A26  6F7E               	movwf	??_printf& (0+255),b
  2392  000A28  0100               	movlb	0	; () banked
  2393  000A2A  5189               	movf	printf@width& (0+255),w,b
  2394  000A2C  0100               	movlb	0	; () banked
  2395  000A2E  5D8B               	subwf	printf@c& (0+255),w,b
  2396  000A30  0100               	movlb	0	; () banked
  2397  000A32  518A               	movf	(printf@width+1)& (0+255),w,b
  2398  000A34  0A80               	xorlw	128
  2399  000A36  0100               	movlb	0	; () banked
  2400  000A38  597E               	subwfb	??_printf& (0+255),w,b
  2401  000A3A  B0D8               	btfsc	status,0,c
  2402  000A3C  D00B               	goto	l2560
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;doprnt.c: 1382: width -= c;
  2406  000A3E  0100               	movlb	0	; () banked
  2407  000A40  518B               	movf	printf@c& (0+255),w,b
  2408  000A42  0100               	movlb	0	; () banked
  2409  000A44  5F89               	subwf	printf@width& (0+255),f,b
  2410  000A46  0E00               	movlw	0
  2411  000A48  0100               	movlb	0	; () banked
  2412  000A4A  BF8B               	btfsc	printf@c& (0+255),7,b
  2413  000A4C  0EFF               	movlw	255
  2414  000A4E  0100               	movlb	0	; () banked
  2415  000A50  5B8A               	subwfb	(printf@width+1)& (0+255),f,b
  2416  000A52  D005               	goto	l2562
  2417  000A54                     l2560:
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;doprnt.c: 1383: else
  2421                           ;doprnt.c: 1384: width = 0;
  2422  000A54  0E00               	movlw	0
  2423  000A56  0100               	movlb	0	; () banked
  2424  000A58  6F8A               	movwf	(printf@width+1)& (0+255),b
  2425  000A5A  0E00               	movlw	0
  2426  000A5C  6F89               	movwf	printf@width& (0+255),b
  2427  000A5E                     l2562:
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;doprnt.c: 1387: if(flag & 0x04) {
  2431  000A5E  0100               	movlb	0	; () banked
  2432  000A60  A588               	btfss	printf@flag& (0+255),2,b
  2433  000A62  D00E               	goto	l2570
  2434  000A64                     
  2435                           ; BSR set to: 0
  2436                           ;doprnt.c: 1415: if(width)
  2437  000A64  0100               	movlb	0	; () banked
  2438  000A66  5189               	movf	printf@width& (0+255),w,b
  2439  000A68  0100               	movlb	0	; () banked
  2440  000A6A  118A               	iorwf	(printf@width+1)& (0+255),w,b
  2441  000A6C  B4D8               	btfsc	status,2,c
  2442  000A6E  D01B               	goto	l367
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;doprnt.c: 1417: (putch('0') );
  2446                           
  2447                           ; BSR set to: 0
  2448                           
  2449                           ;doprnt.c: 1416: do
  2450  000A70  0E30               	movlw	48
  2451  000A72  EC03  F00B         	call	_putch
  2452                           
  2453                           ;doprnt.c: 1418: while(--width);
  2454  000A76  0100               	movlb	0	; () banked
  2455  000A78  0789               	decf	printf@width& (0+255),f,b
  2456  000A7A  A0D8               	btfss	status,0,c
  2457  000A7C  078A               	decf	(printf@width+1)& (0+255),f,b
  2458  000A7E  D7F2               	goto	L1
  2459  000A80                     l2570:
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;doprnt.c: 1422: {
  2463                           ;doprnt.c: 1424: if(width
  2464                           ;doprnt.c: 1428: )
  2465  000A80  0100               	movlb	0	; () banked
  2466  000A82  5189               	movf	printf@width& (0+255),w,b
  2467  000A84  0100               	movlb	0	; () banked
  2468  000A86  118A               	iorwf	(printf@width+1)& (0+255),w,b
  2469  000A88  B4D8               	btfsc	status,2,c
  2470  000A8A  D00D               	goto	l367
  2471  000A8C                     l2572:
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;doprnt.c: 1430: (putch(' ') );
  2475  000A8C  0E20               	movlw	32
  2476  000A8E  EC03  F00B         	call	_putch
  2477                           
  2478                           ;doprnt.c: 1431: while(--width);
  2479  000A92  0100               	movlb	0	; () banked
  2480  000A94  0789               	decf	printf@width& (0+255),f,b
  2481  000A96  A0D8               	btfss	status,0,c
  2482  000A98  078A               	decf	(printf@width+1)& (0+255),f,b
  2483  000A9A  0100               	movlb	0	; () banked
  2484  000A9C  5189               	movf	printf@width& (0+255),w,b
  2485  000A9E  0100               	movlb	0	; () banked
  2486  000AA0  118A               	iorwf	(printf@width+1)& (0+255),w,b
  2487  000AA2  A4D8               	btfss	status,2,c
  2488  000AA4  D7F3               	goto	l2572
  2489  000AA6                     l367:
  2490                           
  2491                           ; BSR set to: 0
  2492                           ;doprnt.c: 1469: }
  2493                           ;doprnt.c: 1472: prec = c;
  2494  000AA6  C08B  F085         	movff	printf@c,printf@prec
  2495                           
  2496                           ;doprnt.c: 1474: while(prec--) {
  2497  000AAA  D05A               	goto	l2588
  2498  000AAC                     l2576:
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2502  000AAC  0100               	movlb	0	; () banked
  2503  000AAE  5185               	movf	printf@prec& (0+255),w,b
  2504  000AB0  0D02               	mullw	2
  2505  000AB2  0E01               	movlw	low _dpowers
  2506  000AB4  24F3               	addwf	prodl,w,c
  2507  000AB6  6EF6               	movwf	tblptrl,c
  2508  000AB8  0E08               	movlw	high _dpowers
  2509  000ABA  20F4               	addwfc	prodh,w,c
  2510  000ABC  6EF7               	movwf	tblptrh,c
  2511  000ABE                     	if	0	;There are less than 3 active tblptr bytes
  2512  000ABE                     	endif
  2513  000ABE  0009               	tblrd		*+
  2514  000AC0  CFF5 F062          	movff	tablat,___lwdiv@divisor
  2515  000AC4  000A               	tblrd		*-
  2516  000AC6  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  2517  000ACA  C086  F060         	movff	printf@val,___lwdiv@dividend
  2518  000ACE  C087  F061         	movff	printf@val+1,___lwdiv@dividend+1
  2519  000AD2  ECDB  F008         	call	___lwdiv	;wreg free
  2520  000AD6  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  2521  000ADA  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  2522  000ADE  0E00               	movlw	0
  2523  000AE0  0100               	movlb	0	; () banked
  2524  000AE2  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  2525  000AE4  0E0A               	movlw	10
  2526  000AE6  6F69               	movwf	___lwmod@divisor& (0+255),b
  2527  000AE8  EC85  F009         	call	___lwmod	;wreg free
  2528  000AEC  0100               	movlb	0	; () banked
  2529  000AEE  5167               	movf	?___lwmod& (0+255),w,b
  2530  000AF0  0F30               	addlw	48
  2531  000AF2  0100               	movlb	0	; () banked
  2532  000AF4  6F8B               	movwf	printf@c& (0+255),b
  2533                           
  2534                           ;doprnt.c: 1491: break;
  2535  000AF6  D030               	goto	l2586
  2536  000AF8                     l2578:
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;doprnt.c: 1499: {
  2540                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2541  000AF8  C086  F060         	movff	printf@val,___lwdiv@dividend
  2542  000AFC  C087  F061         	movff	printf@val+1,___lwdiv@dividend+1
  2543  000B00  0100               	movlb	0	; () banked
  2544  000B02  5185               	movf	printf@prec& (0+255),w,b
  2545  000B04  0D02               	mullw	2
  2546  000B06  0E0B               	movlw	low _hexpowers
  2547  000B08  24F3               	addwf	prodl,w,c
  2548  000B0A  6EF6               	movwf	tblptrl,c
  2549  000B0C  0E08               	movlw	high _hexpowers
  2550  000B0E  20F4               	addwfc	prodh,w,c
  2551  000B10  6EF7               	movwf	tblptrh,c
  2552  000B12                     	if	0	;There are less than 3 active tblptr bytes
  2553  000B12                     	endif
  2554  000B12  0009               	tblrd		*+
  2555  000B14  CFF5 F062          	movff	tablat,___lwdiv@divisor
  2556  000B18  000A               	tblrd		*-
  2557  000B1A  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  2558  000B1E  ECDB  F008         	call	___lwdiv	;wreg free
  2559  000B22  0100               	movlb	0	; () banked
  2560  000B24  5160               	movf	?___lwdiv& (0+255),w,b
  2561  000B26  0B0F               	andlw	15
  2562  000B28  0100               	movlb	0	; () banked
  2563  000B2A  6F82               	movwf	printf@idx& (0+255),b
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  2567  000B2C  0100               	movlb	0	; () banked
  2568  000B2E  5182               	movf	printf@idx& (0+255),w,b
  2569  000B30  0D01               	mullw	1
  2570  000B32  0E39               	movlw	low STR_4
  2571  000B34  24F3               	addwf	prodl,w,c
  2572  000B36  6EF6               	movwf	tblptrl,c
  2573  000B38  0E08               	movlw	high STR_4
  2574  000B3A  20F4               	addwfc	prodh,w,c
  2575  000B3C  6EF7               	movwf	tblptrh,c
  2576  000B3E                     	if	0	;There are less than 3 active tblptr bytes
  2577  000B3E                     	endif
  2578  000B3E  0008               	tblrd		*
  2579  000B40  CFF5 F08B          	movff	tablat,printf@c
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;doprnt.c: 1523: }
  2583                           
  2584                           ;doprnt.c: 1508: }
  2585                           ;doprnt.c: 1510: break;
  2586  000B44  D009               	goto	l2586
  2587  000B46                     l2584:
  2588                           
  2589                           ; BSR set to: 0
  2590  000B46  0100               	movlb	0	; () banked
  2591  000B48  5188               	movf	printf@flag& (0+255),w,b
  2592  000B4A  0BC0               	andlw	192
  2593                           
  2594                           ; Switch size 1, requested type "space"
  2595                           ; Number of cases is 2, Range of values is 128 to 192
  2596                           ; switch strategies available:
  2597                           ; Name         Instructions Cycles
  2598                           ; simple_byte            7     4 (average)
  2599                           ;	Chosen strategy is simple_byte
  2600  000B4C  0A80               	xorlw	128	; case 128
  2601  000B4E  B4D8               	btfsc	status,2,c
  2602  000B50  D7D3               	goto	l2578
  2603  000B52  0A40               	xorlw	64	; case 192
  2604  000B54  B4D8               	btfsc	status,2,c
  2605  000B56  D7AA               	goto	l2576
  2606  000B58                     l2586:
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;doprnt.c: 1524: (putch(c) );
  2610  000B58  0100               	movlb	0	; () banked
  2611  000B5A  518B               	movf	printf@c& (0+255),w,b
  2612  000B5C  EC03  F00B         	call	_putch
  2613  000B60                     l2588:
  2614  000B60  0100               	movlb	0	; () banked
  2615  000B62  0785               	decf	printf@prec& (0+255),f,b
  2616  000B64  0100               	movlb	0	; () banked
  2617  000B66  2985               	incf	printf@prec& (0+255),w,b
  2618  000B68  A4D8               	btfss	status,2,c
  2619  000B6A  D7ED               	goto	l2584
  2620  000B6C                     l2590:
  2621  000B6C  C06C  FFF6         	movff	printf@f,tblptrl
  2622  000B70  C06D  FFF7         	movff	printf@f+1,tblptrh
  2623  000B74  0100               	movlb	0	; () banked
  2624  000B76  4B6C               	infsnz	printf@f& (0+255),f,b
  2625  000B78  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2626  000B7A                     	if	0	;tblptru may be non-zero
  2627  000B7A                     	endif
  2628  000B7A                     	if	0	;tblptru may be non-zero
  2629  000B7A                     	endif
  2630  000B7A  0008               	tblrd		*
  2631  000B7C  CFF5 F08B          	movff	tablat,printf@c
  2632  000B80  0100               	movlb	0	; () banked
  2633  000B82  518B               	movf	printf@c& (0+255),w,b
  2634  000B84  B4D8               	btfsc	status,2,c
  2635  000B86  0012               	return	
  2636  000B88  D66A               	goto	l2488
  2637  000B8A                     __end_of_printf:
  2638                           	opt stack 0
  2639                           tblptru	equ	0xFF8
  2640                           tblptrh	equ	0xFF7
  2641                           tblptrl	equ	0xFF6
  2642                           tablat	equ	0xFF5
  2643                           prodh	equ	0xFF4
  2644                           prodl	equ	0xFF3
  2645                           postinc0	equ	0xFEE
  2646                           wreg	equ	0xFE8
  2647                           postinc2	equ	0xFDE
  2648                           postdec2	equ	0xFDD
  2649                           fsr2h	equ	0xFDA
  2650                           fsr2l	equ	0xFD9
  2651                           status	equ	0xFD8
  2652                           
  2653 ;; *************** function _putch *****************
  2654 ;; Defined at:
  2655 ;;		line 46 in file "usart.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;  byte            1    wreg     unsigned char 
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;  byte            1    0[BANK0 ] unsigned char 
  2660 ;; Return value:  Size  Location     Type
  2661 ;;		None               void
  2662 ;; Registers used:
  2663 ;;		wreg
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2669 ;;      Params:         0       0       0       0       0       0       0       0       0
  2670 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2671 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2672 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2673 ;;Total ram usage:        1 bytes
  2674 ;; Hardware stack levels used:    1
  2675 ;; Hardware stack levels required when called:    3
  2676 ;; This function calls:
  2677 ;;		Nothing
  2678 ;; This function is called by:
  2679 ;;		_printf
  2680 ;;		_getche
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           	psect	text12
  2685  001606                     __ptext12:
  2686                           	opt stack 0
  2687  001606                     _putch:
  2688                           	opt stack 26
  2689                           
  2690                           ;incstack = 0
  2691                           ;putch@byte stored from wreg
  2692  001606  0100               	movlb	0	; () banked
  2693  001608  6F60               	movwf	putch@byte& (0+255),b
  2694  00160A                     l304:
  2695  00160A  A89E               	btfss	3998,4,c	;volatile
  2696  00160C  D7FE               	goto	l304
  2697                           
  2698                           ;usart.c: 50: TXREG = byte;
  2699  00160E  C060  FFAD         	movff	putch@byte,4013	;volatile
  2700  001612  0012               	return		;funcret
  2701  001614                     __end_of_putch:
  2702                           	opt stack 0
  2703                           tblptru	equ	0xFF8
  2704                           tblptrh	equ	0xFF7
  2705                           tblptrl	equ	0xFF6
  2706                           tablat	equ	0xFF5
  2707                           prodh	equ	0xFF4
  2708                           prodl	equ	0xFF3
  2709                           postinc0	equ	0xFEE
  2710                           wreg	equ	0xFE8
  2711                           postinc2	equ	0xFDE
  2712                           postdec2	equ	0xFDD
  2713                           fsr2h	equ	0xFDA
  2714                           fsr2l	equ	0xFD9
  2715                           status	equ	0xFD8
  2716                           
  2717 ;; *************** function _isdigit *****************
  2718 ;; Defined at:
  2719 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;  c               1    wreg     unsigned char 
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;  c               1    2[BANK0 ] unsigned char 
  2724 ;; Return value:  Size  Location     Type
  2725 ;;		None               void
  2726 ;; Registers used:
  2727 ;;		wreg, status,2, status,0
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2733 ;;      Params:         0       0       0       0       0       0       0       0       0
  2734 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2735 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2736 ;;      Totals:         0       3       0       0       0       0       0       0       0
  2737 ;;Total ram usage:        3 bytes
  2738 ;; Hardware stack levels used:    1
  2739 ;; Hardware stack levels required when called:    3
  2740 ;; This function calls:
  2741 ;;		Nothing
  2742 ;; This function is called by:
  2743 ;;		_printf
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747                           	psect	text13
  2748  001504                     __ptext13:
  2749                           	opt stack 0
  2750  001504                     _isdigit:
  2751                           	opt stack 26
  2752                           
  2753                           ;incstack = 0
  2754                           ;isdigit@c stored from wreg
  2755  001504  0100               	movlb	0	; () banked
  2756  001506  6F62               	movwf	isdigit@c& (0+255),b
  2757  001508  0E00               	movlw	0
  2758  00150A  0100               	movlb	0	; () banked
  2759  00150C  6F61               	movwf	_isdigit$1377& (0+255),b
  2760                           
  2761                           ; BSR set to: 0
  2762  00150E  0E3A               	movlw	58
  2763  001510  0100               	movlb	0	; () banked
  2764  001512  6162               	cpfslt	isdigit@c& (0+255),b
  2765  001514  D007               	goto	l2370
  2766                           
  2767                           ; BSR set to: 0
  2768  001516  0E2F               	movlw	47
  2769  001518  0100               	movlb	0	; () banked
  2770  00151A  6562               	cpfsgt	isdigit@c& (0+255),b
  2771  00151C  D003               	goto	l2370
  2772                           
  2773                           ; BSR set to: 0
  2774  00151E  0E01               	movlw	1
  2775  001520  0100               	movlb	0	; () banked
  2776  001522  6F61               	movwf	_isdigit$1377& (0+255),b
  2777  001524                     l2370:
  2778                           
  2779                           ; BSR set to: 0
  2780  001524  C061  F060         	movff	_isdigit$1377,??_isdigit
  2781  001528  0100               	movlb	0	; () banked
  2782  00152A  3160               	rrcf	??_isdigit& (0+255),w,b
  2783  00152C  0012               	return	
  2784  00152E                     __end_of_isdigit:
  2785                           	opt stack 0
  2786                           tblptru	equ	0xFF8
  2787                           tblptrh	equ	0xFF7
  2788                           tblptrl	equ	0xFF6
  2789                           tablat	equ	0xFF5
  2790                           prodh	equ	0xFF4
  2791                           prodl	equ	0xFF3
  2792                           postinc0	equ	0xFEE
  2793                           wreg	equ	0xFE8
  2794                           postinc2	equ	0xFDE
  2795                           postdec2	equ	0xFDD
  2796                           fsr2h	equ	0xFDA
  2797                           fsr2l	equ	0xFD9
  2798                           status	equ	0xFD8
  2799                           
  2800 ;; *************** function ___wmul *****************
  2801 ;; Defined at:
  2802 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2805 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;  product         2    4[BANK0 ] unsigned int 
  2808 ;; Return value:  Size  Location     Type
  2809 ;;                  2    0[BANK0 ] unsigned int 
  2810 ;; Registers used:
  2811 ;;		wreg, status,2, status,0, prodl, prodh
  2812 ;; Tracked objects:
  2813 ;;		On entry : 0/0
  2814 ;;		On exit  : 0/0
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2817 ;;      Params:         0       4       0       0       0       0       0       0       0
  2818 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2819 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2820 ;;      Totals:         0       6       0       0       0       0       0       0       0
  2821 ;;Total ram usage:        6 bytes
  2822 ;; Hardware stack levels used:    1
  2823 ;; Hardware stack levels required when called:    3
  2824 ;; This function calls:
  2825 ;;		Nothing
  2826 ;; This function is called by:
  2827 ;;		_printf
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           	psect	text14
  2832  0014A0                     __ptext14:
  2833                           	opt stack 0
  2834  0014A0                     ___wmul:
  2835                           	opt stack 26
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;incstack = 0
  2839  0014A0  0100               	movlb	0	; () banked
  2840  0014A2  5160               	movf	___wmul@multiplier& (0+255),w,b
  2841  0014A4  0100               	movlb	0	; () banked
  2842  0014A6  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2843  0014A8  CFF3 F064          	movff	prodl,___wmul@product
  2844  0014AC  CFF4 F065          	movff	prodh,___wmul@product+1
  2845  0014B0  0100               	movlb	0	; () banked
  2846  0014B2  5160               	movf	___wmul@multiplier& (0+255),w,b
  2847  0014B4  0100               	movlb	0	; () banked
  2848  0014B6  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2849  0014B8  50F3               	movf	prodl,w,c
  2850  0014BA  0100               	movlb	0	; () banked
  2851  0014BC  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2852  0014BE  0100               	movlb	0	; () banked
  2853  0014C0  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2854  0014C2  0100               	movlb	0	; () banked
  2855  0014C4  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2856  0014C6  50F3               	movf	prodl,w,c
  2857  0014C8  0100               	movlb	0	; () banked
  2858  0014CA  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2859                           
  2860                           ; BSR set to: 0
  2861  0014CC  C064  F060         	movff	___wmul@product,?___wmul
  2862  0014D0  C065  F061         	movff	___wmul@product+1,?___wmul+1
  2863  0014D4  0012               	return	
  2864  0014D6                     __end_of___wmul:
  2865                           	opt stack 0
  2866                           tblptru	equ	0xFF8
  2867                           tblptrh	equ	0xFF7
  2868                           tblptrl	equ	0xFF6
  2869                           tablat	equ	0xFF5
  2870                           prodh	equ	0xFF4
  2871                           prodl	equ	0xFF3
  2872                           postinc0	equ	0xFEE
  2873                           wreg	equ	0xFE8
  2874                           postinc2	equ	0xFDE
  2875                           postdec2	equ	0xFDD
  2876                           fsr2h	equ	0xFDA
  2877                           fsr2l	equ	0xFD9
  2878                           status	equ	0xFD8
  2879                           
  2880 ;; *************** function ___lwmod *****************
  2881 ;; Defined at:
  2882 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  2883 ;; Parameters:    Size  Location     Type
  2884 ;;  dividend        2    7[BANK0 ] unsigned int 
  2885 ;;  divisor         2    9[BANK0 ] unsigned int 
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;  counter         1   11[BANK0 ] unsigned char 
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  2    7[BANK0 ] unsigned int 
  2890 ;; Registers used:
  2891 ;;		wreg, status,2, status,0
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2897 ;;      Params:         0       4       0       0       0       0       0       0       0
  2898 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2899 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2900 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2901 ;;Total ram usage:        5 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; Hardware stack levels required when called:    3
  2904 ;; This function calls:
  2905 ;;		Nothing
  2906 ;; This function is called by:
  2907 ;;		_printf
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           	psect	text15
  2912  00130A                     __ptext15:
  2913                           	opt stack 0
  2914  00130A                     ___lwmod:
  2915                           	opt stack 26
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;incstack = 0
  2919  00130A  0100               	movlb	0	; () banked
  2920  00130C  5169               	movf	___lwmod@divisor& (0+255),w,b
  2921  00130E  0100               	movlb	0	; () banked
  2922  001310  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  2923  001312  B4D8               	btfsc	status,2,c
  2924  001314  D026               	goto	l797
  2925                           
  2926                           ; BSR set to: 0
  2927  001316  0E01               	movlw	1
  2928  001318  0100               	movlb	0	; () banked
  2929  00131A  6F6B               	movwf	___lwmod@counter& (0+255),b
  2930  00131C  D006               	goto	l2408
  2931  00131E                     l2406:
  2932                           
  2933                           ; BSR set to: 0
  2934  00131E  0100               	movlb	0	; () banked
  2935  001320  90D8               	bcf	status,0,c
  2936  001322  3769               	rlcf	___lwmod@divisor& (0+255),f,b
  2937  001324  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  2938  001326  0100               	movlb	0	; () banked
  2939  001328  2B6B               	incf	___lwmod@counter& (0+255),f,b
  2940  00132A                     l2408:
  2941                           
  2942                           ; BSR set to: 0
  2943  00132A  0100               	movlb	0	; () banked
  2944  00132C  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  2945  00132E  D7F7               	goto	l2406
  2946  001330                     l2410:
  2947                           
  2948                           ; BSR set to: 0
  2949  001330  0100               	movlb	0	; () banked
  2950  001332  5169               	movf	___lwmod@divisor& (0+255),w,b
  2951  001334  0100               	movlb	0	; () banked
  2952  001336  5D67               	subwf	___lwmod@dividend& (0+255),w,b
  2953  001338  0100               	movlb	0	; () banked
  2954  00133A  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2955  00133C  0100               	movlb	0	; () banked
  2956  00133E  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  2957  001340  A0D8               	btfss	status,0,c
  2958  001342  D008               	goto	l2414
  2959                           
  2960                           ; BSR set to: 0
  2961  001344  0100               	movlb	0	; () banked
  2962  001346  5169               	movf	___lwmod@divisor& (0+255),w,b
  2963  001348  0100               	movlb	0	; () banked
  2964  00134A  5F67               	subwf	___lwmod@dividend& (0+255),f,b
  2965  00134C  0100               	movlb	0	; () banked
  2966  00134E  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2967  001350  0100               	movlb	0	; () banked
  2968  001352  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  2969  001354                     l2414:
  2970                           
  2971                           ; BSR set to: 0
  2972  001354  0100               	movlb	0	; () banked
  2973  001356  90D8               	bcf	status,0,c
  2974  001358  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  2975  00135A  3369               	rrcf	___lwmod@divisor& (0+255),f,b
  2976                           
  2977                           ; BSR set to: 0
  2978  00135C  0100               	movlb	0	; () banked
  2979  00135E  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
  2980  001360  D7E7               	goto	l2410
  2981  001362                     l797:
  2982                           
  2983                           ; BSR set to: 0
  2984  001362  C067  F067         	movff	___lwmod@dividend,?___lwmod
  2985  001366  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
  2986                           
  2987                           ; BSR set to: 0
  2988  00136A  0012               	return		;funcret
  2989  00136C                     __end_of___lwmod:
  2990                           	opt stack 0
  2991                           tblptru	equ	0xFF8
  2992                           tblptrh	equ	0xFF7
  2993                           tblptrl	equ	0xFF6
  2994                           tablat	equ	0xFF5
  2995                           prodh	equ	0xFF4
  2996                           prodl	equ	0xFF3
  2997                           postinc0	equ	0xFEE
  2998                           wreg	equ	0xFE8
  2999                           postinc2	equ	0xFDE
  3000                           postdec2	equ	0xFDD
  3001                           fsr2h	equ	0xFDA
  3002                           fsr2l	equ	0xFD9
  3003                           status	equ	0xFD8
  3004                           
  3005 ;; *************** function ___lwdiv *****************
  3006 ;; Defined at:
  3007 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  3008 ;; Parameters:    Size  Location     Type
  3009 ;;  dividend        2    0[BANK0 ] unsigned int 
  3010 ;;  divisor         2    2[BANK0 ] unsigned int 
  3011 ;; Auto vars:     Size  Location     Type
  3012 ;;  quotient        2    5[BANK0 ] unsigned int 
  3013 ;;  counter         1    4[BANK0 ] unsigned char 
  3014 ;; Return value:  Size  Location     Type
  3015 ;;                  2    0[BANK0 ] unsigned int 
  3016 ;; Registers used:
  3017 ;;		wreg, status,2, status,0
  3018 ;; Tracked objects:
  3019 ;;		On entry : 0/0
  3020 ;;		On exit  : 0/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3023 ;;      Params:         0       4       0       0       0       0       0       0       0
  3024 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3025 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3026 ;;      Totals:         0       7       0       0       0       0       0       0       0
  3027 ;;Total ram usage:        7 bytes
  3028 ;; Hardware stack levels used:    1
  3029 ;; Hardware stack levels required when called:    3
  3030 ;; This function calls:
  3031 ;;		Nothing
  3032 ;; This function is called by:
  3033 ;;		_printf
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           	psect	text16
  3038  0011B6                     __ptext16:
  3039                           	opt stack 0
  3040  0011B6                     ___lwdiv:
  3041                           	opt stack 26
  3042                           
  3043                           ; BSR set to: 0
  3044                           ;incstack = 0
  3045  0011B6  0E00               	movlw	0
  3046  0011B8  0100               	movlb	0	; () banked
  3047  0011BA  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3048  0011BC  0E00               	movlw	0
  3049  0011BE  6F65               	movwf	___lwdiv@quotient& (0+255),b
  3050                           
  3051                           ; BSR set to: 0
  3052  0011C0  0100               	movlb	0	; () banked
  3053  0011C2  5162               	movf	___lwdiv@divisor& (0+255),w,b
  3054  0011C4  0100               	movlb	0	; () banked
  3055  0011C6  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3056  0011C8  B4D8               	btfsc	status,2,c
  3057  0011CA  D02C               	goto	l787
  3058                           
  3059                           ; BSR set to: 0
  3060  0011CC  0E01               	movlw	1
  3061  0011CE  0100               	movlb	0	; () banked
  3062  0011D0  6F64               	movwf	___lwdiv@counter& (0+255),b
  3063  0011D2  D006               	goto	l2388
  3064  0011D4                     l2386:
  3065                           
  3066                           ; BSR set to: 0
  3067  0011D4  0100               	movlb	0	; () banked
  3068  0011D6  90D8               	bcf	status,0,c
  3069  0011D8  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  3070  0011DA  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3071  0011DC  0100               	movlb	0	; () banked
  3072  0011DE  2B64               	incf	___lwdiv@counter& (0+255),f,b
  3073  0011E0                     l2388:
  3074                           
  3075                           ; BSR set to: 0
  3076  0011E0  0100               	movlb	0	; () banked
  3077  0011E2  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3078  0011E4  D7F7               	goto	l2386
  3079  0011E6                     l2390:
  3080                           
  3081                           ; BSR set to: 0
  3082  0011E6  0100               	movlb	0	; () banked
  3083  0011E8  90D8               	bcf	status,0,c
  3084  0011EA  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  3085  0011EC  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3086                           
  3087                           ; BSR set to: 0
  3088  0011EE  0100               	movlb	0	; () banked
  3089  0011F0  5162               	movf	___lwdiv@divisor& (0+255),w,b
  3090  0011F2  0100               	movlb	0	; () banked
  3091  0011F4  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  3092  0011F6  0100               	movlb	0	; () banked
  3093  0011F8  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3094  0011FA  0100               	movlb	0	; () banked
  3095  0011FC  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3096  0011FE  A0D8               	btfss	status,0,c
  3097  001200  D00A               	goto	l2398
  3098                           
  3099                           ; BSR set to: 0
  3100  001202  0100               	movlb	0	; () banked
  3101  001204  5162               	movf	___lwdiv@divisor& (0+255),w,b
  3102  001206  0100               	movlb	0	; () banked
  3103  001208  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  3104  00120A  0100               	movlb	0	; () banked
  3105  00120C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3106  00120E  0100               	movlb	0	; () banked
  3107  001210  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3108                           
  3109                           ; BSR set to: 0
  3110  001212  0100               	movlb	0	; () banked
  3111  001214  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  3112  001216                     l2398:
  3113                           
  3114                           ; BSR set to: 0
  3115  001216  0100               	movlb	0	; () banked
  3116  001218  90D8               	bcf	status,0,c
  3117  00121A  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3118  00121C  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  3119                           
  3120                           ; BSR set to: 0
  3121  00121E  0100               	movlb	0	; () banked
  3122  001220  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  3123  001222  D7E1               	goto	l2390
  3124  001224                     l787:
  3125                           
  3126                           ; BSR set to: 0
  3127  001224  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  3128  001228  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3129                           
  3130                           ; BSR set to: 0
  3131  00122C  0012               	return		;funcret
  3132  00122E                     __end_of___lwdiv:
  3133                           	opt stack 0
  3134                           tblptru	equ	0xFF8
  3135                           tblptrh	equ	0xFF7
  3136                           tblptrl	equ	0xFF6
  3137                           tablat	equ	0xFF5
  3138                           prodh	equ	0xFF4
  3139                           prodl	equ	0xFF3
  3140                           postinc0	equ	0xFEE
  3141                           wreg	equ	0xFE8
  3142                           postinc2	equ	0xFDE
  3143                           postdec2	equ	0xFDD
  3144                           fsr2h	equ	0xFDA
  3145                           fsr2l	equ	0xFD9
  3146                           status	equ	0xFD8
  3147                           
  3148 ;; *************** function _configUSARTInterrupts *****************
  3149 ;; Defined at:
  3150 ;;		line 32 in file "usart.c"
  3151 ;; Parameters:    Size  Location     Type
  3152 ;;		None
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;		None
  3155 ;; Return value:  Size  Location     Type
  3156 ;;		None               void
  3157 ;; Registers used:
  3158 ;;		None
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3164 ;;      Params:         0       0       0       0       0       0       0       0       0
  3165 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3166 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3167 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3168 ;;Total ram usage:        0 bytes
  3169 ;; Hardware stack levels used:    1
  3170 ;; Hardware stack levels required when called:    3
  3171 ;; This function calls:
  3172 ;;		Nothing
  3173 ;; This function is called by:
  3174 ;;		_main
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           	psect	text17
  3179  001614                     __ptext17:
  3180                           	opt stack 0
  3181  001614                     _configUSARTInterrupts:
  3182                           	opt stack 27
  3183                           
  3184                           ;usart.c: 35: TXIE = 0;
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;incstack = 0
  3188  001614  989D               	bcf	3997,4,c	;volatile
  3189                           
  3190                           ;usart.c: 36: TXIF = 0;
  3191  001616  989E               	bcf	3998,4,c	;volatile
  3192                           
  3193                           ;usart.c: 39: RCIE = 1;
  3194  001618  8A9D               	bsf	3997,5,c	;volatile
  3195                           
  3196                           ;usart.c: 40: RCIF = 0;
  3197  00161A  9A9E               	bcf	3998,5,c	;volatile
  3198                           
  3199                           ;usart.c: 42: PEIE = 1;
  3200  00161C  8CF2               	bsf	intcon,6,c	;volatile
  3201                           
  3202                           ;usart.c: 43: GIE = 1;
  3203  00161E  8EF2               	bsf	intcon,7,c	;volatile
  3204  001620  0012               	return		;funcret
  3205  001622                     __end_of_configUSARTInterrupts:
  3206                           	opt stack 0
  3207                           tblptru	equ	0xFF8
  3208                           tblptrh	equ	0xFF7
  3209                           tblptrl	equ	0xFF6
  3210                           tablat	equ	0xFF5
  3211                           prodh	equ	0xFF4
  3212                           prodl	equ	0xFF3
  3213                           intcon	equ	0xFF2
  3214                           postinc0	equ	0xFEE
  3215                           wreg	equ	0xFE8
  3216                           postinc2	equ	0xFDE
  3217                           postdec2	equ	0xFDD
  3218                           fsr2h	equ	0xFDA
  3219                           fsr2l	equ	0xFD9
  3220                           status	equ	0xFD8
  3221                           
  3222 ;; *************** function _configTimer *****************
  3223 ;; Defined at:
  3224 ;;		line 17 in file "timer0.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;		None
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;		None
  3229 ;; Return value:  Size  Location     Type
  3230 ;;		None               void
  3231 ;; Registers used:
  3232 ;;		None
  3233 ;; Tracked objects:
  3234 ;;		On entry : 0/0
  3235 ;;		On exit  : 0/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3238 ;;      Params:         0       0       0       0       0       0       0       0       0
  3239 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3240 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3241 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3242 ;;Total ram usage:        0 bytes
  3243 ;; Hardware stack levels used:    1
  3244 ;; Hardware stack levels required when called:    3
  3245 ;; This function calls:
  3246 ;;		Nothing
  3247 ;; This function is called by:
  3248 ;;		_main
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           	psect	text18
  3253  001594                     __ptext18:
  3254                           	opt stack 0
  3255  001594                     _configTimer:
  3256                           	opt stack 27
  3257                           
  3258                           ;timer0.c: 18: T0CONbits.T0CS = 0;
  3259                           
  3260                           ;incstack = 0
  3261  001594  9AD5               	bcf	4053,5,c	;volatile
  3262                           
  3263                           ;timer0.c: 19: T0CONbits.T0SE = 0;
  3264  001596  98D5               	bcf	4053,4,c	;volatile
  3265                           
  3266                           ;timer0.c: 20: T0CONbits.PSA = 0;
  3267  001598  96D5               	bcf	4053,3,c	;volatile
  3268                           
  3269                           ;timer0.c: 21: T0CONbits.T08BIT = 0;
  3270  00159A  9CD5               	bcf	4053,6,c	;volatile
  3271                           
  3272                           ;timer0.c: 24: T0CONbits.T0PS2 = 1;
  3273  00159C  84D5               	bsf	4053,2,c	;volatile
  3274                           
  3275                           ;timer0.c: 25: T0CONbits.T0PS1 = 0;
  3276  00159E  92D5               	bcf	4053,1,c	;volatile
  3277                           
  3278                           ;timer0.c: 26: T0CONbits.T0PS0 = 1;
  3279  0015A0  80D5               	bsf	4053,0,c	;volatile
  3280                           
  3281                           ;timer0.c: 28: TMR0IP = 1;
  3282  0015A2  84F1               	bsf	intcon2,2,c	;volatile
  3283                           
  3284                           ;timer0.c: 30: INTCONbits.TMR0IF = 0;
  3285  0015A4  94F2               	bcf	intcon,2,c	;volatile
  3286                           
  3287                           ;timer0.c: 31: INTCONbits.TMR0IE = 1;
  3288  0015A6  8AF2               	bsf	intcon,5,c	;volatile
  3289                           
  3290                           ;timer0.c: 32: INTCONbits.GIE = 1;
  3291  0015A8  8EF2               	bsf	intcon,7,c	;volatile
  3292                           
  3293                           ;timer0.c: 33: INTCONbits.PEIE = 1;
  3294  0015AA  8CF2               	bsf	intcon,6,c	;volatile
  3295  0015AC  0012               	return		;funcret
  3296  0015AE                     __end_of_configTimer:
  3297                           	opt stack 0
  3298                           tblptru	equ	0xFF8
  3299                           tblptrh	equ	0xFF7
  3300                           tblptrl	equ	0xFF6
  3301                           tablat	equ	0xFF5
  3302                           prodh	equ	0xFF4
  3303                           prodl	equ	0xFF3
  3304                           intcon	equ	0xFF2
  3305                           intcon2	equ	0xFF1
  3306                           postinc0	equ	0xFEE
  3307                           wreg	equ	0xFE8
  3308                           postinc2	equ	0xFDE
  3309                           postdec2	equ	0xFDD
  3310                           fsr2h	equ	0xFDA
  3311                           fsr2l	equ	0xFD9
  3312                           status	equ	0xFD8
  3313                           
  3314 ;; *************** function _configRS232 *****************
  3315 ;; Defined at:
  3316 ;;		line 9 in file "usart.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;		None
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;		None
  3321 ;; Return value:  Size  Location     Type
  3322 ;;		None               void
  3323 ;; Registers used:
  3324 ;;		wreg, status,2
  3325 ;; Tracked objects:
  3326 ;;		On entry : 0/0
  3327 ;;		On exit  : 0/0
  3328 ;;		Unchanged: 0/0
  3329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3330 ;;      Params:         0       0       0       0       0       0       0       0       0
  3331 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3332 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3333 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3334 ;;Total ram usage:        0 bytes
  3335 ;; Hardware stack levels used:    1
  3336 ;; Hardware stack levels required when called:    3
  3337 ;; This function calls:
  3338 ;;		Nothing
  3339 ;; This function is called by:
  3340 ;;		_main
  3341 ;; This function uses a non-reentrant model
  3342 ;;
  3343                           
  3344                           	psect	text19
  3345  0015C8                     __ptext19:
  3346                           	opt stack 0
  3347  0015C8                     _configRS232:
  3348                           	opt stack 27
  3349                           
  3350                           ;usart.c: 13: TX9 = 0;
  3351                           
  3352                           ;incstack = 0
  3353  0015C8  9CAC               	bcf	4012,6,c	;volatile
  3354                           
  3355                           ;usart.c: 14: TXEN = 1;
  3356  0015CA  8AAC               	bsf	4012,5,c	;volatile
  3357                           
  3358                           ;usart.c: 15: SYNC = 0;
  3359  0015CC  98AC               	bcf	4012,4,c	;volatile
  3360                           
  3361                           ;usart.c: 16: BRGH = 1;
  3362  0015CE  84AC               	bsf	4012,2,c	;volatile
  3363                           
  3364                           ;usart.c: 19: SPEN = 1;
  3365  0015D0  8EAB               	bsf	4011,7,c	;volatile
  3366                           
  3367                           ;usart.c: 20: RX9 = 0;
  3368  0015D2  9CAB               	bcf	4011,6,c	;volatile
  3369                           
  3370                           ;usart.c: 21: CREN = 1;
  3371  0015D4  88AB               	bsf	4011,4,c	;volatile
  3372                           
  3373                           ;usart.c: 26: BRG16 = 0;
  3374  0015D6  96B8               	bcf	4024,3,c	;volatile
  3375                           
  3376                           ;usart.c: 27: SPBRG = 129;
  3377  0015D8  0E81               	movlw	129
  3378  0015DA  6EAF               	movwf	4015,c	;volatile
  3379                           
  3380                           ;usart.c: 29: RXDTP = 0;
  3381  0015DC  9AB8               	bcf	4024,5,c	;volatile
  3382  0015DE  0012               	return		;funcret
  3383  0015E0                     __end_of_configRS232:
  3384                           	opt stack 0
  3385                           tblptru	equ	0xFF8
  3386                           tblptrh	equ	0xFF7
  3387                           tblptrl	equ	0xFF6
  3388                           tablat	equ	0xFF5
  3389                           prodh	equ	0xFF4
  3390                           prodl	equ	0xFF3
  3391                           intcon	equ	0xFF2
  3392                           intcon2	equ	0xFF1
  3393                           postinc0	equ	0xFEE
  3394                           wreg	equ	0xFE8
  3395                           postinc2	equ	0xFDE
  3396                           postdec2	equ	0xFDD
  3397                           fsr2h	equ	0xFDA
  3398                           fsr2l	equ	0xFD9
  3399                           status	equ	0xFD8
  3400                           
  3401 ;; *************** function _configADInterrupt *****************
  3402 ;; Defined at:
  3403 ;;		line 11 in file "ad.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;		None
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;		None
  3408 ;; Return value:  Size  Location     Type
  3409 ;;		None               void
  3410 ;; Registers used:
  3411 ;;		None
  3412 ;; Tracked objects:
  3413 ;;		On entry : 0/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3417 ;;      Params:         0       0       0       0       0       0       0       0       0
  3418 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3419 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3420 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3421 ;;Total ram usage:        0 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    3
  3424 ;; This function calls:
  3425 ;;		Nothing
  3426 ;; This function is called by:
  3427 ;;		_main
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           	psect	text20
  3432  001664                     __ptext20:
  3433                           	opt stack 0
  3434  001664                     _configADInterrupt:
  3435                           	opt stack 27
  3436                           
  3437                           ;ad.c: 12: PIR1bits.ADIF = 0;
  3438                           
  3439                           ;incstack = 0
  3440  001664  9C9E               	bcf	3998,6,c	;volatile
  3441                           
  3442                           ;ad.c: 13: PIE1bits.ADIE = 1;
  3443  001666  8C9D               	bsf	3997,6,c	;volatile
  3444                           
  3445                           ;ad.c: 15: INTCONbits.GIE = 1;
  3446  001668  8EF2               	bsf	intcon,7,c	;volatile
  3447                           
  3448                           ;ad.c: 16: INTCONbits.PEIE = 1;
  3449  00166A  8CF2               	bsf	intcon,6,c	;volatile
  3450  00166C  0012               	return		;funcret
  3451  00166E                     __end_of_configADInterrupt:
  3452                           	opt stack 0
  3453                           tblptru	equ	0xFF8
  3454                           tblptrh	equ	0xFF7
  3455                           tblptrl	equ	0xFF6
  3456                           tablat	equ	0xFF5
  3457                           prodh	equ	0xFF4
  3458                           prodl	equ	0xFF3
  3459                           intcon	equ	0xFF2
  3460                           intcon2	equ	0xFF1
  3461                           postinc0	equ	0xFEE
  3462                           wreg	equ	0xFE8
  3463                           postinc2	equ	0xFDE
  3464                           postdec2	equ	0xFDD
  3465                           fsr2h	equ	0xFDA
  3466                           fsr2l	equ	0xFD9
  3467                           status	equ	0xFD8
  3468                           
  3469 ;; *************** function _configAD *****************
  3470 ;; Defined at:
  3471 ;;		line 19 in file "ad.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;		None
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;		None
  3476 ;; Return value:  Size  Location     Type
  3477 ;;		None               void
  3478 ;; Registers used:
  3479 ;;		None
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3485 ;;      Params:         0       0       0       0       0       0       0       0       0
  3486 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3487 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3488 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3489 ;;Total ram usage:        0 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; Hardware stack levels required when called:    3
  3492 ;; This function calls:
  3493 ;;		Nothing
  3494 ;; This function is called by:
  3495 ;;		_main
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           	psect	text21
  3500  0015AE                     __ptext21:
  3501                           	opt stack 0
  3502  0015AE                     _configAD:
  3503                           	opt stack 27
  3504                           
  3505                           ;ad.c: 20: ADCON0bits.ADON = 1;
  3506                           
  3507                           ;incstack = 0
  3508  0015AE  80C2               	bsf	4034,0,c	;volatile
  3509                           
  3510                           ;ad.c: 24: ADFM = 1;
  3511  0015B0  8EC0               	bsf	4032,7,c	;volatile
  3512                           
  3513                           ;ad.c: 27: ADCON1bits.PCFG3 = 0;
  3514  0015B2  96C1               	bcf	4033,3,c	;volatile
  3515                           
  3516                           ;ad.c: 28: ADCON1bits.PCFG2 = 1;
  3517  0015B4  84C1               	bsf	4033,2,c	;volatile
  3518                           
  3519                           ;ad.c: 29: ADCON1bits.PCFG1 = 0;
  3520  0015B6  92C1               	bcf	4033,1,c	;volatile
  3521                           
  3522                           ;ad.c: 30: ADCON1bits.PCFG0 = 1;
  3523  0015B8  80C1               	bsf	4033,0,c	;volatile
  3524                           
  3525                           ;ad.c: 33: ADCON2bits.ACQT2 = 0;
  3526  0015BA  9AC0               	bcf	4032,5,c	;volatile
  3527                           
  3528                           ;ad.c: 34: ADCON2bits.ACQT1 = 0;
  3529  0015BC  98C0               	bcf	4032,4,c	;volatile
  3530                           
  3531                           ;ad.c: 35: ADCON2bits.ACQT0 = 1;
  3532  0015BE  86C0               	bsf	4032,3,c	;volatile
  3533                           
  3534                           ;ad.c: 38: ADCON2bits.ADCS2 = 1;
  3535  0015C0  84C0               	bsf	4032,2,c	;volatile
  3536                           
  3537                           ;ad.c: 39: ADCON2bits.ADCS1 = 0;
  3538  0015C2  92C0               	bcf	4032,1,c	;volatile
  3539                           
  3540                           ;ad.c: 40: ADCON2bits.ADCS0 = 1;
  3541  0015C4  80C0               	bsf	4032,0,c	;volatile
  3542  0015C6  0012               	return		;funcret
  3543  0015C8                     __end_of_configAD:
  3544                           	opt stack 0
  3545                           tblptru	equ	0xFF8
  3546                           tblptrh	equ	0xFF7
  3547                           tblptrl	equ	0xFF6
  3548                           tablat	equ	0xFF5
  3549                           prodh	equ	0xFF4
  3550                           prodl	equ	0xFF3
  3551                           intcon	equ	0xFF2
  3552                           intcon2	equ	0xFF1
  3553                           postinc0	equ	0xFEE
  3554                           wreg	equ	0xFE8
  3555                           postinc2	equ	0xFDE
  3556                           postdec2	equ	0xFDD
  3557                           fsr2h	equ	0xFDA
  3558                           fsr2l	equ	0xFD9
  3559                           status	equ	0xFD8
  3560                           
  3561 ;; *************** function _InitI2C_Master *****************
  3562 ;; Defined at:
  3563 ;;		line 4 in file "i2c.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;		None
  3566 ;; Auto vars:     Size  Location     Type
  3567 ;;		None
  3568 ;; Return value:  Size  Location     Type
  3569 ;;		None               void
  3570 ;; Registers used:
  3571 ;;		wreg, status,2
  3572 ;; Tracked objects:
  3573 ;;		On entry : 0/0
  3574 ;;		On exit  : 0/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3577 ;;      Params:         0       0       0       0       0       0       0       0       0
  3578 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3579 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3580 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3581 ;;Total ram usage:        0 bytes
  3582 ;; Hardware stack levels used:    1
  3583 ;; Hardware stack levels required when called:    3
  3584 ;; This function calls:
  3585 ;;		Nothing
  3586 ;; This function is called by:
  3587 ;;		_main
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           	psect	text22
  3592  001554                     __ptext22:
  3593                           	opt stack 0
  3594  001554                     _InitI2C_Master:
  3595                           	opt stack 27
  3596                           
  3597                           ;i2c.c: 6: TRISBbits.RB0 = 1;
  3598                           
  3599                           ;incstack = 0
  3600  001554  8093               	bsf	3987,0,c	;volatile
  3601                           
  3602                           ;i2c.c: 7: TRISBbits.RB1 = 1;
  3603  001556  8293               	bsf	3987,1,c	;volatile
  3604                           
  3605                           ;i2c.c: 9: SSPADD = ( 20000000 / (4*100000) ) - 1;
  3606  001558  0E31               	movlw	49
  3607  00155A  6EC8               	movwf	4040,c	;volatile
  3608                           
  3609                           ;i2c.c: 12: SSPIF = 0;
  3610  00155C  969E               	bcf	3998,3,c	;volatile
  3611                           
  3612                           ;i2c.c: 15: SSPSTAT = 0;
  3613  00155E  0E00               	movlw	0
  3614  001560  6EC7               	movwf	4039,c	;volatile
  3615                           
  3616                           ;i2c.c: 16: SSPSTATbits.SMP = 1;
  3617  001562  8EC7               	bsf	4039,7,c	;volatile
  3618                           
  3619                           ;i2c.c: 17: SSPSTATbits.CKE = 0;
  3620  001564  9CC7               	bcf	4039,6,c	;volatile
  3621                           
  3622                           ;i2c.c: 20: SSPCON1 = 0;
  3623  001566  0E00               	movlw	0
  3624  001568  6EC6               	movwf	4038,c	;volatile
  3625                           
  3626                           ;i2c.c: 21: SSPCON1bits.SSPM = 0b1000;
  3627  00156A  50C6               	movf	4038,w,c	;volatile
  3628  00156C  0BF0               	andlw	-16
  3629  00156E  0908               	iorlw	8
  3630  001570  6EC6               	movwf	4038,c	;volatile
  3631                           
  3632                           ;i2c.c: 22: SSPCON1bits.SSPEN = 1;
  3633  001572  8AC6               	bsf	4038,5,c	;volatile
  3634  001574  0012               	return		;funcret
  3635  001576                     __end_of_InitI2C_Master:
  3636                           	opt stack 0
  3637                           tblptru	equ	0xFF8
  3638                           tblptrh	equ	0xFF7
  3639                           tblptrl	equ	0xFF6
  3640                           tablat	equ	0xFF5
  3641                           prodh	equ	0xFF4
  3642                           prodl	equ	0xFF3
  3643                           intcon	equ	0xFF2
  3644                           intcon2	equ	0xFF1
  3645                           postinc0	equ	0xFEE
  3646                           wreg	equ	0xFE8
  3647                           postinc2	equ	0xFDE
  3648                           postdec2	equ	0xFDD
  3649                           fsr2h	equ	0xFDA
  3650                           fsr2l	equ	0xFD9
  3651                           status	equ	0xFD8
  3652                           
  3653 ;; *************** function _interruptions *****************
  3654 ;; Defined at:
  3655 ;;		line 39 in file "main.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;		None
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;		None
  3660 ;; Return value:  Size  Location     Type
  3661 ;;		None               void
  3662 ;; Registers used:
  3663 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3664 ;; Tracked objects:
  3665 ;;		On entry : 0/0
  3666 ;;		On exit  : 0/0
  3667 ;;		Unchanged: 0/0
  3668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3669 ;;      Params:         0       0       0       0       0       0       0       0       0
  3670 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3671 ;;      Temps:         16       0       0       0       0       0       0       0       0
  3672 ;;      Totals:        16       0       0       0       0       0       0       0       0
  3673 ;;Total ram usage:       16 bytes
  3674 ;; Hardware stack levels used:    1
  3675 ;; Hardware stack levels required when called:    2
  3676 ;; This function calls:
  3677 ;;		___awmod
  3678 ;;		_strcpy
  3679 ;;		i2_printf
  3680 ;; This function is called by:
  3681 ;;		Interrupt level 2
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           	psect	intcode
  3686  000008                     __pintcode:
  3687                           	opt stack 0
  3688  000008                     _interruptions:
  3689                           	opt stack 26
  3690                           
  3691                           ;incstack = 0
  3692  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3693  00000A  CFFA F01F          	movff	pclath,??_interruptions+2
  3694  00000E  CFFB F020          	movff	pclatu,??_interruptions+3
  3695  000012  EDBA  F007         	call	int_func,f	;refresh shadow registers
  3696                           pclatu	equ	0xFFB
  3697                           pclath	equ	0xFFA
  3698                           tblptru	equ	0xFF8
  3699                           tblptrh	equ	0xFF7
  3700                           tblptrl	equ	0xFF6
  3701                           tablat	equ	0xFF5
  3702                           prodh	equ	0xFF4
  3703                           prodl	equ	0xFF3
  3704                           intcon	equ	0xFF2
  3705                           intcon2	equ	0xFF1
  3706                           postinc0	equ	0xFEE
  3707                           wreg	equ	0xFE8
  3708                           postinc2	equ	0xFDE
  3709                           postdec2	equ	0xFDD
  3710                           fsr2h	equ	0xFDA
  3711                           fsr2l	equ	0xFD9
  3712                           status	equ	0xFD8
  3713                           
  3714                           	psect	intcode_body
  3715  000F74                     __pintcode_body:
  3716                           	opt stack 26
  3717  000F74                     int_func:
  3718                           	opt stack 26
  3719  000F74  0006               	pop		; remove dummy address from shadow register refresh
  3720  000F76  CFE9 F021          	movff	fsr0l,??_interruptions+4
  3721  000F7A  CFEA F022          	movff	fsr0h,??_interruptions+5
  3722  000F7E  CFE1 F023          	movff	fsr1l,??_interruptions+6
  3723  000F82  CFE2 F024          	movff	fsr1h,??_interruptions+7
  3724  000F86  CFD9 F025          	movff	fsr2l,??_interruptions+8
  3725  000F8A  CFDA F026          	movff	fsr2h,??_interruptions+9
  3726  000F8E  CFF3 F027          	movff	prodl,??_interruptions+10
  3727  000F92  CFF4 F028          	movff	prodh,??_interruptions+11
  3728  000F96  CFF6 F029          	movff	tblptrl,??_interruptions+12
  3729  000F9A  CFF7 F02A          	movff	tblptrh,??_interruptions+13
  3730  000F9E  CFF8 F02B          	movff	tblptru,??_interruptions+14
  3731  000FA2  CFF5 F02C          	movff	tablat,??_interruptions+15
  3732                           
  3733                           ;main.c: 41: if (RCIF){
  3734  000FA6  AA9E               	btfss	3998,5,c	;volatile
  3735  000FA8  D047               	goto	i2l2260
  3736                           
  3737                           ;main.c: 42: if (FERR || OERR)
  3738  000FAA  B4AB               	btfsc	4011,2,c	;volatile
  3739  000FAC  D002               	goto	i2l222
  3740  000FAE  A2AB               	btfss	4011,1,c	;volatile
  3741  000FB0  D003               	goto	i2l220
  3742  000FB2                     i2l222:
  3743                           
  3744                           ;main.c: 43: {
  3745                           ;main.c: 44: CREN = 0;
  3746  000FB2  98AB               	bcf	4011,4,c	;volatile
  3747                           
  3748                           ;main.c: 45: hasAnError = 1;
  3749  000FB4  8248               	bsf	_hasAnError/(0+8),_hasAnError& (0+7),c
  3750                           
  3751                           ;main.c: 46: CREN = 1;
  3752  000FB6  88AB               	bsf	4011,4,c	;volatile
  3753  000FB8                     i2l220:
  3754                           
  3755                           ;main.c: 47: }
  3756                           ;main.c: 49: receivedData = RCREG;
  3757  000FB8  CFAE F049          	movff	4014,_receivedData	;volatile
  3758                           
  3759                           ;main.c: 51: if(receivedData == '\r')
  3760  000FBC  0E0D               	movlw	13
  3761  000FBE  1849               	xorwf	_receivedData,w,c
  3762  000FC0  A4D8               	btfss	status,2,c
  3763  000FC2  D01D               	goto	i2l2248
  3764                           
  3765                           ;main.c: 52: {
  3766                           ;main.c: 53: string_aux[i] = '\0';
  3767  000FC4  502D               	movf	_i,w,c
  3768  000FC6  0D01               	mullw	1
  3769  000FC8  0E2E               	movlw	low _string_aux
  3770  000FCA  24F3               	addwf	prodl,w,c
  3771  000FCC  6ED9               	movwf	fsr2l,c
  3772  000FCE  0E00               	movlw	high _string_aux
  3773  000FD0  20F4               	addwfc	prodh,w,c
  3774  000FD2  6EDA               	movwf	fsr2h,c
  3775  000FD4  0E00               	movlw	0
  3776  000FD6  6EDF               	movwf	indf2,c
  3777                           
  3778                           ;main.c: 54: strcpy(string,string_aux);
  3779  000FD8  0E97               	movlw	low _string
  3780  000FDA  6E01               	movwf	strcpy@to,c
  3781  000FDC  0E00               	movlw	high _string
  3782  000FDE  6E02               	movwf	strcpy@to+1,c
  3783  000FE0  0E2E               	movlw	low _string_aux
  3784  000FE2  6E03               	movwf	strcpy@from,c
  3785  000FE4  0E00               	movlw	high _string_aux
  3786  000FE6  6E04               	movwf	strcpy@from+1,c
  3787  000FE8  EC6B  F00A         	call	_strcpy	;wreg free
  3788                           
  3789                           ;main.c: 55: printf("\n\r");
  3790  000FEC  0E4A               	movlw	low STR_1
  3791  000FEE  6E0D               	movwf	i2printf@f,c
  3792  000FF0  0E08               	movlw	high STR_1
  3793  000FF2  6E0E               	movwf	i2printf@f+1,c
  3794  000FF4  ECC5  F005         	call	i2_printf	;wreg free
  3795                           
  3796                           ;main.c: 56: i = 0;
  3797  000FF8  0E00               	movlw	0
  3798  000FFA  6E2D               	movwf	_i,c
  3799                           
  3800                           ;main.c: 57: }else
  3801  000FFC  D01D               	goto	i2l2260
  3802  000FFE                     i2l2248:
  3803                           
  3804                           ;main.c: 58: {
  3805                           ;main.c: 59: if(i < 25)
  3806  000FFE  0E19               	movlw	25
  3807  001000  602D               	cpfslt	_i,c
  3808  001002  D016               	goto	i2l2256
  3809                           
  3810                           ;main.c: 60: {
  3811                           ;main.c: 61: i = i%25;
  3812  001004  C02D  F001         	movff	_i,___awmod@dividend
  3813  001008  6A02               	clrf	___awmod@dividend+1,c
  3814  00100A  0E00               	movlw	0
  3815  00100C  6E04               	movwf	___awmod@divisor+1,c
  3816  00100E  0E19               	movlw	25
  3817  001010  6E03               	movwf	___awmod@divisor,c
  3818  001012  EC17  F009         	call	___awmod	;wreg free
  3819  001016  5001               	movf	?___awmod,w,c
  3820  001018  6E2D               	movwf	_i,c
  3821                           
  3822                           ;main.c: 62: string_aux[i] = receivedData;
  3823  00101A  502D               	movf	_i,w,c
  3824  00101C  0D01               	mullw	1
  3825  00101E  0E2E               	movlw	low _string_aux
  3826  001020  24F3               	addwf	prodl,w,c
  3827  001022  6ED9               	movwf	fsr2l,c
  3828  001024  0E00               	movlw	high _string_aux
  3829  001026  20F4               	addwfc	prodh,w,c
  3830  001028  6EDA               	movwf	fsr2h,c
  3831  00102A  C049  FFDF         	movff	_receivedData,indf2
  3832                           
  3833                           ;main.c: 63: i++;
  3834  00102E  2A2D               	incf	_i,f,c
  3835  001030                     i2l2256:
  3836                           
  3837                           ;main.c: 64: }
  3838                           ;main.c: 65: if(i == 25)
  3839  001030  0E19               	movlw	25
  3840  001032  182D               	xorwf	_i,w,c
  3841  001034  B4D8               	btfsc	status,2,c
  3842                           
  3843                           ;main.c: 66: i++;
  3844  001036  2A2D               	incf	_i,f,c
  3845  001038                     i2l2260:
  3846                           
  3847                           ;main.c: 67: }
  3848                           ;main.c: 68: }
  3849                           ;main.c: 70: if(PIR1bits.ADIF){
  3850  001038  AC9E               	btfss	3998,6,c	;volatile
  3851  00103A  D00D               	goto	i2l2268
  3852                           
  3853                           ;main.c: 71: data_ADC = ((ADRESH<<8) + ADRESL);
  3854  00103C  50C4               	movf	4036,w,c	;volatile
  3855  00103E  6E1E               	movwf	(??_interruptions+1)& (0+255),c
  3856  001040  6A1D               	clrf	??_interruptions& (0+255),c
  3857  001042  50C3               	movf	4035,w,c	;volatile
  3858  001044  241D               	addwf	??_interruptions,w,c
  3859  001046  0100               	movlb	0	; () banked
  3860  001048  6F8D               	movwf	_data_ADC& (0+255),b
  3861  00104A  0E00               	movlw	0
  3862  00104C  201E               	addwfc	??_interruptions+1,w,c
  3863  00104E  0100               	movlb	0	; () banked
  3864  001050  6F8E               	movwf	(_data_ADC+1)& (0+255),b
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;main.c: 72: ADCON0bits.GODONE = 1;
  3868  001052  82C2               	bsf	4034,1,c	;volatile
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;main.c: 73: PIR1bits.ADIF = 0;
  3872  001054  9C9E               	bcf	3998,6,c	;volatile
  3873  001056                     i2l2268:
  3874                           
  3875                           ;main.c: 74: }
  3876                           ;main.c: 76: if(INTCONbits.TMR0IF){
  3877  001056  A4F2               	btfss	intcon,2,c	;volatile
  3878  001058  D00D               	goto	i2l229
  3879                           
  3880                           ;main.c: 77: val++;
  3881  00105A  0100               	movlb	0	; () banked
  3882  00105C  2B96               	incf	_val& (0+255),f,b
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;main.c: 78: changing = ~changing;
  3886  00105E  B048               	btfsc	_changing/(0+8),_changing& (0+7),c
  3887  001060  D002               	goto	i2u183_40
  3888  001062  8048               	bsf	_changing/(0+8),_changing& (0+7),c
  3889  001064  D001               	goto	i2l2274
  3890  001066                     i2u183_40:
  3891  001066  9048               	bcf	_changing/(0+8),_changing& (0+7),c
  3892  001068                     i2l2274:
  3893                           
  3894                           ;main.c: 79: PORTDbits.RD3 = changing;
  3895  001068  A048               	btfss	_changing/(0+8),_changing& (0+7),c
  3896  00106A  D002               	bra	i2u185_45
  3897  00106C  8683               	bsf	3971,3,c	;volatile
  3898  00106E  D001               	bra	i2u185_47
  3899  001070                     i2u185_45:
  3900  001070  9683               	bcf	3971,3,c	;volatile
  3901  001072                     i2u185_47:
  3902                           
  3903                           ;main.c: 80: INTCONbits.TMR0IF = 0;
  3904  001072  94F2               	bcf	intcon,2,c	;volatile
  3905  001074                     i2l229:
  3906  001074  C02C  FFF5         	movff	??_interruptions+15,tablat
  3907  001078  C02B  FFF8         	movff	??_interruptions+14,tblptru
  3908  00107C  C02A  FFF7         	movff	??_interruptions+13,tblptrh
  3909  001080  C029  FFF6         	movff	??_interruptions+12,tblptrl
  3910  001084  C028  FFF4         	movff	??_interruptions+11,prodh
  3911  001088  C027  FFF3         	movff	??_interruptions+10,prodl
  3912  00108C  C026  FFDA         	movff	??_interruptions+9,fsr2h
  3913  001090  C025  FFD9         	movff	??_interruptions+8,fsr2l
  3914  001094  C024  FFE2         	movff	??_interruptions+7,fsr1h
  3915  001098  C023  FFE1         	movff	??_interruptions+6,fsr1l
  3916  00109C  C022  FFEA         	movff	??_interruptions+5,fsr0h
  3917  0010A0  C021  FFE9         	movff	??_interruptions+4,fsr0l
  3918  0010A4  C020  FFFB         	movff	??_interruptions+3,pclatu
  3919  0010A8  C01F  FFFA         	movff	??_interruptions+2,pclath
  3920  0010AC  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3921  0010AE  0011               	retfie		f
  3922  0010B0                     __end_of_interruptions:
  3923                           	opt stack 0
  3924                           pclatu	equ	0xFFB
  3925                           pclath	equ	0xFFA
  3926                           tblptru	equ	0xFF8
  3927                           tblptrh	equ	0xFF7
  3928                           tblptrl	equ	0xFF6
  3929                           tablat	equ	0xFF5
  3930                           prodh	equ	0xFF4
  3931                           prodl	equ	0xFF3
  3932                           intcon	equ	0xFF2
  3933                           intcon2	equ	0xFF1
  3934                           postinc0	equ	0xFEE
  3935                           fsr0h	equ	0xFEA
  3936                           fsr0l	equ	0xFE9
  3937                           wreg	equ	0xFE8
  3938                           fsr1h	equ	0xFE2
  3939                           fsr1l	equ	0xFE1
  3940                           indf2	equ	0xFDF
  3941                           postinc2	equ	0xFDE
  3942                           postdec2	equ	0xFDD
  3943                           fsr2h	equ	0xFDA
  3944                           fsr2l	equ	0xFD9
  3945                           status	equ	0xFD8
  3946                           
  3947 ;; *************** function i2_printf *****************
  3948 ;; Defined at:
  3949 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;  f               2   12[COMRAM] PTR const unsigned char 
  3952 ;;		 -> STR_3(2), STR_2(38), STR_1(3), 
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;  printf          4    0        struct .
  3955 ;;  printf          3    0        PTR const unsigned char 
  3956 ;;  printf          2   25[COMRAM] int 
  3957 ;;  printf          2   23[COMRAM] unsigned int 
  3958 ;;  printf          2   19[COMRAM] PTR void [1]
  3959 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3960 ;;  printf          2    0        unsigned int 
  3961 ;;  printf          1   27[COMRAM] char 
  3962 ;;  printf          1   22[COMRAM] unsigned char 
  3963 ;;  printf          1   21[COMRAM] char 
  3964 ;;  printf          1   18[COMRAM] unsigned char 
  3965 ;; Return value:  Size  Location     Type
  3966 ;;                  2   12[COMRAM] int 
  3967 ;; Registers used:
  3968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3969 ;; Tracked objects:
  3970 ;;		On entry : 0/0
  3971 ;;		On exit  : 0/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3974 ;;      Params:         2       0       0       0       0       0       0       0       0
  3975 ;;      Locals:        10       0       0       0       0       0       0       0       0
  3976 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3977 ;;      Totals:        16       0       0       0       0       0       0       0       0
  3978 ;;Total ram usage:       16 bytes
  3979 ;; Hardware stack levels used:    1
  3980 ;; Hardware stack levels required when called:    1
  3981 ;; This function calls:
  3982 ;;		i2___lwdiv
  3983 ;;		i2___lwmod
  3984 ;;		i2___wmul
  3985 ;;		i2_isdigit
  3986 ;;		i2_putch
  3987 ;; This function is called by:
  3988 ;;		_interruptions
  3989 ;; This function uses a non-reentrant model
  3990 ;;
  3991                           
  3992                           	psect	text24
  3993  000B8A                     __ptext24:
  3994                           	opt stack 0
  3995  000B8A                     i2_printf:
  3996                           	opt stack 26
  3997                           
  3998                           ;doprnt.c: 466: va_list ap;
  3999                           ;doprnt.c: 499: signed char c;
  4000                           ;doprnt.c: 501: int width;
  4001                           ;doprnt.c: 506: signed char prec;
  4002                           ;doprnt.c: 508: unsigned char flag;
  4003                           ;doprnt.c: 523: union {
  4004                           ;doprnt.c: 524: unsigned long vd;
  4005                           ;doprnt.c: 525: double integ;
  4006                           ;doprnt.c: 526: } tmpval;
  4007                           ;doprnt.c: 528: unsigned int val;
  4008                           ;doprnt.c: 529: unsigned len;
  4009                           ;doprnt.c: 530: const char * cp;
  4010                           ;doprnt.c: 533: *ap = __va_start();
  4011                           
  4012                           ;incstack = 0
  4013  000B8A  0E0F               	movlw	low (?i2_printf+2)
  4014  000B8C  6E14               	movwf	i2printf@ap,c
  4015  000B8E  0E00               	movlw	high (?i2_printf+2)
  4016  000B90  6E15               	movwf	i2printf@ap+1,c
  4017                           
  4018                           ;doprnt.c: 536: while(c = *f++) {
  4019  000B92  D141               	goto	i2l2230
  4020  000B94                     i2l2128:
  4021                           
  4022                           ;doprnt.c: 538: if(c != '%')
  4023  000B94  0E25               	movlw	37
  4024  000B96  181C               	xorwf	i2printf@c,w,c
  4025  000B98  B4D8               	btfsc	status,2,c
  4026  000B9A  D004               	goto	i2l2132
  4027                           
  4028                           ;doprnt.c: 540: {
  4029                           ;doprnt.c: 541: (putch(c) );
  4030  000B9C  501C               	movf	i2printf@c,w,c
  4031  000B9E  EC1D  F00B         	call	i2_putch
  4032                           
  4033                           ;doprnt.c: 542: continue;
  4034  000BA2  D139               	goto	i2l2230
  4035  000BA4                     i2l2132:
  4036                           
  4037                           ;doprnt.c: 543: }
  4038                           ;doprnt.c: 546: width = 0;
  4039  000BA4  0E00               	movlw	0
  4040  000BA6  6E1B               	movwf	i2printf@width+1,c
  4041  000BA8  0E00               	movlw	0
  4042  000BAA  6E1A               	movwf	i2printf@width,c
  4043                           
  4044                           ;doprnt.c: 548: flag = 0;
  4045  000BAC  0E00               	movlw	0
  4046  000BAE  6E17               	movwf	i2printf@flag,c
  4047                           
  4048                           ;doprnt.c: 551: switch(*f) {
  4049                           
  4050                           ;doprnt.c: 550: for(;;) {
  4051  000BB0  D003               	goto	i2l2138
  4052  000BB2                     i2l2134:
  4053                           
  4054                           ;doprnt.c: 580: flag |= 0x04;
  4055  000BB2  8417               	bsf	i2printf@flag,2,c
  4056                           
  4057                           ;doprnt.c: 581: f++;
  4058  000BB4  4A0D               	infsnz	i2printf@f,f,c
  4059  000BB6  2A0E               	incf	i2printf@f+1,f,c
  4060  000BB8                     i2l2138:
  4061  000BB8  C00D  FFF6         	movff	i2printf@f,tblptrl
  4062  000BBC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4063  000BC0                     	if	0	;tblptru may be non-zero
  4064  000BC0                     	endif
  4065  000BC0                     	if	0	;tblptru may be non-zero
  4066  000BC0                     	endif
  4067  000BC0  0008               	tblrd		*
  4068  000BC2  50F5               	movf	tablat,w,c
  4069                           
  4070                           ; Switch size 1, requested type "space"
  4071                           ; Number of cases is 1, Range of values is 48 to 48
  4072                           ; switch strategies available:
  4073                           ; Name         Instructions Cycles
  4074                           ; simple_byte            4     3 (average)
  4075                           ;	Chosen strategy is simple_byte
  4076  000BC4  0A30               	xorlw	48	; case 48
  4077  000BC6  B4D8               	btfsc	status,2,c
  4078  000BC8  D7F4               	goto	i2l2134
  4079                           
  4080                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4081                           
  4082                           ;doprnt.c: 586: }
  4083                           
  4084                           ;doprnt.c: 585: break;
  4085  000BCA  C00D  FFF6         	movff	i2printf@f,tblptrl
  4086  000BCE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4087  000BD2                     	if	0	;tblptru may be non-zero
  4088  000BD2                     	endif
  4089  000BD2                     	if	0	;tblptru may be non-zero
  4090  000BD2                     	endif
  4091  000BD2  0008               	tblrd		*
  4092  000BD4  50F5               	movf	tablat,w,c
  4093  000BD6  ECBB  F00A         	call	i2_isdigit
  4094  000BDA  A0D8               	btfss	status,0,c
  4095  000BDC  D038               	goto	i2l2158
  4096                           
  4097                           ;doprnt.c: 598: width = 0;
  4098  000BDE  0E00               	movlw	0
  4099  000BE0  6E1B               	movwf	i2printf@width+1,c
  4100  000BE2  0E00               	movlw	0
  4101  000BE4  6E1A               	movwf	i2printf@width,c
  4102  000BE6                     i2l2144:
  4103                           
  4104                           ;doprnt.c: 600: width *= 10;
  4105  000BE6  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
  4106  000BEA  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  4107  000BEE  0E00               	movlw	0
  4108  000BF0  6E04               	movwf	i2___wmul@multiplicand+1,c
  4109  000BF2  0E0A               	movlw	10
  4110  000BF4  6E03               	movwf	i2___wmul@multiplicand,c
  4111  000BF6  EC97  F00A         	call	i2___wmul	;wreg free
  4112  000BFA  C001  F01A         	movff	?i2___wmul,i2printf@width
  4113  000BFE  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
  4114                           
  4115                           ;doprnt.c: 601: width += *f++ - '0';
  4116  000C02  0ED0               	movlw	208
  4117  000C04  6E0F               	movwf	??i2_printf& (0+255),c
  4118  000C06  0EFF               	movlw	255
  4119  000C08  6E10               	movwf	(??i2_printf+1)& (0+255),c
  4120  000C0A  C00D  FFF6         	movff	i2printf@f,tblptrl
  4121  000C0E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4122  000C12                     	if	0	;tblptru may be non-zero
  4123  000C12                     	endif
  4124  000C12                     	if	0	;tblptru may be non-zero
  4125  000C12                     	endif
  4126  000C12  0008               	tblrd		*
  4127  000C14  50F5               	movf	tablat,w,c
  4128  000C16  6E11               	movwf	(??i2_printf+2)& (0+255),c
  4129  000C18  6A12               	clrf	(??i2_printf+3)& (0+255),c
  4130  000C1A  500F               	movf	??i2_printf,w,c
  4131  000C1C  2611               	addwf	??i2_printf+2,f,c
  4132  000C1E  5010               	movf	??i2_printf+1,w,c
  4133  000C20  2212               	addwfc	??i2_printf+3,f,c
  4134  000C22  5011               	movf	??i2_printf+2,w,c
  4135  000C24  261A               	addwf	i2printf@width,f,c
  4136  000C26  5012               	movf	??i2_printf+3,w,c
  4137  000C28  221B               	addwfc	i2printf@width+1,f,c
  4138  000C2A  4A0D               	infsnz	i2printf@f,f,c
  4139  000C2C  2A0E               	incf	i2printf@f+1,f,c
  4140                           
  4141                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4142  000C2E  C00D  FFF6         	movff	i2printf@f,tblptrl
  4143  000C32  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4144  000C36                     	if	0	;tblptru may be non-zero
  4145  000C36                     	endif
  4146  000C36                     	if	0	;tblptru may be non-zero
  4147  000C36                     	endif
  4148  000C36  0008               	tblrd		*
  4149  000C38  50F5               	movf	tablat,w,c
  4150  000C3A  ECBB  F00A         	call	i2_isdigit
  4151  000C3E  A0D8               	btfss	status,0,c
  4152  000C40  D006               	goto	i2l2158
  4153  000C42  D7D1               	goto	i2l2144
  4154  000C44                     i2l2152:
  4155                           
  4156                           ;doprnt.c: 718: case 'x':
  4157                           ;doprnt.c: 721: flag |= 0x80;
  4158  000C44  8E17               	bsf	i2printf@flag,7,c
  4159                           
  4160                           ;doprnt.c: 723: break;
  4161  000C46  D01A               	goto	i2l2160
  4162  000C48                     i2l2154:
  4163                           
  4164                           ;doprnt.c: 818: flag |= 0xC0;
  4165  000C48  0EC0               	movlw	192
  4166  000C4A  1217               	iorwf	i2printf@flag,f,c
  4167                           
  4168                           ;doprnt.c: 822: }
  4169                           
  4170                           ;doprnt.c: 819: break;
  4171  000C4C  D017               	goto	i2l2160
  4172  000C4E                     i2l2158:
  4173  000C4E  C00D  FFF6         	movff	i2printf@f,tblptrl
  4174  000C52  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4175  000C56  4A0D               	infsnz	i2printf@f,f,c
  4176  000C58  2A0E               	incf	i2printf@f+1,f,c
  4177  000C5A                     	if	0	;tblptru may be non-zero
  4178  000C5A                     	endif
  4179  000C5A                     	if	0	;tblptru may be non-zero
  4180  000C5A                     	endif
  4181  000C5A  0008               	tblrd		*
  4182  000C5C  CFF5 F01C          	movff	tablat,i2printf@c
  4183  000C60  501C               	movf	i2printf@c,w,c
  4184                           
  4185                           ; Switch size 1, requested type "space"
  4186                           ; Number of cases is 4, Range of values is 0 to 120
  4187                           ; switch strategies available:
  4188                           ; Name         Instructions Cycles
  4189                           ; simple_byte           13     7 (average)
  4190                           ;	Chosen strategy is simple_byte
  4191  000C62  0A00               	xorlw	0	; case 0
  4192  000C64  B4D8               	btfsc	status,2,c
  4193  000C66  0012               	return	
  4194  000C68  0A58               	xorlw	88	; case 88
  4195  000C6A  B4D8               	btfsc	status,2,c
  4196  000C6C  D7EB               	goto	i2l2152
  4197  000C6E  0A2D               	xorlw	45	; case 117
  4198  000C70  B4D8               	btfsc	status,2,c
  4199  000C72  D7EA               	goto	i2l2154
  4200  000C74  0A0D               	xorlw	13	; case 120
  4201  000C76  B4D8               	btfsc	status,2,c
  4202  000C78  D7E5               	goto	i2l2152
  4203  000C7A  D0CD               	goto	i2l2230
  4204  000C7C                     i2l2160:
  4205                           
  4206                           ;doprnt.c: 1273: {
  4207                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4208  000C7C  C014  FFD9         	movff	i2printf@ap,fsr2l
  4209  000C80  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  4210  000C84  CFDE F018          	movff	postinc2,i2printf@val
  4211  000C88  CFDD F019          	movff	postdec2,i2printf@val+1
  4212  000C8C  0E02               	movlw	2
  4213  000C8E  2614               	addwf	i2printf@ap,f,c
  4214  000C90  0E00               	movlw	0
  4215  000C92  2215               	addwfc	i2printf@ap+1,f,c
  4216                           
  4217                           ;doprnt.c: 1287: }
  4218                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  4219  000C94  D030               	goto	i2l2194
  4220  000C96                     i2l2164:
  4221                           
  4222                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4223  000C96  0E01               	movlw	1
  4224  000C98  6E1C               	movwf	i2printf@c,c
  4225  000C9A                     i2l2166:
  4226  000C9A  0E05               	movlw	5
  4227  000C9C  181C               	xorwf	i2printf@c,w,c
  4228  000C9E  B4D8               	btfsc	status,2,c
  4229  000CA0  D032               	goto	i2l2196
  4230                           
  4231                           ;doprnt.c: 1306: if(val < dpowers[c])
  4232  000CA2  501C               	movf	i2printf@c,w,c
  4233  000CA4  0D02               	mullw	2
  4234  000CA6  0E01               	movlw	low _dpowers
  4235  000CA8  24F3               	addwf	prodl,w,c
  4236  000CAA  6EF6               	movwf	tblptrl,c
  4237  000CAC  0E08               	movlw	high _dpowers
  4238  000CAE  20F4               	addwfc	prodh,w,c
  4239  000CB0  6EF7               	movwf	tblptrh,c
  4240  000CB2                     	if	0	;There are less than 3 active tblptr bytes
  4241  000CB2                     	endif
  4242  000CB2  0009               	tblrd		*+
  4243  000CB4  50F5               	movf	tablat,w,c
  4244  000CB6  5C18               	subwf	i2printf@val,w,c
  4245  000CB8  0009               	tblrd		*+
  4246  000CBA  50F5               	movf	tablat,w,c
  4247  000CBC  5819               	subwfb	i2printf@val+1,w,c
  4248  000CBE  A0D8               	btfss	status,0,c
  4249  000CC0  D022               	goto	i2l2196
  4250                           
  4251                           ;doprnt.c: 1307: break;
  4252  000CC2  2A1C               	incf	i2printf@c,f,c
  4253  000CC4  D7EA               	goto	i2l2166
  4254  000CC6                     i2l2178:
  4255                           
  4256                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4257  000CC6  0E01               	movlw	1
  4258  000CC8  6E1C               	movwf	i2printf@c,c
  4259  000CCA                     i2l2180:
  4260  000CCA  0E04               	movlw	4
  4261  000CCC  181C               	xorwf	i2printf@c,w,c
  4262  000CCE  B4D8               	btfsc	status,2,c
  4263  000CD0  D01A               	goto	i2l2196
  4264                           
  4265                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4266  000CD2  501C               	movf	i2printf@c,w,c
  4267  000CD4  0D02               	mullw	2
  4268  000CD6  0E0B               	movlw	low _hexpowers
  4269  000CD8  24F3               	addwf	prodl,w,c
  4270  000CDA  6EF6               	movwf	tblptrl,c
  4271  000CDC  0E08               	movlw	high _hexpowers
  4272  000CDE  20F4               	addwfc	prodh,w,c
  4273  000CE0  6EF7               	movwf	tblptrh,c
  4274  000CE2                     	if	0	;There are less than 3 active tblptr bytes
  4275  000CE2                     	endif
  4276  000CE2  0009               	tblrd		*+
  4277  000CE4  50F5               	movf	tablat,w,c
  4278  000CE6  5C18               	subwf	i2printf@val,w,c
  4279  000CE8  0009               	tblrd		*+
  4280  000CEA  50F5               	movf	tablat,w,c
  4281  000CEC  5819               	subwfb	i2printf@val+1,w,c
  4282  000CEE  A0D8               	btfss	status,0,c
  4283  000CF0  D00A               	goto	i2l2196
  4284                           
  4285                           ;doprnt.c: 1318: break;
  4286  000CF2  2A1C               	incf	i2printf@c,f,c
  4287  000CF4  D7EA               	goto	i2l2180
  4288  000CF6                     i2l2194:
  4289  000CF6  5017               	movf	i2printf@flag,w,c
  4290  000CF8  0BC0               	andlw	192
  4291                           
  4292                           ; Switch size 1, requested type "space"
  4293                           ; Number of cases is 2, Range of values is 128 to 192
  4294                           ; switch strategies available:
  4295                           ; Name         Instructions Cycles
  4296                           ; simple_byte            7     4 (average)
  4297                           ;	Chosen strategy is simple_byte
  4298  000CFA  0A80               	xorlw	128	; case 128
  4299  000CFC  B4D8               	btfsc	status,2,c
  4300  000CFE  D7E3               	goto	i2l2178
  4301  000D00  0A40               	xorlw	64	; case 192
  4302  000D02  B4D8               	btfsc	status,2,c
  4303  000D04  D7C8               	goto	i2l2164
  4304  000D06                     i2l2196:
  4305                           
  4306                           ;doprnt.c: 1381: if(width > c)
  4307  000D06  0E80               	movlw	128
  4308  000D08  BE1C               	btfsc	i2printf@c,7,c
  4309  000D0A  0E7F               	movlw	127
  4310  000D0C  6E0F               	movwf	??i2_printf& (0+255),c
  4311  000D0E  501A               	movf	i2printf@width,w,c
  4312  000D10  5C1C               	subwf	i2printf@c,w,c
  4313  000D12  501B               	movf	i2printf@width+1,w,c
  4314  000D14  0A80               	xorlw	128
  4315  000D16  580F               	subwfb	??i2_printf& (0+255),w,c
  4316  000D18  B0D8               	btfsc	status,0,c
  4317  000D1A  D007               	goto	i2l2200
  4318                           
  4319                           ;doprnt.c: 1382: width -= c;
  4320  000D1C  501C               	movf	i2printf@c,w,c
  4321  000D1E  5E1A               	subwf	i2printf@width,f,c
  4322  000D20  0E00               	movlw	0
  4323  000D22  BE1C               	btfsc	i2printf@c,7,c
  4324  000D24  0EFF               	movlw	255
  4325  000D26  5A1B               	subwfb	i2printf@width+1,f,c
  4326  000D28  D004               	goto	i2l2202
  4327  000D2A                     i2l2200:
  4328                           
  4329                           ;doprnt.c: 1383: else
  4330                           ;doprnt.c: 1384: width = 0;
  4331  000D2A  0E00               	movlw	0
  4332  000D2C  6E1B               	movwf	i2printf@width+1,c
  4333  000D2E  0E00               	movlw	0
  4334  000D30  6E1A               	movwf	i2printf@width,c
  4335  000D32                     i2l2202:
  4336                           
  4337                           ;doprnt.c: 1387: if(flag & 0x04) {
  4338  000D32  A417               	btfss	i2printf@flag,2,c
  4339  000D34  D00B               	goto	i2l2210
  4340  000D36                     
  4341                           ;doprnt.c: 1415: if(width)
  4342  000D36  501A               	movf	i2printf@width,w,c
  4343  000D38  101B               	iorwf	i2printf@width+1,w,c
  4344  000D3A  B4D8               	btfsc	status,2,c
  4345  000D3C  D015               	goto	i2l367
  4346                           
  4347                           ;doprnt.c: 1417: (putch('0') );
  4348                           
  4349                           ;doprnt.c: 1416: do
  4350  000D3E  0E30               	movlw	48
  4351  000D40  EC1D  F00B         	call	i2_putch
  4352                           
  4353                           ;doprnt.c: 1418: while(--width);
  4354  000D44  061A               	decf	i2printf@width,f,c
  4355  000D46  A0D8               	btfss	status,0,c
  4356  000D48  061B               	decf	i2printf@width+1,f,c
  4357  000D4A  D7F5               	goto	L2
  4358  000D4C                     i2l2210:
  4359                           
  4360                           ;doprnt.c: 1422: {
  4361                           ;doprnt.c: 1424: if(width
  4362                           ;doprnt.c: 1428: )
  4363  000D4C  501A               	movf	i2printf@width,w,c
  4364  000D4E  101B               	iorwf	i2printf@width+1,w,c
  4365  000D50  B4D8               	btfsc	status,2,c
  4366  000D52  D00A               	goto	i2l367
  4367  000D54                     i2l2212:
  4368                           
  4369                           ;doprnt.c: 1430: (putch(' ') );
  4370  000D54  0E20               	movlw	32
  4371  000D56  EC1D  F00B         	call	i2_putch
  4372                           
  4373                           ;doprnt.c: 1431: while(--width);
  4374  000D5A  061A               	decf	i2printf@width,f,c
  4375  000D5C  A0D8               	btfss	status,0,c
  4376  000D5E  061B               	decf	i2printf@width+1,f,c
  4377  000D60  501A               	movf	i2printf@width,w,c
  4378  000D62  101B               	iorwf	i2printf@width+1,w,c
  4379  000D64  A4D8               	btfss	status,2,c
  4380  000D66  D7F6               	goto	i2l2212
  4381  000D68                     i2l367:
  4382                           
  4383                           ;doprnt.c: 1469: }
  4384                           ;doprnt.c: 1472: prec = c;
  4385  000D68  C01C  F016         	movff	i2printf@c,i2printf@prec
  4386                           
  4387                           ;doprnt.c: 1474: while(prec--) {
  4388  000D6C  D050               	goto	i2l2228
  4389  000D6E                     i2l2216:
  4390                           
  4391                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4392  000D6E  5016               	movf	i2printf@prec,w,c
  4393  000D70  0D02               	mullw	2
  4394  000D72  0E01               	movlw	low _dpowers
  4395  000D74  24F3               	addwf	prodl,w,c
  4396  000D76  6EF6               	movwf	tblptrl,c
  4397  000D78  0E08               	movlw	high _dpowers
  4398  000D7A  20F4               	addwfc	prodh,w,c
  4399  000D7C  6EF7               	movwf	tblptrh,c
  4400  000D7E                     	if	0	;There are less than 3 active tblptr bytes
  4401  000D7E                     	endif
  4402  000D7E  0009               	tblrd		*+
  4403  000D80  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4404  000D84  000A               	tblrd		*-
  4405  000D86  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4406  000D8A  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4407  000D8E  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4408  000D92  ECDF  F009         	call	i2___lwdiv	;wreg free
  4409  000D96  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  4410  000D9A  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  4411  000D9E  0E00               	movlw	0
  4412  000DA0  6E0B               	movwf	i2___lwmod@divisor+1,c
  4413  000DA2  0E0A               	movlw	10
  4414  000DA4  6E0A               	movwf	i2___lwmod@divisor,c
  4415  000DA6  EC2F  F00A         	call	i2___lwmod	;wreg free
  4416  000DAA  5008               	movf	?i2___lwmod,w,c
  4417  000DAC  0F30               	addlw	48
  4418  000DAE  6E1C               	movwf	i2printf@c,c
  4419                           
  4420                           ;doprnt.c: 1491: break;
  4421  000DB0  D02B               	goto	i2l2226
  4422  000DB2                     i2l2218:
  4423                           
  4424                           ;doprnt.c: 1499: {
  4425                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4426  000DB2  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4427  000DB6  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4428  000DBA  5016               	movf	i2printf@prec,w,c
  4429  000DBC  0D02               	mullw	2
  4430  000DBE  0E0B               	movlw	low _hexpowers
  4431  000DC0  24F3               	addwf	prodl,w,c
  4432  000DC2  6EF6               	movwf	tblptrl,c
  4433  000DC4  0E08               	movlw	high _hexpowers
  4434  000DC6  20F4               	addwfc	prodh,w,c
  4435  000DC8  6EF7               	movwf	tblptrh,c
  4436  000DCA                     	if	0	;There are less than 3 active tblptr bytes
  4437  000DCA                     	endif
  4438  000DCA  0009               	tblrd		*+
  4439  000DCC  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4440  000DD0  000A               	tblrd		*-
  4441  000DD2  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4442  000DD6  ECDF  F009         	call	i2___lwdiv	;wreg free
  4443  000DDA  5001               	movf	?i2___lwdiv,w,c
  4444  000DDC  0B0F               	andlw	15
  4445  000DDE  6E13               	movwf	i2printf@idx,c
  4446                           
  4447                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  4448  000DE0  5013               	movf	i2printf@idx,w,c
  4449  000DE2  0D01               	mullw	1
  4450  000DE4  0E39               	movlw	low STR_4
  4451  000DE6  24F3               	addwf	prodl,w,c
  4452  000DE8  6EF6               	movwf	tblptrl,c
  4453  000DEA  0E08               	movlw	high STR_4
  4454  000DEC  20F4               	addwfc	prodh,w,c
  4455  000DEE  6EF7               	movwf	tblptrh,c
  4456  000DF0                     	if	0	;There are less than 3 active tblptr bytes
  4457  000DF0                     	endif
  4458  000DF0  0008               	tblrd		*
  4459  000DF2  CFF5 F01C          	movff	tablat,i2printf@c
  4460                           
  4461                           ;doprnt.c: 1523: }
  4462                           
  4463                           ;doprnt.c: 1508: }
  4464                           ;doprnt.c: 1510: break;
  4465  000DF6  D008               	goto	i2l2226
  4466  000DF8                     i2l2224:
  4467  000DF8  5017               	movf	i2printf@flag,w,c
  4468  000DFA  0BC0               	andlw	192
  4469                           
  4470                           ; Switch size 1, requested type "space"
  4471                           ; Number of cases is 2, Range of values is 128 to 192
  4472                           ; switch strategies available:
  4473                           ; Name         Instructions Cycles
  4474                           ; simple_byte            7     4 (average)
  4475                           ;	Chosen strategy is simple_byte
  4476  000DFC  0A80               	xorlw	128	; case 128
  4477  000DFE  B4D8               	btfsc	status,2,c
  4478  000E00  D7D8               	goto	i2l2218
  4479  000E02  0A40               	xorlw	64	; case 192
  4480  000E04  B4D8               	btfsc	status,2,c
  4481  000E06  D7B3               	goto	i2l2216
  4482  000E08                     i2l2226:
  4483                           
  4484                           ;doprnt.c: 1524: (putch(c) );
  4485  000E08  501C               	movf	i2printf@c,w,c
  4486  000E0A  EC1D  F00B         	call	i2_putch
  4487  000E0E                     i2l2228:
  4488  000E0E  0616               	decf	i2printf@prec,f,c
  4489  000E10  2816               	incf	i2printf@prec,w,c
  4490  000E12  A4D8               	btfss	status,2,c
  4491  000E14  D7F1               	goto	i2l2224
  4492  000E16                     i2l2230:
  4493  000E16  C00D  FFF6         	movff	i2printf@f,tblptrl
  4494  000E1A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4495  000E1E  4A0D               	infsnz	i2printf@f,f,c
  4496  000E20  2A0E               	incf	i2printf@f+1,f,c
  4497  000E22                     	if	0	;tblptru may be non-zero
  4498  000E22                     	endif
  4499  000E22                     	if	0	;tblptru may be non-zero
  4500  000E22                     	endif
  4501  000E22  0008               	tblrd		*
  4502  000E24  CFF5 F01C          	movff	tablat,i2printf@c
  4503  000E28  501C               	movf	i2printf@c,w,c
  4504  000E2A  B4D8               	btfsc	status,2,c
  4505  000E2C  0012               	return	
  4506  000E2E  D6B2               	goto	i2l2128
  4507  000E30                     __end_ofi2_printf:
  4508                           	opt stack 0
  4509                           pclatu	equ	0xFFB
  4510                           pclath	equ	0xFFA
  4511                           tblptru	equ	0xFF8
  4512                           tblptrh	equ	0xFF7
  4513                           tblptrl	equ	0xFF6
  4514                           tablat	equ	0xFF5
  4515                           prodh	equ	0xFF4
  4516                           prodl	equ	0xFF3
  4517                           intcon	equ	0xFF2
  4518                           intcon2	equ	0xFF1
  4519                           postinc0	equ	0xFEE
  4520                           fsr0h	equ	0xFEA
  4521                           fsr0l	equ	0xFE9
  4522                           wreg	equ	0xFE8
  4523                           fsr1h	equ	0xFE2
  4524                           fsr1l	equ	0xFE1
  4525                           indf2	equ	0xFDF
  4526                           postinc2	equ	0xFDE
  4527                           postdec2	equ	0xFDD
  4528                           fsr2h	equ	0xFDA
  4529                           fsr2l	equ	0xFD9
  4530                           status	equ	0xFD8
  4531                           
  4532 ;; *************** function i2_putch *****************
  4533 ;; Defined at:
  4534 ;;		line 46 in file "usart.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;  byte            1    wreg     unsigned char 
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;  byte            1    0[COMRAM] unsigned char 
  4539 ;; Return value:  Size  Location     Type
  4540 ;;		None               void
  4541 ;; Registers used:
  4542 ;;		wreg
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4548 ;;      Params:         0       0       0       0       0       0       0       0       0
  4549 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4550 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4551 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4552 ;;Total ram usage:        1 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; This function calls:
  4555 ;;		Nothing
  4556 ;; This function is called by:
  4557 ;;		i2_printf
  4558 ;; This function uses a non-reentrant model
  4559 ;;
  4560                           
  4561                           	psect	text25
  4562  00163A                     __ptext25:
  4563                           	opt stack 0
  4564  00163A                     i2_putch:
  4565                           	opt stack 26
  4566                           
  4567                           ;incstack = 0
  4568                           ;i2putch@byte stored from wreg
  4569  00163A  6E01               	movwf	i2putch@byte,c
  4570  00163C                     i2l304:
  4571  00163C  A89E               	btfss	3998,4,c	;volatile
  4572  00163E  D7FE               	goto	i2l304
  4573                           
  4574                           ;usart.c: 50: TXREG = byte;
  4575  001640  C001  FFAD         	movff	i2putch@byte,4013	;volatile
  4576  001644  0012               	return		;funcret
  4577  001646                     __end_ofi2_putch:
  4578                           	opt stack 0
  4579                           pclatu	equ	0xFFB
  4580                           pclath	equ	0xFFA
  4581                           tblptru	equ	0xFF8
  4582                           tblptrh	equ	0xFF7
  4583                           tblptrl	equ	0xFF6
  4584                           tablat	equ	0xFF5
  4585                           prodh	equ	0xFF4
  4586                           prodl	equ	0xFF3
  4587                           intcon	equ	0xFF2
  4588                           intcon2	equ	0xFF1
  4589                           postinc0	equ	0xFEE
  4590                           fsr0h	equ	0xFEA
  4591                           fsr0l	equ	0xFE9
  4592                           wreg	equ	0xFE8
  4593                           fsr1h	equ	0xFE2
  4594                           fsr1l	equ	0xFE1
  4595                           indf2	equ	0xFDF
  4596                           postinc2	equ	0xFDE
  4597                           postdec2	equ	0xFDD
  4598                           fsr2h	equ	0xFDA
  4599                           fsr2l	equ	0xFD9
  4600                           status	equ	0xFD8
  4601                           
  4602 ;; *************** function i2_isdigit *****************
  4603 ;; Defined at:
  4604 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;  c               1    wreg     unsigned char 
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  c               1    2[COMRAM] unsigned char 
  4609 ;; Return value:  Size  Location     Type
  4610 ;;		None               void
  4611 ;; Registers used:
  4612 ;;		wreg, status,2, status,0
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4618 ;;      Params:         0       0       0       0       0       0       0       0       0
  4619 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4620 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4621 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4622 ;;Total ram usage:        3 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; This function calls:
  4625 ;;		Nothing
  4626 ;; This function is called by:
  4627 ;;		i2_printf
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           	psect	text26
  4632  001576                     __ptext26:
  4633                           	opt stack 0
  4634  001576                     i2_isdigit:
  4635                           	opt stack 26
  4636                           
  4637                           ;incstack = 0
  4638                           ;i2isdigit@c stored from wreg
  4639  001576  6E03               	movwf	i2isdigit@c,c
  4640  001578  0E00               	movlw	0
  4641  00157A  6E02               	movwf	i2_isdigit$1377,c
  4642  00157C  0E3A               	movlw	58
  4643  00157E  6003               	cpfslt	i2isdigit@c,c
  4644  001580  D005               	goto	i2l1786
  4645  001582  0E2F               	movlw	47
  4646  001584  6403               	cpfsgt	i2isdigit@c,c
  4647  001586  D002               	goto	i2l1786
  4648  001588  0E01               	movlw	1
  4649  00158A  6E02               	movwf	i2_isdigit$1377,c
  4650  00158C                     i2l1786:
  4651  00158C  C002  F001         	movff	i2_isdigit$1377,??i2_isdigit
  4652  001590  3001               	rrcf	??i2_isdigit,w,c
  4653  001592  0012               	return	
  4654  001594                     __end_ofi2_isdigit:
  4655                           	opt stack 0
  4656                           pclatu	equ	0xFFB
  4657                           pclath	equ	0xFFA
  4658                           tblptru	equ	0xFF8
  4659                           tblptrh	equ	0xFF7
  4660                           tblptrl	equ	0xFF6
  4661                           tablat	equ	0xFF5
  4662                           prodh	equ	0xFF4
  4663                           prodl	equ	0xFF3
  4664                           intcon	equ	0xFF2
  4665                           intcon2	equ	0xFF1
  4666                           postinc0	equ	0xFEE
  4667                           fsr0h	equ	0xFEA
  4668                           fsr0l	equ	0xFE9
  4669                           wreg	equ	0xFE8
  4670                           fsr1h	equ	0xFE2
  4671                           fsr1l	equ	0xFE1
  4672                           indf2	equ	0xFDF
  4673                           postinc2	equ	0xFDE
  4674                           postdec2	equ	0xFDD
  4675                           fsr2h	equ	0xFDA
  4676                           fsr2l	equ	0xFD9
  4677                           status	equ	0xFD8
  4678                           
  4679 ;; *************** function i2___wmul *****************
  4680 ;; Defined at:
  4681 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;  multiplier      2    0[COMRAM] unsigned int 
  4684 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4685 ;; Auto vars:     Size  Location     Type
  4686 ;;  __wmul          2    4[COMRAM] unsigned int 
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  2    0[COMRAM] unsigned int 
  4689 ;; Registers used:
  4690 ;;		wreg, status,2, status,0, prodl, prodh
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4696 ;;      Params:         4       0       0       0       0       0       0       0       0
  4697 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4698 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4699 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4700 ;;Total ram usage:        6 bytes
  4701 ;; Hardware stack levels used:    1
  4702 ;; This function calls:
  4703 ;;		Nothing
  4704 ;; This function is called by:
  4705 ;;		i2_printf
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           	psect	text27
  4710  00152E                     __ptext27:
  4711                           	opt stack 0
  4712  00152E                     i2___wmul:
  4713                           	opt stack 26
  4714                           
  4715                           ;incstack = 0
  4716  00152E  5001               	movf	i2___wmul@multiplier,w,c
  4717  001530  0203               	mulwf	i2___wmul@multiplicand,c
  4718  001532  CFF3 F005          	movff	prodl,i2___wmul@product
  4719  001536  CFF4 F006          	movff	prodh,i2___wmul@product+1
  4720  00153A  5001               	movf	i2___wmul@multiplier,w,c
  4721  00153C  0204               	mulwf	i2___wmul@multiplicand+1,c
  4722  00153E  50F3               	movf	prodl,w,c
  4723  001540  2606               	addwf	i2___wmul@product+1,f,c
  4724  001542  5002               	movf	i2___wmul@multiplier+1,w,c
  4725  001544  0203               	mulwf	i2___wmul@multiplicand,c
  4726  001546  50F3               	movf	prodl,w,c
  4727  001548  2606               	addwf	i2___wmul@product+1,f,c
  4728  00154A  C005  F001         	movff	i2___wmul@product,?i2___wmul
  4729  00154E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  4730  001552  0012               	return	
  4731  001554                     __end_ofi2___wmul:
  4732                           	opt stack 0
  4733                           pclatu	equ	0xFFB
  4734                           pclath	equ	0xFFA
  4735                           tblptru	equ	0xFF8
  4736                           tblptrh	equ	0xFF7
  4737                           tblptrl	equ	0xFF6
  4738                           tablat	equ	0xFF5
  4739                           prodh	equ	0xFF4
  4740                           prodl	equ	0xFF3
  4741                           intcon	equ	0xFF2
  4742                           intcon2	equ	0xFF1
  4743                           postinc0	equ	0xFEE
  4744                           fsr0h	equ	0xFEA
  4745                           fsr0l	equ	0xFE9
  4746                           wreg	equ	0xFE8
  4747                           fsr1h	equ	0xFE2
  4748                           fsr1l	equ	0xFE1
  4749                           indf2	equ	0xFDF
  4750                           postinc2	equ	0xFDE
  4751                           postdec2	equ	0xFDD
  4752                           fsr2h	equ	0xFDA
  4753                           fsr2l	equ	0xFD9
  4754                           status	equ	0xFD8
  4755                           
  4756 ;; *************** function i2___lwmod *****************
  4757 ;; Defined at:
  4758 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;  dividend        2    7[COMRAM] unsigned int 
  4761 ;;  divisor         2    9[COMRAM] unsigned int 
  4762 ;; Auto vars:     Size  Location     Type
  4763 ;;  __lwmod         1   11[COMRAM] unsigned char 
  4764 ;; Return value:  Size  Location     Type
  4765 ;;                  2    7[COMRAM] unsigned int 
  4766 ;; Registers used:
  4767 ;;		wreg, status,2, status,0
  4768 ;; Tracked objects:
  4769 ;;		On entry : 0/0
  4770 ;;		On exit  : 0/0
  4771 ;;		Unchanged: 0/0
  4772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4773 ;;      Params:         4       0       0       0       0       0       0       0       0
  4774 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4775 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4776 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4777 ;;Total ram usage:        5 bytes
  4778 ;; Hardware stack levels used:    1
  4779 ;; This function calls:
  4780 ;;		Nothing
  4781 ;; This function is called by:
  4782 ;;		i2_printf
  4783 ;; This function uses a non-reentrant model
  4784 ;;
  4785                           
  4786                           	psect	text28
  4787  00145E                     __ptext28:
  4788                           	opt stack 0
  4789  00145E                     i2___lwmod:
  4790                           	opt stack 26
  4791                           
  4792                           ;incstack = 0
  4793  00145E  500A               	movf	i2___lwmod@divisor,w,c
  4794  001460  100B               	iorwf	i2___lwmod@divisor+1,w,c
  4795  001462  B4D8               	btfsc	status,2,c
  4796  001464  D018               	goto	i2l797
  4797  001466  0E01               	movlw	1
  4798  001468  6E0C               	movwf	i2___lwmod@counter,c
  4799  00146A  D004               	goto	i2l1818
  4800  00146C                     i2l1816:
  4801  00146C  90D8               	bcf	status,0,c
  4802  00146E  360A               	rlcf	i2___lwmod@divisor,f,c
  4803  001470  360B               	rlcf	i2___lwmod@divisor+1,f,c
  4804  001472  2A0C               	incf	i2___lwmod@counter,f,c
  4805  001474                     i2l1818:
  4806  001474  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  4807  001476  D7FA               	goto	i2l1816
  4808  001478                     i2l1820:
  4809  001478  500A               	movf	i2___lwmod@divisor,w,c
  4810  00147A  5C08               	subwf	i2___lwmod@dividend,w,c
  4811  00147C  500B               	movf	i2___lwmod@divisor+1,w,c
  4812  00147E  5809               	subwfb	i2___lwmod@dividend+1,w,c
  4813  001480  A0D8               	btfss	status,0,c
  4814  001482  D004               	goto	i2l1824
  4815  001484  500A               	movf	i2___lwmod@divisor,w,c
  4816  001486  5E08               	subwf	i2___lwmod@dividend,f,c
  4817  001488  500B               	movf	i2___lwmod@divisor+1,w,c
  4818  00148A  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  4819  00148C                     i2l1824:
  4820  00148C  90D8               	bcf	status,0,c
  4821  00148E  320B               	rrcf	i2___lwmod@divisor+1,f,c
  4822  001490  320A               	rrcf	i2___lwmod@divisor,f,c
  4823  001492  2E0C               	decfsz	i2___lwmod@counter,f,c
  4824  001494  D7F1               	goto	i2l1820
  4825  001496                     i2l797:
  4826  001496  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  4827  00149A  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  4828  00149E  0012               	return		;funcret
  4829  0014A0                     __end_ofi2___lwmod:
  4830                           	opt stack 0
  4831                           pclatu	equ	0xFFB
  4832                           pclath	equ	0xFFA
  4833                           tblptru	equ	0xFF8
  4834                           tblptrh	equ	0xFF7
  4835                           tblptrl	equ	0xFF6
  4836                           tablat	equ	0xFF5
  4837                           prodh	equ	0xFF4
  4838                           prodl	equ	0xFF3
  4839                           intcon	equ	0xFF2
  4840                           intcon2	equ	0xFF1
  4841                           postinc0	equ	0xFEE
  4842                           fsr0h	equ	0xFEA
  4843                           fsr0l	equ	0xFE9
  4844                           wreg	equ	0xFE8
  4845                           fsr1h	equ	0xFE2
  4846                           fsr1l	equ	0xFE1
  4847                           indf2	equ	0xFDF
  4848                           postinc2	equ	0xFDE
  4849                           postdec2	equ	0xFDD
  4850                           fsr2h	equ	0xFDA
  4851                           fsr2l	equ	0xFD9
  4852                           status	equ	0xFD8
  4853                           
  4854 ;; *************** function i2___lwdiv *****************
  4855 ;; Defined at:
  4856 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;  dividend        2    0[COMRAM] unsigned int 
  4859 ;;  divisor         2    2[COMRAM] unsigned int 
  4860 ;; Auto vars:     Size  Location     Type
  4861 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  4862 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  4863 ;; Return value:  Size  Location     Type
  4864 ;;                  2    0[COMRAM] unsigned int 
  4865 ;; Registers used:
  4866 ;;		wreg, status,2, status,0
  4867 ;; Tracked objects:
  4868 ;;		On entry : 0/0
  4869 ;;		On exit  : 0/0
  4870 ;;		Unchanged: 0/0
  4871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4872 ;;      Params:         4       0       0       0       0       0       0       0       0
  4873 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4874 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4875 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4876 ;;Total ram usage:        7 bytes
  4877 ;; Hardware stack levels used:    1
  4878 ;; This function calls:
  4879 ;;		Nothing
  4880 ;; This function is called by:
  4881 ;;		i2_printf
  4882 ;; This function uses a non-reentrant model
  4883 ;;
  4884                           
  4885                           	psect	text29
  4886  0013BE                     __ptext29:
  4887                           	opt stack 0
  4888  0013BE                     i2___lwdiv:
  4889                           	opt stack 26
  4890                           
  4891                           ;incstack = 0
  4892  0013BE  0E00               	movlw	0
  4893  0013C0  6E06               	movwf	i2___lwdiv@quotient+1,c
  4894  0013C2  0E00               	movlw	0
  4895  0013C4  6E05               	movwf	i2___lwdiv@quotient,c
  4896  0013C6  5003               	movf	i2___lwdiv@divisor,w,c
  4897  0013C8  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  4898  0013CA  B4D8               	btfsc	status,2,c
  4899  0013CC  D01C               	goto	i2l787
  4900  0013CE  0E01               	movlw	1
  4901  0013D0  6E07               	movwf	i2___lwdiv@counter,c
  4902  0013D2  D004               	goto	i2l1798
  4903  0013D4                     i2l1796:
  4904  0013D4  90D8               	bcf	status,0,c
  4905  0013D6  3603               	rlcf	i2___lwdiv@divisor,f,c
  4906  0013D8  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  4907  0013DA  2A07               	incf	i2___lwdiv@counter,f,c
  4908  0013DC                     i2l1798:
  4909  0013DC  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  4910  0013DE  D7FA               	goto	i2l1796
  4911  0013E0                     i2l1800:
  4912  0013E0  90D8               	bcf	status,0,c
  4913  0013E2  3605               	rlcf	i2___lwdiv@quotient,f,c
  4914  0013E4  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  4915  0013E6  5003               	movf	i2___lwdiv@divisor,w,c
  4916  0013E8  5C01               	subwf	i2___lwdiv@dividend,w,c
  4917  0013EA  5004               	movf	i2___lwdiv@divisor+1,w,c
  4918  0013EC  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  4919  0013EE  A0D8               	btfss	status,0,c
  4920  0013F0  D005               	goto	i2l1808
  4921  0013F2  5003               	movf	i2___lwdiv@divisor,w,c
  4922  0013F4  5E01               	subwf	i2___lwdiv@dividend,f,c
  4923  0013F6  5004               	movf	i2___lwdiv@divisor+1,w,c
  4924  0013F8  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  4925  0013FA  8005               	bsf	i2___lwdiv@quotient,0,c
  4926  0013FC                     i2l1808:
  4927  0013FC  90D8               	bcf	status,0,c
  4928  0013FE  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  4929  001400  3203               	rrcf	i2___lwdiv@divisor,f,c
  4930  001402  2E07               	decfsz	i2___lwdiv@counter,f,c
  4931  001404  D7ED               	goto	i2l1800
  4932  001406                     i2l787:
  4933  001406  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  4934  00140A  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  4935  00140E  0012               	return		;funcret
  4936  001410                     __end_ofi2___lwdiv:
  4937                           	opt stack 0
  4938                           pclatu	equ	0xFFB
  4939                           pclath	equ	0xFFA
  4940                           tblptru	equ	0xFF8
  4941                           tblptrh	equ	0xFF7
  4942                           tblptrl	equ	0xFF6
  4943                           tablat	equ	0xFF5
  4944                           prodh	equ	0xFF4
  4945                           prodl	equ	0xFF3
  4946                           intcon	equ	0xFF2
  4947                           intcon2	equ	0xFF1
  4948                           postinc0	equ	0xFEE
  4949                           fsr0h	equ	0xFEA
  4950                           fsr0l	equ	0xFE9
  4951                           wreg	equ	0xFE8
  4952                           fsr1h	equ	0xFE2
  4953                           fsr1l	equ	0xFE1
  4954                           indf2	equ	0xFDF
  4955                           postinc2	equ	0xFDE
  4956                           postdec2	equ	0xFDD
  4957                           fsr2h	equ	0xFDA
  4958                           fsr2l	equ	0xFD9
  4959                           status	equ	0xFD8
  4960                           
  4961 ;; *************** function _strcpy *****************
  4962 ;; Defined at:
  4963 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strcpy.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;  to              2    0[COMRAM] PTR unsigned char 
  4966 ;;		 -> string(26), 
  4967 ;;  from            2    2[COMRAM] PTR const unsigned char 
  4968 ;;		 -> string_aux(26), 
  4969 ;; Auto vars:     Size  Location     Type
  4970 ;;  cp              2    4[COMRAM] PTR unsigned char 
  4971 ;;		 -> string(26), 
  4972 ;; Return value:  Size  Location     Type
  4973 ;;                  2    0[COMRAM] PTR unsigned char 
  4974 ;; Registers used:
  4975 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4976 ;; Tracked objects:
  4977 ;;		On entry : 0/0
  4978 ;;		On exit  : 0/0
  4979 ;;		Unchanged: 0/0
  4980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4981 ;;      Params:         4       0       0       0       0       0       0       0       0
  4982 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4983 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4984 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4985 ;;Total ram usage:        6 bytes
  4986 ;; Hardware stack levels used:    1
  4987 ;; This function calls:
  4988 ;;		Nothing
  4989 ;; This function is called by:
  4990 ;;		_interruptions
  4991 ;; This function uses a non-reentrant model
  4992 ;;
  4993                           
  4994                           	psect	text30
  4995  0014D6                     __ptext30:
  4996                           	opt stack 0
  4997  0014D6                     _strcpy:
  4998                           	opt stack 27
  4999                           
  5000                           ;incstack = 0
  5001  0014D6  C001  F005         	movff	strcpy@to,strcpy@cp
  5002  0014DA  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  5003  0014DE  D004               	goto	i2l1900
  5004  0014E0                     i2l1898:
  5005  0014E0  4A05               	infsnz	strcpy@cp,f,c
  5006  0014E2  2A06               	incf	strcpy@cp+1,f,c
  5007  0014E4  4A03               	infsnz	strcpy@from,f,c
  5008  0014E6  2A04               	incf	strcpy@from+1,f,c
  5009  0014E8                     i2l1900:
  5010  0014E8  C003  FFD9         	movff	strcpy@from,fsr2l
  5011  0014EC  C004  FFDA         	movff	strcpy@from+1,fsr2h
  5012  0014F0  C005  FFE1         	movff	strcpy@cp,fsr1l
  5013  0014F4  C006  FFE2         	movff	strcpy@cp+1,fsr1h
  5014  0014F8  CFDF FFE7          	movff	indf2,indf1
  5015  0014FC  50E7               	movf	indf1,w,c
  5016  0014FE  B4D8               	btfsc	status,2,c
  5017  001500  0012               	return	
  5018  001502  D7EE               	goto	i2l1898
  5019  001504                     __end_of_strcpy:
  5020                           	opt stack 0
  5021                           pclatu	equ	0xFFB
  5022                           pclath	equ	0xFFA
  5023                           tblptru	equ	0xFF8
  5024                           tblptrh	equ	0xFF7
  5025                           tblptrl	equ	0xFF6
  5026                           tablat	equ	0xFF5
  5027                           prodh	equ	0xFF4
  5028                           prodl	equ	0xFF3
  5029                           intcon	equ	0xFF2
  5030                           intcon2	equ	0xFF1
  5031                           postinc0	equ	0xFEE
  5032                           fsr0h	equ	0xFEA
  5033                           fsr0l	equ	0xFE9
  5034                           wreg	equ	0xFE8
  5035                           indf1	equ	0xFE7
  5036                           fsr1h	equ	0xFE2
  5037                           fsr1l	equ	0xFE1
  5038                           indf2	equ	0xFDF
  5039                           postinc2	equ	0xFDE
  5040                           postdec2	equ	0xFDD
  5041                           fsr2h	equ	0xFDA
  5042                           fsr2l	equ	0xFD9
  5043                           status	equ	0xFD8
  5044                           
  5045 ;; *************** function ___awmod *****************
  5046 ;; Defined at:
  5047 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;  dividend        2    0[COMRAM] int 
  5050 ;;  divisor         2    2[COMRAM] int 
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;  sign            1    5[COMRAM] unsigned char 
  5053 ;;  counter         1    4[COMRAM] unsigned char 
  5054 ;; Return value:  Size  Location     Type
  5055 ;;                  2    0[COMRAM] int 
  5056 ;; Registers used:
  5057 ;;		wreg, status,2, status,0
  5058 ;; Tracked objects:
  5059 ;;		On entry : 0/0
  5060 ;;		On exit  : 0/0
  5061 ;;		Unchanged: 0/0
  5062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5063 ;;      Params:         4       0       0       0       0       0       0       0       0
  5064 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5065 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5066 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5067 ;;Total ram usage:        6 bytes
  5068 ;; Hardware stack levels used:    1
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_interruptions
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           	psect	text31
  5077  00122E                     __ptext31:
  5078                           	opt stack 0
  5079  00122E                     ___awmod:
  5080                           	opt stack 27
  5081                           
  5082                           ;incstack = 0
  5083  00122E  0E00               	movlw	0
  5084  001230  6E06               	movwf	___awmod@sign,c
  5085  001232  AE02               	btfss	___awmod@dividend+1,7,c
  5086  001234  D006               	goto	i2l2098
  5087  001236  6C01               	negf	___awmod@dividend,c
  5088  001238  1E02               	comf	___awmod@dividend+1,f,c
  5089  00123A  B0D8               	btfsc	status,0,c
  5090  00123C  2A02               	incf	___awmod@dividend+1,f,c
  5091  00123E  0E01               	movlw	1
  5092  001240  6E06               	movwf	___awmod@sign,c
  5093  001242                     i2l2098:
  5094  001242  AE04               	btfss	___awmod@divisor+1,7,c
  5095  001244  D004               	goto	i2l2102
  5096  001246  6C03               	negf	___awmod@divisor,c
  5097  001248  1E04               	comf	___awmod@divisor+1,f,c
  5098  00124A  B0D8               	btfsc	status,0,c
  5099  00124C  2A04               	incf	___awmod@divisor+1,f,c
  5100  00124E                     i2l2102:
  5101  00124E  5003               	movf	___awmod@divisor,w,c
  5102  001250  1004               	iorwf	___awmod@divisor+1,w,c
  5103  001252  B4D8               	btfsc	status,2,c
  5104  001254  D018               	goto	i2l2118
  5105  001256  0E01               	movlw	1
  5106  001258  6E05               	movwf	___awmod@counter,c
  5107  00125A  D004               	goto	i2l2108
  5108  00125C                     i2l2106:
  5109  00125C  90D8               	bcf	status,0,c
  5110  00125E  3603               	rlcf	___awmod@divisor,f,c
  5111  001260  3604               	rlcf	___awmod@divisor+1,f,c
  5112  001262  2A05               	incf	___awmod@counter,f,c
  5113  001264                     i2l2108:
  5114  001264  AE04               	btfss	___awmod@divisor+1,7,c
  5115  001266  D7FA               	goto	i2l2106
  5116  001268                     i2l2110:
  5117  001268  5003               	movf	___awmod@divisor,w,c
  5118  00126A  5C01               	subwf	___awmod@dividend,w,c
  5119  00126C  5004               	movf	___awmod@divisor+1,w,c
  5120  00126E  5802               	subwfb	___awmod@dividend+1,w,c
  5121  001270  A0D8               	btfss	status,0,c
  5122  001272  D004               	goto	i2l2114
  5123  001274  5003               	movf	___awmod@divisor,w,c
  5124  001276  5E01               	subwf	___awmod@dividend,f,c
  5125  001278  5004               	movf	___awmod@divisor+1,w,c
  5126  00127A  5A02               	subwfb	___awmod@dividend+1,f,c
  5127  00127C                     i2l2114:
  5128  00127C  90D8               	bcf	status,0,c
  5129  00127E  3204               	rrcf	___awmod@divisor+1,f,c
  5130  001280  3203               	rrcf	___awmod@divisor,f,c
  5131  001282  2E05               	decfsz	___awmod@counter,f,c
  5132  001284  D7F1               	goto	i2l2110
  5133  001286                     i2l2118:
  5134  001286  5006               	movf	___awmod@sign,w,c
  5135  001288  B4D8               	btfsc	status,2,c
  5136  00128A  D004               	goto	i2l2122
  5137  00128C  6C01               	negf	___awmod@dividend,c
  5138  00128E  1E02               	comf	___awmod@dividend+1,f,c
  5139  001290  B0D8               	btfsc	status,0,c
  5140  001292  2A02               	incf	___awmod@dividend+1,f,c
  5141  001294                     i2l2122:
  5142  001294  C001  F001         	movff	___awmod@dividend,?___awmod
  5143  001298  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5144  00129C  0012               	return	
  5145  00129E                     __end_of___awmod:
  5146                           	opt stack 0
  5147                           pclatu	equ	0xFFB
  5148                           pclath	equ	0xFFA
  5149                           tblptru	equ	0xFF8
  5150                           tblptrh	equ	0xFF7
  5151                           tblptrl	equ	0xFF6
  5152                           tablat	equ	0xFF5
  5153                           prodh	equ	0xFF4
  5154                           prodl	equ	0xFF3
  5155                           intcon	equ	0xFF2
  5156                           intcon2	equ	0xFF1
  5157                           postinc0	equ	0xFEE
  5158                           fsr0h	equ	0xFEA
  5159                           fsr0l	equ	0xFE9
  5160                           wreg	equ	0xFE8
  5161                           indf1	equ	0xFE7
  5162                           fsr1h	equ	0xFE2
  5163                           fsr1l	equ	0xFE1
  5164                           indf2	equ	0xFDF
  5165                           postinc2	equ	0xFDE
  5166                           postdec2	equ	0xFDD
  5167                           fsr2h	equ	0xFDA
  5168                           fsr2l	equ	0xFD9
  5169                           status	equ	0xFD8
  5170                           pclatu	equ	0xFFB
  5171                           pclath	equ	0xFFA
  5172                           tblptru	equ	0xFF8
  5173                           tblptrh	equ	0xFF7
  5174                           tblptrl	equ	0xFF6
  5175                           tablat	equ	0xFF5
  5176                           prodh	equ	0xFF4
  5177                           prodl	equ	0xFF3
  5178                           intcon	equ	0xFF2
  5179                           intcon2	equ	0xFF1
  5180                           postinc0	equ	0xFEE
  5181                           fsr0h	equ	0xFEA
  5182                           fsr0l	equ	0xFE9
  5183                           wreg	equ	0xFE8
  5184                           indf1	equ	0xFE7
  5185                           fsr1h	equ	0xFE2
  5186                           fsr1l	equ	0xFE1
  5187                           indf2	equ	0xFDF
  5188                           postinc2	equ	0xFDE
  5189                           postdec2	equ	0xFDD
  5190                           fsr2h	equ	0xFDA
  5191                           fsr2l	equ	0xFD9
  5192                           status	equ	0xFD8
  5193                           
  5194                           	psect	rparam
  5195  0000                     pclatu	equ	0xFFB
  5196                           pclath	equ	0xFFA
  5197                           tblptru	equ	0xFF8
  5198                           tblptrh	equ	0xFF7
  5199                           tblptrl	equ	0xFF6
  5200                           tablat	equ	0xFF5
  5201                           prodh	equ	0xFF4
  5202                           prodl	equ	0xFF3
  5203                           intcon	equ	0xFF2
  5204                           intcon2	equ	0xFF1
  5205                           postinc0	equ	0xFEE
  5206                           fsr0h	equ	0xFEA
  5207                           fsr0l	equ	0xFE9
  5208                           wreg	equ	0xFE8
  5209                           indf1	equ	0xFE7
  5210                           fsr1h	equ	0xFE2
  5211                           fsr1l	equ	0xFE1
  5212                           indf2	equ	0xFDF
  5213                           postinc2	equ	0xFDE
  5214                           postdec2	equ	0xFDD
  5215                           fsr2h	equ	0xFDA
  5216                           fsr2l	equ	0xFD9
  5217                           status	equ	0xFD8
  5218                           
  5219                           	psect	temp
  5220  00004A                     btemp:
  5221                           	opt stack 0
  5222  00004A                     	ds	1
  5223  0000                     int$flags	set	btemp
  5224                           pclatu	equ	0xFFB
  5225                           pclath	equ	0xFFA
  5226                           tblptru	equ	0xFF8
  5227                           tblptrh	equ	0xFF7
  5228                           tblptrl	equ	0xFF6
  5229                           tablat	equ	0xFF5
  5230                           prodh	equ	0xFF4
  5231                           prodl	equ	0xFF3
  5232                           intcon	equ	0xFF2
  5233                           intcon2	equ	0xFF1
  5234                           postinc0	equ	0xFEE
  5235                           fsr0h	equ	0xFEA
  5236                           fsr0l	equ	0xFE9
  5237                           wreg	equ	0xFE8
  5238                           indf1	equ	0xFE7
  5239                           fsr1h	equ	0xFE2
  5240                           fsr1l	equ	0xFE1
  5241                           indf2	equ	0xFDF
  5242                           postinc2	equ	0xFDE
  5243                           postdec2	equ	0xFDD
  5244                           fsr2h	equ	0xFDA
  5245                           fsr2l	equ	0xFD9
  5246                           status	equ	0xFD8


Data Sizes:
    Strings     60
    Constant    18
    Data        3
    BSS         63
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      73
    BANK0           160     45      83
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 26
		 -> string_aux(COMRAM[26]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 26
		 -> string(BANK0[26]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 26
		 -> string(BANK0[26]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 38
		 -> STR_3(CODE[2]), STR_2(CODE[38]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 26
		 -> string(BANK0[26]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptions in COMRAM

    _interruptions->i2_printf
    i2_printf->i2___lwmod
    i2___lwmod->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_printf
    _write_RTC_I2c->_I2C_Idle
    _write_RTC_I2c->_I2C_Write_Byte
    _read_RTC_I2c->_I2C_Idle
    _read_RTC_I2c->_I2C_Write_Byte
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _interruptions in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptions in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptions in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptions in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptions in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptions in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptions in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptions in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    3340
                                             44 BANK0      1     1      0
                     _InitI2C_Master
                           _configAD
                  _configADInterrupt
                        _configRS232
                        _configTimer
              _configUSARTInterrupts
                             _printf
                       _read_RTC_I2c
                       _selectChanel
                      _write_RTC_I2c
 ---------------------------------------------------------------------------------
 (1) _write_RTC_I2c                                        0     0      0      31
                           _I2C_Idle
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (1) _selectChanel                                         1     1      0     403
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_RTC_I2c                                         1     1      0      62
                                              1 BANK0      1     1      0
                           _I2C_Idle
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Byte                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Send_NACK                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Read_Byte                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Idle                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              41    23     18    2844
                                             12 BANK0     32    14     18
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     392
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _configUSARTInterrupts                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configRS232                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configADInterrupt                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configAD                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitI2C_Master                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _interruptions                                       16    16      0    2246
                                             28 COMRAM    16    16      0
                            ___awmod
                             _strcpy
                           i2_printf
 ---------------------------------------------------------------------------------
 (4) i2_printf                                            25    23      2    1619
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4     203
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     424
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitI2C_Master
   _configAD
   _configADInterrupt
   _configRS232
   _configTimer
   _configUSARTInterrupts
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _read_RTC_I2c
     _I2C_Idle
     _I2C_ReStart
     _I2C_Read_Byte
     _I2C_Send_NACK
     _I2C_Start
     _I2C_Stop
     _I2C_Write_Byte
   _selectChanel
   _write_RTC_I2c
     _I2C_Idle
     _I2C_Start
     _I2C_Stop
     _I2C_Write_Byte

 _interruptions (ROOT)
   ___awmod
   _strcpy
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2D      53       5       51.9%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     2C      49       1       77.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9C      20        0.0%
DATA                 0      0      9C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed Apr 13 12:49:37 2016

                             _i 002D              __size_of_I2C_Start 000A                     _SSPSTATbits 000FC7  
                            l83 165C                              l77 1652                              l89 1648  
         __end_of_interruptions 10B0                              _id 00B2             ___wmul@multiplicand 0062  
            i2___lwdiv@dividend 0001                     __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                           l101 1626                             l113 1630                             l107 15FC  
                           l304 160A                             l367 0AA6                             l787 1224  
                           l797 1362                             _GIE 007F97                    __CFG_CPB$OFF 000000  
                  __CFG_CPD$OFF 000000                             _RX9 007D5E                             _TX9 007D66  
                  __CFG_BOR$OFF 000000                             _dia 0090                             _ano 008F  
          __size_of_I2C_ReStart 000A                             _mes 0093                             _val 0096  
                  ___awmod@sign 0006              I2C_Write_Byte@Byte 0060                             prod 000FF3  
                           wreg 000FE8                    __CFG_FOSC$HS 000000                    __CFG_LVP$OFF 000000  
                  __CFG_WDT$OFF 000000                            l2410 1330                            l2414 1354  
                          l2406 131E                            l2430 10DA                            l2408 132A  
                          l2520 0976                            l2512 0936                            l2504 08BE  
                          l2370 1524                            l2514 093C                            l2354 15E0  
                          l2450 113E                            l2442 1116                            l2434 10EE  
                          l2426 10C8                            l2540 09D4                            l2524 0992  
                          l2390 11E6                            l2526 0998                            l2518 0944  
                          l2470 11A2                            l2462 117A                            l2454 1152  
                          l2446 112A                            l2438 1102                            l2560 0A54  
                          l2386 11D4                            l2570 0A80                            l2562 0A5E  
                          l2538 09CE                            l2554 0A0A                            l2466 118E  
                          l2458 1166                            l2388 11E0                            l2572 0A8C  
                          l2556 0A1C                            l2492 0872                            l2398 1216  
                          l2494 0884                            l2590 0B6C                            l2576 0AAC  
                          l2584 0B46                            l2488 085E                            l2578 0AF8  
                          l2586 0B58                            l2498 088E                            l2690 0E5A  
                          l2588 0B60                            _ADFM 007E07                            STR_1 084A  
                          STR_2 0813                            STR_3 084D                            STR_4 0839  
                          _BRGH 007D62                            _CREN 007D5C                            _FERR 007D5A  
                          u2407 0F52                            u2357 0E76                            u2367 0E92  
                          u2377 0EAE                            u2387 0ECA                            u2397 0EE6  
                          _PEIE 007F96                            _RCIE 007CED                            _RCIF 007CF5  
                          _OERR 007D59                            _SPEN 007D5F                            _TXIE 007CEC  
                          _TXIF 007CF4                            _TXEN 007D65                            _SYNC 007D64  
                          _main 0E30                            _hora 0091                __end_of_I2C_Idle 15F4  
                          fsr0h 000FEA                            fsr1h 000FE2              i2___lwdiv@quotient 0005  
                          fsr0l 000FE9                            fsr2h 000FDA                            indf1 000FE7  
                          fsr1l 000FE1                            indf2 000FDF                            fsr2l 000FD9  
                          btemp 004A                __end_of_I2C_Stop 1650                            pclat 000FFA  
                          prodh 000FF4                            prodl 000FF3                            start 0016  
                 __CFG_IESO$OFF 000000                 __end_ofi2_putch 1646                   __CFG_MCLRE$ON 000000  
    __size_of_configADInterrupt 000A                    ___param_bank 000010                   __CFG_PLLDIV$1 000000  
                         ?_main 0001                           _BRG16 007DC3                 __end_of___awmod 129E  
               __end_of___lwdiv 122E                 __end_of___lwmod 136C                           i2l220 0FB8  
                         i2l222 0FB2                           i2l304 163C                           i2l229 1074  
                         i2l367 0D68                           i2l787 1406                           i2l797 1496  
                         _RCREG 000FAE                           _SPBRG 000FAF                   __CFG_USBDIV$1 000000  
                         _SSPIF 007CF3                           _RXDTP 007DC5                           _TXREG 000FAD  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000                      i2isdigit@c 0003  
               __end_of_dpowers 080B          __size_of_I2C_Read_Byte 000C                 __end_of_isdigit 152E  
                         _putch 1606               __end_of_I2C_Start 165A                  __pbitbssCOMRAM 0240  
                         tablat 000FF5                __end_ofi2___wmul 1554          __size_of_I2C_Send_NACK 000C  
                         status 000FD8                  __CFG_ICPRT$OFF 000000                   i2printf@width 001A  
              ??_InitI2C_Master 0060                __end_ofi2_printf 0E30              __size_ofi2___lwdiv 0052  
            __size_ofi2___lwmod 0042                 __initialization 136C                    __end_of_main 0F74  
                    i2printf@ap 0014              __size_ofi2_isdigit 001E                   ?_read_RTC_I2c 0001  
                        ??_main 008C                   __activetblptr 000002           _configUSARTInterrupts 1614  
               __CFG_CCP2MX$OFF 000000                          _ADRESH 000FC4                          _ADRESL 000FC3  
                        ?_putch 0001                          i2l2110 1268                          i2l2102 124E  
                        i2l2200 0D2A                          i2l2122 1294                          i2l2114 127C  
                        i2l2106 125C                          i2l2210 0D4C                          i2l2202 0D32  
                        i2l2108 1264                          i2l2212 0D54                          i2l2132 0BA4  
                        i2l2118 1286                          i2l2134 0BB2                          i2l2230 0E16  
                        i2l2216 0D6E                          i2l2224 0DF8                          i2l2160 0C7C  
                        i2l2152 0C44                          i2l2144 0BE6                          i2l2128 0B94  
                        i2l2218 0DB2                          i2l2226 0E08                          i2l2154 0C48  
                        i2l2138 0BB8                          i2l2228 0E0E                          i2l2180 0CCA  
                        i2l2164 0C96                          i2l2260 1038                          i2l2166 0C9A  
                        i2l2158 0C4E                          i2l1800 13E0                          i2l2256 1030  
                        i2l2248 0FFE                          i2l2098 1242                          i2l2178 0CC6  
                        i2l2194 0CF6                          i2l2274 1068                          i2l1900 14E8  
                        i2l1820 1478                          i2l2196 0D06                          i2l2268 1056  
                        i2l1808 13FC                          i2l1824 148C                          i2l1816 146C  
                        i2l1818 1474                          i2l1786 158C                          i2l1796 13D4  
                        i2l1798 13DC                          i2l1898 14E0                       ??i2_putch 0001  
                        _TMR0IP 007F8A                          _TMR0ON 007EAF                          _SSPADD 000FC8  
                        _SSPBUF 000FC9            __size_of_configRS232 0018                  __CFG_XINST$OFF 000000  
              __end_of_configAD 15C8            __size_of_configTimer 001A                   _I2C_Read_Byte 162E  
                        ___wmul 14A0                       ??___awmod 0005                       ??___lwdiv 0064  
                     ??___lwmod 006B                  ??_read_RTC_I2c 0061                          clear_0 1372  
                        clear_1 1380                          _minuto 0094                 ___awmod@divisor 0003  
                 _I2C_Send_NACK 1622                 ___awmod@counter 0005                          _printf 0850  
                        _strcpy 14D6                          _string 0097                       ?_I2C_Idle 0001  
                  __pdataCOMRAM 0049                       ??_isdigit 0060                       ?_I2C_Stop 0001  
             __end_ofi2___lwdiv 1410                    __mediumconst 0000               __end_ofi2___lwmod 14A0  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
        __size_of_write_RTC_I2c 006C               __end_ofi2_isdigit 1594                      __accesstop 0060  
       __end_of__initialization 13B0                 __CFG_PBADEN$OFF 000000                   ___rparam_used 000001  
                ?_I2C_Read_Byte 0001              i2___lwmod@dividend 0008                  __pcstackCOMRAM 0001  
                  __pidataBANK0 166E                   __end_of_putch 1614                     i2printf@idx 0013  
                ?_I2C_Send_NACK 0001                     i2printf@val 0018          ?_configUSARTInterrupts 0001  
                     ?i2___wmul 0001                      ??_I2C_Idle 0060                     i2putch@byte 0001  
                    ??_I2C_Stop 0060                       ?i2_printf 000D                         ??_putch 0060  
                    __pbssBANK0 008D                      _hasAnError 0241                   ?_selectChanel 0001  
                       ?___wmul 0060                   _write_RTC_I2c 129E         __size_of_I2C_Write_Byte 0012  
                 ??_I2C_ReStart 0060                         ?_printf 006C                         ?_strcpy 0001  
                    ??i2___wmul 0005                      ??i2_printf 000F                       ?_configAD 0001  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
          __end_of_read_RTC_I2c 145E                 __CFG_VREGEN$OFF 000000          __size_of_interruptions 10A8  
                       i2_putch 163A                       _I2C_Start 1650                 ??_I2C_Read_Byte 0060  
                ??_selectChanel 0060                         __Hparam 0000         read_RTC_I2c@pos_memoria 0061  
                       __Lparam 0000                  ?_write_RTC_I2c 0001                 ??_I2C_Send_NACK 0060  
                       ___awmod 122E                 __size_of___wmul 0036                         ___lwdiv 11B6  
                       ___lwmod 130A                    __psmallconst 0800                 __CFG_STVREN$OFF 000000  
                       _channel 00B1                         __pcinit 136C                         __ramtop 0800  
                       __ptext0 0E30                         __ptext1 129E                         __ptext2 10B0  
                       __ptext3 1410                         __ptext4 15F4                         __ptext5 1646  
                       __ptext6 1650                         __ptext7 1622                         __ptext8 162E  
                       __ptext9 165A                 __size_of_printf 033A                       _T0CONbits 000FD5  
               __size_of_strcpy 002E               __end_of_hexpowers 0813                         _dpowers 0801  
                       _leitura 0092                         _isdigit 1504                ___awmod@dividend 0001  
                       _segundo 0095             __end_of_I2C_ReStart 1664                      ??_configAD 0060  
                __pintcode_body 0F74            end_of_initialization 13B0                   __Lmediumconst 0000  
                       int_func 0F74             i2___wmul@multiplier 0001                      ?_I2C_Start 0001  
                       printf@c 008B                         printf@f 006C                         postdec2 000FDD  
                       postinc0 000FEE                         postinc2 000FDE                   _interruptions 0008  
                     _PORTDbits 000F83                       _TRISBbits 000F93                       _TRISDbits 000F95  
             __size_of_I2C_Idle 0014               __size_of_I2C_Stop 000A               i2___lwdiv@divisor 0003  
                     i2___lwdiv 13BE                       i2___lwmod 145E               i2___lwdiv@counter 0007  
                 ??_configRS232 0060                     printf@width 0089                   ??_configTimer 0060  
                     i2_isdigit 1576                 ??_write_RTC_I2c 0061                      _string_aux 002E  
       ??_configUSARTInterrupts 0060                  _I2C_Write_Byte 15F4                  ?_interruptions 0001  
                __end_of___wmul 14D6                   __pidataCOMRAM 1670                     _I2C_ReStart 165A  
       __size_of_InitI2C_Master 0022                i2___wmul@product 0005                  __end_of_printf 0B8A  
                  i2printf@flag 0017                  __end_of_strcpy 1504                    i2printf@prec 0016  
           start_initialization 136C            __end_of_selectChanel 11B6               __size_ofi2___wmul 0026  
         __size_of_read_RTC_I2c 004E                       i2printf@c 001C                       i2printf@f 000D  
                    ?i2___lwdiv 0001                      ?i2___lwmod 0008               __size_ofi2_printf 02A6  
                   ??_I2C_Start 0060                      ?i2_isdigit 0001             __end_of_configRS232 15E0  
        __end_of_I2C_Write_Byte 1606                        ??___wmul 0064                     __pdataBANK0 00B1  
           __end_of_configTimer 15AE                __CFG_LPT1OSC$OFF 000000                    _read_RTC_I2c 1410  
                      ??_printf 007E                        ??_strcpy 0005                     __pbssCOMRAM 002D  
                 __pcstackBANK0 0060               i2___lwmod@divisor 000A               i2___lwmod@counter 000C  
                  _isdigit$1377 0061               __size_of_configAD 001A                        ?i2_putch 0001  
              ___lwdiv@dividend 0060                 ?_I2C_Write_Byte 0001                       __pintcode 0008  
               ??_interruptions 001D                        ?___awmod 0001                        ?___lwdiv 0060  
                      ?___lwmod 0067                     __smallconst 0800                        _I2C_Idle 15E0  
                      ?_isdigit 0001                        _I2C_Stop 1646                       _hexpowers 080B  
              ___lwdiv@quotient 0065                     ??i2___lwdiv 0005                     ??i2___lwmod 000C  
                __size_of_putch 000E                    _receivedData 0049                     _configRS232 15C8  
                ___wmul@product 0064                        _PIE1bits 000F9D                     ??i2_isdigit 0001  
                   _configTimer 1594                        i2u183_40 1066                        _PIR1bits 000F9E  
                      i2u185_45 1070                        i2u185_47 1072           __end_of_I2C_Read_Byte 163A  
              __CFG_WDTPS$32768 000000           __end_of_I2C_Send_NACK 162E           __size_of_selectChanel 0106  
                _InitI2C_Master 1554                      _ADCON0bits 000FC2                      _ADCON1bits 000FC1  
                    _ADCON2bits 000FC0               ___wmul@multiplier 0060                        i2___wmul 152E  
                    printf@flag 0088                      printf@prec 0085                        i2_printf 0B8A  
           selectChanel@channel 0060                __size_ofi2_putch 000C                        __Hrparam 0000  
                  _selectChanel 10B0                        __Lrparam 0000          __end_of_InitI2C_Master 1576  
              __size_of___awmod 0070           i2___wmul@multiplicand 0003                __size_of___lwdiv 0078  
__size_of_configUSARTInterrupts 000E                __size_of___lwmod 0062   __end_of_configUSARTInterrupts 1622  
                  ?_I2C_ReStart 0001                        _data_ADC 008D                        _changing 0240  
              __size_of_isdigit 002A                 ___lwdiv@divisor 0062                 ___lwdiv@counter 0064  
                      __ptext10 15E0                        __ptext11 0850                        __ptext20 1664  
                      __ptext12 1606                        __ptext21 15AE                        __ptext13 1504  
                      __ptext30 14D6                        __ptext22 1554                        __ptext14 14A0  
                      __ptext31 122E                        __ptext15 130A                        __ptext24 0B8A  
                      __ptext16 11B6                        __ptext25 163A                        __ptext17 1614  
                      __ptext26 1576                        __ptext18 1594                        __ptext27 152E  
                      __ptext19 15C8                        __ptext28 145E                        __ptext29 13BE  
                      _configAD 15AE                      strcpy@from 0003                  i2_isdigit$1377 0002  
                 __size_of_main 0144           __end_of_write_RTC_I2c 130A                        int$flags 004A  
             _configADInterrupt 1664                 ?_InitI2C_Master 0001                       printf@idx 0082  
                     printf@val 0086              ?_configADInterrupt 0001           __CFG_CPUDIV$OSC1_PLL2 000000  
                     putch@byte 0060                      _INTCONbits 000FF2             ??_configADInterrupt 0060  
                      isdigit@c 0062                        intlevel2 0000                ___lwmod@dividend 0067  
              ??_I2C_Write_Byte 0060       __end_of_configADInterrupt 166E                        printf@ap 0083  
               ___lwmod@divisor 0069                        strcpy@cp 0005                        strcpy@to 0001  
               ___lwmod@counter 006B                     _SSPCON1bits 000FC6                     _SSPCON2bits 000FC5  
                  ?_configRS232 0001                    ?_configTimer 0001  
