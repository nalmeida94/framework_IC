

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Wed Jun 22 10:33:57 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           	psect	idataCOMRAM
    58  0019D0                     __pidataCOMRAM:
    59                           	opt stack 0
    60                           
    61                           ;initializer for _randx
    62  0019D0  0001               	dw	1
    63  0019D2  0000               	dw	0
    64                           
    65                           ;initializer for _receivedData
    66  0019D4  58                 	db	88
    67                           
    68                           	psect	idataBANK0
    69  0019D5                     __pidataBANK0:
    70                           	opt stack 0
    71                           
    72                           ;initializer for _channel
    73  0019D5  01                 	db	1
    74                           
    75                           ;initializer for _id
    76  0019D6  1B                 	db	27
    77                           
    78                           ;initializer for _maxCont
    79  0019D7  0A                 	db	10
    80                           
    81                           ;initializer for _minCont
    82  0019D8  05                 	db	5
    83                           
    84                           	psect	smallconst
    85  000800                     __psmallconst:
    86                           	opt stack 0
    87  000800  00                 	db	0
    88  000801                     _dpowers:
    89                           	opt stack 0
    90  000801  0001               	dw	1
    91  000803  000A               	dw	10
    92  000805  0064               	dw	100
    93  000807  03E8               	dw	1000
    94  000809  2710               	dw	10000
    95  00080B                     __end_of_dpowers:
    96                           	opt stack 0
    97  00080B                     _hexpowers:
    98                           	opt stack 0
    99  00080B  0001               	dw	1
   100  00080D  0010               	dw	16
   101  00080F  0100               	dw	256
   102  000811  1000               	dw	4096
   103  000813                     __end_of_hexpowers:
   104                           	opt stack 0
   105  0000                     _ADCON0bits	set	4034
   106  0000                     _ADCON1bits	set	4033
   107  0000                     _ADCON2bits	set	4032
   108  0000                     _ADRESH	set	4036
   109  0000                     _ADRESL	set	4035
   110  0000                     _INTCONbits	set	4082
   111  0000                     _PIE1bits	set	3997
   112  0000                     _PIR1bits	set	3998
   113  0000                     _PORTDbits	set	3971
   114  0000                     _RCREG	set	4014
   115  0000                     _SPBRG	set	4015
   116  0000                     _SSPADD	set	4040
   117  0000                     _SSPBUF	set	4041
   118  0000                     _SSPCON1	set	4038
   119  0000                     _SSPCON1bits	set	4038
   120  0000                     _SSPCON2	set	4037
   121  0000                     _SSPCON2bits	set	4037
   122  0000                     _SSPSTAT	set	4039
   123  0000                     _SSPSTATbits	set	4039
   124  0000                     _T0CONbits	set	4053
   125  0000                     _TRISBbits	set	3987
   126  0000                     _TRISDbits	set	3989
   127  0000                     _TXREG	set	4013
   128  0000                     _ADFM	set	32263
   129  0000                     _BRG16	set	32195
   130  0000                     _BRGH	set	32098
   131  0000                     _CREN	set	32092
   132  0000                     _FERR	set	32090
   133  0000                     _GIE	set	32663
   134  0000                     _OERR	set	32089
   135  0000                     _PEIE	set	32662
   136  0000                     _RCIE	set	31981
   137  0000                     _RCIF	set	31989
   138  0000                     _RX9	set	32094
   139  0000                     _RXDTP	set	32197
   140  0000                     _SPEN	set	32095
   141  0000                     _SSPIF	set	31987
   142  0000                     _SYNC	set	32100
   143  0000                     _TMR0IP	set	32650
   144  0000                     _TMR0ON	set	32431
   145  0000                     _TX9	set	32102
   146  0000                     _TXEN	set	32101
   147  0000                     _TXIE	set	31980
   148  0000                     _TXIF	set	31988
   149  000813                     STR_2:
   150  000813  25                 	db	37
   151  000814  75                 	db	117	;'u'
   152  000815  26                 	db	38
   153  000816  25                 	db	37
   154  000817  75                 	db	117	;'u'
   155  000818  26                 	db	38
   156  000819  32                 	db	50	;'2'
   157  00081A  30                 	db	48	;'0'
   158  00081B  25                 	db	37
   159  00081C  30                 	db	48	;'0'
   160  00081D  32                 	db	50	;'2'
   161  00081E  58                 	db	88	;'X'
   162  00081F  2D                 	db	45
   163  000820  25                 	db	37
   164  000821  30                 	db	48	;'0'
   165  000822  32                 	db	50	;'2'
   166  000823  58                 	db	88	;'X'
   167  000824  2D                 	db	45
   168  000825  25                 	db	37
   169  000826  30                 	db	48	;'0'
   170  000827  32                 	db	50	;'2'
   171  000828  58                 	db	88	;'X'
   172  000829  20                 	db	32
   173  00082A  25                 	db	37
   174  00082B  30                 	db	48	;'0'
   175  00082C  32                 	db	50	;'2'
   176  00082D  58                 	db	88	;'X'
   177  00082E  3A                 	db	58	;':'
   178  00082F  25                 	db	37
   179  000830  30                 	db	48	;'0'
   180  000831  32                 	db	50	;'2'
   181  000832  58                 	db	88	;'X'
   182  000833  3A                 	db	58	;':'
   183  000834  25                 	db	37
   184  000835  30                 	db	48	;'0'
   185  000836  32                 	db	50	;'2'
   186  000837  58                 	db	88	;'X'
   187  000838  00                 	db	0
   188  000839                     STR_4:
   189  000839  30                 	db	48	;'0'
   190  00083A  31                 	db	49	;'1'
   191  00083B  32                 	db	50	;'2'
   192  00083C  33                 	db	51	;'3'
   193  00083D  34                 	db	52	;'4'
   194  00083E  35                 	db	53	;'5'
   195  00083F  36                 	db	54	;'6'
   196  000840  37                 	db	55	;'7'
   197  000841  38                 	db	56	;'8'
   198  000842  39                 	db	57	;'9'
   199  000843  41                 	db	65	;'A'
   200  000844  42                 	db	66	;'B'
   201  000845  43                 	db	67	;'C'
   202  000846  44                 	db	68	;'D'
   203  000847  45                 	db	69	;'E'
   204  000848  46                 	db	70	;'F'
   205  000849  00                 	db	0
   206  00084A                     STR_1:
   207  00084A  0A                 	db	10
   208  00084B  0D                 	db	13
   209  00084C  00                 	db	0
   210  00084D                     STR_3:
   211  00084D  0A                 	db	10
   212  00084E  00                 	db	0
   213                           
   214                           ; #config settings
   215  00084F  00                 	db	0	; dummy byte at the end
   216  0000                     
   217                           	psect	cinit
   218  0015F0                     __pcinit:
   219                           	opt stack 0
   220  0015F0                     start_initialization:
   221                           	opt stack 0
   222  0015F0                     __initialization:
   223                           	opt stack 0
   224                           
   225                           ; Clear objects allocated to BANK0 (37 bytes)
   226  0015F0  EE00  F097         	lfsr	0,__pbssBANK0
   227  0015F4  0E25               	movlw	37
   228  0015F6                     clear_0:
   229  0015F6  6AEE               	clrf	postinc0,c
   230  0015F8  06E8               	decf	wreg,f,c
   231  0015FA  E1FD               	bnz	clear_0
   232                           
   233                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   234  0015FC  6A4D               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   235                           
   236                           ; Clear objects allocated to COMRAM (27 bytes)
   237  0015FE  EE00  F02D         	lfsr	0,__pbssCOMRAM
   238  001602  0E1B               	movlw	27
   239  001604                     clear_1:
   240  001604  6AEE               	clrf	postinc0,c
   241  001606  06E8               	decf	wreg,f,c
   242  001608  E1FD               	bnz	clear_1
   243                           
   244                           ; Initialize objects allocated to BANK0 (4 bytes)
   245                           ; load TBLPTR registers with __pidataBANK0
   246  00160A  0ED5               	movlw	low __pidataBANK0
   247  00160C  6EF6               	movwf	tblptrl,c
   248  00160E  0E19               	movlw	high __pidataBANK0
   249  001610  6EF7               	movwf	tblptrh,c
   250  001612  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   251  001614  6EF8               	movwf	tblptru,c
   252  001616  EE00  F0BC         	lfsr	0,__pdataBANK0
   253  00161A  EE10 F004          	lfsr	1,4
   254  00161E                     copy_data0:
   255  00161E  0009               	tblrd		*+
   256  001620  CFF5 FFEE          	movff	tablat,postinc0
   257  001624  50E5               	movf	postdec1,w,c
   258  001626  50E1               	movf	fsr1l,w,c
   259  001628  E1FA               	bnz	copy_data0
   260                           
   261                           ; Initialize objects allocated to COMRAM (5 bytes)
   262                           ; load TBLPTR registers with __pidataCOMRAM
   263  00162A  0ED0               	movlw	low __pidataCOMRAM
   264  00162C  6EF6               	movwf	tblptrl,c
   265  00162E  0E19               	movlw	high __pidataCOMRAM
   266  001630  6EF7               	movwf	tblptrh,c
   267  001632  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   268  001634  6EF8               	movwf	tblptru,c
   269  001636  EE00  F048         	lfsr	0,__pdataCOMRAM
   270  00163A  EE10 F005          	lfsr	1,5
   271  00163E                     copy_data1:
   272  00163E  0009               	tblrd		*+
   273  001640  CFF5 FFEE          	movff	tablat,postinc0
   274  001644  50E5               	movf	postdec1,w,c
   275  001646  50E1               	movf	fsr1l,w,c
   276  001648  E1FA               	bnz	copy_data1
   277  00164A                     end_of_initialization:
   278                           	opt stack 0
   279  00164A                     __end_of__initialization:
   280                           	opt stack 0
   281  00164A  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   282  00164C  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   283  00164E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   284  001650  6EF8               	movwf	tblptru,c
   285  001652  0100               	movlb	0
   286  001654  EFC5  F005         	goto	_main	;jump to C main() function
   287                           tblptru	equ	0xFF8
   288                           tblptrh	equ	0xFF7
   289                           tblptrl	equ	0xFF6
   290                           tablat	equ	0xFF5
   291                           postinc0	equ	0xFEE
   292                           wreg	equ	0xFE8
   293                           postdec1	equ	0xFE5
   294                           fsr1l	equ	0xFE1
   295                           
   296                           	psect	bitbssCOMRAM
   297  000268                     __pbitbssCOMRAM:
   298                           	opt stack 0
   299  000268                     _changing:
   300                           	opt stack 0
   301  000268                     	ds	1
   302  000269                     _hasAnError:
   303                           	opt stack 0
   304  000269                     	ds	1
   305                           tblptru	equ	0xFF8
   306                           tblptrh	equ	0xFF7
   307                           tblptrl	equ	0xFF6
   308                           tablat	equ	0xFF5
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           postdec1	equ	0xFE5
   312                           fsr1l	equ	0xFE1
   313                           
   314                           	psect	bssCOMRAM
   315  00002D                     __pbssCOMRAM:
   316                           	opt stack 0
   317  00002D                     _i:
   318                           	opt stack 0
   319  00002D                     	ds	1
   320  00002E                     _string_aux:
   321                           	opt stack 0
   322  00002E                     	ds	26
   323                           tblptru	equ	0xFF8
   324                           tblptrh	equ	0xFF7
   325                           tblptrl	equ	0xFF6
   326                           tablat	equ	0xFF5
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           postdec1	equ	0xFE5
   330                           fsr1l	equ	0xFE1
   331                           
   332                           	psect	dataCOMRAM
   333  000048                     __pdataCOMRAM:
   334                           	opt stack 0
   335  000048                     _randx:
   336                           	opt stack 0
   337  000048                     	ds	4
   338  00004C                     _receivedData:
   339                           	opt stack 0
   340  00004C                     	ds	1
   341                           tblptru	equ	0xFF8
   342                           tblptrh	equ	0xFF7
   343                           tblptrl	equ	0xFF6
   344                           tablat	equ	0xFF5
   345                           postinc0	equ	0xFEE
   346                           wreg	equ	0xFE8
   347                           postdec1	equ	0xFE5
   348                           fsr1l	equ	0xFE1
   349                           
   350                           	psect	bssBANK0
   351  000097                     __pbssBANK0:
   352                           	opt stack 0
   353  000097                     _data_ADC:
   354                           	opt stack 0
   355  000097                     	ds	2
   356  000099                     _ano:
   357                           	opt stack 0
   358  000099                     	ds	1
   359  00009A                     _contTimer0:
   360                           	opt stack 0
   361  00009A                     	ds	1
   362  00009B                     _dia:
   363                           	opt stack 0
   364  00009B                     	ds	1
   365  00009C                     _hora:
   366                           	opt stack 0
   367  00009C                     	ds	1
   368  00009D                     _leitura:
   369                           	opt stack 0
   370  00009D                     	ds	1
   371  00009E                     _mes:
   372                           	opt stack 0
   373  00009E                     	ds	1
   374  00009F                     _minuto:
   375                           	opt stack 0
   376  00009F                     	ds	1
   377  0000A0                     _segundo:
   378                           	opt stack 0
   379  0000A0                     	ds	1
   380  0000A1                     _val:
   381                           	opt stack 0
   382  0000A1                     	ds	1
   383  0000A2                     _string:
   384                           	opt stack 0
   385  0000A2                     	ds	26
   386                           tblptru	equ	0xFF8
   387                           tblptrh	equ	0xFF7
   388                           tblptrl	equ	0xFF6
   389                           tablat	equ	0xFF5
   390                           postinc0	equ	0xFEE
   391                           wreg	equ	0xFE8
   392                           postdec1	equ	0xFE5
   393                           fsr1l	equ	0xFE1
   394                           
   395                           	psect	dataBANK0
   396  0000BC                     __pdataBANK0:
   397                           	opt stack 0
   398  0000BC                     _channel:
   399                           	opt stack 0
   400  0000BC                     	ds	1
   401  0000BD                     _id:
   402                           	opt stack 0
   403  0000BD                     	ds	1
   404  0000BE                     _maxCont:
   405                           	opt stack 0
   406  0000BE                     	ds	1
   407  0000BF                     _minCont:
   408                           	opt stack 0
   409  0000BF                     	ds	1
   410                           tblptru	equ	0xFF8
   411                           tblptrh	equ	0xFF7
   412                           tblptrl	equ	0xFF6
   413                           tablat	equ	0xFF5
   414                           postinc0	equ	0xFEE
   415                           wreg	equ	0xFE8
   416                           postdec1	equ	0xFE5
   417                           fsr1l	equ	0xFE1
   418                           
   419                           	psect	cstackBANK0
   420  000060                     __pcstackBANK0:
   421                           	opt stack 0
   422  000060                     ??_isdigit:
   423  000060                     ??_I2C_Idle:
   424  000060                     ?___wmul:
   425                           	opt stack 0
   426  000060                     ?___lwdiv:
   427                           	opt stack 0
   428  000060                     ?___lmul:
   429                           	opt stack 0
   430  000060                     selectChanel@channel:
   431                           	opt stack 0
   432  000060                     I2C_Write_Byte@Byte:
   433                           	opt stack 0
   434  000060                     putch@byte:
   435                           	opt stack 0
   436  000060                     ___wmul@multiplier:
   437                           	opt stack 0
   438  000060                     ___lwdiv@dividend:
   439                           	opt stack 0
   440  000060                     srand@x:
   441                           	opt stack 0
   442  000060                     ___lmul@multiplier:
   443                           	opt stack 0
   444                           
   445                           ; 4 bytes @ 0x0
   446  000060                     	ds	1
   447  000061                     read_RTC_I2c@pos_memoria:
   448                           	opt stack 0
   449  000061                     _isdigit$1394:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x1
   453  000061                     	ds	1
   454  000062                     isdigit@c:
   455                           	opt stack 0
   456  000062                     ___wmul@multiplicand:
   457                           	opt stack 0
   458  000062                     ___lwdiv@divisor:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x2
   462  000062                     	ds	2
   463  000064                     ___lwdiv@counter:
   464                           	opt stack 0
   465  000064                     ___wmul@product:
   466                           	opt stack 0
   467  000064                     ___lmul@multiplicand:
   468                           	opt stack 0
   469                           
   470                           ; 4 bytes @ 0x4
   471  000064                     	ds	1
   472  000065                     ___lwdiv@quotient:
   473                           	opt stack 0
   474                           
   475                           ; 2 bytes @ 0x5
   476  000065                     	ds	2
   477  000067                     ?___lwmod:
   478                           	opt stack 0
   479  000067                     ___lwmod@dividend:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x7
   483  000067                     	ds	1
   484  000068                     ___lmul@product:
   485                           	opt stack 0
   486                           
   487                           ; 4 bytes @ 0x8
   488  000068                     	ds	1
   489  000069                     ___lwmod@divisor:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x9
   493  000069                     	ds	2
   494  00006B                     ___lwmod@counter:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0xB
   498  00006B                     	ds	1
   499  00006C                     ?_printf:
   500                           	opt stack 0
   501  00006C                     ?_rand:
   502                           	opt stack 0
   503  00006C                     printf@f:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0xC
   507  00006C                     	ds	2
   508  00006E                     ?___awmod:
   509                           	opt stack 0
   510  00006E                     ___awmod@dividend:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0xE
   514  00006E                     	ds	2
   515  000070                     ___awmod@divisor:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x10
   519  000070                     	ds	2
   520  000072                     ___awmod@counter:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x12
   524  000072                     	ds	1
   525  000073                     ___awmod@sign:
   526                           	opt stack 0
   527                           
   528                           ; 1 bytes @ 0x13
   529  000073                     	ds	11
   530  00007E                     ??_printf:
   531                           
   532                           ; 0 bytes @ 0x1E
   533  00007E                     	ds	4
   534  000082                     printf@idx:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x22
   538  000082                     	ds	1
   539  000083                     printf@ap:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x23
   543  000083                     	ds	2
   544  000085                     printf@prec:
   545                           	opt stack 0
   546                           
   547                           ; 1 bytes @ 0x25
   548  000085                     	ds	1
   549  000086                     printf@val:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x26
   553  000086                     	ds	2
   554  000088                     printf@flag:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x28
   558  000088                     	ds	1
   559  000089                     printf@width:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x29
   563  000089                     	ds	2
   564  00008B                     printf@c:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x2B
   568  00008B                     	ds	1
   569  00008C                     ??_main:
   570                           
   571                           ; 0 bytes @ 0x2C
   572  00008C                     	ds	1
   573  00008D                     main@i:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x2D
   577  00008D                     	ds	2
   578  00008F                     main@i_1025:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x2F
   582  00008F                     	ds	2
   583  000091                     main@i_1026:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x31
   587  000091                     	ds	2
   588  000093                     main@i_1027:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x33
   592  000093                     	ds	2
   593  000095                     main@i_1028:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x35
   597  000095                     	ds	2
   598                           tblptru	equ	0xFF8
   599                           tblptrh	equ	0xFF7
   600                           tblptrl	equ	0xFF6
   601                           tablat	equ	0xFF5
   602                           postinc0	equ	0xFEE
   603                           wreg	equ	0xFE8
   604                           postdec1	equ	0xFE5
   605                           fsr1l	equ	0xFE1
   606                           
   607                           	psect	cstackCOMRAM
   608  000001                     __pcstackCOMRAM:
   609                           	opt stack 0
   610  000001                     ??i2_isdigit:
   611  000001                     ?i2___wmul:
   612                           	opt stack 0
   613  000001                     ?i2___awmod:
   614                           	opt stack 0
   615  000001                     ?i2___lwdiv:
   616                           	opt stack 0
   617  000001                     i2putch@byte:
   618                           	opt stack 0
   619  000001                     strcpy@to:
   620                           	opt stack 0
   621  000001                     i2___wmul@multiplier:
   622                           	opt stack 0
   623  000001                     i2___awmod@dividend:
   624                           	opt stack 0
   625  000001                     i2___lwdiv@dividend:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0x0
   629  000001                     	ds	1
   630  000002                     i2_isdigit$1394:
   631                           	opt stack 0
   632                           
   633                           ; 1 bytes @ 0x1
   634  000002                     	ds	1
   635  000003                     i2isdigit@c:
   636                           	opt stack 0
   637  000003                     strcpy@from:
   638                           	opt stack 0
   639  000003                     i2___wmul@multiplicand:
   640                           	opt stack 0
   641  000003                     i2___awmod@divisor:
   642                           	opt stack 0
   643  000003                     i2___lwdiv@divisor:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x2
   647  000003                     	ds	2
   648  000005                     i2___awmod@counter:
   649                           	opt stack 0
   650  000005                     strcpy@cp:
   651                           	opt stack 0
   652  000005                     i2___wmul@product:
   653                           	opt stack 0
   654  000005                     i2___lwdiv@quotient:
   655                           	opt stack 0
   656                           
   657                           ; 2 bytes @ 0x4
   658  000005                     	ds	1
   659  000006                     i2___awmod@sign:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x5
   663  000006                     	ds	1
   664  000007                     i2___lwdiv@counter:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x6
   668  000007                     	ds	1
   669  000008                     ?i2___lwmod:
   670                           	opt stack 0
   671  000008                     i2___lwmod@dividend:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x7
   675  000008                     	ds	2
   676  00000A                     i2___lwmod@divisor:
   677                           	opt stack 0
   678                           
   679                           ; 2 bytes @ 0x9
   680  00000A                     	ds	2
   681  00000C                     i2___lwmod@counter:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0xB
   685  00000C                     	ds	1
   686  00000D                     ?i2_printf:
   687                           	opt stack 0
   688  00000D                     i2printf@f:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0xC
   692  00000D                     	ds	2
   693  00000F                     ??i2_printf:
   694                           
   695                           ; 0 bytes @ 0xE
   696  00000F                     	ds	4
   697  000013                     i2printf@idx:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x12
   701  000013                     	ds	1
   702  000014                     i2printf@ap:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x13
   706  000014                     	ds	2
   707  000016                     i2printf@prec:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x15
   711  000016                     	ds	1
   712  000017                     i2printf@flag:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x16
   716  000017                     	ds	1
   717  000018                     i2printf@val:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x17
   721  000018                     	ds	2
   722  00001A                     i2printf@width:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x19
   726  00001A                     	ds	2
   727  00001C                     i2printf@c:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0x1B
   731  00001C                     	ds	1
   732  00001D                     ??_interruptions:
   733                           
   734                           ; 0 bytes @ 0x1C
   735  00001D                     	ds	16
   736                           tblptru	equ	0xFF8
   737                           tblptrh	equ	0xFF7
   738                           tblptrl	equ	0xFF6
   739                           tablat	equ	0xFF5
   740                           postinc0	equ	0xFEE
   741                           wreg	equ	0xFE8
   742                           postdec1	equ	0xFE5
   743                           fsr1l	equ	0xFE1
   744                           
   745 ;;
   746 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   747 ;;
   748 ;; *************** function _main *****************
   749 ;; Defined at:
   750 ;;		line 145 in file "main.c"
   751 ;; Parameters:    Size  Location     Type
   752 ;;		None
   753 ;; Auto vars:     Size  Location     Type
   754 ;;  i               2   53[BANK0 ] int 
   755 ;;  i               2   51[BANK0 ] int 
   756 ;;  i               2   49[BANK0 ] int 
   757 ;;  i               2   47[BANK0 ] int 
   758 ;;  i               2   45[BANK0 ] int 
   759 ;; Return value:  Size  Location     Type
   760 ;;		None               void
   761 ;; Registers used:
   762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   763 ;; Tracked objects:
   764 ;;		On entry : 0/0
   765 ;;		On exit  : 0/0
   766 ;;		Unchanged: 0/0
   767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   768 ;;      Params:         0       0       0       0       0       0       0       0       0
   769 ;;      Locals:         0      10       0       0       0       0       0       0       0
   770 ;;      Temps:          0       1       0       0       0       0       0       0       0
   771 ;;      Totals:         0      11       0       0       0       0       0       0       0
   772 ;;Total ram usage:       11 bytes
   773 ;; Hardware stack levels required when called:    5
   774 ;; This function calls:
   775 ;;		_InitI2C_Master
   776 ;;		___awmod
   777 ;;		_configAD
   778 ;;		_configADInterrupt
   779 ;;		_configRS232
   780 ;;		_configTimer
   781 ;;		_configUSARTInterrupts
   782 ;;		_printf
   783 ;;		_rand
   784 ;;		_read_RTC_I2c
   785 ;;		_selectChanel
   786 ;;		_srand
   787 ;;		_write_RTC_I2c
   788 ;; This function is called by:
   789 ;;		Startup code after reset
   790 ;; This function uses a non-reentrant model
   791 ;;
   792                           
   793                           	psect	text0
   794  000B8A                     __ptext0:
   795                           	opt stack 0
   796  000B8A                     _main:
   797                           	opt stack 26
   798                           
   799                           ;main.c: 146: TRISDbits.TRISD3 = 0;
   800                           
   801                           ;incstack = 0
   802  000B8A  9695               	bcf	3989,3,c	;volatile
   803                           
   804                           ;main.c: 147: TRISDbits.TRISD4 = 0;
   805  000B8C  9895               	bcf	3989,4,c	;volatile
   806                           
   807                           ;main.c: 149: configTimer();
   808  000B8E  EC74  F00C         	call	_configTimer	;wreg free
   809                           
   810                           ;main.c: 152: configADInterrupt();
   811  000B92  ECE3  F00C         	call	_configADInterrupt	;wreg free
   812                           
   813                           ;main.c: 153: configAD();
   814  000B96  EC81  F00C         	call	_configAD	;wreg free
   815                           
   816                           ;main.c: 156: configRS232();
   817  000B9A  EC8E  F00C         	call	_configRS232	;wreg free
   818                           
   819                           ;main.c: 157: configUSARTInterrupts();
   820  000B9E  ECBB  F00C         	call	_configUSARTInterrupts	;wreg free
   821                           
   822                           ;main.c: 160: InitI2C_Master();
   823  000BA2  EC54  F00C         	call	_InitI2C_Master	;wreg free
   824                           
   825                           ;main.c: 163: selectChanel(channel);
   826  000BA6  0100               	movlb	0	; () banked
   827  000BA8  51BC               	movf	_channel& (0+255),w,b
   828  000BAA  EC3F  F009         	call	_selectChanel
   829                           
   830                           ;main.c: 164: ADCON0bits.GODONE = 1;
   831  000BAE  82C2               	bsf	4034,1,c	;volatile
   832                           
   833                           ;main.c: 167: write_RTC_I2c();
   834  000BB0  ECC2  F00A         	call	_write_RTC_I2c	;wreg free
   835                           
   836                           ;main.c: 169: for(int i = 0; i < 100; i++)
   837  000BB4  0E00               	movlw	0
   838  000BB6  0100               	movlb	0	; () banked
   839  000BB8  6F8E               	movwf	(main@i+1)& (0+255),b
   840  000BBA  0E00               	movlw	0
   841  000BBC  6F8D               	movwf	main@i& (0+255),b
   842                           
   843                           ; BSR set to: 0
   844  000BBE  0100               	movlb	0	; () banked
   845  000BC0  BF8E               	btfsc	(main@i+1)& (0+255),7,b
   846  000BC2  D008               	goto	l3002
   847  000BC4  0100               	movlb	0	; () banked
   848  000BC6  518E               	movf	(main@i+1)& (0+255),w,b
   849  000BC8  E118               	bnz	l249
   850  000BCA  0E64               	movlw	100
   851  000BCC  0100               	movlb	0	; () banked
   852  000BCE  5D8D               	subwf	main@i& (0+255),w,b
   853  000BD0  B0D8               	btfsc	status,0,c
   854  000BD2  D013               	goto	l249
   855  000BD4                     l3002:
   856                           
   857                           ; BSR set to: 0
   858                           ;main.c: 170: _delay((unsigned long)((10)*(20000000/4000.0)));
   859  000BD4  0E41               	movlw	65
   860  000BD6  0100               	movlb	0	; () banked
   861  000BD8  6F8C               	movwf	??_main& (0+255),b
   862  000BDA  0EEE               	movlw	238
   863  000BDC                     u2897:
   864  000BDC  2EE8               	decfsz	wreg,f,c
   865  000BDE  D7FE               	goto	u2897
   866  000BE0  2F8C               	decfsz	??_main& (0+255),f,b
   867  000BE2  D7FC               	goto	u2897
   868  000BE4  D000               	nop2	
   869  000BE6  0100               	movlb	0	; () banked
   870  000BE8  4B8D               	infsnz	main@i& (0+255),f,b
   871  000BEA  2B8E               	incf	(main@i+1)& (0+255),f,b
   872  000BEC  0100               	movlb	0	; () banked
   873  000BEE  BF8E               	btfsc	(main@i+1)& (0+255),7,b
   874  000BF0  D7F1               	goto	l3002
   875  000BF2  0100               	movlb	0	; () banked
   876  000BF4  518E               	movf	(main@i+1)& (0+255),w,b
   877  000BF6  E101               	bnz	u2790
   878  000BF8  D7E8               	goto	L1
   879  000BFA                     u2790:
   880  000BFA                     l249:
   881                           
   882                           ; BSR set to: 0
   883                           ;main.c: 171: PORTDbits.RD4 = 0;
   884  000BFA  9883               	bcf	3971,4,c	;volatile
   885                           
   886                           ; BSR set to: 0
   887                           ;main.c: 172: for(int i = 0; i < 100; i++)
   888  000BFC  0E00               	movlw	0
   889  000BFE  0100               	movlb	0	; () banked
   890  000C00  6F90               	movwf	(main@i_1025+1)& (0+255),b
   891  000C02  0E00               	movlw	0
   892  000C04  6F8F               	movwf	main@i_1025& (0+255),b
   893                           
   894                           ; BSR set to: 0
   895  000C06  0100               	movlb	0	; () banked
   896  000C08  BF90               	btfsc	(main@i_1025+1)& (0+255),7,b
   897  000C0A  D008               	goto	l3012
   898  000C0C  0100               	movlb	0	; () banked
   899  000C0E  5190               	movf	(main@i_1025+1)& (0+255),w,b
   900  000C10  E118               	bnz	l251
   901  000C12  0E64               	movlw	100
   902  000C14  0100               	movlb	0	; () banked
   903  000C16  5D8F               	subwf	main@i_1025& (0+255),w,b
   904  000C18  B0D8               	btfsc	status,0,c
   905  000C1A  D013               	goto	l251
   906  000C1C                     l3012:
   907                           
   908                           ; BSR set to: 0
   909                           ;main.c: 173: _delay((unsigned long)((10)*(20000000/4000.0)));
   910  000C1C  0E41               	movlw	65
   911  000C1E  0100               	movlb	0	; () banked
   912  000C20  6F8C               	movwf	??_main& (0+255),b
   913  000C22  0EEE               	movlw	238
   914  000C24                     u2907:
   915  000C24  2EE8               	decfsz	wreg,f,c
   916  000C26  D7FE               	goto	u2907
   917  000C28  2F8C               	decfsz	??_main& (0+255),f,b
   918  000C2A  D7FC               	goto	u2907
   919  000C2C  D000               	nop2	
   920  000C2E  0100               	movlb	0	; () banked
   921  000C30  4B8F               	infsnz	main@i_1025& (0+255),f,b
   922  000C32  2B90               	incf	(main@i_1025+1)& (0+255),f,b
   923  000C34  0100               	movlb	0	; () banked
   924  000C36  BF90               	btfsc	(main@i_1025+1)& (0+255),7,b
   925  000C38  D7F1               	goto	l3012
   926  000C3A  0100               	movlb	0	; () banked
   927  000C3C  5190               	movf	(main@i_1025+1)& (0+255),w,b
   928  000C3E  E101               	bnz	u2810
   929  000C40  D7E8               	goto	L2
   930  000C42                     u2810:
   931  000C42                     l251:
   932                           
   933                           ; BSR set to: 0
   934                           ;main.c: 174: PORTDbits.RD4 = 1;
   935  000C42  8883               	bsf	3971,4,c	;volatile
   936                           
   937                           ; BSR set to: 0
   938                           ;main.c: 175: for(int i = 0; i < 100; i++)
   939  000C44  0E00               	movlw	0
   940  000C46  0100               	movlb	0	; () banked
   941  000C48  6F92               	movwf	(main@i_1026+1)& (0+255),b
   942  000C4A  0E00               	movlw	0
   943  000C4C  6F91               	movwf	main@i_1026& (0+255),b
   944                           
   945                           ; BSR set to: 0
   946  000C4E  0100               	movlb	0	; () banked
   947  000C50  BF92               	btfsc	(main@i_1026+1)& (0+255),7,b
   948  000C52  D008               	goto	l3022
   949  000C54  0100               	movlb	0	; () banked
   950  000C56  5192               	movf	(main@i_1026+1)& (0+255),w,b
   951  000C58  E118               	bnz	l253
   952  000C5A  0E64               	movlw	100
   953  000C5C  0100               	movlb	0	; () banked
   954  000C5E  5D91               	subwf	main@i_1026& (0+255),w,b
   955  000C60  B0D8               	btfsc	status,0,c
   956  000C62  D013               	goto	l253
   957  000C64                     l3022:
   958                           
   959                           ; BSR set to: 0
   960                           ;main.c: 176: _delay((unsigned long)((10)*(20000000/4000.0)));
   961  000C64  0E41               	movlw	65
   962  000C66  0100               	movlb	0	; () banked
   963  000C68  6F8C               	movwf	??_main& (0+255),b
   964  000C6A  0EEE               	movlw	238
   965  000C6C                     u2917:
   966  000C6C  2EE8               	decfsz	wreg,f,c
   967  000C6E  D7FE               	goto	u2917
   968  000C70  2F8C               	decfsz	??_main& (0+255),f,b
   969  000C72  D7FC               	goto	u2917
   970  000C74  D000               	nop2	
   971  000C76  0100               	movlb	0	; () banked
   972  000C78  4B91               	infsnz	main@i_1026& (0+255),f,b
   973  000C7A  2B92               	incf	(main@i_1026+1)& (0+255),f,b
   974  000C7C  0100               	movlb	0	; () banked
   975  000C7E  BF92               	btfsc	(main@i_1026+1)& (0+255),7,b
   976  000C80  D7F1               	goto	l3022
   977  000C82  0100               	movlb	0	; () banked
   978  000C84  5192               	movf	(main@i_1026+1)& (0+255),w,b
   979  000C86  E101               	bnz	u2830
   980  000C88  D7E8               	goto	L3
   981  000C8A                     u2830:
   982  000C8A                     l253:
   983                           
   984                           ; BSR set to: 0
   985                           ;main.c: 177: PORTDbits.RD4 = 0;
   986  000C8A  9883               	bcf	3971,4,c	;volatile
   987                           
   988                           ; BSR set to: 0
   989                           ;main.c: 178: for(int i = 0; i < 100; i++)
   990  000C8C  0E00               	movlw	0
   991  000C8E  0100               	movlb	0	; () banked
   992  000C90  6F94               	movwf	(main@i_1027+1)& (0+255),b
   993  000C92  0E00               	movlw	0
   994  000C94  6F93               	movwf	main@i_1027& (0+255),b
   995                           
   996                           ; BSR set to: 0
   997  000C96  0100               	movlb	0	; () banked
   998  000C98  BF94               	btfsc	(main@i_1027+1)& (0+255),7,b
   999  000C9A  D008               	goto	l3032
  1000  000C9C  0100               	movlb	0	; () banked
  1001  000C9E  5194               	movf	(main@i_1027+1)& (0+255),w,b
  1002  000CA0  E118               	bnz	l255
  1003  000CA2  0E64               	movlw	100
  1004  000CA4  0100               	movlb	0	; () banked
  1005  000CA6  5D93               	subwf	main@i_1027& (0+255),w,b
  1006  000CA8  B0D8               	btfsc	status,0,c
  1007  000CAA  D013               	goto	l255
  1008  000CAC                     l3032:
  1009                           
  1010                           ; BSR set to: 0
  1011                           ;main.c: 179: _delay((unsigned long)((10)*(20000000/4000.0)));
  1012  000CAC  0E41               	movlw	65
  1013  000CAE  0100               	movlb	0	; () banked
  1014  000CB0  6F8C               	movwf	??_main& (0+255),b
  1015  000CB2  0EEE               	movlw	238
  1016  000CB4                     u2927:
  1017  000CB4  2EE8               	decfsz	wreg,f,c
  1018  000CB6  D7FE               	goto	u2927
  1019  000CB8  2F8C               	decfsz	??_main& (0+255),f,b
  1020  000CBA  D7FC               	goto	u2927
  1021  000CBC  D000               	nop2	
  1022  000CBE  0100               	movlb	0	; () banked
  1023  000CC0  4B93               	infsnz	main@i_1027& (0+255),f,b
  1024  000CC2  2B94               	incf	(main@i_1027+1)& (0+255),f,b
  1025  000CC4  0100               	movlb	0	; () banked
  1026  000CC6  BF94               	btfsc	(main@i_1027+1)& (0+255),7,b
  1027  000CC8  D7F1               	goto	l3032
  1028  000CCA  0100               	movlb	0	; () banked
  1029  000CCC  5194               	movf	(main@i_1027+1)& (0+255),w,b
  1030  000CCE  E101               	bnz	u2850
  1031  000CD0  D7E8               	goto	L4
  1032  000CD2                     u2850:
  1033  000CD2                     l255:
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;main.c: 180: PORTDbits.RD4 = 1;
  1037  000CD2  8883               	bsf	3971,4,c	;volatile
  1038                           
  1039                           ; BSR set to: 0
  1040                           ;main.c: 181: for(int i = 0; i < 100; i++)
  1041  000CD4  0E00               	movlw	0
  1042  000CD6  0100               	movlb	0	; () banked
  1043  000CD8  6F96               	movwf	(main@i_1028+1)& (0+255),b
  1044  000CDA  0E00               	movlw	0
  1045  000CDC  6F95               	movwf	main@i_1028& (0+255),b
  1046                           
  1047                           ; BSR set to: 0
  1048  000CDE  0100               	movlb	0	; () banked
  1049  000CE0  BF96               	btfsc	(main@i_1028+1)& (0+255),7,b
  1050  000CE2  D008               	goto	l3042
  1051  000CE4  0100               	movlb	0	; () banked
  1052  000CE6  5196               	movf	(main@i_1028+1)& (0+255),w,b
  1053  000CE8  E118               	bnz	l257
  1054  000CEA  0E64               	movlw	100
  1055  000CEC  0100               	movlb	0	; () banked
  1056  000CEE  5D95               	subwf	main@i_1028& (0+255),w,b
  1057  000CF0  B0D8               	btfsc	status,0,c
  1058  000CF2  D013               	goto	l257
  1059  000CF4                     l3042:
  1060                           
  1061                           ; BSR set to: 0
  1062                           ;main.c: 182: _delay((unsigned long)((10)*(20000000/4000.0)));
  1063  000CF4  0E41               	movlw	65
  1064  000CF6  0100               	movlb	0	; () banked
  1065  000CF8  6F8C               	movwf	??_main& (0+255),b
  1066  000CFA  0EEE               	movlw	238
  1067  000CFC                     u2937:
  1068  000CFC  2EE8               	decfsz	wreg,f,c
  1069  000CFE  D7FE               	goto	u2937
  1070  000D00  2F8C               	decfsz	??_main& (0+255),f,b
  1071  000D02  D7FC               	goto	u2937
  1072  000D04  D000               	nop2	
  1073  000D06  0100               	movlb	0	; () banked
  1074  000D08  4B95               	infsnz	main@i_1028& (0+255),f,b
  1075  000D0A  2B96               	incf	(main@i_1028+1)& (0+255),f,b
  1076  000D0C  0100               	movlb	0	; () banked
  1077  000D0E  BF96               	btfsc	(main@i_1028+1)& (0+255),7,b
  1078  000D10  D7F1               	goto	l3042
  1079  000D12  0100               	movlb	0	; () banked
  1080  000D14  5196               	movf	(main@i_1028+1)& (0+255),w,b
  1081  000D16  E101               	bnz	u2870
  1082  000D18  D7E8               	goto	L5
  1083  000D1A                     u2870:
  1084  000D1A                     l257:
  1085                           
  1086                           ; BSR set to: 0
  1087                           ;main.c: 183: PORTDbits.RD4 = 0;
  1088  000D1A  9883               	bcf	3971,4,c	;volatile
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;main.c: 186: srand(28);
  1092  000D1C  0E00               	movlw	0
  1093  000D1E  0100               	movlb	0	; () banked
  1094  000D20  6F61               	movwf	(srand@x+1)& (0+255),b
  1095  000D22  0E1C               	movlw	28
  1096  000D24  6F60               	movwf	srand@x& (0+255),b
  1097  000D26  ECAD  F00C         	call	_srand	;wreg free
  1098                           
  1099                           ;main.c: 188: contTimer0 = rand() % maxCont + minCont;
  1100  000D2A  EC5D  F00B         	call	_rand	;wreg free
  1101  000D2E  C06C  F06E         	movff	?_rand,___awmod@dividend
  1102  000D32  C06D  F06F         	movff	?_rand+1,___awmod@dividend+1
  1103  000D36  C0BE  F070         	movff	_maxCont,___awmod@divisor
  1104  000D3A  0100               	movlb	0	; () banked
  1105  000D3C  6B71               	clrf	(___awmod@divisor+1)& (0+255),b
  1106  000D3E  ECC2  F009         	call	___awmod	;wreg free
  1107  000D42  0100               	movlb	0	; () banked
  1108  000D44  516E               	movf	?___awmod& (0+255),w,b
  1109  000D46  0100               	movlb	0	; () banked
  1110  000D48  25BF               	addwf	_minCont& (0+255),w,b
  1111  000D4A  0100               	movlb	0	; () banked
  1112  000D4C  6F9A               	movwf	_contTimer0& (0+255),b
  1113                           
  1114                           ; BSR set to: 0
  1115                           ;main.c: 191: TMR0ON = 1;
  1116  000D4E  8ED5               	bsf	4053,7,c	;volatile
  1117  000D50                     l3052:
  1118                           
  1119                           ; BSR set to: 0
  1120                           ;main.c: 195: if(val == contTimer0){
  1121  000D50  0100               	movlb	0	; () banked
  1122  000D52  519A               	movf	_contTimer0& (0+255),w,b
  1123  000D54  0100               	movlb	0	; () banked
  1124  000D56  19A1               	xorwf	_val& (0+255),w,b
  1125  000D58  A4D8               	btfss	status,2,c
  1126  000D5A  D7FA               	goto	l3052
  1127                           
  1128                           ; BSR set to: 0
  1129                           ;main.c: 197: read_RTC_I2c(0x04);
  1130  000D5C  0E04               	movlw	4
  1131  000D5E  ECB2  F00B         	call	_read_RTC_I2c
  1132                           
  1133                           ;main.c: 198: dia = leitura;
  1134  000D62  C09D  F09B         	movff	_leitura,_dia
  1135                           
  1136                           ;main.c: 199: _delay((unsigned long)((10)*(20000000/4000.0)));
  1137  000D66  0E41               	movlw	65
  1138  000D68  0100               	movlb	0	; () banked
  1139  000D6A  6F8C               	movwf	??_main& (0+255),b
  1140  000D6C  0EEE               	movlw	238
  1141  000D6E                     u2947:
  1142  000D6E  2EE8               	decfsz	wreg,f,c
  1143  000D70  D7FE               	goto	u2947
  1144  000D72  2F8C               	decfsz	??_main& (0+255),f,b
  1145  000D74  D7FC               	goto	u2947
  1146  000D76  D000               	nop2	
  1147                           
  1148                           ;main.c: 202: read_RTC_I2c(0x05);
  1149  000D78  0E05               	movlw	5
  1150  000D7A  ECB2  F00B         	call	_read_RTC_I2c
  1151                           
  1152                           ;main.c: 203: mes = leitura;
  1153  000D7E  C09D  F09E         	movff	_leitura,_mes
  1154                           
  1155                           ;main.c: 204: _delay((unsigned long)((10)*(20000000/4000.0)));
  1156  000D82  0E41               	movlw	65
  1157  000D84  0100               	movlb	0	; () banked
  1158  000D86  6F8C               	movwf	??_main& (0+255),b
  1159  000D88  0EEE               	movlw	238
  1160  000D8A                     u2957:
  1161  000D8A  2EE8               	decfsz	wreg,f,c
  1162  000D8C  D7FE               	goto	u2957
  1163  000D8E  2F8C               	decfsz	??_main& (0+255),f,b
  1164  000D90  D7FC               	goto	u2957
  1165  000D92  D000               	nop2	
  1166                           
  1167                           ;main.c: 207: read_RTC_I2c(0x06);
  1168  000D94  0E06               	movlw	6
  1169  000D96  ECB2  F00B         	call	_read_RTC_I2c
  1170                           
  1171                           ;main.c: 208: ano = leitura;
  1172  000D9A  C09D  F099         	movff	_leitura,_ano
  1173                           
  1174                           ;main.c: 209: _delay((unsigned long)((10)*(20000000/4000.0)));
  1175  000D9E  0E41               	movlw	65
  1176  000DA0  0100               	movlb	0	; () banked
  1177  000DA2  6F8C               	movwf	??_main& (0+255),b
  1178  000DA4  0EEE               	movlw	238
  1179  000DA6                     u2967:
  1180  000DA6  2EE8               	decfsz	wreg,f,c
  1181  000DA8  D7FE               	goto	u2967
  1182  000DAA  2F8C               	decfsz	??_main& (0+255),f,b
  1183  000DAC  D7FC               	goto	u2967
  1184  000DAE  D000               	nop2	
  1185                           
  1186                           ;main.c: 212: read_RTC_I2c(0x02);
  1187  000DB0  0E02               	movlw	2
  1188  000DB2  ECB2  F00B         	call	_read_RTC_I2c
  1189                           
  1190                           ;main.c: 213: hora = leitura;
  1191  000DB6  C09D  F09C         	movff	_leitura,_hora
  1192                           
  1193                           ;main.c: 214: _delay((unsigned long)((10)*(20000000/4000.0)));
  1194  000DBA  0E41               	movlw	65
  1195  000DBC  0100               	movlb	0	; () banked
  1196  000DBE  6F8C               	movwf	??_main& (0+255),b
  1197  000DC0  0EEE               	movlw	238
  1198  000DC2                     u2977:
  1199  000DC2  2EE8               	decfsz	wreg,f,c
  1200  000DC4  D7FE               	goto	u2977
  1201  000DC6  2F8C               	decfsz	??_main& (0+255),f,b
  1202  000DC8  D7FC               	goto	u2977
  1203  000DCA  D000               	nop2	
  1204                           
  1205                           ;main.c: 217: read_RTC_I2c(0x01);
  1206  000DCC  0E01               	movlw	1
  1207  000DCE  ECB2  F00B         	call	_read_RTC_I2c
  1208                           
  1209                           ;main.c: 218: minuto = leitura;
  1210  000DD2  C09D  F09F         	movff	_leitura,_minuto
  1211                           
  1212                           ;main.c: 219: _delay((unsigned long)((10)*(20000000/4000.0)));
  1213  000DD6  0E41               	movlw	65
  1214  000DD8  0100               	movlb	0	; () banked
  1215  000DDA  6F8C               	movwf	??_main& (0+255),b
  1216  000DDC  0EEE               	movlw	238
  1217  000DDE                     u2987:
  1218  000DDE  2EE8               	decfsz	wreg,f,c
  1219  000DE0  D7FE               	goto	u2987
  1220  000DE2  2F8C               	decfsz	??_main& (0+255),f,b
  1221  000DE4  D7FC               	goto	u2987
  1222  000DE6  D000               	nop2	
  1223                           
  1224                           ;main.c: 222: read_RTC_I2c(0x00);
  1225  000DE8  0E00               	movlw	0
  1226  000DEA  ECB2  F00B         	call	_read_RTC_I2c
  1227                           
  1228                           ;main.c: 223: segundo = leitura;
  1229  000DEE  C09D  F0A0         	movff	_leitura,_segundo
  1230                           
  1231                           ;main.c: 227: printf("%u&%u&20%02X-%02X-%02X %02X:%02X:%02X", id, data_ADC, ano, mes, di
      +                          a, hora, minuto, segundo);
  1232  000DF2  0E13               	movlw	low STR_2
  1233  000DF4  0100               	movlb	0	; () banked
  1234  000DF6  6F6C               	movwf	printf@f& (0+255),b
  1235  000DF8  0E08               	movlw	high STR_2
  1236  000DFA  0100               	movlb	0	; () banked
  1237  000DFC  6F6D               	movwf	(printf@f+1)& (0+255),b
  1238  000DFE  C0BD  F06E         	movff	_id,?_printf+2
  1239  000E02  0100               	movlb	0	; () banked
  1240  000E04  6B6F               	clrf	(?_printf+3)& (0+255),b
  1241  000E06  C097  F070         	movff	_data_ADC,?_printf+4
  1242  000E0A  C098  F071         	movff	_data_ADC+1,?_printf+5
  1243  000E0E  C099  F072         	movff	_ano,?_printf+6
  1244  000E12  0100               	movlb	0	; () banked
  1245  000E14  6B73               	clrf	(?_printf+7)& (0+255),b
  1246  000E16  C09E  F074         	movff	_mes,?_printf+8
  1247  000E1A  0100               	movlb	0	; () banked
  1248  000E1C  6B75               	clrf	(?_printf+9)& (0+255),b
  1249  000E1E  C09B  F076         	movff	_dia,?_printf+10
  1250  000E22  0100               	movlb	0	; () banked
  1251  000E24  6B77               	clrf	(?_printf+11)& (0+255),b
  1252  000E26  C09C  F078         	movff	_hora,?_printf+12
  1253  000E2A  0100               	movlb	0	; () banked
  1254  000E2C  6B79               	clrf	(?_printf+13)& (0+255),b
  1255  000E2E  C09F  F07A         	movff	_minuto,?_printf+14
  1256  000E32  0100               	movlb	0	; () banked
  1257  000E34  6B7B               	clrf	(?_printf+15)& (0+255),b
  1258  000E36  C0A0  F07C         	movff	_segundo,?_printf+16
  1259  000E3A  0100               	movlb	0	; () banked
  1260  000E3C  6B7D               	clrf	(?_printf+17)& (0+255),b
  1261  000E3E  EC28  F004         	call	_printf	;wreg free
  1262                           
  1263                           ;main.c: 228: _delay((unsigned long)((10)*(20000000/4000.0)));
  1264  000E42  0E41               	movlw	65
  1265  000E44  0100               	movlb	0	; () banked
  1266  000E46  6F8C               	movwf	??_main& (0+255),b
  1267  000E48  0EEE               	movlw	238
  1268  000E4A                     u2997:
  1269  000E4A  2EE8               	decfsz	wreg,f,c
  1270  000E4C  D7FE               	goto	u2997
  1271  000E4E  2F8C               	decfsz	??_main& (0+255),f,b
  1272  000E50  D7FC               	goto	u2997
  1273  000E52  D000               	nop2	
  1274                           
  1275                           ;main.c: 230: printf("\n");
  1276  000E54  0E4D               	movlw	low STR_3
  1277  000E56  0100               	movlb	0	; () banked
  1278  000E58  6F6C               	movwf	printf@f& (0+255),b
  1279  000E5A  0E08               	movlw	high STR_3
  1280  000E5C  0100               	movlb	0	; () banked
  1281  000E5E  6F6D               	movwf	(printf@f+1)& (0+255),b
  1282  000E60  EC28  F004         	call	_printf	;wreg free
  1283                           
  1284                           ;main.c: 231: val = 0;
  1285  000E64  0E00               	movlw	0
  1286  000E66  0100               	movlb	0	; () banked
  1287  000E68  6FA1               	movwf	_val& (0+255),b
  1288                           
  1289                           ; BSR set to: 0
  1290                           ;main.c: 233: contTimer0 = (rand() % (maxCont + minCont)) + minCont;
  1291  000E6A  EC5D  F00B         	call	_rand	;wreg free
  1292  000E6E  C06C  F06E         	movff	?_rand,___awmod@dividend
  1293  000E72  C06D  F06F         	movff	?_rand+1,___awmod@dividend+1
  1294  000E76  0100               	movlb	0	; () banked
  1295  000E78  51BE               	movf	_maxCont& (0+255),w,b
  1296  000E7A  0100               	movlb	0	; () banked
  1297  000E7C  25BF               	addwf	_minCont& (0+255),w,b
  1298  000E7E  0100               	movlb	0	; () banked
  1299  000E80  6F70               	movwf	___awmod@divisor& (0+255),b
  1300  000E82  0100               	movlb	0	; () banked
  1301  000E84  6B71               	clrf	(___awmod@divisor+1)& (0+255),b
  1302  000E86  0100               	movlb	0	; () banked
  1303  000E88  3771               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  1304  000E8A  ECC2  F009         	call	___awmod	;wreg free
  1305  000E8E  0100               	movlb	0	; () banked
  1306  000E90  516E               	movf	?___awmod& (0+255),w,b
  1307  000E92  0100               	movlb	0	; () banked
  1308  000E94  25BF               	addwf	_minCont& (0+255),w,b
  1309  000E96  0100               	movlb	0	; () banked
  1310  000E98  6F9A               	movwf	_contTimer0& (0+255),b
  1311                           
  1312                           ; BSR set to: 0
  1313                           
  1314                           ; BSR set to: 0
  1315  000E9A  D75A               	goto	l3052
  1316  000E9C                     __end_of_main:
  1317                           	opt stack 0
  1318                           tblptru	equ	0xFF8
  1319                           tblptrh	equ	0xFF7
  1320                           tblptrl	equ	0xFF6
  1321                           tablat	equ	0xFF5
  1322                           postinc0	equ	0xFEE
  1323                           wreg	equ	0xFE8
  1324                           postdec1	equ	0xFE5
  1325                           fsr1l	equ	0xFE1
  1326                           status	equ	0xFD8
  1327                           
  1328 ;; *************** function _write_RTC_I2c *****************
  1329 ;; Defined at:
  1330 ;;		line 91 in file "main.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;		None
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;		None
  1335 ;; Return value:  Size  Location     Type
  1336 ;;		None               void
  1337 ;; Registers used:
  1338 ;;		wreg, status,2, status,0, cstack
  1339 ;; Tracked objects:
  1340 ;;		On entry : 0/0
  1341 ;;		On exit  : 0/0
  1342 ;;		Unchanged: 0/0
  1343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1344 ;;      Params:         0       0       0       0       0       0       0       0       0
  1345 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1346 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1347 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1348 ;;Total ram usage:        0 bytes
  1349 ;; Hardware stack levels used:    1
  1350 ;; Hardware stack levels required when called:    4
  1351 ;; This function calls:
  1352 ;;		_I2C_Idle
  1353 ;;		_I2C_Start
  1354 ;;		_I2C_Stop
  1355 ;;		_I2C_Write_Byte
  1356 ;; This function is called by:
  1357 ;;		_main
  1358 ;; This function uses a non-reentrant model
  1359 ;;
  1360                           
  1361                           	psect	text1
  1362  001584                     __ptext1:
  1363                           	opt stack 0
  1364  001584                     _write_RTC_I2c:
  1365                           	opt stack 26
  1366                           
  1367                           ;main.c: 93: I2C_Idle();
  1368                           
  1369                           ; BSR set to: 0
  1370                           ;incstack = 0
  1371  001584  EC9A  F00C         	call	_I2C_Idle	;wreg free
  1372                           
  1373                           ;main.c: 94: I2C_Start();
  1374  001588  ECD9  F00C         	call	_I2C_Start	;wreg free
  1375                           
  1376                           ;main.c: 95: I2C_Idle();
  1377  00158C  EC9A  F00C         	call	_I2C_Idle	;wreg free
  1378                           
  1379                           ;main.c: 96: I2C_Write_Byte(0xD0);
  1380  001590  0ED0               	movlw	208
  1381  001592  ECA4  F00C         	call	_I2C_Write_Byte
  1382                           
  1383                           ;main.c: 97: I2C_Idle();
  1384  001596  EC9A  F00C         	call	_I2C_Idle	;wreg free
  1385                           
  1386                           ;main.c: 98: I2C_Write_Byte(0x00);
  1387  00159A  0E00               	movlw	0
  1388  00159C  ECA4  F00C         	call	_I2C_Write_Byte
  1389                           
  1390                           ;main.c: 99: I2C_Idle();
  1391  0015A0  EC9A  F00C         	call	_I2C_Idle	;wreg free
  1392                           
  1393                           ;main.c: 102: I2C_Write_Byte(0x00);
  1394  0015A4  0E00               	movlw	0
  1395  0015A6  ECA4  F00C         	call	_I2C_Write_Byte
  1396                           
  1397                           ;main.c: 103: I2C_Idle();
  1398  0015AA  EC9A  F00C         	call	_I2C_Idle	;wreg free
  1399                           
  1400                           ;main.c: 105: I2C_Write_Byte(0x30);
  1401  0015AE  0E30               	movlw	48
  1402  0015B0  ECA4  F00C         	call	_I2C_Write_Byte
  1403                           
  1404                           ;main.c: 106: I2C_Idle();
  1405  0015B4  EC9A  F00C         	call	_I2C_Idle	;wreg free
  1406                           
  1407                           ;main.c: 108: I2C_Write_Byte(0x14);
  1408  0015B8  0E14               	movlw	20
  1409  0015BA  ECA4  F00C         	call	_I2C_Write_Byte
  1410                           
  1411                           ;main.c: 109: I2C_Idle();
  1412  0015BE  EC9A  F00C         	call	_I2C_Idle	;wreg free
  1413                           
  1414                           ;main.c: 111: I2C_Write_Byte(0x04);
  1415  0015C2  0E04               	movlw	4
  1416  0015C4  ECA4  F00C         	call	_I2C_Write_Byte
  1417                           
  1418                           ;main.c: 112: I2C_Idle();
  1419  0015C8  EC9A  F00C         	call	_I2C_Idle	;wreg free
  1420                           
  1421                           ;main.c: 114: I2C_Write_Byte(0x22);
  1422  0015CC  0E22               	movlw	34
  1423  0015CE  ECA4  F00C         	call	_I2C_Write_Byte
  1424                           
  1425                           ;main.c: 115: I2C_Idle();
  1426  0015D2  EC9A  F00C         	call	_I2C_Idle	;wreg free
  1427                           
  1428                           ;main.c: 117: I2C_Write_Byte(0x01);
  1429  0015D6  0E01               	movlw	1
  1430  0015D8  ECA4  F00C         	call	_I2C_Write_Byte
  1431                           
  1432                           ;main.c: 118: I2C_Idle();
  1433  0015DC  EC9A  F00C         	call	_I2C_Idle	;wreg free
  1434                           
  1435                           ;main.c: 120: I2C_Write_Byte(0x16);
  1436  0015E0  0E16               	movlw	22
  1437  0015E2  ECA4  F00C         	call	_I2C_Write_Byte
  1438                           
  1439                           ;main.c: 121: I2C_Idle();
  1440  0015E6  EC9A  F00C         	call	_I2C_Idle	;wreg free
  1441                           
  1442                           ;main.c: 122: I2C_Stop();
  1443  0015EA  ECD4  F00C         	call	_I2C_Stop	;wreg free
  1444  0015EE  0012               	return		;funcret
  1445  0015F0                     __end_of_write_RTC_I2c:
  1446                           	opt stack 0
  1447                           tblptru	equ	0xFF8
  1448                           tblptrh	equ	0xFF7
  1449                           tblptrl	equ	0xFF6
  1450                           tablat	equ	0xFF5
  1451                           postinc0	equ	0xFEE
  1452                           wreg	equ	0xFE8
  1453                           postdec1	equ	0xFE5
  1454                           fsr1l	equ	0xFE1
  1455                           status	equ	0xFD8
  1456                           
  1457 ;; *************** function _srand *****************
  1458 ;; Defined at:
  1459 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\rand.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;  x               2    0[BANK0 ] unsigned int 
  1462 ;; Auto vars:     Size  Location     Type
  1463 ;;		None
  1464 ;; Return value:  Size  Location     Type
  1465 ;;		None               void
  1466 ;; Registers used:
  1467 ;;		status,2
  1468 ;; Tracked objects:
  1469 ;;		On entry : 0/0
  1470 ;;		On exit  : 0/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1473 ;;      Params:         0       2       0       0       0       0       0       0       0
  1474 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1475 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1476 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1477 ;;Total ram usage:        2 bytes
  1478 ;; Hardware stack levels used:    1
  1479 ;; Hardware stack levels required when called:    3
  1480 ;; This function calls:
  1481 ;;		Nothing
  1482 ;; This function is called by:
  1483 ;;		_main
  1484 ;; This function uses a non-reentrant model
  1485 ;;
  1486                           
  1487                           	psect	text2
  1488  00195A                     __ptext2:
  1489                           	opt stack 0
  1490  00195A                     _srand:
  1491                           	opt stack 27
  1492                           
  1493                           ;incstack = 0
  1494  00195A  C060  F048         	movff	srand@x,_randx
  1495  00195E  C061  F049         	movff	srand@x+1,_randx+1
  1496  001962  6A4A               	clrf	_randx+2,c
  1497  001964  6A4B               	clrf	_randx+3,c
  1498  001966  0012               	return		;funcret
  1499  001968                     __end_of_srand:
  1500                           	opt stack 0
  1501                           tblptru	equ	0xFF8
  1502                           tblptrh	equ	0xFF7
  1503                           tblptrl	equ	0xFF6
  1504                           tablat	equ	0xFF5
  1505                           postinc0	equ	0xFEE
  1506                           wreg	equ	0xFE8
  1507                           postdec1	equ	0xFE5
  1508                           fsr1l	equ	0xFE1
  1509                           status	equ	0xFD8
  1510                           
  1511 ;; *************** function _selectChanel *****************
  1512 ;; Defined at:
  1513 ;;		line 44 in file "ad.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;  channel         1    wreg     unsigned char 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;  channel         1    0[BANK0 ] unsigned char 
  1518 ;; Return value:  Size  Location     Type
  1519 ;;		None               void
  1520 ;; Registers used:
  1521 ;;		wreg, status,2, status,0
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1527 ;;      Params:         0       0       0       0       0       0       0       0       0
  1528 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1529 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1530 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1531 ;;Total ram usage:        1 bytes
  1532 ;; Hardware stack levels used:    1
  1533 ;; Hardware stack levels required when called:    3
  1534 ;; This function calls:
  1535 ;;		Nothing
  1536 ;; This function is called by:
  1537 ;;		_main
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541                           	psect	text3
  1542  00127E                     __ptext3:
  1543                           	opt stack 0
  1544  00127E                     _selectChanel:
  1545                           	opt stack 27
  1546                           
  1547                           ;incstack = 0
  1548                           ;selectChanel@channel stored from wreg
  1549  00127E  0100               	movlb	0	; () banked
  1550  001280  6F60               	movwf	selectChanel@channel& (0+255),b
  1551                           
  1552                           ;ad.c: 45: if(channel == 0){
  1553  001282  0100               	movlb	0	; () banked
  1554  001284  5160               	movf	selectChanel@channel& (0+255),w,b
  1555  001286  0100               	movlb	0	; () banked
  1556  001288  A4D8               	btfss	status,2,c
  1557  00128A  D005               	goto	l2688
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;ad.c: 46: ADCON0bits.CHS3 = 0;
  1561  00128C  9AC2               	bcf	4034,5,c	;volatile
  1562                           
  1563                           ;ad.c: 47: ADCON0bits.CHS2 = 0;
  1564  00128E  98C2               	bcf	4034,4,c	;volatile
  1565                           
  1566                           ;ad.c: 48: ADCON0bits.CHS1 = 0;
  1567  001290  96C2               	bcf	4034,3,c	;volatile
  1568                           
  1569                           ;ad.c: 49: ADCON0bits.CHS0 = 0;
  1570  001292  94C2               	bcf	4034,2,c	;volatile
  1571                           
  1572                           ;ad.c: 50: }
  1573  001294  0012               	return	
  1574  001296                     l2688:
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;ad.c: 51: else if(channel == 1){
  1578  001296  0100               	movlb	0	; () banked
  1579  001298  0560               	decf	selectChanel@channel& (0+255),w,b
  1580  00129A  A4D8               	btfss	status,2,c
  1581  00129C  D005               	goto	l2692
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;ad.c: 52: ADCON0bits.CHS3 = 0;
  1585  00129E  9AC2               	bcf	4034,5,c	;volatile
  1586                           
  1587                           ;ad.c: 53: ADCON0bits.CHS2 = 0;
  1588  0012A0  98C2               	bcf	4034,4,c	;volatile
  1589                           
  1590                           ;ad.c: 54: ADCON0bits.CHS1 = 0;
  1591  0012A2  96C2               	bcf	4034,3,c	;volatile
  1592                           
  1593                           ;ad.c: 55: ADCON0bits.CHS0 = 1;
  1594  0012A4  84C2               	bsf	4034,2,c	;volatile
  1595                           
  1596                           ;ad.c: 56: }
  1597  0012A6  0012               	return	
  1598  0012A8                     l2692:
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;ad.c: 57: else if(channel == 2){
  1602  0012A8  0E02               	movlw	2
  1603  0012AA  0100               	movlb	0	; () banked
  1604  0012AC  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1605  0012AE  A4D8               	btfss	status,2,c
  1606  0012B0  D005               	goto	l2696
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;ad.c: 58: ADCON0bits.CHS3 = 0;
  1610  0012B2  9AC2               	bcf	4034,5,c	;volatile
  1611                           
  1612                           ;ad.c: 59: ADCON0bits.CHS2 = 0;
  1613  0012B4  98C2               	bcf	4034,4,c	;volatile
  1614                           
  1615                           ;ad.c: 60: ADCON0bits.CHS1 = 1;
  1616  0012B6  86C2               	bsf	4034,3,c	;volatile
  1617                           
  1618                           ;ad.c: 61: ADCON0bits.CHS0 = 0;
  1619  0012B8  94C2               	bcf	4034,2,c	;volatile
  1620                           
  1621                           ;ad.c: 62: }
  1622  0012BA  0012               	return	
  1623  0012BC                     l2696:
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;ad.c: 63: else if(channel == 3){
  1627  0012BC  0E03               	movlw	3
  1628  0012BE  0100               	movlb	0	; () banked
  1629  0012C0  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1630  0012C2  A4D8               	btfss	status,2,c
  1631  0012C4  D005               	goto	l2700
  1632                           
  1633                           ; BSR set to: 0
  1634                           ;ad.c: 64: ADCON0bits.CHS3 = 0;
  1635  0012C6  9AC2               	bcf	4034,5,c	;volatile
  1636                           
  1637                           ;ad.c: 65: ADCON0bits.CHS2 = 0;
  1638  0012C8  98C2               	bcf	4034,4,c	;volatile
  1639                           
  1640                           ;ad.c: 66: ADCON0bits.CHS1 = 1;
  1641  0012CA  86C2               	bsf	4034,3,c	;volatile
  1642                           
  1643                           ;ad.c: 67: ADCON0bits.CHS0 = 1;
  1644  0012CC  84C2               	bsf	4034,2,c	;volatile
  1645                           
  1646                           ;ad.c: 68: }
  1647  0012CE  0012               	return	
  1648  0012D0                     l2700:
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;ad.c: 69: else if(channel == 4){
  1652  0012D0  0E04               	movlw	4
  1653  0012D2  0100               	movlb	0	; () banked
  1654  0012D4  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1655  0012D6  A4D8               	btfss	status,2,c
  1656  0012D8  D005               	goto	l2704
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;ad.c: 70: ADCON0bits.CHS3 = 0;
  1660  0012DA  9AC2               	bcf	4034,5,c	;volatile
  1661                           
  1662                           ;ad.c: 71: ADCON0bits.CHS2 = 1;
  1663  0012DC  88C2               	bsf	4034,4,c	;volatile
  1664                           
  1665                           ;ad.c: 72: ADCON0bits.CHS1 = 0;
  1666  0012DE  96C2               	bcf	4034,3,c	;volatile
  1667                           
  1668                           ;ad.c: 73: ADCON0bits.CHS0 = 0;
  1669  0012E0  94C2               	bcf	4034,2,c	;volatile
  1670                           
  1671                           ;ad.c: 74: }
  1672  0012E2  0012               	return	
  1673  0012E4                     l2704:
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;ad.c: 75: else if(channel == 5){
  1677  0012E4  0E05               	movlw	5
  1678  0012E6  0100               	movlb	0	; () banked
  1679  0012E8  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1680  0012EA  A4D8               	btfss	status,2,c
  1681  0012EC  D005               	goto	l2708
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;ad.c: 76: ADCON0bits.CHS3 = 0;
  1685  0012EE  9AC2               	bcf	4034,5,c	;volatile
  1686                           
  1687                           ;ad.c: 77: ADCON0bits.CHS2 = 1;
  1688  0012F0  88C2               	bsf	4034,4,c	;volatile
  1689                           
  1690                           ;ad.c: 78: ADCON0bits.CHS1 = 0;
  1691  0012F2  96C2               	bcf	4034,3,c	;volatile
  1692                           
  1693                           ;ad.c: 79: ADCON0bits.CHS0 = 1;
  1694  0012F4  84C2               	bsf	4034,2,c	;volatile
  1695                           
  1696                           ;ad.c: 80: }
  1697  0012F6  0012               	return	
  1698  0012F8                     l2708:
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;ad.c: 81: else if(channel == 6){
  1702  0012F8  0E06               	movlw	6
  1703  0012FA  0100               	movlb	0	; () banked
  1704  0012FC  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1705  0012FE  A4D8               	btfss	status,2,c
  1706  001300  D005               	goto	l2712
  1707                           
  1708                           ; BSR set to: 0
  1709                           ;ad.c: 82: ADCON0bits.CHS3 = 0;
  1710  001302  9AC2               	bcf	4034,5,c	;volatile
  1711                           
  1712                           ;ad.c: 83: ADCON0bits.CHS2 = 1;
  1713  001304  88C2               	bsf	4034,4,c	;volatile
  1714                           
  1715                           ;ad.c: 84: ADCON0bits.CHS1 = 1;
  1716  001306  86C2               	bsf	4034,3,c	;volatile
  1717                           
  1718                           ;ad.c: 85: ADCON0bits.CHS0 = 0;
  1719  001308  94C2               	bcf	4034,2,c	;volatile
  1720                           
  1721                           ;ad.c: 86: }
  1722  00130A  0012               	return	
  1723  00130C                     l2712:
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;ad.c: 87: else if(channel == 7){
  1727  00130C  0E07               	movlw	7
  1728  00130E  0100               	movlb	0	; () banked
  1729  001310  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1730  001312  A4D8               	btfss	status,2,c
  1731  001314  D005               	goto	l2716
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;ad.c: 88: ADCON0bits.CHS3 = 0;
  1735  001316  9AC2               	bcf	4034,5,c	;volatile
  1736                           
  1737                           ;ad.c: 89: ADCON0bits.CHS2 = 1;
  1738  001318  88C2               	bsf	4034,4,c	;volatile
  1739                           
  1740                           ;ad.c: 90: ADCON0bits.CHS1 = 1;
  1741  00131A  86C2               	bsf	4034,3,c	;volatile
  1742                           
  1743                           ;ad.c: 91: ADCON0bits.CHS0 = 1;
  1744  00131C  84C2               	bsf	4034,2,c	;volatile
  1745                           
  1746                           ;ad.c: 92: }
  1747  00131E  0012               	return	
  1748  001320                     l2716:
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;ad.c: 93: else if(channel == 8){
  1752  001320  0E08               	movlw	8
  1753  001322  0100               	movlb	0	; () banked
  1754  001324  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1755  001326  A4D8               	btfss	status,2,c
  1756  001328  D005               	goto	l2720
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;ad.c: 94: ADCON0bits.CHS3 = 1;
  1760  00132A  8AC2               	bsf	4034,5,c	;volatile
  1761                           
  1762                           ;ad.c: 95: ADCON0bits.CHS2 = 0;
  1763  00132C  98C2               	bcf	4034,4,c	;volatile
  1764                           
  1765                           ;ad.c: 96: ADCON0bits.CHS1 = 0;
  1766  00132E  96C2               	bcf	4034,3,c	;volatile
  1767                           
  1768                           ;ad.c: 97: ADCON0bits.CHS0 = 0;
  1769  001330  94C2               	bcf	4034,2,c	;volatile
  1770                           
  1771                           ;ad.c: 98: }
  1772  001332  0012               	return	
  1773  001334                     l2720:
  1774                           
  1775                           ; BSR set to: 0
  1776                           ;ad.c: 99: else if(channel == 9){
  1777  001334  0E09               	movlw	9
  1778  001336  0100               	movlb	0	; () banked
  1779  001338  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1780  00133A  A4D8               	btfss	status,2,c
  1781  00133C  D005               	goto	l2724
  1782                           
  1783                           ; BSR set to: 0
  1784                           ;ad.c: 100: ADCON0bits.CHS3 = 1;
  1785  00133E  8AC2               	bsf	4034,5,c	;volatile
  1786                           
  1787                           ;ad.c: 101: ADCON0bits.CHS2 = 0;
  1788  001340  98C2               	bcf	4034,4,c	;volatile
  1789                           
  1790                           ;ad.c: 102: ADCON0bits.CHS1 = 0;
  1791  001342  96C2               	bcf	4034,3,c	;volatile
  1792                           
  1793                           ;ad.c: 103: ADCON0bits.CHS0 = 1;
  1794  001344  84C2               	bsf	4034,2,c	;volatile
  1795                           
  1796                           ;ad.c: 104: }
  1797  001346  0012               	return	
  1798  001348                     l2724:
  1799                           
  1800                           ; BSR set to: 0
  1801                           ;ad.c: 105: else if(channel == 10){
  1802  001348  0E0A               	movlw	10
  1803  00134A  0100               	movlb	0	; () banked
  1804  00134C  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1805  00134E  A4D8               	btfss	status,2,c
  1806  001350  D005               	goto	l2728
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;ad.c: 106: ADCON0bits.CHS3 = 1;
  1810  001352  8AC2               	bsf	4034,5,c	;volatile
  1811                           
  1812                           ;ad.c: 107: ADCON0bits.CHS2 = 0;
  1813  001354  98C2               	bcf	4034,4,c	;volatile
  1814                           
  1815                           ;ad.c: 108: ADCON0bits.CHS1 = 1;
  1816  001356  86C2               	bsf	4034,3,c	;volatile
  1817                           
  1818                           ;ad.c: 109: ADCON0bits.CHS0 = 0;
  1819  001358  94C2               	bcf	4034,2,c	;volatile
  1820                           
  1821                           ;ad.c: 110: }
  1822  00135A  0012               	return	
  1823  00135C                     l2728:
  1824                           
  1825                           ; BSR set to: 0
  1826                           ;ad.c: 111: else if(channel == 11){
  1827  00135C  0E0B               	movlw	11
  1828  00135E  0100               	movlb	0	; () banked
  1829  001360  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1830  001362  A4D8               	btfss	status,2,c
  1831  001364  D005               	goto	l2732
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;ad.c: 112: ADCON0bits.CHS3 = 1;
  1835  001366  8AC2               	bsf	4034,5,c	;volatile
  1836                           
  1837                           ;ad.c: 113: ADCON0bits.CHS2 = 0;
  1838  001368  98C2               	bcf	4034,4,c	;volatile
  1839                           
  1840                           ;ad.c: 114: ADCON0bits.CHS1 = 1;
  1841  00136A  86C2               	bsf	4034,3,c	;volatile
  1842                           
  1843                           ;ad.c: 115: ADCON0bits.CHS0 = 1;
  1844  00136C  84C2               	bsf	4034,2,c	;volatile
  1845                           
  1846                           ;ad.c: 116: }
  1847  00136E  0012               	return	
  1848  001370                     l2732:
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;ad.c: 117: else if(channel == 12){
  1852  001370  0E0C               	movlw	12
  1853  001372  0100               	movlb	0	; () banked
  1854  001374  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1855  001376  A4D8               	btfss	status,2,c
  1856  001378  0012               	return	
  1857                           
  1858                           ; BSR set to: 0
  1859                           ;ad.c: 118: ADCON0bits.CHS3 = 1;
  1860  00137A  8AC2               	bsf	4034,5,c	;volatile
  1861                           
  1862                           ;ad.c: 119: ADCON0bits.CHS2 = 1;
  1863  00137C  88C2               	bsf	4034,4,c	;volatile
  1864                           
  1865                           ;ad.c: 120: ADCON0bits.CHS1 = 0;
  1866  00137E  96C2               	bcf	4034,3,c	;volatile
  1867                           
  1868                           ;ad.c: 121: ADCON0bits.CHS0 = 0;
  1869  001380  94C2               	bcf	4034,2,c	;volatile
  1870                           
  1871                           ; BSR set to: 0
  1872                           
  1873                           ; BSR set to: 0
  1874                           
  1875                           ; BSR set to: 0
  1876                           
  1877                           ; BSR set to: 0
  1878                           
  1879                           ; BSR set to: 0
  1880                           
  1881                           ; BSR set to: 0
  1882                           
  1883                           ; BSR set to: 0
  1884                           
  1885                           ; BSR set to: 0
  1886                           
  1887                           ; BSR set to: 0
  1888                           
  1889                           ; BSR set to: 0
  1890                           
  1891                           ; BSR set to: 0
  1892                           
  1893                           ; BSR set to: 0
  1894  001382  0012               	return	
  1895  001384                     __end_of_selectChanel:
  1896                           	opt stack 0
  1897                           tblptru	equ	0xFF8
  1898                           tblptrh	equ	0xFF7
  1899                           tblptrl	equ	0xFF6
  1900                           tablat	equ	0xFF5
  1901                           postinc0	equ	0xFEE
  1902                           wreg	equ	0xFE8
  1903                           postdec1	equ	0xFE5
  1904                           fsr1l	equ	0xFE1
  1905                           status	equ	0xFD8
  1906                           
  1907 ;; *************** function _read_RTC_I2c *****************
  1908 ;; Defined at:
  1909 ;;		line 125 in file "main.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;  pos_memoria     1    wreg     unsigned char 
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;  pos_memoria     1    1[BANK0 ] unsigned char 
  1914 ;; Return value:  Size  Location     Type
  1915 ;;		None               void
  1916 ;; Registers used:
  1917 ;;		wreg, status,2, status,0, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1923 ;;      Params:         0       0       0       0       0       0       0       0       0
  1924 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1926 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1927 ;;Total ram usage:        1 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    4
  1930 ;; This function calls:
  1931 ;;		_I2C_Idle
  1932 ;;		_I2C_ReStart
  1933 ;;		_I2C_Read_Byte
  1934 ;;		_I2C_Send_NACK
  1935 ;;		_I2C_Start
  1936 ;;		_I2C_Stop
  1937 ;;		_I2C_Write_Byte
  1938 ;; This function is called by:
  1939 ;;		_main
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text4
  1944  001764                     __ptext4:
  1945                           	opt stack 0
  1946  001764                     _read_RTC_I2c:
  1947                           	opt stack 26
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;incstack = 0
  1951                           ;read_RTC_I2c@pos_memoria stored from wreg
  1952  001764  0100               	movlb	0	; () banked
  1953  001766  6F61               	movwf	read_RTC_I2c@pos_memoria& (0+255),b
  1954                           
  1955                           ;main.c: 127: I2C_Idle();
  1956  001768  EC9A  F00C         	call	_I2C_Idle	;wreg free
  1957                           
  1958                           ;main.c: 128: I2C_Start();
  1959  00176C  ECD9  F00C         	call	_I2C_Start	;wreg free
  1960                           
  1961                           ;main.c: 129: I2C_Idle();
  1962  001770  EC9A  F00C         	call	_I2C_Idle	;wreg free
  1963                           
  1964                           ;main.c: 130: I2C_Write_Byte(0xD0);
  1965  001774  0ED0               	movlw	208
  1966  001776  ECA4  F00C         	call	_I2C_Write_Byte
  1967                           
  1968                           ;main.c: 131: I2C_Idle();
  1969  00177A  EC9A  F00C         	call	_I2C_Idle	;wreg free
  1970                           
  1971                           ;main.c: 132: I2C_Write_Byte(pos_memoria);
  1972  00177E  0100               	movlb	0	; () banked
  1973  001780  5161               	movf	read_RTC_I2c@pos_memoria& (0+255),w,b
  1974  001782  ECA4  F00C         	call	_I2C_Write_Byte
  1975                           
  1976                           ;main.c: 133: I2C_Idle();
  1977  001786  EC9A  F00C         	call	_I2C_Idle	;wreg free
  1978                           
  1979                           ;main.c: 134: I2C_ReStart();
  1980  00178A  ECDE  F00C         	call	_I2C_ReStart	;wreg free
  1981                           
  1982                           ;main.c: 135: I2C_Idle();
  1983  00178E  EC9A  F00C         	call	_I2C_Idle	;wreg free
  1984                           
  1985                           ;main.c: 136: I2C_Write_Byte(0xD1);
  1986  001792  0ED1               	movlw	209
  1987  001794  ECA4  F00C         	call	_I2C_Write_Byte
  1988                           
  1989                           ;main.c: 137: I2C_Idle();
  1990  001798  EC9A  F00C         	call	_I2C_Idle	;wreg free
  1991                           
  1992                           ;main.c: 138: leitura = I2C_Read_Byte();
  1993  00179C  ECC8  F00C         	call	_I2C_Read_Byte	;wreg free
  1994  0017A0  0100               	movlb	0	; () banked
  1995  0017A2  6F9D               	movwf	_leitura& (0+255),b
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;main.c: 139: I2C_Idle();
  1999  0017A4  EC9A  F00C         	call	_I2C_Idle	;wreg free
  2000                           
  2001                           ;main.c: 140: I2C_Send_NACK();
  2002  0017A8  ECC2  F00C         	call	_I2C_Send_NACK	;wreg free
  2003                           
  2004                           ;main.c: 141: I2C_Stop();
  2005  0017AC  ECD4  F00C         	call	_I2C_Stop	;wreg free
  2006  0017B0  0012               	return		;funcret
  2007  0017B2                     __end_of_read_RTC_I2c:
  2008                           	opt stack 0
  2009                           tblptru	equ	0xFF8
  2010                           tblptrh	equ	0xFF7
  2011                           tblptrl	equ	0xFF6
  2012                           tablat	equ	0xFF5
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           postdec1	equ	0xFE5
  2016                           fsr1l	equ	0xFE1
  2017                           status	equ	0xFD8
  2018                           
  2019 ;; *************** function _I2C_Write_Byte *****************
  2020 ;; Defined at:
  2021 ;;		line 82 in file "i2c.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;  Byte            1    wreg     unsigned char 
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  Byte            1    0[BANK0 ] unsigned char 
  2026 ;; Return value:  Size  Location     Type
  2027 ;;		None               void
  2028 ;; Registers used:
  2029 ;;		wreg
  2030 ;; Tracked objects:
  2031 ;;		On entry : 0/0
  2032 ;;		On exit  : 0/0
  2033 ;;		Unchanged: 0/0
  2034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2035 ;;      Params:         0       0       0       0       0       0       0       0       0
  2036 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2037 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2038 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2039 ;;Total ram usage:        1 bytes
  2040 ;; Hardware stack levels used:    1
  2041 ;; Hardware stack levels required when called:    3
  2042 ;; This function calls:
  2043 ;;		Nothing
  2044 ;; This function is called by:
  2045 ;;		_write_RTC_I2c
  2046 ;;		_read_RTC_I2c
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text5
  2051  001948                     __ptext5:
  2052                           	opt stack 0
  2053  001948                     _I2C_Write_Byte:
  2054                           	opt stack 26
  2055                           
  2056                           ;incstack = 0
  2057                           ;I2C_Write_Byte@Byte stored from wreg
  2058  001948  0100               	movlb	0	; () banked
  2059  00194A  6F60               	movwf	I2C_Write_Byte@Byte& (0+255),b
  2060                           
  2061                           ;i2c.c: 84: SSPBUF = Byte;
  2062  00194C  C060  FFC9         	movff	I2C_Write_Byte@Byte,4041	;volatile
  2063  001950                     l107:
  2064  001950  A69E               	btfss	3998,3,c	;volatile
  2065  001952  D7FE               	goto	l107
  2066                           
  2067                           ;i2c.c: 86: SSPIF = 0;
  2068  001954  969E               	bcf	3998,3,c	;volatile
  2069                           
  2070                           ;i2c.c: 87: return SSPCON2bits.ACKSTAT;
  2071                           ;	Return value of _I2C_Write_Byte is never used
  2072  001956  50C5               	movf	4037,w,c	;volatile
  2073  001958  0012               	return		;funcret
  2074  00195A                     __end_of_I2C_Write_Byte:
  2075                           	opt stack 0
  2076                           tblptru	equ	0xFF8
  2077                           tblptrh	equ	0xFF7
  2078                           tblptrl	equ	0xFF6
  2079                           tablat	equ	0xFF5
  2080                           postinc0	equ	0xFEE
  2081                           wreg	equ	0xFE8
  2082                           postdec1	equ	0xFE5
  2083                           fsr1l	equ	0xFE1
  2084                           status	equ	0xFD8
  2085                           
  2086 ;; *************** function _I2C_Stop *****************
  2087 ;; Defined at:
  2088 ;;		line 62 in file "i2c.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;		None
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;		None
  2093 ;; Return value:  Size  Location     Type
  2094 ;;		None               void
  2095 ;; Registers used:
  2096 ;;		None
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2102 ;;      Params:         0       0       0       0       0       0       0       0       0
  2103 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2104 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2105 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2106 ;;Total ram usage:        0 bytes
  2107 ;; Hardware stack levels used:    1
  2108 ;; Hardware stack levels required when called:    3
  2109 ;; This function calls:
  2110 ;;		Nothing
  2111 ;; This function is called by:
  2112 ;;		_write_RTC_I2c
  2113 ;;		_read_RTC_I2c
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           	psect	text6
  2118  0019A8                     __ptext6:
  2119                           	opt stack 0
  2120  0019A8                     _I2C_Stop:
  2121                           	opt stack 26
  2122                           
  2123                           ;i2c.c: 63: SSPCON2bits.PEN = 1;
  2124                           
  2125                           ;incstack = 0
  2126  0019A8  84C5               	bsf	4037,2,c	;volatile
  2127  0019AA                     l89:
  2128  0019AA  A69E               	btfss	3998,3,c	;volatile
  2129  0019AC  D7FE               	goto	l89
  2130                           
  2131                           ;i2c.c: 65: SSPIF = 0;
  2132  0019AE  969E               	bcf	3998,3,c	;volatile
  2133  0019B0  0012               	return		;funcret
  2134  0019B2                     __end_of_I2C_Stop:
  2135                           	opt stack 0
  2136                           tblptru	equ	0xFF8
  2137                           tblptrh	equ	0xFF7
  2138                           tblptrl	equ	0xFF6
  2139                           tablat	equ	0xFF5
  2140                           postinc0	equ	0xFEE
  2141                           wreg	equ	0xFE8
  2142                           postdec1	equ	0xFE5
  2143                           fsr1l	equ	0xFE1
  2144                           status	equ	0xFD8
  2145                           
  2146 ;; *************** function _I2C_Start *****************
  2147 ;; Defined at:
  2148 ;;		line 48 in file "i2c.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;		None
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;		None
  2153 ;; Return value:  Size  Location     Type
  2154 ;;		None               void
  2155 ;; Registers used:
  2156 ;;		None
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2162 ;;      Params:         0       0       0       0       0       0       0       0       0
  2163 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2164 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2165 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2166 ;;Total ram usage:        0 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    3
  2169 ;; This function calls:
  2170 ;;		Nothing
  2171 ;; This function is called by:
  2172 ;;		_write_RTC_I2c
  2173 ;;		_read_RTC_I2c
  2174 ;; This function uses a non-reentrant model
  2175 ;;
  2176                           
  2177                           	psect	text7
  2178  0019B2                     __ptext7:
  2179                           	opt stack 0
  2180  0019B2                     _I2C_Start:
  2181                           	opt stack 26
  2182                           
  2183                           ;i2c.c: 50: SSPCON2bits.SEN = 1;
  2184                           
  2185                           ;incstack = 0
  2186  0019B2  80C5               	bsf	4037,0,c	;volatile
  2187  0019B4                     l77:
  2188  0019B4  A69E               	btfss	3998,3,c	;volatile
  2189  0019B6  D7FE               	goto	l77
  2190                           
  2191                           ;i2c.c: 52: SSPIF = 0;
  2192  0019B8  969E               	bcf	3998,3,c	;volatile
  2193  0019BA  0012               	return		;funcret
  2194  0019BC                     __end_of_I2C_Start:
  2195                           	opt stack 0
  2196                           tblptru	equ	0xFF8
  2197                           tblptrh	equ	0xFF7
  2198                           tblptrl	equ	0xFF6
  2199                           tablat	equ	0xFF5
  2200                           postinc0	equ	0xFEE
  2201                           wreg	equ	0xFE8
  2202                           postdec1	equ	0xFE5
  2203                           fsr1l	equ	0xFE1
  2204                           status	equ	0xFD8
  2205                           
  2206 ;; *************** function _I2C_Send_NACK *****************
  2207 ;; Defined at:
  2208 ;;		line 75 in file "i2c.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;		None
  2211 ;; Auto vars:     Size  Location     Type
  2212 ;;		None
  2213 ;; Return value:  Size  Location     Type
  2214 ;;		None               void
  2215 ;; Registers used:
  2216 ;;		None
  2217 ;; Tracked objects:
  2218 ;;		On entry : 0/0
  2219 ;;		On exit  : 0/0
  2220 ;;		Unchanged: 0/0
  2221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2222 ;;      Params:         0       0       0       0       0       0       0       0       0
  2223 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2224 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2225 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2226 ;;Total ram usage:        0 bytes
  2227 ;; Hardware stack levels used:    1
  2228 ;; Hardware stack levels required when called:    3
  2229 ;; This function calls:
  2230 ;;		Nothing
  2231 ;; This function is called by:
  2232 ;;		_read_RTC_I2c
  2233 ;; This function uses a non-reentrant model
  2234 ;;
  2235                           
  2236                           	psect	text8
  2237  001984                     __ptext8:
  2238                           	opt stack 0
  2239  001984                     _I2C_Send_NACK:
  2240                           	opt stack 26
  2241                           
  2242                           ;i2c.c: 76: SSPCON2bits.ACKDT = 1;
  2243                           
  2244                           ;incstack = 0
  2245  001984  8AC5               	bsf	4037,5,c	;volatile
  2246                           
  2247                           ;i2c.c: 77: SSPCON2bits.ACKEN = 1;
  2248  001986  88C5               	bsf	4037,4,c	;volatile
  2249  001988                     l101:
  2250  001988  A69E               	btfss	3998,3,c	;volatile
  2251  00198A  D7FE               	goto	l101
  2252                           
  2253                           ;i2c.c: 79: SSPIF = 0;
  2254  00198C  969E               	bcf	3998,3,c	;volatile
  2255  00198E  0012               	return		;funcret
  2256  001990                     __end_of_I2C_Send_NACK:
  2257                           	opt stack 0
  2258                           tblptru	equ	0xFF8
  2259                           tblptrh	equ	0xFF7
  2260                           tblptrl	equ	0xFF6
  2261                           tablat	equ	0xFF5
  2262                           postinc0	equ	0xFEE
  2263                           wreg	equ	0xFE8
  2264                           postdec1	equ	0xFE5
  2265                           fsr1l	equ	0xFE1
  2266                           status	equ	0xFD8
  2267                           
  2268 ;; *************** function _I2C_Read_Byte *****************
  2269 ;; Defined at:
  2270 ;;		line 90 in file "i2c.c"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;		None
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;		None
  2275 ;; Return value:  Size  Location     Type
  2276 ;;                  1    wreg      unsigned char 
  2277 ;; Registers used:
  2278 ;;		wreg, status,2
  2279 ;; Tracked objects:
  2280 ;;		On entry : 0/0
  2281 ;;		On exit  : 0/0
  2282 ;;		Unchanged: 0/0
  2283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2284 ;;      Params:         0       0       0       0       0       0       0       0       0
  2285 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2286 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2287 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2288 ;;Total ram usage:        0 bytes
  2289 ;; Hardware stack levels used:    1
  2290 ;; Hardware stack levels required when called:    3
  2291 ;; This function calls:
  2292 ;;		Nothing
  2293 ;; This function is called by:
  2294 ;;		_read_RTC_I2c
  2295 ;; This function uses a non-reentrant model
  2296 ;;
  2297                           
  2298                           	psect	text9
  2299  001990                     __ptext9:
  2300                           	opt stack 0
  2301  001990                     _I2C_Read_Byte:
  2302                           	opt stack 26
  2303                           
  2304                           ;i2c.c: 92: SSPCON2bits.RCEN = 1;
  2305                           
  2306                           ;incstack = 0
  2307  001990  86C5               	bsf	4037,3,c	;volatile
  2308  001992                     l113:
  2309  001992  A69E               	btfss	3998,3,c	;volatile
  2310  001994  D7FE               	goto	l113
  2311                           
  2312                           ;i2c.c: 94: SSPIF = 0;
  2313  001996  969E               	bcf	3998,3,c	;volatile
  2314                           
  2315                           ;i2c.c: 96: return SSPBUF;
  2316  001998  50C9               	movf	4041,w,c	;volatile
  2317  00199A  0012               	return	
  2318  00199C                     __end_of_I2C_Read_Byte:
  2319                           	opt stack 0
  2320                           tblptru	equ	0xFF8
  2321                           tblptrh	equ	0xFF7
  2322                           tblptrl	equ	0xFF6
  2323                           tablat	equ	0xFF5
  2324                           postinc0	equ	0xFEE
  2325                           wreg	equ	0xFE8
  2326                           postdec1	equ	0xFE5
  2327                           fsr1l	equ	0xFE1
  2328                           status	equ	0xFD8
  2329                           
  2330 ;; *************** function _I2C_ReStart *****************
  2331 ;; Defined at:
  2332 ;;		line 55 in file "i2c.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;		None
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;		None
  2337 ;; Return value:  Size  Location     Type
  2338 ;;		None               void
  2339 ;; Registers used:
  2340 ;;		None
  2341 ;; Tracked objects:
  2342 ;;		On entry : 0/0
  2343 ;;		On exit  : 0/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2346 ;;      Params:         0       0       0       0       0       0       0       0       0
  2347 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2348 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2349 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2350 ;;Total ram usage:        0 bytes
  2351 ;; Hardware stack levels used:    1
  2352 ;; Hardware stack levels required when called:    3
  2353 ;; This function calls:
  2354 ;;		Nothing
  2355 ;; This function is called by:
  2356 ;;		_read_RTC_I2c
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360                           	psect	text10
  2361  0019BC                     __ptext10:
  2362                           	opt stack 0
  2363  0019BC                     _I2C_ReStart:
  2364                           	opt stack 26
  2365                           
  2366                           ;i2c.c: 57: SSPCON2bits.RSEN = 1;
  2367                           
  2368                           ;incstack = 0
  2369  0019BC  82C5               	bsf	4037,1,c	;volatile
  2370  0019BE                     l83:
  2371  0019BE  A69E               	btfss	3998,3,c	;volatile
  2372  0019C0  D7FE               	goto	l83
  2373                           
  2374                           ;i2c.c: 59: SSPIF = 0;
  2375  0019C2  969E               	bcf	3998,3,c	;volatile
  2376  0019C4  0012               	return		;funcret
  2377  0019C6                     __end_of_I2C_ReStart:
  2378                           	opt stack 0
  2379                           tblptru	equ	0xFF8
  2380                           tblptrh	equ	0xFF7
  2381                           tblptrl	equ	0xFF6
  2382                           tablat	equ	0xFF5
  2383                           postinc0	equ	0xFEE
  2384                           wreg	equ	0xFE8
  2385                           postdec1	equ	0xFE5
  2386                           fsr1l	equ	0xFE1
  2387                           status	equ	0xFD8
  2388                           
  2389 ;; *************** function _I2C_Idle *****************
  2390 ;; Defined at:
  2391 ;;		line 99 in file "i2c.c"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;		None
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;		None
  2396 ;; Return value:  Size  Location     Type
  2397 ;;		None               void
  2398 ;; Registers used:
  2399 ;;		wreg, status,2, status,0
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2405 ;;      Params:         0       0       0       0       0       0       0       0       0
  2406 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2407 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2408 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2409 ;;Total ram usage:        1 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    3
  2412 ;; This function calls:
  2413 ;;		Nothing
  2414 ;; This function is called by:
  2415 ;;		_write_RTC_I2c
  2416 ;;		_read_RTC_I2c
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           	psect	text11
  2421  001934                     __ptext11:
  2422                           	opt stack 0
  2423  001934                     _I2C_Idle:
  2424                           	opt stack 26
  2425  001934                     l2606:
  2426  001934  CFC5 F060          	movff	4037,??_I2C_Idle	;volatile
  2427  001938  0E1F               	movlw	31
  2428  00193A  0100               	movlb	0	; () banked
  2429  00193C  1760               	andwf	??_I2C_Idle& (0+255),f,b
  2430  00193E  A4D8               	btfss	status,2,c
  2431  001940  D7F9               	goto	l2606
  2432                           
  2433                           ; BSR set to: 0
  2434  001942  A4C7               	btfss	4039,2,c	;volatile
  2435  001944  0012               	return	
  2436  001946  D7F6               	goto	l2606
  2437  001948                     __end_of_I2C_Idle:
  2438                           	opt stack 0
  2439                           tblptru	equ	0xFF8
  2440                           tblptrh	equ	0xFF7
  2441                           tblptrl	equ	0xFF6
  2442                           tablat	equ	0xFF5
  2443                           postinc0	equ	0xFEE
  2444                           wreg	equ	0xFE8
  2445                           postdec1	equ	0xFE5
  2446                           fsr1l	equ	0xFE1
  2447                           status	equ	0xFD8
  2448                           
  2449 ;; *************** function _rand *****************
  2450 ;; Defined at:
  2451 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\rand.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;		None
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;		None
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  2   12[BANK0 ] int 
  2458 ;; Registers used:
  2459 ;;		wreg, status,2, status,0, cstack
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2465 ;;      Params:         0       2       0       0       0       0       0       0       0
  2466 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2467 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2468 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2469 ;;Total ram usage:        2 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    4
  2472 ;; This function calls:
  2473 ;;		___lmul
  2474 ;; This function is called by:
  2475 ;;		_main
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           	psect	text12
  2480  0016BA                     __ptext12:
  2481                           	opt stack 0
  2482  0016BA                     _rand:
  2483                           	opt stack 26
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;incstack = 0
  2487  0016BA  C048  F060         	movff	_randx,___lmul@multiplier
  2488  0016BE  C049  F061         	movff	_randx+1,___lmul@multiplier+1
  2489  0016C2  C04A  F062         	movff	_randx+2,___lmul@multiplier+2
  2490  0016C6  C04B  F063         	movff	_randx+3,___lmul@multiplier+3
  2491  0016CA  0E6D               	movlw	109
  2492  0016CC  0100               	movlb	0	; () banked
  2493  0016CE  6F64               	movwf	___lmul@multiplicand& (0+255),b
  2494  0016D0  0E4E               	movlw	78
  2495  0016D2  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  2496  0016D4  0EC6               	movlw	198
  2497  0016D6  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
  2498  0016D8  0E41               	movlw	65
  2499  0016DA  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
  2500  0016DC  EC4F  F00A         	call	___lmul	;wreg free
  2501  0016E0  C060  F048         	movff	?___lmul,_randx
  2502  0016E4  C061  F049         	movff	?___lmul+1,_randx+1
  2503  0016E8  C062  F04A         	movff	?___lmul+2,_randx+2
  2504  0016EC  C063  F04B         	movff	?___lmul+3,_randx+3
  2505  0016F0  0E39               	movlw	57
  2506  0016F2  2648               	addwf	_randx,f,c
  2507  0016F4  0E30               	movlw	48
  2508  0016F6  2249               	addwfc	_randx+1,f,c
  2509  0016F8  0E00               	movlw	0
  2510  0016FA  224A               	addwfc	_randx+2,f,c
  2511  0016FC  0E00               	movlw	0
  2512  0016FE  224B               	addwfc	_randx+3,f,c
  2513  001700  0EFF               	movlw	255
  2514  001702  144A               	andwf	_randx+2,w,c
  2515  001704  0100               	movlb	0	; () banked
  2516  001706  6F6C               	movwf	?_rand& (0+255),b
  2517  001708  0E7F               	movlw	127
  2518  00170A  144B               	andwf	_randx+3,w,c
  2519  00170C  0100               	movlb	0	; () banked
  2520  00170E  6F6D               	movwf	(?_rand+1)& (0+255),b
  2521  001710  0012               	return	
  2522  001712                     __end_of_rand:
  2523                           	opt stack 0
  2524                           tblptru	equ	0xFF8
  2525                           tblptrh	equ	0xFF7
  2526                           tblptrl	equ	0xFF6
  2527                           tablat	equ	0xFF5
  2528                           postinc0	equ	0xFEE
  2529                           wreg	equ	0xFE8
  2530                           postdec1	equ	0xFE5
  2531                           fsr1l	equ	0xFE1
  2532                           status	equ	0xFD8
  2533                           
  2534 ;; *************** function ___lmul *****************
  2535 ;; Defined at:
  2536 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul32.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2539 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2540 ;; Auto vars:     Size  Location     Type
  2541 ;;  product         4    8[BANK0 ] unsigned long 
  2542 ;; Return value:  Size  Location     Type
  2543 ;;                  4    0[BANK0 ] unsigned long 
  2544 ;; Registers used:
  2545 ;;		wreg, status,2, status,0
  2546 ;; Tracked objects:
  2547 ;;		On entry : 0/0
  2548 ;;		On exit  : 0/0
  2549 ;;		Unchanged: 0/0
  2550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2551 ;;      Params:         0       8       0       0       0       0       0       0       0
  2552 ;;      Locals:         0       4       0       0       0       0       0       0       0
  2553 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2554 ;;      Totals:         0      12       0       0       0       0       0       0       0
  2555 ;;Total ram usage:       12 bytes
  2556 ;; Hardware stack levels used:    1
  2557 ;; Hardware stack levels required when called:    3
  2558 ;; This function calls:
  2559 ;;		Nothing
  2560 ;; This function is called by:
  2561 ;;		_rand
  2562 ;; This function uses a non-reentrant model
  2563 ;;
  2564                           
  2565                           	psect	text13
  2566  00149E                     __ptext13:
  2567                           	opt stack 0
  2568  00149E                     ___lmul:
  2569                           	opt stack 26
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;incstack = 0
  2573  00149E  0E00               	movlw	0
  2574  0014A0  0100               	movlb	0	; () banked
  2575  0014A2  6F68               	movwf	___lmul@product& (0+255),b
  2576  0014A4  0E00               	movlw	0
  2577  0014A6  6F69               	movwf	(___lmul@product+1)& (0+255),b
  2578  0014A8  0E00               	movlw	0
  2579  0014AA  6F6A               	movwf	(___lmul@product+2)& (0+255),b
  2580  0014AC  0E00               	movlw	0
  2581  0014AE  6F6B               	movwf	(___lmul@product+3)& (0+255),b
  2582  0014B0                     l2634:
  2583                           
  2584                           ; BSR set to: 0
  2585  0014B0  0100               	movlb	0	; () banked
  2586  0014B2  A160               	btfss	___lmul@multiplier& (0+255),0,b
  2587  0014B4  D010               	goto	l2638
  2588                           
  2589                           ; BSR set to: 0
  2590  0014B6  0100               	movlb	0	; () banked
  2591  0014B8  5164               	movf	___lmul@multiplicand& (0+255),w,b
  2592  0014BA  0100               	movlb	0	; () banked
  2593  0014BC  2768               	addwf	___lmul@product& (0+255),f,b
  2594  0014BE  0100               	movlb	0	; () banked
  2595  0014C0  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  2596  0014C2  0100               	movlb	0	; () banked
  2597  0014C4  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
  2598  0014C6  0100               	movlb	0	; () banked
  2599  0014C8  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  2600  0014CA  0100               	movlb	0	; () banked
  2601  0014CC  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
  2602  0014CE  0100               	movlb	0	; () banked
  2603  0014D0  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  2604  0014D2  0100               	movlb	0	; () banked
  2605  0014D4  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
  2606  0014D6                     l2638:
  2607                           
  2608                           ; BSR set to: 0
  2609  0014D6  0100               	movlb	0	; () banked
  2610  0014D8  90D8               	bcf	status,0,c
  2611  0014DA  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
  2612  0014DC  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  2613  0014DE  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  2614  0014E0  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  2615                           
  2616                           ; BSR set to: 0
  2617  0014E2  0100               	movlb	0	; () banked
  2618  0014E4  90D8               	bcf	status,0,c
  2619  0014E6  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  2620  0014E8  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  2621  0014EA  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  2622  0014EC  3360               	rrcf	___lmul@multiplier& (0+255),f,b
  2623  0014EE  0100               	movlb	0	; () banked
  2624  0014F0  5160               	movf	___lmul@multiplier& (0+255),w,b
  2625  0014F2  0100               	movlb	0	; () banked
  2626  0014F4  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  2627  0014F6  0100               	movlb	0	; () banked
  2628  0014F8  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  2629  0014FA  0100               	movlb	0	; () banked
  2630  0014FC  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  2631  0014FE  A4D8               	btfss	status,2,c
  2632  001500  D7D7               	goto	l2634
  2633                           
  2634                           ; BSR set to: 0
  2635  001502  C068  F060         	movff	___lmul@product,?___lmul
  2636  001506  C069  F061         	movff	___lmul@product+1,?___lmul+1
  2637  00150A  C06A  F062         	movff	___lmul@product+2,?___lmul+2
  2638  00150E  C06B  F063         	movff	___lmul@product+3,?___lmul+3
  2639                           
  2640                           ; BSR set to: 0
  2641  001512  0012               	return		;funcret
  2642  001514                     __end_of___lmul:
  2643                           	opt stack 0
  2644                           tblptru	equ	0xFF8
  2645                           tblptrh	equ	0xFF7
  2646                           tblptrl	equ	0xFF6
  2647                           tablat	equ	0xFF5
  2648                           postinc0	equ	0xFEE
  2649                           wreg	equ	0xFE8
  2650                           postdec1	equ	0xFE5
  2651                           fsr1l	equ	0xFE1
  2652                           status	equ	0xFD8
  2653                           
  2654 ;; *************** function _printf *****************
  2655 ;; Defined at:
  2656 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  2659 ;;		 -> STR_3(2), STR_2(38), STR_1(3), 
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;  idx             1   34[BANK0 ] unsigned char 
  2662 ;;  tmpval          4    0        struct .
  2663 ;;  cp              3    0        PTR const unsigned char 
  2664 ;;  width           2   41[BANK0 ] int 
  2665 ;;  val             2   38[BANK0 ] unsigned int 
  2666 ;;  ap              2   35[BANK0 ] PTR void [1]
  2667 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2668 ;;  len             2    0        unsigned int 
  2669 ;;  c               1   43[BANK0 ] char 
  2670 ;;  flag            1   40[BANK0 ] unsigned char 
  2671 ;;  prec            1   37[BANK0 ] char 
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  2   12[BANK0 ] int 
  2674 ;; Registers used:
  2675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2681 ;;      Params:         0      18       0       0       0       0       0       0       0
  2682 ;;      Locals:         0      10       0       0       0       0       0       0       0
  2683 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2684 ;;      Totals:         0      32       0       0       0       0       0       0       0
  2685 ;;Total ram usage:       32 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:    4
  2688 ;; This function calls:
  2689 ;;		___lwdiv
  2690 ;;		___lwmod
  2691 ;;		___wmul
  2692 ;;		_isdigit
  2693 ;;		_putch
  2694 ;; This function is called by:
  2695 ;;		_main
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           	psect	text14
  2700  000850                     __ptext14:
  2701                           	opt stack 0
  2702  000850                     _printf:
  2703                           	opt stack 26
  2704                           
  2705                           ;doprnt.c: 466: va_list ap;
  2706                           ;doprnt.c: 499: signed char c;
  2707                           ;doprnt.c: 501: int width;
  2708                           ;doprnt.c: 506: signed char prec;
  2709                           ;doprnt.c: 508: unsigned char flag;
  2710                           ;doprnt.c: 523: union {
  2711                           ;doprnt.c: 524: unsigned long vd;
  2712                           ;doprnt.c: 525: double integ;
  2713                           ;doprnt.c: 526: } tmpval;
  2714                           ;doprnt.c: 528: unsigned int val;
  2715                           ;doprnt.c: 529: unsigned len;
  2716                           ;doprnt.c: 530: const char * cp;
  2717                           ;doprnt.c: 533: *ap = __va_start();
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;incstack = 0
  2721  000850  0E6E               	movlw	low (?_printf+2)
  2722  000852  0100               	movlb	0	; () banked
  2723  000854  6F83               	movwf	printf@ap& (0+255),b
  2724  000856  0E00               	movlw	high (?_printf+2)
  2725  000858  0100               	movlb	0	; () banked
  2726  00085A  6F84               	movwf	(printf@ap+1)& (0+255),b
  2727                           
  2728                           ;doprnt.c: 536: while(c = *f++) {
  2729  00085C  D187               	goto	l2852
  2730  00085E                     l2750:
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;doprnt.c: 538: if(c != '%')
  2734  00085E  0E25               	movlw	37
  2735  000860  0100               	movlb	0	; () banked
  2736  000862  198B               	xorwf	printf@c& (0+255),w,b
  2737  000864  B4D8               	btfsc	status,2,c
  2738  000866  D005               	goto	l2754
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;doprnt.c: 540: {
  2742                           ;doprnt.c: 541: (putch(c) );
  2743  000868  0100               	movlb	0	; () banked
  2744  00086A  518B               	movf	printf@c& (0+255),w,b
  2745  00086C  ECB4  F00C         	call	_putch
  2746                           
  2747                           ;doprnt.c: 542: continue;
  2748  000870  D17D               	goto	l2852
  2749  000872                     l2754:
  2750                           
  2751                           ;doprnt.c: 543: }
  2752                           ;doprnt.c: 546: width = 0;
  2753  000872  0E00               	movlw	0
  2754  000874  0100               	movlb	0	; () banked
  2755  000876  6F8A               	movwf	(printf@width+1)& (0+255),b
  2756  000878  0E00               	movlw	0
  2757  00087A  6F89               	movwf	printf@width& (0+255),b
  2758                           
  2759                           ;doprnt.c: 548: flag = 0;
  2760  00087C  0E00               	movlw	0
  2761  00087E  0100               	movlb	0	; () banked
  2762  000880  6F88               	movwf	printf@flag& (0+255),b
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;doprnt.c: 551: switch(*f) {
  2766                           
  2767                           ;doprnt.c: 550: for(;;) {
  2768  000882  D005               	goto	l2760
  2769  000884                     l2756:
  2770                           
  2771                           ;doprnt.c: 580: flag |= 0x04;
  2772  000884  0100               	movlb	0	; () banked
  2773  000886  8588               	bsf	printf@flag& (0+255),2,b
  2774                           
  2775                           ;doprnt.c: 581: f++;
  2776  000888  0100               	movlb	0	; () banked
  2777  00088A  4B6C               	infsnz	printf@f& (0+255),f,b
  2778  00088C  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2779  00088E                     l2760:
  2780  00088E  C06C  FFF6         	movff	printf@f,tblptrl
  2781  000892  C06D  FFF7         	movff	printf@f+1,tblptrh
  2782  000896                     	if	0	;tblptru may be non-zero
  2783  000896                     	endif
  2784  000896                     	if	0	;tblptru may be non-zero
  2785  000896                     	endif
  2786  000896  0008               	tblrd		*
  2787  000898  50F5               	movf	tablat,w,c
  2788                           
  2789                           ; Switch size 1, requested type "space"
  2790                           ; Number of cases is 1, Range of values is 48 to 48
  2791                           ; switch strategies available:
  2792                           ; Name         Instructions Cycles
  2793                           ; simple_byte            4     3 (average)
  2794                           ;	Chosen strategy is simple_byte
  2795  00089A  0A30               	xorlw	48	; case 48
  2796  00089C  B4D8               	btfsc	status,2,c
  2797  00089E  D7F2               	goto	l2756
  2798                           
  2799                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2800                           
  2801                           ;doprnt.c: 586: }
  2802                           
  2803                           ;doprnt.c: 585: break;
  2804  0008A0  C06C  FFF6         	movff	printf@f,tblptrl
  2805  0008A4  C06D  FFF7         	movff	printf@f+1,tblptrh
  2806  0008A8                     	if	0	;tblptru may be non-zero
  2807  0008A8                     	endif
  2808  0008A8                     	if	0	;tblptru may be non-zero
  2809  0008A8                     	endif
  2810  0008A8  0008               	tblrd		*
  2811  0008AA  50F5               	movf	tablat,w,c
  2812  0008AC  EC2C  F00C         	call	_isdigit
  2813  0008B0  A0D8               	btfss	status,0,c
  2814  0008B2  D048               	goto	l2780
  2815                           
  2816                           ;doprnt.c: 598: width = 0;
  2817  0008B4  0E00               	movlw	0
  2818  0008B6  0100               	movlb	0	; () banked
  2819  0008B8  6F8A               	movwf	(printf@width+1)& (0+255),b
  2820  0008BA  0E00               	movlw	0
  2821  0008BC  6F89               	movwf	printf@width& (0+255),b
  2822  0008BE                     l2766:
  2823                           
  2824                           ;doprnt.c: 600: width *= 10;
  2825  0008BE  C089  F060         	movff	printf@width,___wmul@multiplier
  2826  0008C2  C08A  F061         	movff	printf@width+1,___wmul@multiplier+1
  2827  0008C6  0E00               	movlw	0
  2828  0008C8  0100               	movlb	0	; () banked
  2829  0008CA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2830  0008CC  0E0A               	movlw	10
  2831  0008CE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2832  0008D0  ECFA  F00B         	call	___wmul	;wreg free
  2833  0008D4  C060  F089         	movff	?___wmul,printf@width
  2834  0008D8  C061  F08A         	movff	?___wmul+1,printf@width+1
  2835                           
  2836                           ;doprnt.c: 601: width += *f++ - '0';
  2837  0008DC  0ED0               	movlw	208
  2838  0008DE  0100               	movlb	0	; () banked
  2839  0008E0  6F7E               	movwf	??_printf& (0+255),b
  2840  0008E2  0EFF               	movlw	255
  2841  0008E4  0100               	movlb	0	; () banked
  2842  0008E6  6F7F               	movwf	(??_printf+1)& (0+255),b
  2843  0008E8  C06C  FFF6         	movff	printf@f,tblptrl
  2844  0008EC  C06D  FFF7         	movff	printf@f+1,tblptrh
  2845  0008F0                     	if	0	;tblptru may be non-zero
  2846  0008F0                     	endif
  2847  0008F0                     	if	0	;tblptru may be non-zero
  2848  0008F0                     	endif
  2849  0008F0  0008               	tblrd		*
  2850  0008F2  50F5               	movf	tablat,w,c
  2851  0008F4  0100               	movlb	0	; () banked
  2852  0008F6  6F80               	movwf	(??_printf+2)& (0+255),b
  2853  0008F8  6B81               	clrf	(??_printf+3)& (0+255),b
  2854  0008FA  0100               	movlb	0	; () banked
  2855  0008FC  517E               	movf	??_printf& (0+255),w,b
  2856  0008FE  0100               	movlb	0	; () banked
  2857  000900  2780               	addwf	(??_printf+2)& (0+255),f,b
  2858  000902  0100               	movlb	0	; () banked
  2859  000904  517F               	movf	(??_printf+1)& (0+255),w,b
  2860  000906  0100               	movlb	0	; () banked
  2861  000908  2381               	addwfc	(??_printf+3)& (0+255),f,b
  2862  00090A  0100               	movlb	0	; () banked
  2863  00090C  5180               	movf	(??_printf+2)& (0+255),w,b
  2864  00090E  0100               	movlb	0	; () banked
  2865  000910  2789               	addwf	printf@width& (0+255),f,b
  2866  000912  0100               	movlb	0	; () banked
  2867  000914  5181               	movf	(??_printf+3)& (0+255),w,b
  2868  000916  0100               	movlb	0	; () banked
  2869  000918  238A               	addwfc	(printf@width+1)& (0+255),f,b
  2870                           
  2871                           ; BSR set to: 0
  2872  00091A  0100               	movlb	0	; () banked
  2873  00091C  4B6C               	infsnz	printf@f& (0+255),f,b
  2874  00091E  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2878  000920  C06C  FFF6         	movff	printf@f,tblptrl
  2879  000924  C06D  FFF7         	movff	printf@f+1,tblptrh
  2880  000928                     	if	0	;tblptru may be non-zero
  2881  000928                     	endif
  2882  000928                     	if	0	;tblptru may be non-zero
  2883  000928                     	endif
  2884  000928  0008               	tblrd		*
  2885  00092A  50F5               	movf	tablat,w,c
  2886  00092C  EC2C  F00C         	call	_isdigit
  2887  000930  A0D8               	btfss	status,0,c
  2888  000932  D008               	goto	l2780
  2889  000934  D7C4               	goto	l2766
  2890  000936                     l2774:
  2891                           
  2892                           ;doprnt.c: 718: case 'x':
  2893                           ;doprnt.c: 721: flag |= 0x80;
  2894  000936  0100               	movlb	0	; () banked
  2895  000938  8F88               	bsf	printf@flag& (0+255),7,b
  2896                           
  2897                           ;doprnt.c: 723: break;
  2898  00093A  D01D               	goto	l2782
  2899  00093C                     l2776:
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;doprnt.c: 818: flag |= 0xC0;
  2903  00093C  0EC0               	movlw	192
  2904  00093E  0100               	movlb	0	; () banked
  2905  000940  1388               	iorwf	printf@flag& (0+255),f,b
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;doprnt.c: 822: }
  2909                           
  2910                           ;doprnt.c: 819: break;
  2911  000942  D019               	goto	l2782
  2912  000944                     l2780:
  2913  000944  C06C  FFF6         	movff	printf@f,tblptrl
  2914  000948  C06D  FFF7         	movff	printf@f+1,tblptrh
  2915  00094C  0100               	movlb	0	; () banked
  2916  00094E  4B6C               	infsnz	printf@f& (0+255),f,b
  2917  000950  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2918  000952                     	if	0	;tblptru may be non-zero
  2919  000952                     	endif
  2920  000952                     	if	0	;tblptru may be non-zero
  2921  000952                     	endif
  2922  000952  0008               	tblrd		*
  2923  000954  CFF5 F08B          	movff	tablat,printf@c
  2924  000958  0100               	movlb	0	; () banked
  2925  00095A  518B               	movf	printf@c& (0+255),w,b
  2926                           
  2927                           ; Switch size 1, requested type "space"
  2928                           ; Number of cases is 4, Range of values is 0 to 120
  2929                           ; switch strategies available:
  2930                           ; Name         Instructions Cycles
  2931                           ; simple_byte           13     7 (average)
  2932                           ;	Chosen strategy is simple_byte
  2933  00095C  0A00               	xorlw	0	; case 0
  2934  00095E  B4D8               	btfsc	status,2,c
  2935  000960  0012               	return	
  2936  000962  0A58               	xorlw	88	; case 88
  2937  000964  B4D8               	btfsc	status,2,c
  2938  000966  D7E7               	goto	l2774
  2939  000968  0A2D               	xorlw	45	; case 117
  2940  00096A  B4D8               	btfsc	status,2,c
  2941  00096C  D7E7               	goto	l2776
  2942  00096E  0A0D               	xorlw	13	; case 120
  2943  000970  B4D8               	btfsc	status,2,c
  2944  000972  D7E1               	goto	l2774
  2945  000974  D0FB               	goto	l2852
  2946  000976                     l2782:
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;doprnt.c: 1273: {
  2950                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2951  000976  C083  FFD9         	movff	printf@ap,fsr2l
  2952  00097A  C084  FFDA         	movff	printf@ap+1,fsr2h
  2953  00097E  CFDE F086          	movff	postinc2,printf@val
  2954  000982  CFDD F087          	movff	postdec2,printf@val+1
  2955                           
  2956                           ; BSR set to: 0
  2957  000986  0E02               	movlw	2
  2958  000988  0100               	movlb	0	; () banked
  2959  00098A  2783               	addwf	printf@ap& (0+255),f,b
  2960  00098C  0E00               	movlw	0
  2961  00098E  2384               	addwfc	(printf@ap+1)& (0+255),f,b
  2962                           
  2963                           ;doprnt.c: 1287: }
  2964                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2965  000990  D03C               	goto	l2816
  2966  000992                     l2786:
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2970  000992  0E01               	movlw	1
  2971  000994  0100               	movlb	0	; () banked
  2972  000996  6F8B               	movwf	printf@c& (0+255),b
  2973  000998                     l2788:
  2974                           
  2975                           ; BSR set to: 0
  2976  000998  0E05               	movlw	5
  2977  00099A  0100               	movlb	0	; () banked
  2978  00099C  198B               	xorwf	printf@c& (0+255),w,b
  2979  00099E  B4D8               	btfsc	status,2,c
  2980  0009A0  D03D               	goto	l2818
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;doprnt.c: 1306: if(val < dpowers[c])
  2984                           
  2985                           ; BSR set to: 0
  2986                           
  2987                           ; BSR set to: 0
  2988  0009A2  0100               	movlb	0	; () banked
  2989  0009A4  518B               	movf	printf@c& (0+255),w,b
  2990  0009A6  0D02               	mullw	2
  2991  0009A8  0E01               	movlw	low _dpowers
  2992  0009AA  24F3               	addwf	prodl,w,c
  2993  0009AC  6EF6               	movwf	tblptrl,c
  2994  0009AE  0E08               	movlw	high _dpowers
  2995  0009B0  20F4               	addwfc	prodh,w,c
  2996  0009B2  6EF7               	movwf	tblptrh,c
  2997  0009B4                     	if	0	;There are less than 3 active tblptr bytes
  2998  0009B4                     	endif
  2999  0009B4  0009               	tblrd		*+
  3000  0009B6  50F5               	movf	tablat,w,c
  3001  0009B8  0100               	movlb	0	; () banked
  3002  0009BA  5D86               	subwf	printf@val& (0+255),w,b
  3003  0009BC  0009               	tblrd		*+
  3004  0009BE  50F5               	movf	tablat,w,c
  3005  0009C0  0100               	movlb	0	; () banked
  3006  0009C2  5987               	subwfb	(printf@val+1)& (0+255),w,b
  3007  0009C4  A0D8               	btfss	status,0,c
  3008  0009C6  D02A               	goto	l2818
  3009                           
  3010                           ; BSR set to: 0
  3011                           
  3012                           ; BSR set to: 0
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;doprnt.c: 1307: break;
  3016  0009C8  0100               	movlb	0	; () banked
  3017  0009CA  2B8B               	incf	printf@c& (0+255),f,b
  3018  0009CC  D7E5               	goto	l2788
  3019  0009CE                     l2800:
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3023  0009CE  0E01               	movlw	1
  3024  0009D0  0100               	movlb	0	; () banked
  3025  0009D2  6F8B               	movwf	printf@c& (0+255),b
  3026  0009D4                     l2802:
  3027                           
  3028                           ; BSR set to: 0
  3029  0009D4  0E04               	movlw	4
  3030  0009D6  0100               	movlb	0	; () banked
  3031  0009D8  198B               	xorwf	printf@c& (0+255),w,b
  3032  0009DA  B4D8               	btfsc	status,2,c
  3033  0009DC  D01F               	goto	l2818
  3034                           
  3035                           ; BSR set to: 0
  3036                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3037                           
  3038                           ; BSR set to: 0
  3039                           
  3040                           ; BSR set to: 0
  3041  0009DE  0100               	movlb	0	; () banked
  3042  0009E0  518B               	movf	printf@c& (0+255),w,b
  3043  0009E2  0D02               	mullw	2
  3044  0009E4  0E0B               	movlw	low _hexpowers
  3045  0009E6  24F3               	addwf	prodl,w,c
  3046  0009E8  6EF6               	movwf	tblptrl,c
  3047  0009EA  0E08               	movlw	high _hexpowers
  3048  0009EC  20F4               	addwfc	prodh,w,c
  3049  0009EE  6EF7               	movwf	tblptrh,c
  3050  0009F0                     	if	0	;There are less than 3 active tblptr bytes
  3051  0009F0                     	endif
  3052  0009F0  0009               	tblrd		*+
  3053  0009F2  50F5               	movf	tablat,w,c
  3054  0009F4  0100               	movlb	0	; () banked
  3055  0009F6  5D86               	subwf	printf@val& (0+255),w,b
  3056  0009F8  0009               	tblrd		*+
  3057  0009FA  50F5               	movf	tablat,w,c
  3058  0009FC  0100               	movlb	0	; () banked
  3059  0009FE  5987               	subwfb	(printf@val+1)& (0+255),w,b
  3060  000A00  A0D8               	btfss	status,0,c
  3061  000A02  D00C               	goto	l2818
  3062                           
  3063                           ; BSR set to: 0
  3064                           
  3065                           ; BSR set to: 0
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;doprnt.c: 1318: break;
  3069  000A04  0100               	movlb	0	; () banked
  3070  000A06  2B8B               	incf	printf@c& (0+255),f,b
  3071  000A08  D7E5               	goto	l2802
  3072  000A0A                     l2816:
  3073                           
  3074                           ; BSR set to: 0
  3075  000A0A  0100               	movlb	0	; () banked
  3076  000A0C  5188               	movf	printf@flag& (0+255),w,b
  3077  000A0E  0BC0               	andlw	192
  3078                           
  3079                           ; Switch size 1, requested type "space"
  3080                           ; Number of cases is 2, Range of values is 128 to 192
  3081                           ; switch strategies available:
  3082                           ; Name         Instructions Cycles
  3083                           ; simple_byte            7     4 (average)
  3084                           ;	Chosen strategy is simple_byte
  3085  000A10  0A80               	xorlw	128	; case 128
  3086  000A12  B4D8               	btfsc	status,2,c
  3087  000A14  D7DC               	goto	l2800
  3088  000A16  0A40               	xorlw	64	; case 192
  3089  000A18  B4D8               	btfsc	status,2,c
  3090  000A1A  D7BB               	goto	l2786
  3091  000A1C                     l2818:
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;doprnt.c: 1381: if(width > c)
  3095  000A1C  0E80               	movlw	128
  3096  000A1E  0100               	movlb	0	; () banked
  3097  000A20  BF8B               	btfsc	printf@c& (0+255),7,b
  3098  000A22  0E7F               	movlw	127
  3099  000A24  0100               	movlb	0	; () banked
  3100  000A26  6F7E               	movwf	??_printf& (0+255),b
  3101  000A28  0100               	movlb	0	; () banked
  3102  000A2A  5189               	movf	printf@width& (0+255),w,b
  3103  000A2C  0100               	movlb	0	; () banked
  3104  000A2E  5D8B               	subwf	printf@c& (0+255),w,b
  3105  000A30  0100               	movlb	0	; () banked
  3106  000A32  518A               	movf	(printf@width+1)& (0+255),w,b
  3107  000A34  0A80               	xorlw	128
  3108  000A36  0100               	movlb	0	; () banked
  3109  000A38  597E               	subwfb	??_printf& (0+255),w,b
  3110  000A3A  B0D8               	btfsc	status,0,c
  3111  000A3C  D00B               	goto	l2822
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;doprnt.c: 1382: width -= c;
  3115  000A3E  0100               	movlb	0	; () banked
  3116  000A40  518B               	movf	printf@c& (0+255),w,b
  3117  000A42  0100               	movlb	0	; () banked
  3118  000A44  5F89               	subwf	printf@width& (0+255),f,b
  3119  000A46  0E00               	movlw	0
  3120  000A48  0100               	movlb	0	; () banked
  3121  000A4A  BF8B               	btfsc	printf@c& (0+255),7,b
  3122  000A4C  0EFF               	movlw	255
  3123  000A4E  0100               	movlb	0	; () banked
  3124  000A50  5B8A               	subwfb	(printf@width+1)& (0+255),f,b
  3125  000A52  D005               	goto	l2824
  3126  000A54                     l2822:
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;doprnt.c: 1383: else
  3130                           ;doprnt.c: 1384: width = 0;
  3131  000A54  0E00               	movlw	0
  3132  000A56  0100               	movlb	0	; () banked
  3133  000A58  6F8A               	movwf	(printf@width+1)& (0+255),b
  3134  000A5A  0E00               	movlw	0
  3135  000A5C  6F89               	movwf	printf@width& (0+255),b
  3136  000A5E                     l2824:
  3137                           
  3138                           ; BSR set to: 0
  3139                           ;doprnt.c: 1387: if(flag & 0x04) {
  3140  000A5E  0100               	movlb	0	; () banked
  3141  000A60  A588               	btfss	printf@flag& (0+255),2,b
  3142  000A62  D00E               	goto	l2832
  3143  000A64                     
  3144                           ; BSR set to: 0
  3145                           ;doprnt.c: 1415: if(width)
  3146  000A64  0100               	movlb	0	; () banked
  3147  000A66  5189               	movf	printf@width& (0+255),w,b
  3148  000A68  0100               	movlb	0	; () banked
  3149  000A6A  118A               	iorwf	(printf@width+1)& (0+255),w,b
  3150  000A6C  B4D8               	btfsc	status,2,c
  3151  000A6E  D01B               	goto	l387
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;doprnt.c: 1417: (putch('0') );
  3155                           
  3156                           ; BSR set to: 0
  3157                           
  3158                           ;doprnt.c: 1416: do
  3159  000A70  0E30               	movlw	48
  3160  000A72  ECB4  F00C         	call	_putch
  3161                           
  3162                           ;doprnt.c: 1418: while(--width);
  3163  000A76  0100               	movlb	0	; () banked
  3164  000A78  0789               	decf	printf@width& (0+255),f,b
  3165  000A7A  A0D8               	btfss	status,0,c
  3166  000A7C  078A               	decf	(printf@width+1)& (0+255),f,b
  3167  000A7E  D7F2               	goto	L6
  3168  000A80                     l2832:
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;doprnt.c: 1422: {
  3172                           ;doprnt.c: 1424: if(width
  3173                           ;doprnt.c: 1428: )
  3174  000A80  0100               	movlb	0	; () banked
  3175  000A82  5189               	movf	printf@width& (0+255),w,b
  3176  000A84  0100               	movlb	0	; () banked
  3177  000A86  118A               	iorwf	(printf@width+1)& (0+255),w,b
  3178  000A88  B4D8               	btfsc	status,2,c
  3179  000A8A  D00D               	goto	l387
  3180  000A8C                     l2834:
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;doprnt.c: 1430: (putch(' ') );
  3184  000A8C  0E20               	movlw	32
  3185  000A8E  ECB4  F00C         	call	_putch
  3186                           
  3187                           ;doprnt.c: 1431: while(--width);
  3188  000A92  0100               	movlb	0	; () banked
  3189  000A94  0789               	decf	printf@width& (0+255),f,b
  3190  000A96  A0D8               	btfss	status,0,c
  3191  000A98  078A               	decf	(printf@width+1)& (0+255),f,b
  3192  000A9A  0100               	movlb	0	; () banked
  3193  000A9C  5189               	movf	printf@width& (0+255),w,b
  3194  000A9E  0100               	movlb	0	; () banked
  3195  000AA0  118A               	iorwf	(printf@width+1)& (0+255),w,b
  3196  000AA2  A4D8               	btfss	status,2,c
  3197  000AA4  D7F3               	goto	l2834
  3198  000AA6                     l387:
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;doprnt.c: 1469: }
  3202                           ;doprnt.c: 1472: prec = c;
  3203  000AA6  C08B  F085         	movff	printf@c,printf@prec
  3204                           
  3205                           ;doprnt.c: 1474: while(prec--) {
  3206  000AAA  D05A               	goto	l2850
  3207  000AAC                     l2838:
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3211  000AAC  0100               	movlb	0	; () banked
  3212  000AAE  5185               	movf	printf@prec& (0+255),w,b
  3213  000AB0  0D02               	mullw	2
  3214  000AB2  0E01               	movlw	low _dpowers
  3215  000AB4  24F3               	addwf	prodl,w,c
  3216  000AB6  6EF6               	movwf	tblptrl,c
  3217  000AB8  0E08               	movlw	high _dpowers
  3218  000ABA  20F4               	addwfc	prodh,w,c
  3219  000ABC  6EF7               	movwf	tblptrh,c
  3220  000ABE                     	if	0	;There are less than 3 active tblptr bytes
  3221  000ABE                     	endif
  3222  000ABE  0009               	tblrd		*+
  3223  000AC0  CFF5 F062          	movff	tablat,___lwdiv@divisor
  3224  000AC4  000A               	tblrd		*-
  3225  000AC6  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  3226  000ACA  C086  F060         	movff	printf@val,___lwdiv@dividend
  3227  000ACE  C087  F061         	movff	printf@val+1,___lwdiv@dividend+1
  3228  000AD2  EC13  F00A         	call	___lwdiv	;wreg free
  3229  000AD6  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  3230  000ADA  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  3231  000ADE  0E00               	movlw	0
  3232  000AE0  0100               	movlb	0	; () banked
  3233  000AE2  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  3234  000AE4  0E0A               	movlw	10
  3235  000AE6  6F69               	movwf	___lwmod@divisor& (0+255),b
  3236  000AE8  EC2C  F00B         	call	___lwmod	;wreg free
  3237  000AEC  0100               	movlb	0	; () banked
  3238  000AEE  5167               	movf	?___lwmod& (0+255),w,b
  3239  000AF0  0F30               	addlw	48
  3240  000AF2  0100               	movlb	0	; () banked
  3241  000AF4  6F8B               	movwf	printf@c& (0+255),b
  3242                           
  3243                           ;doprnt.c: 1491: break;
  3244  000AF6  D030               	goto	l2848
  3245  000AF8                     l2840:
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;doprnt.c: 1499: {
  3249                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3250  000AF8  C086  F060         	movff	printf@val,___lwdiv@dividend
  3251  000AFC  C087  F061         	movff	printf@val+1,___lwdiv@dividend+1
  3252  000B00  0100               	movlb	0	; () banked
  3253  000B02  5185               	movf	printf@prec& (0+255),w,b
  3254  000B04  0D02               	mullw	2
  3255  000B06  0E0B               	movlw	low _hexpowers
  3256  000B08  24F3               	addwf	prodl,w,c
  3257  000B0A  6EF6               	movwf	tblptrl,c
  3258  000B0C  0E08               	movlw	high _hexpowers
  3259  000B0E  20F4               	addwfc	prodh,w,c
  3260  000B10  6EF7               	movwf	tblptrh,c
  3261  000B12                     	if	0	;There are less than 3 active tblptr bytes
  3262  000B12                     	endif
  3263  000B12  0009               	tblrd		*+
  3264  000B14  CFF5 F062          	movff	tablat,___lwdiv@divisor
  3265  000B18  000A               	tblrd		*-
  3266  000B1A  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  3267  000B1E  EC13  F00A         	call	___lwdiv	;wreg free
  3268  000B22  0100               	movlb	0	; () banked
  3269  000B24  5160               	movf	?___lwdiv& (0+255),w,b
  3270  000B26  0B0F               	andlw	15
  3271  000B28  0100               	movlb	0	; () banked
  3272  000B2A  6F82               	movwf	printf@idx& (0+255),b
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  3276  000B2C  0100               	movlb	0	; () banked
  3277  000B2E  5182               	movf	printf@idx& (0+255),w,b
  3278  000B30  0D01               	mullw	1
  3279  000B32  0E39               	movlw	low STR_4
  3280  000B34  24F3               	addwf	prodl,w,c
  3281  000B36  6EF6               	movwf	tblptrl,c
  3282  000B38  0E08               	movlw	high STR_4
  3283  000B3A  20F4               	addwfc	prodh,w,c
  3284  000B3C  6EF7               	movwf	tblptrh,c
  3285  000B3E                     	if	0	;There are less than 3 active tblptr bytes
  3286  000B3E                     	endif
  3287  000B3E  0008               	tblrd		*
  3288  000B40  CFF5 F08B          	movff	tablat,printf@c
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;doprnt.c: 1523: }
  3292                           
  3293                           ;doprnt.c: 1508: }
  3294                           ;doprnt.c: 1510: break;
  3295  000B44  D009               	goto	l2848
  3296  000B46                     l2846:
  3297                           
  3298                           ; BSR set to: 0
  3299  000B46  0100               	movlb	0	; () banked
  3300  000B48  5188               	movf	printf@flag& (0+255),w,b
  3301  000B4A  0BC0               	andlw	192
  3302                           
  3303                           ; Switch size 1, requested type "space"
  3304                           ; Number of cases is 2, Range of values is 128 to 192
  3305                           ; switch strategies available:
  3306                           ; Name         Instructions Cycles
  3307                           ; simple_byte            7     4 (average)
  3308                           ;	Chosen strategy is simple_byte
  3309  000B4C  0A80               	xorlw	128	; case 128
  3310  000B4E  B4D8               	btfsc	status,2,c
  3311  000B50  D7D3               	goto	l2840
  3312  000B52  0A40               	xorlw	64	; case 192
  3313  000B54  B4D8               	btfsc	status,2,c
  3314  000B56  D7AA               	goto	l2838
  3315  000B58                     l2848:
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;doprnt.c: 1524: (putch(c) );
  3319  000B58  0100               	movlb	0	; () banked
  3320  000B5A  518B               	movf	printf@c& (0+255),w,b
  3321  000B5C  ECB4  F00C         	call	_putch
  3322  000B60                     l2850:
  3323  000B60  0100               	movlb	0	; () banked
  3324  000B62  0785               	decf	printf@prec& (0+255),f,b
  3325  000B64  0100               	movlb	0	; () banked
  3326  000B66  2985               	incf	printf@prec& (0+255),w,b
  3327  000B68  A4D8               	btfss	status,2,c
  3328  000B6A  D7ED               	goto	l2846
  3329  000B6C                     l2852:
  3330  000B6C  C06C  FFF6         	movff	printf@f,tblptrl
  3331  000B70  C06D  FFF7         	movff	printf@f+1,tblptrh
  3332  000B74  0100               	movlb	0	; () banked
  3333  000B76  4B6C               	infsnz	printf@f& (0+255),f,b
  3334  000B78  2B6D               	incf	(printf@f+1)& (0+255),f,b
  3335  000B7A                     	if	0	;tblptru may be non-zero
  3336  000B7A                     	endif
  3337  000B7A                     	if	0	;tblptru may be non-zero
  3338  000B7A                     	endif
  3339  000B7A  0008               	tblrd		*
  3340  000B7C  CFF5 F08B          	movff	tablat,printf@c
  3341  000B80  0100               	movlb	0	; () banked
  3342  000B82  518B               	movf	printf@c& (0+255),w,b
  3343  000B84  B4D8               	btfsc	status,2,c
  3344  000B86  0012               	return	
  3345  000B88  D66A               	goto	l2750
  3346  000B8A                     __end_of_printf:
  3347                           	opt stack 0
  3348                           tblptru	equ	0xFF8
  3349                           tblptrh	equ	0xFF7
  3350                           tblptrl	equ	0xFF6
  3351                           tablat	equ	0xFF5
  3352                           prodh	equ	0xFF4
  3353                           prodl	equ	0xFF3
  3354                           postinc0	equ	0xFEE
  3355                           wreg	equ	0xFE8
  3356                           postdec1	equ	0xFE5
  3357                           fsr1l	equ	0xFE1
  3358                           postinc2	equ	0xFDE
  3359                           postdec2	equ	0xFDD
  3360                           fsr2h	equ	0xFDA
  3361                           fsr2l	equ	0xFD9
  3362                           status	equ	0xFD8
  3363                           
  3364 ;; *************** function _putch *****************
  3365 ;; Defined at:
  3366 ;;		line 46 in file "usart.c"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;  byte            1    wreg     unsigned char 
  3369 ;; Auto vars:     Size  Location     Type
  3370 ;;  byte            1    0[BANK0 ] unsigned char 
  3371 ;; Return value:  Size  Location     Type
  3372 ;;		None               void
  3373 ;; Registers used:
  3374 ;;		wreg
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 0/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3380 ;;      Params:         0       0       0       0       0       0       0       0       0
  3381 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3382 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3383 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3384 ;;Total ram usage:        1 bytes
  3385 ;; Hardware stack levels used:    1
  3386 ;; Hardware stack levels required when called:    3
  3387 ;; This function calls:
  3388 ;;		Nothing
  3389 ;; This function is called by:
  3390 ;;		_printf
  3391 ;;		_getche
  3392 ;; This function uses a non-reentrant model
  3393 ;;
  3394                           
  3395                           	psect	text15
  3396  001968                     __ptext15:
  3397                           	opt stack 0
  3398  001968                     _putch:
  3399                           	opt stack 26
  3400                           
  3401                           ;incstack = 0
  3402                           ;putch@byte stored from wreg
  3403  001968  0100               	movlb	0	; () banked
  3404  00196A  6F60               	movwf	putch@byte& (0+255),b
  3405  00196C                     l324:
  3406  00196C  A89E               	btfss	3998,4,c	;volatile
  3407  00196E  D7FE               	goto	l324
  3408                           
  3409                           ;usart.c: 50: TXREG = byte;
  3410  001970  C060  FFAD         	movff	putch@byte,4013	;volatile
  3411  001974  0012               	return		;funcret
  3412  001976                     __end_of_putch:
  3413                           	opt stack 0
  3414                           tblptru	equ	0xFF8
  3415                           tblptrh	equ	0xFF7
  3416                           tblptrl	equ	0xFF6
  3417                           tablat	equ	0xFF5
  3418                           prodh	equ	0xFF4
  3419                           prodl	equ	0xFF3
  3420                           postinc0	equ	0xFEE
  3421                           wreg	equ	0xFE8
  3422                           postdec1	equ	0xFE5
  3423                           fsr1l	equ	0xFE1
  3424                           postinc2	equ	0xFDE
  3425                           postdec2	equ	0xFDD
  3426                           fsr2h	equ	0xFDA
  3427                           fsr2l	equ	0xFD9
  3428                           status	equ	0xFD8
  3429                           
  3430 ;; *************** function _isdigit *****************
  3431 ;; Defined at:
  3432 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  c               1    wreg     unsigned char 
  3435 ;; Auto vars:     Size  Location     Type
  3436 ;;  c               1    2[BANK0 ] unsigned char 
  3437 ;; Return value:  Size  Location     Type
  3438 ;;		None               void
  3439 ;; Registers used:
  3440 ;;		wreg, status,2, status,0
  3441 ;; Tracked objects:
  3442 ;;		On entry : 0/0
  3443 ;;		On exit  : 0/0
  3444 ;;		Unchanged: 0/0
  3445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3446 ;;      Params:         0       0       0       0       0       0       0       0       0
  3447 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3448 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3449 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3450 ;;Total ram usage:        3 bytes
  3451 ;; Hardware stack levels used:    1
  3452 ;; Hardware stack levels required when called:    3
  3453 ;; This function calls:
  3454 ;;		Nothing
  3455 ;; This function is called by:
  3456 ;;		_printf
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           	psect	text16
  3461  001858                     __ptext16:
  3462                           	opt stack 0
  3463  001858                     _isdigit:
  3464                           	opt stack 26
  3465                           
  3466                           ;incstack = 0
  3467                           ;isdigit@c stored from wreg
  3468  001858  0100               	movlb	0	; () banked
  3469  00185A  6F62               	movwf	isdigit@c& (0+255),b
  3470  00185C  0E00               	movlw	0
  3471  00185E  0100               	movlb	0	; () banked
  3472  001860  6F61               	movwf	_isdigit$1394& (0+255),b
  3473                           
  3474                           ; BSR set to: 0
  3475  001862  0E3A               	movlw	58
  3476  001864  0100               	movlb	0	; () banked
  3477  001866  6162               	cpfslt	isdigit@c& (0+255),b
  3478  001868  D007               	goto	l2622
  3479                           
  3480                           ; BSR set to: 0
  3481  00186A  0E2F               	movlw	47
  3482  00186C  0100               	movlb	0	; () banked
  3483  00186E  6562               	cpfsgt	isdigit@c& (0+255),b
  3484  001870  D003               	goto	l2622
  3485                           
  3486                           ; BSR set to: 0
  3487  001872  0E01               	movlw	1
  3488  001874  0100               	movlb	0	; () banked
  3489  001876  6F61               	movwf	_isdigit$1394& (0+255),b
  3490  001878                     l2622:
  3491                           
  3492                           ; BSR set to: 0
  3493  001878  C061  F060         	movff	_isdigit$1394,??_isdigit
  3494  00187C  0100               	movlb	0	; () banked
  3495  00187E  3160               	rrcf	??_isdigit& (0+255),w,b
  3496  001880  0012               	return	
  3497  001882                     __end_of_isdigit:
  3498                           	opt stack 0
  3499                           tblptru	equ	0xFF8
  3500                           tblptrh	equ	0xFF7
  3501                           tblptrl	equ	0xFF6
  3502                           tablat	equ	0xFF5
  3503                           prodh	equ	0xFF4
  3504                           prodl	equ	0xFF3
  3505                           postinc0	equ	0xFEE
  3506                           wreg	equ	0xFE8
  3507                           postdec1	equ	0xFE5
  3508                           fsr1l	equ	0xFE1
  3509                           postinc2	equ	0xFDE
  3510                           postdec2	equ	0xFDD
  3511                           fsr2h	equ	0xFDA
  3512                           fsr2l	equ	0xFD9
  3513                           status	equ	0xFD8
  3514                           
  3515 ;; *************** function ___wmul *****************
  3516 ;; Defined at:
  3517 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  3518 ;; Parameters:    Size  Location     Type
  3519 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3520 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  product         2    4[BANK0 ] unsigned int 
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  2    0[BANK0 ] unsigned int 
  3525 ;; Registers used:
  3526 ;;		wreg, status,2, status,0, prodl, prodh
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3532 ;;      Params:         0       4       0       0       0       0       0       0       0
  3533 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3534 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3535 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3536 ;;Total ram usage:        6 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    3
  3539 ;; This function calls:
  3540 ;;		Nothing
  3541 ;; This function is called by:
  3542 ;;		_printf
  3543 ;; This function uses a non-reentrant model
  3544 ;;
  3545                           
  3546                           	psect	text17
  3547  0017F4                     __ptext17:
  3548                           	opt stack 0
  3549  0017F4                     ___wmul:
  3550                           	opt stack 26
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;incstack = 0
  3554  0017F4  0100               	movlb	0	; () banked
  3555  0017F6  5160               	movf	___wmul@multiplier& (0+255),w,b
  3556  0017F8  0100               	movlb	0	; () banked
  3557  0017FA  0362               	mulwf	___wmul@multiplicand& (0+255),b
  3558  0017FC  CFF3 F064          	movff	prodl,___wmul@product
  3559  001800  CFF4 F065          	movff	prodh,___wmul@product+1
  3560  001804  0100               	movlb	0	; () banked
  3561  001806  5160               	movf	___wmul@multiplier& (0+255),w,b
  3562  001808  0100               	movlb	0	; () banked
  3563  00180A  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3564  00180C  50F3               	movf	prodl,w,c
  3565  00180E  0100               	movlb	0	; () banked
  3566  001810  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  3567  001812  0100               	movlb	0	; () banked
  3568  001814  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3569  001816  0100               	movlb	0	; () banked
  3570  001818  0362               	mulwf	___wmul@multiplicand& (0+255),b
  3571  00181A  50F3               	movf	prodl,w,c
  3572  00181C  0100               	movlb	0	; () banked
  3573  00181E  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  3574                           
  3575                           ; BSR set to: 0
  3576  001820  C064  F060         	movff	___wmul@product,?___wmul
  3577  001824  C065  F061         	movff	___wmul@product+1,?___wmul+1
  3578  001828  0012               	return	
  3579  00182A                     __end_of___wmul:
  3580                           	opt stack 0
  3581                           tblptru	equ	0xFF8
  3582                           tblptrh	equ	0xFF7
  3583                           tblptrl	equ	0xFF6
  3584                           tablat	equ	0xFF5
  3585                           prodh	equ	0xFF4
  3586                           prodl	equ	0xFF3
  3587                           postinc0	equ	0xFEE
  3588                           wreg	equ	0xFE8
  3589                           postdec1	equ	0xFE5
  3590                           fsr1l	equ	0xFE1
  3591                           postinc2	equ	0xFDE
  3592                           postdec2	equ	0xFDD
  3593                           fsr2h	equ	0xFDA
  3594                           fsr2l	equ	0xFD9
  3595                           status	equ	0xFD8
  3596                           
  3597 ;; *************** function ___lwmod *****************
  3598 ;; Defined at:
  3599 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  3600 ;; Parameters:    Size  Location     Type
  3601 ;;  dividend        2    7[BANK0 ] unsigned int 
  3602 ;;  divisor         2    9[BANK0 ] unsigned int 
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;  counter         1   11[BANK0 ] unsigned char 
  3605 ;; Return value:  Size  Location     Type
  3606 ;;                  2    7[BANK0 ] unsigned int 
  3607 ;; Registers used:
  3608 ;;		wreg, status,2, status,0
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3614 ;;      Params:         0       4       0       0       0       0       0       0       0
  3615 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3616 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3617 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3618 ;;Total ram usage:        5 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    3
  3621 ;; This function calls:
  3622 ;;		Nothing
  3623 ;; This function is called by:
  3624 ;;		_printf
  3625 ;; This function uses a non-reentrant model
  3626 ;;
  3627                           
  3628                           	psect	text18
  3629  001658                     __ptext18:
  3630                           	opt stack 0
  3631  001658                     ___lwmod:
  3632                           	opt stack 26
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;incstack = 0
  3636  001658  0100               	movlb	0	; () banked
  3637  00165A  5169               	movf	___lwmod@divisor& (0+255),w,b
  3638  00165C  0100               	movlb	0	; () banked
  3639  00165E  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3640  001660  B4D8               	btfsc	status,2,c
  3641  001662  D026               	goto	l817
  3642                           
  3643                           ; BSR set to: 0
  3644  001664  0E01               	movlw	1
  3645  001666  0100               	movlb	0	; () banked
  3646  001668  6F6B               	movwf	___lwmod@counter& (0+255),b
  3647  00166A  D006               	goto	l2670
  3648  00166C                     l2668:
  3649                           
  3650                           ; BSR set to: 0
  3651  00166C  0100               	movlb	0	; () banked
  3652  00166E  90D8               	bcf	status,0,c
  3653  001670  3769               	rlcf	___lwmod@divisor& (0+255),f,b
  3654  001672  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3655  001674  0100               	movlb	0	; () banked
  3656  001676  2B6B               	incf	___lwmod@counter& (0+255),f,b
  3657  001678                     l2670:
  3658                           
  3659                           ; BSR set to: 0
  3660  001678  0100               	movlb	0	; () banked
  3661  00167A  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3662  00167C  D7F7               	goto	l2668
  3663  00167E                     l2672:
  3664                           
  3665                           ; BSR set to: 0
  3666  00167E  0100               	movlb	0	; () banked
  3667  001680  5169               	movf	___lwmod@divisor& (0+255),w,b
  3668  001682  0100               	movlb	0	; () banked
  3669  001684  5D67               	subwf	___lwmod@dividend& (0+255),w,b
  3670  001686  0100               	movlb	0	; () banked
  3671  001688  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3672  00168A  0100               	movlb	0	; () banked
  3673  00168C  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3674  00168E  A0D8               	btfss	status,0,c
  3675  001690  D008               	goto	l2676
  3676                           
  3677                           ; BSR set to: 0
  3678  001692  0100               	movlb	0	; () banked
  3679  001694  5169               	movf	___lwmod@divisor& (0+255),w,b
  3680  001696  0100               	movlb	0	; () banked
  3681  001698  5F67               	subwf	___lwmod@dividend& (0+255),f,b
  3682  00169A  0100               	movlb	0	; () banked
  3683  00169C  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3684  00169E  0100               	movlb	0	; () banked
  3685  0016A0  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3686  0016A2                     l2676:
  3687                           
  3688                           ; BSR set to: 0
  3689  0016A2  0100               	movlb	0	; () banked
  3690  0016A4  90D8               	bcf	status,0,c
  3691  0016A6  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3692  0016A8  3369               	rrcf	___lwmod@divisor& (0+255),f,b
  3693                           
  3694                           ; BSR set to: 0
  3695  0016AA  0100               	movlb	0	; () banked
  3696  0016AC  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
  3697  0016AE  D7E7               	goto	l2672
  3698  0016B0                     l817:
  3699                           
  3700                           ; BSR set to: 0
  3701  0016B0  C067  F067         	movff	___lwmod@dividend,?___lwmod
  3702  0016B4  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
  3703                           
  3704                           ; BSR set to: 0
  3705  0016B8  0012               	return		;funcret
  3706  0016BA                     __end_of___lwmod:
  3707                           	opt stack 0
  3708                           tblptru	equ	0xFF8
  3709                           tblptrh	equ	0xFF7
  3710                           tblptrl	equ	0xFF6
  3711                           tablat	equ	0xFF5
  3712                           prodh	equ	0xFF4
  3713                           prodl	equ	0xFF3
  3714                           postinc0	equ	0xFEE
  3715                           wreg	equ	0xFE8
  3716                           postdec1	equ	0xFE5
  3717                           fsr1l	equ	0xFE1
  3718                           postinc2	equ	0xFDE
  3719                           postdec2	equ	0xFDD
  3720                           fsr2h	equ	0xFDA
  3721                           fsr2l	equ	0xFD9
  3722                           status	equ	0xFD8
  3723                           
  3724 ;; *************** function ___lwdiv *****************
  3725 ;; Defined at:
  3726 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;  dividend        2    0[BANK0 ] unsigned int 
  3729 ;;  divisor         2    2[BANK0 ] unsigned int 
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;  quotient        2    5[BANK0 ] unsigned int 
  3732 ;;  counter         1    4[BANK0 ] unsigned char 
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  2    0[BANK0 ] unsigned int 
  3735 ;; Registers used:
  3736 ;;		wreg, status,2, status,0
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3742 ;;      Params:         0       4       0       0       0       0       0       0       0
  3743 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3744 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3745 ;;      Totals:         0       7       0       0       0       0       0       0       0
  3746 ;;Total ram usage:        7 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    3
  3749 ;; This function calls:
  3750 ;;		Nothing
  3751 ;; This function is called by:
  3752 ;;		_printf
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           	psect	text19
  3757  001426                     __ptext19:
  3758                           	opt stack 0
  3759  001426                     ___lwdiv:
  3760                           	opt stack 26
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;incstack = 0
  3764  001426  0E00               	movlw	0
  3765  001428  0100               	movlb	0	; () banked
  3766  00142A  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3767  00142C  0E00               	movlw	0
  3768  00142E  6F65               	movwf	___lwdiv@quotient& (0+255),b
  3769                           
  3770                           ; BSR set to: 0
  3771  001430  0100               	movlb	0	; () banked
  3772  001432  5162               	movf	___lwdiv@divisor& (0+255),w,b
  3773  001434  0100               	movlb	0	; () banked
  3774  001436  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3775  001438  B4D8               	btfsc	status,2,c
  3776  00143A  D02C               	goto	l807
  3777                           
  3778                           ; BSR set to: 0
  3779  00143C  0E01               	movlw	1
  3780  00143E  0100               	movlb	0	; () banked
  3781  001440  6F64               	movwf	___lwdiv@counter& (0+255),b
  3782  001442  D006               	goto	l2650
  3783  001444                     l2648:
  3784                           
  3785                           ; BSR set to: 0
  3786  001444  0100               	movlb	0	; () banked
  3787  001446  90D8               	bcf	status,0,c
  3788  001448  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  3789  00144A  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3790  00144C  0100               	movlb	0	; () banked
  3791  00144E  2B64               	incf	___lwdiv@counter& (0+255),f,b
  3792  001450                     l2650:
  3793                           
  3794                           ; BSR set to: 0
  3795  001450  0100               	movlb	0	; () banked
  3796  001452  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3797  001454  D7F7               	goto	l2648
  3798  001456                     l2652:
  3799                           
  3800                           ; BSR set to: 0
  3801  001456  0100               	movlb	0	; () banked
  3802  001458  90D8               	bcf	status,0,c
  3803  00145A  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  3804  00145C  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3805                           
  3806                           ; BSR set to: 0
  3807  00145E  0100               	movlb	0	; () banked
  3808  001460  5162               	movf	___lwdiv@divisor& (0+255),w,b
  3809  001462  0100               	movlb	0	; () banked
  3810  001464  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  3811  001466  0100               	movlb	0	; () banked
  3812  001468  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3813  00146A  0100               	movlb	0	; () banked
  3814  00146C  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3815  00146E  A0D8               	btfss	status,0,c
  3816  001470  D00A               	goto	l2660
  3817                           
  3818                           ; BSR set to: 0
  3819  001472  0100               	movlb	0	; () banked
  3820  001474  5162               	movf	___lwdiv@divisor& (0+255),w,b
  3821  001476  0100               	movlb	0	; () banked
  3822  001478  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  3823  00147A  0100               	movlb	0	; () banked
  3824  00147C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3825  00147E  0100               	movlb	0	; () banked
  3826  001480  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3827                           
  3828                           ; BSR set to: 0
  3829  001482  0100               	movlb	0	; () banked
  3830  001484  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  3831  001486                     l2660:
  3832                           
  3833                           ; BSR set to: 0
  3834  001486  0100               	movlb	0	; () banked
  3835  001488  90D8               	bcf	status,0,c
  3836  00148A  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3837  00148C  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  3838                           
  3839                           ; BSR set to: 0
  3840  00148E  0100               	movlb	0	; () banked
  3841  001490  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  3842  001492  D7E1               	goto	l2652
  3843  001494                     l807:
  3844                           
  3845                           ; BSR set to: 0
  3846  001494  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  3847  001498  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3848                           
  3849                           ; BSR set to: 0
  3850  00149C  0012               	return		;funcret
  3851  00149E                     __end_of___lwdiv:
  3852                           	opt stack 0
  3853                           tblptru	equ	0xFF8
  3854                           tblptrh	equ	0xFF7
  3855                           tblptrl	equ	0xFF6
  3856                           tablat	equ	0xFF5
  3857                           prodh	equ	0xFF4
  3858                           prodl	equ	0xFF3
  3859                           postinc0	equ	0xFEE
  3860                           wreg	equ	0xFE8
  3861                           postdec1	equ	0xFE5
  3862                           fsr1l	equ	0xFE1
  3863                           postinc2	equ	0xFDE
  3864                           postdec2	equ	0xFDD
  3865                           fsr2h	equ	0xFDA
  3866                           fsr2l	equ	0xFD9
  3867                           status	equ	0xFD8
  3868                           
  3869 ;; *************** function _configUSARTInterrupts *****************
  3870 ;; Defined at:
  3871 ;;		line 32 in file "usart.c"
  3872 ;; Parameters:    Size  Location     Type
  3873 ;;		None
  3874 ;; Auto vars:     Size  Location     Type
  3875 ;;		None
  3876 ;; Return value:  Size  Location     Type
  3877 ;;		None               void
  3878 ;; Registers used:
  3879 ;;		None
  3880 ;; Tracked objects:
  3881 ;;		On entry : 0/0
  3882 ;;		On exit  : 0/0
  3883 ;;		Unchanged: 0/0
  3884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3885 ;;      Params:         0       0       0       0       0       0       0       0       0
  3886 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3887 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3888 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3889 ;;Total ram usage:        0 bytes
  3890 ;; Hardware stack levels used:    1
  3891 ;; Hardware stack levels required when called:    3
  3892 ;; This function calls:
  3893 ;;		Nothing
  3894 ;; This function is called by:
  3895 ;;		_main
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           	psect	text20
  3900  001976                     __ptext20:
  3901                           	opt stack 0
  3902  001976                     _configUSARTInterrupts:
  3903                           	opt stack 27
  3904                           
  3905                           ;usart.c: 35: TXIE = 0;
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;incstack = 0
  3909  001976  989D               	bcf	3997,4,c	;volatile
  3910                           
  3911                           ;usart.c: 36: TXIF = 0;
  3912  001978  989E               	bcf	3998,4,c	;volatile
  3913                           
  3914                           ;usart.c: 39: RCIE = 1;
  3915  00197A  8A9D               	bsf	3997,5,c	;volatile
  3916                           
  3917                           ;usart.c: 40: RCIF = 0;
  3918  00197C  9A9E               	bcf	3998,5,c	;volatile
  3919                           
  3920                           ;usart.c: 42: PEIE = 1;
  3921  00197E  8CF2               	bsf	intcon,6,c	;volatile
  3922                           
  3923                           ;usart.c: 43: GIE = 1;
  3924  001980  8EF2               	bsf	intcon,7,c	;volatile
  3925  001982  0012               	return		;funcret
  3926  001984                     __end_of_configUSARTInterrupts:
  3927                           	opt stack 0
  3928                           tblptru	equ	0xFF8
  3929                           tblptrh	equ	0xFF7
  3930                           tblptrl	equ	0xFF6
  3931                           tablat	equ	0xFF5
  3932                           prodh	equ	0xFF4
  3933                           prodl	equ	0xFF3
  3934                           intcon	equ	0xFF2
  3935                           postinc0	equ	0xFEE
  3936                           wreg	equ	0xFE8
  3937                           postdec1	equ	0xFE5
  3938                           fsr1l	equ	0xFE1
  3939                           postinc2	equ	0xFDE
  3940                           postdec2	equ	0xFDD
  3941                           fsr2h	equ	0xFDA
  3942                           fsr2l	equ	0xFD9
  3943                           status	equ	0xFD8
  3944                           
  3945 ;; *************** function _configTimer *****************
  3946 ;; Defined at:
  3947 ;;		line 18 in file "timer0.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;		None
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;		None
  3952 ;; Return value:  Size  Location     Type
  3953 ;;		None               void
  3954 ;; Registers used:
  3955 ;;		None
  3956 ;; Tracked objects:
  3957 ;;		On entry : 0/0
  3958 ;;		On exit  : 0/0
  3959 ;;		Unchanged: 0/0
  3960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3961 ;;      Params:         0       0       0       0       0       0       0       0       0
  3962 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3963 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3964 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3965 ;;Total ram usage:        0 bytes
  3966 ;; Hardware stack levels used:    1
  3967 ;; Hardware stack levels required when called:    3
  3968 ;; This function calls:
  3969 ;;		Nothing
  3970 ;; This function is called by:
  3971 ;;		_main
  3972 ;; This function uses a non-reentrant model
  3973 ;;
  3974                           
  3975                           	psect	text21
  3976  0018E8                     __ptext21:
  3977                           	opt stack 0
  3978  0018E8                     _configTimer:
  3979                           	opt stack 27
  3980                           
  3981                           ;timer0.c: 19: T0CONbits.T0CS = 0;
  3982                           
  3983                           ;incstack = 0
  3984  0018E8  9AD5               	bcf	4053,5,c	;volatile
  3985                           
  3986                           ;timer0.c: 20: T0CONbits.T0SE = 0;
  3987  0018EA  98D5               	bcf	4053,4,c	;volatile
  3988                           
  3989                           ;timer0.c: 21: T0CONbits.PSA = 0;
  3990  0018EC  96D5               	bcf	4053,3,c	;volatile
  3991                           
  3992                           ;timer0.c: 22: T0CONbits.T08BIT = 0;
  3993  0018EE  9CD5               	bcf	4053,6,c	;volatile
  3994                           
  3995                           ;timer0.c: 25: T0CONbits.T0PS2 = 1;
  3996  0018F0  84D5               	bsf	4053,2,c	;volatile
  3997                           
  3998                           ;timer0.c: 26: T0CONbits.T0PS1 = 0;
  3999  0018F2  92D5               	bcf	4053,1,c	;volatile
  4000                           
  4001                           ;timer0.c: 27: T0CONbits.T0PS0 = 1;
  4002  0018F4  80D5               	bsf	4053,0,c	;volatile
  4003                           
  4004                           ;timer0.c: 29: TMR0IP = 1;
  4005  0018F6  84F1               	bsf	intcon2,2,c	;volatile
  4006                           
  4007                           ;timer0.c: 31: INTCONbits.TMR0IF = 0;
  4008  0018F8  94F2               	bcf	intcon,2,c	;volatile
  4009                           
  4010                           ;timer0.c: 32: INTCONbits.TMR0IE = 1;
  4011  0018FA  8AF2               	bsf	intcon,5,c	;volatile
  4012                           
  4013                           ;timer0.c: 33: INTCONbits.GIE = 1;
  4014  0018FC  8EF2               	bsf	intcon,7,c	;volatile
  4015                           
  4016                           ;timer0.c: 34: INTCONbits.PEIE = 1;
  4017  0018FE  8CF2               	bsf	intcon,6,c	;volatile
  4018  001900  0012               	return		;funcret
  4019  001902                     __end_of_configTimer:
  4020                           	opt stack 0
  4021                           tblptru	equ	0xFF8
  4022                           tblptrh	equ	0xFF7
  4023                           tblptrl	equ	0xFF6
  4024                           tablat	equ	0xFF5
  4025                           prodh	equ	0xFF4
  4026                           prodl	equ	0xFF3
  4027                           intcon	equ	0xFF2
  4028                           intcon2	equ	0xFF1
  4029                           postinc0	equ	0xFEE
  4030                           wreg	equ	0xFE8
  4031                           postdec1	equ	0xFE5
  4032                           fsr1l	equ	0xFE1
  4033                           postinc2	equ	0xFDE
  4034                           postdec2	equ	0xFDD
  4035                           fsr2h	equ	0xFDA
  4036                           fsr2l	equ	0xFD9
  4037                           status	equ	0xFD8
  4038                           
  4039 ;; *************** function _configRS232 *****************
  4040 ;; Defined at:
  4041 ;;		line 9 in file "usart.c"
  4042 ;; Parameters:    Size  Location     Type
  4043 ;;		None
  4044 ;; Auto vars:     Size  Location     Type
  4045 ;;		None
  4046 ;; Return value:  Size  Location     Type
  4047 ;;		None               void
  4048 ;; Registers used:
  4049 ;;		wreg, status,2
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : 0/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4055 ;;      Params:         0       0       0       0       0       0       0       0       0
  4056 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4057 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4058 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4059 ;;Total ram usage:        0 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    3
  4062 ;; This function calls:
  4063 ;;		Nothing
  4064 ;; This function is called by:
  4065 ;;		_main
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068                           
  4069                           	psect	text22
  4070  00191C                     __ptext22:
  4071                           	opt stack 0
  4072  00191C                     _configRS232:
  4073                           	opt stack 27
  4074                           
  4075                           ;usart.c: 13: TX9 = 0;
  4076                           
  4077                           ;incstack = 0
  4078  00191C  9CAC               	bcf	4012,6,c	;volatile
  4079                           
  4080                           ;usart.c: 14: TXEN = 1;
  4081  00191E  8AAC               	bsf	4012,5,c	;volatile
  4082                           
  4083                           ;usart.c: 15: SYNC = 0;
  4084  001920  98AC               	bcf	4012,4,c	;volatile
  4085                           
  4086                           ;usart.c: 16: BRGH = 1;
  4087  001922  84AC               	bsf	4012,2,c	;volatile
  4088                           
  4089                           ;usart.c: 19: SPEN = 1;
  4090  001924  8EAB               	bsf	4011,7,c	;volatile
  4091                           
  4092                           ;usart.c: 20: RX9 = 0;
  4093  001926  9CAB               	bcf	4011,6,c	;volatile
  4094                           
  4095                           ;usart.c: 21: CREN = 1;
  4096  001928  88AB               	bsf	4011,4,c	;volatile
  4097                           
  4098                           ;usart.c: 26: BRG16 = 0;
  4099  00192A  96B8               	bcf	4024,3,c	;volatile
  4100                           
  4101                           ;usart.c: 27: SPBRG = 129;
  4102  00192C  0E81               	movlw	129
  4103  00192E  6EAF               	movwf	4015,c	;volatile
  4104                           
  4105                           ;usart.c: 29: RXDTP = 0;
  4106  001930  9AB8               	bcf	4024,5,c	;volatile
  4107  001932  0012               	return		;funcret
  4108  001934                     __end_of_configRS232:
  4109                           	opt stack 0
  4110                           tblptru	equ	0xFF8
  4111                           tblptrh	equ	0xFF7
  4112                           tblptrl	equ	0xFF6
  4113                           tablat	equ	0xFF5
  4114                           prodh	equ	0xFF4
  4115                           prodl	equ	0xFF3
  4116                           intcon	equ	0xFF2
  4117                           intcon2	equ	0xFF1
  4118                           postinc0	equ	0xFEE
  4119                           wreg	equ	0xFE8
  4120                           postdec1	equ	0xFE5
  4121                           fsr1l	equ	0xFE1
  4122                           postinc2	equ	0xFDE
  4123                           postdec2	equ	0xFDD
  4124                           fsr2h	equ	0xFDA
  4125                           fsr2l	equ	0xFD9
  4126                           status	equ	0xFD8
  4127                           
  4128 ;; *************** function _configADInterrupt *****************
  4129 ;; Defined at:
  4130 ;;		line 11 in file "ad.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;		None
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;		None
  4135 ;; Return value:  Size  Location     Type
  4136 ;;		None               void
  4137 ;; Registers used:
  4138 ;;		None
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4144 ;;      Params:         0       0       0       0       0       0       0       0       0
  4145 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4146 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4147 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4148 ;;Total ram usage:        0 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; Hardware stack levels required when called:    3
  4151 ;; This function calls:
  4152 ;;		Nothing
  4153 ;; This function is called by:
  4154 ;;		_main
  4155 ;; This function uses a non-reentrant model
  4156 ;;
  4157                           
  4158                           	psect	text23
  4159  0019C6                     __ptext23:
  4160                           	opt stack 0
  4161  0019C6                     _configADInterrupt:
  4162                           	opt stack 27
  4163                           
  4164                           ;ad.c: 12: PIR1bits.ADIF = 0;
  4165                           
  4166                           ;incstack = 0
  4167  0019C6  9C9E               	bcf	3998,6,c	;volatile
  4168                           
  4169                           ;ad.c: 13: PIE1bits.ADIE = 1;
  4170  0019C8  8C9D               	bsf	3997,6,c	;volatile
  4171                           
  4172                           ;ad.c: 15: INTCONbits.GIE = 1;
  4173  0019CA  8EF2               	bsf	intcon,7,c	;volatile
  4174                           
  4175                           ;ad.c: 16: INTCONbits.PEIE = 1;
  4176  0019CC  8CF2               	bsf	intcon,6,c	;volatile
  4177  0019CE  0012               	return		;funcret
  4178  0019D0                     __end_of_configADInterrupt:
  4179                           	opt stack 0
  4180                           tblptru	equ	0xFF8
  4181                           tblptrh	equ	0xFF7
  4182                           tblptrl	equ	0xFF6
  4183                           tablat	equ	0xFF5
  4184                           prodh	equ	0xFF4
  4185                           prodl	equ	0xFF3
  4186                           intcon	equ	0xFF2
  4187                           intcon2	equ	0xFF1
  4188                           postinc0	equ	0xFEE
  4189                           wreg	equ	0xFE8
  4190                           postdec1	equ	0xFE5
  4191                           fsr1l	equ	0xFE1
  4192                           postinc2	equ	0xFDE
  4193                           postdec2	equ	0xFDD
  4194                           fsr2h	equ	0xFDA
  4195                           fsr2l	equ	0xFD9
  4196                           status	equ	0xFD8
  4197                           
  4198 ;; *************** function _configAD *****************
  4199 ;; Defined at:
  4200 ;;		line 19 in file "ad.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;		None
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;		None
  4205 ;; Return value:  Size  Location     Type
  4206 ;;		None               void
  4207 ;; Registers used:
  4208 ;;		None
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4214 ;;      Params:         0       0       0       0       0       0       0       0       0
  4215 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4216 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4217 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4218 ;;Total ram usage:        0 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    3
  4221 ;; This function calls:
  4222 ;;		Nothing
  4223 ;; This function is called by:
  4224 ;;		_main
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           	psect	text24
  4229  001902                     __ptext24:
  4230                           	opt stack 0
  4231  001902                     _configAD:
  4232                           	opt stack 27
  4233                           
  4234                           ;ad.c: 20: ADCON0bits.ADON = 1;
  4235                           
  4236                           ;incstack = 0
  4237  001902  80C2               	bsf	4034,0,c	;volatile
  4238                           
  4239                           ;ad.c: 24: ADFM = 1;
  4240  001904  8EC0               	bsf	4032,7,c	;volatile
  4241                           
  4242                           ;ad.c: 27: ADCON1bits.PCFG3 = 0;
  4243  001906  96C1               	bcf	4033,3,c	;volatile
  4244                           
  4245                           ;ad.c: 28: ADCON1bits.PCFG2 = 1;
  4246  001908  84C1               	bsf	4033,2,c	;volatile
  4247                           
  4248                           ;ad.c: 29: ADCON1bits.PCFG1 = 0;
  4249  00190A  92C1               	bcf	4033,1,c	;volatile
  4250                           
  4251                           ;ad.c: 30: ADCON1bits.PCFG0 = 1;
  4252  00190C  80C1               	bsf	4033,0,c	;volatile
  4253                           
  4254                           ;ad.c: 33: ADCON2bits.ACQT2 = 0;
  4255  00190E  9AC0               	bcf	4032,5,c	;volatile
  4256                           
  4257                           ;ad.c: 34: ADCON2bits.ACQT1 = 0;
  4258  001910  98C0               	bcf	4032,4,c	;volatile
  4259                           
  4260                           ;ad.c: 35: ADCON2bits.ACQT0 = 1;
  4261  001912  86C0               	bsf	4032,3,c	;volatile
  4262                           
  4263                           ;ad.c: 38: ADCON2bits.ADCS2 = 1;
  4264  001914  84C0               	bsf	4032,2,c	;volatile
  4265                           
  4266                           ;ad.c: 39: ADCON2bits.ADCS1 = 0;
  4267  001916  92C0               	bcf	4032,1,c	;volatile
  4268                           
  4269                           ;ad.c: 40: ADCON2bits.ADCS0 = 1;
  4270  001918  80C0               	bsf	4032,0,c	;volatile
  4271  00191A  0012               	return		;funcret
  4272  00191C                     __end_of_configAD:
  4273                           	opt stack 0
  4274                           tblptru	equ	0xFF8
  4275                           tblptrh	equ	0xFF7
  4276                           tblptrl	equ	0xFF6
  4277                           tablat	equ	0xFF5
  4278                           prodh	equ	0xFF4
  4279                           prodl	equ	0xFF3
  4280                           intcon	equ	0xFF2
  4281                           intcon2	equ	0xFF1
  4282                           postinc0	equ	0xFEE
  4283                           wreg	equ	0xFE8
  4284                           postdec1	equ	0xFE5
  4285                           fsr1l	equ	0xFE1
  4286                           postinc2	equ	0xFDE
  4287                           postdec2	equ	0xFDD
  4288                           fsr2h	equ	0xFDA
  4289                           fsr2l	equ	0xFD9
  4290                           status	equ	0xFD8
  4291                           
  4292 ;; *************** function ___awmod *****************
  4293 ;; Defined at:
  4294 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;  dividend        2   14[BANK0 ] int 
  4297 ;;  divisor         2   16[BANK0 ] int 
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;  sign            1   19[BANK0 ] unsigned char 
  4300 ;;  counter         1   18[BANK0 ] unsigned char 
  4301 ;; Return value:  Size  Location     Type
  4302 ;;                  2   14[BANK0 ] int 
  4303 ;; Registers used:
  4304 ;;		wreg, status,2, status,0
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4310 ;;      Params:         0       4       0       0       0       0       0       0       0
  4311 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4312 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4313 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4314 ;;Total ram usage:        6 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; Hardware stack levels required when called:    3
  4317 ;; This function calls:
  4318 ;;		Nothing
  4319 ;; This function is called by:
  4320 ;;		_main
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           	psect	text25
  4325  001384                     __ptext25:
  4326                           	opt stack 0
  4327  001384                     ___awmod:
  4328                           	opt stack 27
  4329                           
  4330                           ;incstack = 0
  4331  001384  0E00               	movlw	0
  4332  001386  0100               	movlb	0	; () banked
  4333  001388  6F73               	movwf	___awmod@sign& (0+255),b
  4334                           
  4335                           ; BSR set to: 0
  4336  00138A  0100               	movlb	0	; () banked
  4337  00138C  AF6F               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4338  00138E  D008               	goto	l2954
  4339                           
  4340                           ; BSR set to: 0
  4341  001390  0100               	movlb	0	; () banked
  4342  001392  6D6E               	negf	___awmod@dividend& (0+255),b
  4343  001394  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
  4344  001396  B0D8               	btfsc	status,0,c
  4345  001398  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
  4346                           
  4347                           ; BSR set to: 0
  4348  00139A  0E01               	movlw	1
  4349  00139C  0100               	movlb	0	; () banked
  4350  00139E  6F73               	movwf	___awmod@sign& (0+255),b
  4351  0013A0                     l2954:
  4352                           
  4353                           ; BSR set to: 0
  4354  0013A0  0100               	movlb	0	; () banked
  4355  0013A2  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4356  0013A4  D005               	goto	l2958
  4357                           
  4358                           ; BSR set to: 0
  4359  0013A6  0100               	movlb	0	; () banked
  4360  0013A8  6D70               	negf	___awmod@divisor& (0+255),b
  4361  0013AA  1F71               	comf	(___awmod@divisor+1)& (0+255),f,b
  4362  0013AC  B0D8               	btfsc	status,0,c
  4363  0013AE  2B71               	incf	(___awmod@divisor+1)& (0+255),f,b
  4364  0013B0                     l2958:
  4365                           
  4366                           ; BSR set to: 0
  4367  0013B0  0100               	movlb	0	; () banked
  4368  0013B2  5170               	movf	___awmod@divisor& (0+255),w,b
  4369  0013B4  0100               	movlb	0	; () banked
  4370  0013B6  1171               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4371  0013B8  B4D8               	btfsc	status,2,c
  4372  0013BA  D026               	goto	l2974
  4373                           
  4374                           ; BSR set to: 0
  4375  0013BC  0E01               	movlw	1
  4376  0013BE  0100               	movlb	0	; () banked
  4377  0013C0  6F72               	movwf	___awmod@counter& (0+255),b
  4378  0013C2  D006               	goto	l2964
  4379  0013C4                     l2962:
  4380                           
  4381                           ; BSR set to: 0
  4382  0013C4  0100               	movlb	0	; () banked
  4383  0013C6  90D8               	bcf	status,0,c
  4384  0013C8  3770               	rlcf	___awmod@divisor& (0+255),f,b
  4385  0013CA  3771               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4386  0013CC  0100               	movlb	0	; () banked
  4387  0013CE  2B72               	incf	___awmod@counter& (0+255),f,b
  4388  0013D0                     l2964:
  4389                           
  4390                           ; BSR set to: 0
  4391  0013D0  0100               	movlb	0	; () banked
  4392  0013D2  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4393  0013D4  D7F7               	goto	l2962
  4394  0013D6                     l2966:
  4395                           
  4396                           ; BSR set to: 0
  4397  0013D6  0100               	movlb	0	; () banked
  4398  0013D8  5170               	movf	___awmod@divisor& (0+255),w,b
  4399  0013DA  0100               	movlb	0	; () banked
  4400  0013DC  5D6E               	subwf	___awmod@dividend& (0+255),w,b
  4401  0013DE  0100               	movlb	0	; () banked
  4402  0013E0  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
  4403  0013E2  0100               	movlb	0	; () banked
  4404  0013E4  596F               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4405  0013E6  A0D8               	btfss	status,0,c
  4406  0013E8  D008               	goto	l2970
  4407                           
  4408                           ; BSR set to: 0
  4409  0013EA  0100               	movlb	0	; () banked
  4410  0013EC  5170               	movf	___awmod@divisor& (0+255),w,b
  4411  0013EE  0100               	movlb	0	; () banked
  4412  0013F0  5F6E               	subwf	___awmod@dividend& (0+255),f,b
  4413  0013F2  0100               	movlb	0	; () banked
  4414  0013F4  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
  4415  0013F6  0100               	movlb	0	; () banked
  4416  0013F8  5B6F               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  4417  0013FA                     l2970:
  4418                           
  4419                           ; BSR set to: 0
  4420  0013FA  0100               	movlb	0	; () banked
  4421  0013FC  90D8               	bcf	status,0,c
  4422  0013FE  3371               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  4423  001400  3370               	rrcf	___awmod@divisor& (0+255),f,b
  4424                           
  4425                           ; BSR set to: 0
  4426  001402  0100               	movlb	0	; () banked
  4427  001404  2F72               	decfsz	___awmod@counter& (0+255),f,b
  4428  001406  D7E7               	goto	l2966
  4429  001408                     l2974:
  4430                           
  4431                           ; BSR set to: 0
  4432  001408  0100               	movlb	0	; () banked
  4433  00140A  5173               	movf	___awmod@sign& (0+255),w,b
  4434  00140C  0100               	movlb	0	; () banked
  4435  00140E  B4D8               	btfsc	status,2,c
  4436  001410  D005               	goto	l2978
  4437                           
  4438                           ; BSR set to: 0
  4439  001412  0100               	movlb	0	; () banked
  4440  001414  6D6E               	negf	___awmod@dividend& (0+255),b
  4441  001416  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
  4442  001418  B0D8               	btfsc	status,0,c
  4443  00141A  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
  4444  00141C                     l2978:
  4445                           
  4446                           ; BSR set to: 0
  4447  00141C  C06E  F06E         	movff	___awmod@dividend,?___awmod
  4448  001420  C06F  F06F         	movff	___awmod@dividend+1,?___awmod+1
  4449  001424  0012               	return	
  4450  001426                     __end_of___awmod:
  4451                           	opt stack 0
  4452                           tblptru	equ	0xFF8
  4453                           tblptrh	equ	0xFF7
  4454                           tblptrl	equ	0xFF6
  4455                           tablat	equ	0xFF5
  4456                           prodh	equ	0xFF4
  4457                           prodl	equ	0xFF3
  4458                           intcon	equ	0xFF2
  4459                           intcon2	equ	0xFF1
  4460                           postinc0	equ	0xFEE
  4461                           wreg	equ	0xFE8
  4462                           postdec1	equ	0xFE5
  4463                           fsr1l	equ	0xFE1
  4464                           postinc2	equ	0xFDE
  4465                           postdec2	equ	0xFDD
  4466                           fsr2h	equ	0xFDA
  4467                           fsr2l	equ	0xFD9
  4468                           status	equ	0xFD8
  4469                           
  4470 ;; *************** function _InitI2C_Master *****************
  4471 ;; Defined at:
  4472 ;;		line 4 in file "i2c.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;		None
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;		None
  4477 ;; Return value:  Size  Location     Type
  4478 ;;		None               void
  4479 ;; Registers used:
  4480 ;;		wreg, status,2
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4486 ;;      Params:         0       0       0       0       0       0       0       0       0
  4487 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4488 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4489 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4490 ;;Total ram usage:        0 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    3
  4493 ;; This function calls:
  4494 ;;		Nothing
  4495 ;; This function is called by:
  4496 ;;		_main
  4497 ;; This function uses a non-reentrant model
  4498 ;;
  4499                           
  4500                           	psect	text26
  4501  0018A8                     __ptext26:
  4502                           	opt stack 0
  4503  0018A8                     _InitI2C_Master:
  4504                           	opt stack 27
  4505                           
  4506                           ;i2c.c: 6: TRISBbits.RB0 = 1;
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;incstack = 0
  4510  0018A8  8093               	bsf	3987,0,c	;volatile
  4511                           
  4512                           ;i2c.c: 7: TRISBbits.RB1 = 1;
  4513  0018AA  8293               	bsf	3987,1,c	;volatile
  4514                           
  4515                           ;i2c.c: 9: SSPADD = ( 20000000 / (4*100000) ) - 1;
  4516  0018AC  0E31               	movlw	49
  4517  0018AE  6EC8               	movwf	4040,c	;volatile
  4518                           
  4519                           ;i2c.c: 12: SSPIF = 0;
  4520  0018B0  969E               	bcf	3998,3,c	;volatile
  4521                           
  4522                           ;i2c.c: 15: SSPSTAT = 0;
  4523  0018B2  0E00               	movlw	0
  4524  0018B4  6EC7               	movwf	4039,c	;volatile
  4525                           
  4526                           ;i2c.c: 16: SSPSTATbits.SMP = 1;
  4527  0018B6  8EC7               	bsf	4039,7,c	;volatile
  4528                           
  4529                           ;i2c.c: 17: SSPSTATbits.CKE = 0;
  4530  0018B8  9CC7               	bcf	4039,6,c	;volatile
  4531                           
  4532                           ;i2c.c: 20: SSPCON1 = 0;
  4533  0018BA  0E00               	movlw	0
  4534  0018BC  6EC6               	movwf	4038,c	;volatile
  4535                           
  4536                           ;i2c.c: 21: SSPCON1bits.SSPM = 0b1000;
  4537  0018BE  50C6               	movf	4038,w,c	;volatile
  4538  0018C0  0BF0               	andlw	-16
  4539  0018C2  0908               	iorlw	8
  4540  0018C4  6EC6               	movwf	4038,c	;volatile
  4541                           
  4542                           ;i2c.c: 22: SSPCON1bits.SSPEN = 1;
  4543  0018C6  8AC6               	bsf	4038,5,c	;volatile
  4544  0018C8  0012               	return		;funcret
  4545  0018CA                     __end_of_InitI2C_Master:
  4546                           	opt stack 0
  4547                           tblptru	equ	0xFF8
  4548                           tblptrh	equ	0xFF7
  4549                           tblptrl	equ	0xFF6
  4550                           tablat	equ	0xFF5
  4551                           prodh	equ	0xFF4
  4552                           prodl	equ	0xFF3
  4553                           intcon	equ	0xFF2
  4554                           intcon2	equ	0xFF1
  4555                           postinc0	equ	0xFEE
  4556                           wreg	equ	0xFE8
  4557                           postdec1	equ	0xFE5
  4558                           fsr1l	equ	0xFE1
  4559                           postinc2	equ	0xFDE
  4560                           postdec2	equ	0xFDD
  4561                           fsr2h	equ	0xFDA
  4562                           fsr2l	equ	0xFD9
  4563                           status	equ	0xFD8
  4564                           
  4565 ;; *************** function _interruptions *****************
  4566 ;; Defined at:
  4567 ;;		line 45 in file "main.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;		None
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;		None
  4572 ;; Return value:  Size  Location     Type
  4573 ;;		None               void
  4574 ;; Registers used:
  4575 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4576 ;; Tracked objects:
  4577 ;;		On entry : 0/0
  4578 ;;		On exit  : 0/0
  4579 ;;		Unchanged: 0/0
  4580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4581 ;;      Params:         0       0       0       0       0       0       0       0       0
  4582 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4583 ;;      Temps:         16       0       0       0       0       0       0       0       0
  4584 ;;      Totals:        16       0       0       0       0       0       0       0       0
  4585 ;;Total ram usage:       16 bytes
  4586 ;; Hardware stack levels used:    1
  4587 ;; Hardware stack levels required when called:    2
  4588 ;; This function calls:
  4589 ;;		_strcpy
  4590 ;;		i2___awmod
  4591 ;;		i2_printf
  4592 ;; This function is called by:
  4593 ;;		Interrupt level 2
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           	psect	intcode
  4598  000008                     __pintcode:
  4599                           	opt stack 0
  4600  000008                     _interruptions:
  4601                           	opt stack 26
  4602                           
  4603                           ;incstack = 0
  4604  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4605  00000A  CFFA F01F          	movff	pclath,??_interruptions+2
  4606  00000E  CFFB F020          	movff	pclatu,??_interruptions+3
  4607  000012  EDA1  F008         	call	int_func,f	;refresh shadow registers
  4608                           pclatu	equ	0xFFB
  4609                           pclath	equ	0xFFA
  4610                           tblptru	equ	0xFF8
  4611                           tblptrh	equ	0xFF7
  4612                           tblptrl	equ	0xFF6
  4613                           tablat	equ	0xFF5
  4614                           prodh	equ	0xFF4
  4615                           prodl	equ	0xFF3
  4616                           intcon	equ	0xFF2
  4617                           intcon2	equ	0xFF1
  4618                           postinc0	equ	0xFEE
  4619                           wreg	equ	0xFE8
  4620                           postdec1	equ	0xFE5
  4621                           fsr1l	equ	0xFE1
  4622                           postinc2	equ	0xFDE
  4623                           postdec2	equ	0xFDD
  4624                           fsr2h	equ	0xFDA
  4625                           fsr2l	equ	0xFD9
  4626                           status	equ	0xFD8
  4627                           
  4628                           	psect	intcode_body
  4629  001142                     __pintcode_body:
  4630                           	opt stack 26
  4631  001142                     int_func:
  4632                           	opt stack 26
  4633  001142  0006               	pop		; remove dummy address from shadow register refresh
  4634  001144  CFE9 F021          	movff	fsr0l,??_interruptions+4
  4635  001148  CFEA F022          	movff	fsr0h,??_interruptions+5
  4636  00114C  CFE1 F023          	movff	fsr1l,??_interruptions+6
  4637  001150  CFE2 F024          	movff	fsr1h,??_interruptions+7
  4638  001154  CFD9 F025          	movff	fsr2l,??_interruptions+8
  4639  001158  CFDA F026          	movff	fsr2h,??_interruptions+9
  4640  00115C  CFF3 F027          	movff	prodl,??_interruptions+10
  4641  001160  CFF4 F028          	movff	prodh,??_interruptions+11
  4642  001164  CFF6 F029          	movff	tblptrl,??_interruptions+12
  4643  001168  CFF7 F02A          	movff	tblptrh,??_interruptions+13
  4644  00116C  CFF8 F02B          	movff	tblptru,??_interruptions+14
  4645  001170  CFF5 F02C          	movff	tablat,??_interruptions+15
  4646                           
  4647                           ;main.c: 47: if (RCIF){
  4648  001174  AA9E               	btfss	3998,5,c	;volatile
  4649  001176  D047               	goto	i2l2456
  4650                           
  4651                           ;main.c: 48: if (FERR || OERR)
  4652  001178  B4AB               	btfsc	4011,2,c	;volatile
  4653  00117A  D002               	goto	i2l232
  4654  00117C  A2AB               	btfss	4011,1,c	;volatile
  4655  00117E  D003               	goto	i2l230
  4656  001180                     i2l232:
  4657                           
  4658                           ;main.c: 49: {
  4659                           ;main.c: 50: CREN = 0;
  4660  001180  98AB               	bcf	4011,4,c	;volatile
  4661                           
  4662                           ;main.c: 51: hasAnError = 1;
  4663  001182  824D               	bsf	_hasAnError/(0+8),_hasAnError& (0+7),c
  4664                           
  4665                           ;main.c: 52: CREN = 1;
  4666  001184  88AB               	bsf	4011,4,c	;volatile
  4667  001186                     i2l230:
  4668                           
  4669                           ;main.c: 53: }
  4670                           ;main.c: 55: receivedData = RCREG;
  4671  001186  CFAE F04C          	movff	4014,_receivedData	;volatile
  4672                           
  4673                           ;main.c: 57: if(receivedData == '\r')
  4674  00118A  0E0D               	movlw	13
  4675  00118C  184C               	xorwf	_receivedData,w,c
  4676  00118E  A4D8               	btfss	status,2,c
  4677  001190  D01D               	goto	i2l2444
  4678                           
  4679                           ;main.c: 58: {
  4680                           ;main.c: 59: string_aux[i] = '\0';
  4681  001192  502D               	movf	_i,w,c
  4682  001194  0D01               	mullw	1
  4683  001196  0E2E               	movlw	low _string_aux
  4684  001198  24F3               	addwf	prodl,w,c
  4685  00119A  6ED9               	movwf	fsr2l,c
  4686  00119C  0E00               	movlw	high _string_aux
  4687  00119E  20F4               	addwfc	prodh,w,c
  4688  0011A0  6EDA               	movwf	fsr2h,c
  4689  0011A2  0E00               	movlw	0
  4690  0011A4  6EDF               	movwf	indf2,c
  4691                           
  4692                           ;main.c: 60: strcpy(string,string_aux);
  4693  0011A6  0EA2               	movlw	low _string
  4694  0011A8  6E01               	movwf	strcpy@to,c
  4695  0011AA  0E00               	movlw	high _string
  4696  0011AC  6E02               	movwf	strcpy@to+1,c
  4697  0011AE  0E2E               	movlw	low _string_aux
  4698  0011B0  6E03               	movwf	strcpy@from,c
  4699  0011B2  0E00               	movlw	high _string_aux
  4700  0011B4  6E04               	movwf	strcpy@from+1,c
  4701  0011B6  EC15  F00C         	call	_strcpy	;wreg free
  4702                           
  4703                           ;main.c: 61: printf("\n\r");
  4704  0011BA  0E4A               	movlw	low STR_1
  4705  0011BC  6E0D               	movwf	i2printf@f,c
  4706  0011BE  0E08               	movlw	high STR_1
  4707  0011C0  6E0E               	movwf	i2printf@f+1,c
  4708  0011C2  EC4E  F007         	call	i2_printf	;wreg free
  4709                           
  4710                           ;main.c: 62: i = 0;
  4711  0011C6  0E00               	movlw	0
  4712  0011C8  6E2D               	movwf	_i,c
  4713                           
  4714                           ;main.c: 63: }else
  4715  0011CA  D01D               	goto	i2l2456
  4716  0011CC                     i2l2444:
  4717                           
  4718                           ;main.c: 64: {
  4719                           ;main.c: 65: if(i < 25)
  4720  0011CC  0E19               	movlw	25
  4721  0011CE  602D               	cpfslt	_i,c
  4722  0011D0  D016               	goto	i2l2452
  4723                           
  4724                           ;main.c: 66: {
  4725                           ;main.c: 67: i = i%25;
  4726  0011D2  C02D  F001         	movff	_i,i2___awmod@dividend
  4727  0011D6  6A02               	clrf	i2___awmod@dividend+1,c
  4728  0011D8  0E00               	movlw	0
  4729  0011DA  6E04               	movwf	i2___awmod@divisor+1,c
  4730  0011DC  0E19               	movlw	25
  4731  0011DE  6E03               	movwf	i2___awmod@divisor,c
  4732  0011E0  EC8A  F00A         	call	i2___awmod	;wreg free
  4733  0011E4  5001               	movf	?i2___awmod,w,c
  4734  0011E6  6E2D               	movwf	_i,c
  4735                           
  4736                           ;main.c: 68: string_aux[i] = receivedData;
  4737  0011E8  502D               	movf	_i,w,c
  4738  0011EA  0D01               	mullw	1
  4739  0011EC  0E2E               	movlw	low _string_aux
  4740  0011EE  24F3               	addwf	prodl,w,c
  4741  0011F0  6ED9               	movwf	fsr2l,c
  4742  0011F2  0E00               	movlw	high _string_aux
  4743  0011F4  20F4               	addwfc	prodh,w,c
  4744  0011F6  6EDA               	movwf	fsr2h,c
  4745  0011F8  C04C  FFDF         	movff	_receivedData,indf2
  4746                           
  4747                           ;main.c: 69: i++;
  4748  0011FC  2A2D               	incf	_i,f,c
  4749  0011FE                     i2l2452:
  4750                           
  4751                           ;main.c: 70: }
  4752                           ;main.c: 71: if(i == 25)
  4753  0011FE  0E19               	movlw	25
  4754  001200  182D               	xorwf	_i,w,c
  4755  001202  B4D8               	btfsc	status,2,c
  4756                           
  4757                           ;main.c: 72: i++;
  4758  001204  2A2D               	incf	_i,f,c
  4759  001206                     i2l2456:
  4760                           
  4761                           ;main.c: 73: }
  4762                           ;main.c: 74: }
  4763                           ;main.c: 76: if(PIR1bits.ADIF){
  4764  001206  AC9E               	btfss	3998,6,c	;volatile
  4765  001208  D00D               	goto	i2l2464
  4766                           
  4767                           ;main.c: 77: data_ADC = ((ADRESH<<8) + ADRESL);
  4768  00120A  50C4               	movf	4036,w,c	;volatile
  4769  00120C  6E1E               	movwf	(??_interruptions+1)& (0+255),c
  4770  00120E  6A1D               	clrf	??_interruptions& (0+255),c
  4771  001210  50C3               	movf	4035,w,c	;volatile
  4772  001212  241D               	addwf	??_interruptions,w,c
  4773  001214  0100               	movlb	0	; () banked
  4774  001216  6F97               	movwf	_data_ADC& (0+255),b
  4775  001218  0E00               	movlw	0
  4776  00121A  201E               	addwfc	??_interruptions+1,w,c
  4777  00121C  0100               	movlb	0	; () banked
  4778  00121E  6F98               	movwf	(_data_ADC+1)& (0+255),b
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;main.c: 78: ADCON0bits.GODONE = 1;
  4782  001220  82C2               	bsf	4034,1,c	;volatile
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;main.c: 79: PIR1bits.ADIF = 0;
  4786  001222  9C9E               	bcf	3998,6,c	;volatile
  4787  001224                     i2l2464:
  4788                           
  4789                           ;main.c: 80: }
  4790                           ;main.c: 82: if(INTCONbits.TMR0IF){
  4791  001224  A4F2               	btfss	intcon,2,c	;volatile
  4792  001226  D00D               	goto	i2l239
  4793                           
  4794                           ;main.c: 83: val++;
  4795  001228  0100               	movlb	0	; () banked
  4796  00122A  2BA1               	incf	_val& (0+255),f,b
  4797                           
  4798                           ; BSR set to: 0
  4799                           ;main.c: 84: changing = ~changing;
  4800  00122C  B04D               	btfsc	_changing/(0+8),_changing& (0+7),c
  4801  00122E  D002               	goto	i2u209_40
  4802  001230  804D               	bsf	_changing/(0+8),_changing& (0+7),c
  4803  001232  D001               	goto	i2l2470
  4804  001234                     i2u209_40:
  4805  001234  904D               	bcf	_changing/(0+8),_changing& (0+7),c
  4806  001236                     i2l2470:
  4807                           
  4808                           ;main.c: 85: PORTDbits.RD3 = changing;
  4809  001236  A04D               	btfss	_changing/(0+8),_changing& (0+7),c
  4810  001238  D002               	bra	i2u211_45
  4811  00123A  8683               	bsf	3971,3,c	;volatile
  4812  00123C  D001               	bra	i2u211_47
  4813  00123E                     i2u211_45:
  4814  00123E  9683               	bcf	3971,3,c	;volatile
  4815  001240                     i2u211_47:
  4816                           
  4817                           ;main.c: 86: INTCONbits.TMR0IF = 0;
  4818  001240  94F2               	bcf	intcon,2,c	;volatile
  4819  001242                     i2l239:
  4820  001242  C02C  FFF5         	movff	??_interruptions+15,tablat
  4821  001246  C02B  FFF8         	movff	??_interruptions+14,tblptru
  4822  00124A  C02A  FFF7         	movff	??_interruptions+13,tblptrh
  4823  00124E  C029  FFF6         	movff	??_interruptions+12,tblptrl
  4824  001252  C028  FFF4         	movff	??_interruptions+11,prodh
  4825  001256  C027  FFF3         	movff	??_interruptions+10,prodl
  4826  00125A  C026  FFDA         	movff	??_interruptions+9,fsr2h
  4827  00125E  C025  FFD9         	movff	??_interruptions+8,fsr2l
  4828  001262  C024  FFE2         	movff	??_interruptions+7,fsr1h
  4829  001266  C023  FFE1         	movff	??_interruptions+6,fsr1l
  4830  00126A  C022  FFEA         	movff	??_interruptions+5,fsr0h
  4831  00126E  C021  FFE9         	movff	??_interruptions+4,fsr0l
  4832  001272  C020  FFFB         	movff	??_interruptions+3,pclatu
  4833  001276  C01F  FFFA         	movff	??_interruptions+2,pclath
  4834  00127A  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4835  00127C  0011               	retfie		f
  4836  00127E                     __end_of_interruptions:
  4837                           	opt stack 0
  4838                           pclatu	equ	0xFFB
  4839                           pclath	equ	0xFFA
  4840                           tblptru	equ	0xFF8
  4841                           tblptrh	equ	0xFF7
  4842                           tblptrl	equ	0xFF6
  4843                           tablat	equ	0xFF5
  4844                           prodh	equ	0xFF4
  4845                           prodl	equ	0xFF3
  4846                           intcon	equ	0xFF2
  4847                           intcon2	equ	0xFF1
  4848                           postinc0	equ	0xFEE
  4849                           fsr0h	equ	0xFEA
  4850                           fsr0l	equ	0xFE9
  4851                           wreg	equ	0xFE8
  4852                           postdec1	equ	0xFE5
  4853                           fsr1h	equ	0xFE2
  4854                           fsr1l	equ	0xFE1
  4855                           indf2	equ	0xFDF
  4856                           postinc2	equ	0xFDE
  4857                           postdec2	equ	0xFDD
  4858                           fsr2h	equ	0xFDA
  4859                           fsr2l	equ	0xFD9
  4860                           status	equ	0xFD8
  4861                           
  4862 ;; *************** function i2_printf *****************
  4863 ;; Defined at:
  4864 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;  f               2   12[COMRAM] PTR const unsigned char 
  4867 ;;		 -> STR_3(2), STR_2(38), STR_1(3), 
  4868 ;; Auto vars:     Size  Location     Type
  4869 ;;  printf          4    0        struct .
  4870 ;;  printf          3    0        PTR const unsigned char 
  4871 ;;  printf          2   25[COMRAM] int 
  4872 ;;  printf          2   23[COMRAM] unsigned int 
  4873 ;;  printf          2   19[COMRAM] PTR void [1]
  4874 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4875 ;;  printf          2    0        unsigned int 
  4876 ;;  printf          1   27[COMRAM] char 
  4877 ;;  printf          1   22[COMRAM] unsigned char 
  4878 ;;  printf          1   21[COMRAM] char 
  4879 ;;  printf          1   18[COMRAM] unsigned char 
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  2   12[COMRAM] int 
  4882 ;; Registers used:
  4883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4889 ;;      Params:         2       0       0       0       0       0       0       0       0
  4890 ;;      Locals:        10       0       0       0       0       0       0       0       0
  4891 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4892 ;;      Totals:        16       0       0       0       0       0       0       0       0
  4893 ;;Total ram usage:       16 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    1
  4896 ;; This function calls:
  4897 ;;		i2___lwdiv
  4898 ;;		i2___lwmod
  4899 ;;		i2___wmul
  4900 ;;		i2_isdigit
  4901 ;;		i2_putch
  4902 ;; This function is called by:
  4903 ;;		_interruptions
  4904 ;; This function uses a non-reentrant model
  4905 ;;
  4906                           
  4907                           	psect	text28
  4908  000E9C                     __ptext28:
  4909                           	opt stack 0
  4910  000E9C                     i2_printf:
  4911                           	opt stack 26
  4912                           
  4913                           ;doprnt.c: 466: va_list ap;
  4914                           ;doprnt.c: 499: signed char c;
  4915                           ;doprnt.c: 501: int width;
  4916                           ;doprnt.c: 506: signed char prec;
  4917                           ;doprnt.c: 508: unsigned char flag;
  4918                           ;doprnt.c: 523: union {
  4919                           ;doprnt.c: 524: unsigned long vd;
  4920                           ;doprnt.c: 525: double integ;
  4921                           ;doprnt.c: 526: } tmpval;
  4922                           ;doprnt.c: 528: unsigned int val;
  4923                           ;doprnt.c: 529: unsigned len;
  4924                           ;doprnt.c: 530: const char * cp;
  4925                           ;doprnt.c: 533: *ap = __va_start();
  4926                           
  4927                           ;incstack = 0
  4928  000E9C  0E0F               	movlw	low (?i2_printf+2)
  4929  000E9E  6E14               	movwf	i2printf@ap,c
  4930  000EA0  0E00               	movlw	high (?i2_printf+2)
  4931  000EA2  6E15               	movwf	i2printf@ap+1,c
  4932                           
  4933                           ;doprnt.c: 536: while(c = *f++) {
  4934  000EA4  D141               	goto	i2l2390
  4935  000EA6                     i2l2288:
  4936                           
  4937                           ;doprnt.c: 538: if(c != '%')
  4938  000EA6  0E25               	movlw	37
  4939  000EA8  181C               	xorwf	i2printf@c,w,c
  4940  000EAA  B4D8               	btfsc	status,2,c
  4941  000EAC  D004               	goto	i2l2292
  4942                           
  4943                           ;doprnt.c: 540: {
  4944                           ;doprnt.c: 541: (putch(c) );
  4945  000EAE  501C               	movf	i2printf@c,w,c
  4946  000EB0  ECCE  F00C         	call	i2_putch
  4947                           
  4948                           ;doprnt.c: 542: continue;
  4949  000EB4  D139               	goto	i2l2390
  4950  000EB6                     i2l2292:
  4951                           
  4952                           ;doprnt.c: 543: }
  4953                           ;doprnt.c: 546: width = 0;
  4954  000EB6  0E00               	movlw	0
  4955  000EB8  6E1B               	movwf	i2printf@width+1,c
  4956  000EBA  0E00               	movlw	0
  4957  000EBC  6E1A               	movwf	i2printf@width,c
  4958                           
  4959                           ;doprnt.c: 548: flag = 0;
  4960  000EBE  0E00               	movlw	0
  4961  000EC0  6E17               	movwf	i2printf@flag,c
  4962                           
  4963                           ;doprnt.c: 551: switch(*f) {
  4964                           
  4965                           ;doprnt.c: 550: for(;;) {
  4966  000EC2  D003               	goto	i2l2298
  4967  000EC4                     i2l2294:
  4968                           
  4969                           ;doprnt.c: 580: flag |= 0x04;
  4970  000EC4  8417               	bsf	i2printf@flag,2,c
  4971                           
  4972                           ;doprnt.c: 581: f++;
  4973  000EC6  4A0D               	infsnz	i2printf@f,f,c
  4974  000EC8  2A0E               	incf	i2printf@f+1,f,c
  4975  000ECA                     i2l2298:
  4976  000ECA  C00D  FFF6         	movff	i2printf@f,tblptrl
  4977  000ECE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4978  000ED2                     	if	0	;tblptru may be non-zero
  4979  000ED2                     	endif
  4980  000ED2                     	if	0	;tblptru may be non-zero
  4981  000ED2                     	endif
  4982  000ED2  0008               	tblrd		*
  4983  000ED4  50F5               	movf	tablat,w,c
  4984                           
  4985                           ; Switch size 1, requested type "space"
  4986                           ; Number of cases is 1, Range of values is 48 to 48
  4987                           ; switch strategies available:
  4988                           ; Name         Instructions Cycles
  4989                           ; simple_byte            4     3 (average)
  4990                           ;	Chosen strategy is simple_byte
  4991  000ED6  0A30               	xorlw	48	; case 48
  4992  000ED8  B4D8               	btfsc	status,2,c
  4993  000EDA  D7F4               	goto	i2l2294
  4994                           
  4995                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4996                           
  4997                           ;doprnt.c: 586: }
  4998                           
  4999                           ;doprnt.c: 585: break;
  5000  000EDC  C00D  FFF6         	movff	i2printf@f,tblptrl
  5001  000EE0  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  5002  000EE4                     	if	0	;tblptru may be non-zero
  5003  000EE4                     	endif
  5004  000EE4                     	if	0	;tblptru may be non-zero
  5005  000EE4                     	endif
  5006  000EE4  0008               	tblrd		*
  5007  000EE6  50F5               	movf	tablat,w,c
  5008  000EE8  EC65  F00C         	call	i2_isdigit
  5009  000EEC  A0D8               	btfss	status,0,c
  5010  000EEE  D038               	goto	i2l2318
  5011                           
  5012                           ;doprnt.c: 598: width = 0;
  5013  000EF0  0E00               	movlw	0
  5014  000EF2  6E1B               	movwf	i2printf@width+1,c
  5015  000EF4  0E00               	movlw	0
  5016  000EF6  6E1A               	movwf	i2printf@width,c
  5017  000EF8                     i2l2304:
  5018                           
  5019                           ;doprnt.c: 600: width *= 10;
  5020  000EF8  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
  5021  000EFC  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  5022  000F00  0E00               	movlw	0
  5023  000F02  6E04               	movwf	i2___wmul@multiplicand+1,c
  5024  000F04  0E0A               	movlw	10
  5025  000F06  6E03               	movwf	i2___wmul@multiplicand,c
  5026  000F08  EC41  F00C         	call	i2___wmul	;wreg free
  5027  000F0C  C001  F01A         	movff	?i2___wmul,i2printf@width
  5028  000F10  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
  5029                           
  5030                           ;doprnt.c: 601: width += *f++ - '0';
  5031  000F14  0ED0               	movlw	208
  5032  000F16  6E0F               	movwf	??i2_printf& (0+255),c
  5033  000F18  0EFF               	movlw	255
  5034  000F1A  6E10               	movwf	(??i2_printf+1)& (0+255),c
  5035  000F1C  C00D  FFF6         	movff	i2printf@f,tblptrl
  5036  000F20  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  5037  000F24                     	if	0	;tblptru may be non-zero
  5038  000F24                     	endif
  5039  000F24                     	if	0	;tblptru may be non-zero
  5040  000F24                     	endif
  5041  000F24  0008               	tblrd		*
  5042  000F26  50F5               	movf	tablat,w,c
  5043  000F28  6E11               	movwf	(??i2_printf+2)& (0+255),c
  5044  000F2A  6A12               	clrf	(??i2_printf+3)& (0+255),c
  5045  000F2C  500F               	movf	??i2_printf,w,c
  5046  000F2E  2611               	addwf	??i2_printf+2,f,c
  5047  000F30  5010               	movf	??i2_printf+1,w,c
  5048  000F32  2212               	addwfc	??i2_printf+3,f,c
  5049  000F34  5011               	movf	??i2_printf+2,w,c
  5050  000F36  261A               	addwf	i2printf@width,f,c
  5051  000F38  5012               	movf	??i2_printf+3,w,c
  5052  000F3A  221B               	addwfc	i2printf@width+1,f,c
  5053  000F3C  4A0D               	infsnz	i2printf@f,f,c
  5054  000F3E  2A0E               	incf	i2printf@f+1,f,c
  5055                           
  5056                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5057  000F40  C00D  FFF6         	movff	i2printf@f,tblptrl
  5058  000F44  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  5059  000F48                     	if	0	;tblptru may be non-zero
  5060  000F48                     	endif
  5061  000F48                     	if	0	;tblptru may be non-zero
  5062  000F48                     	endif
  5063  000F48  0008               	tblrd		*
  5064  000F4A  50F5               	movf	tablat,w,c
  5065  000F4C  EC65  F00C         	call	i2_isdigit
  5066  000F50  A0D8               	btfss	status,0,c
  5067  000F52  D006               	goto	i2l2318
  5068  000F54  D7D1               	goto	i2l2304
  5069  000F56                     i2l2312:
  5070                           
  5071                           ;doprnt.c: 718: case 'x':
  5072                           ;doprnt.c: 721: flag |= 0x80;
  5073  000F56  8E17               	bsf	i2printf@flag,7,c
  5074                           
  5075                           ;doprnt.c: 723: break;
  5076  000F58  D01A               	goto	i2l2320
  5077  000F5A                     i2l2314:
  5078                           
  5079                           ;doprnt.c: 818: flag |= 0xC0;
  5080  000F5A  0EC0               	movlw	192
  5081  000F5C  1217               	iorwf	i2printf@flag,f,c
  5082                           
  5083                           ;doprnt.c: 822: }
  5084                           
  5085                           ;doprnt.c: 819: break;
  5086  000F5E  D017               	goto	i2l2320
  5087  000F60                     i2l2318:
  5088  000F60  C00D  FFF6         	movff	i2printf@f,tblptrl
  5089  000F64  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  5090  000F68  4A0D               	infsnz	i2printf@f,f,c
  5091  000F6A  2A0E               	incf	i2printf@f+1,f,c
  5092  000F6C                     	if	0	;tblptru may be non-zero
  5093  000F6C                     	endif
  5094  000F6C                     	if	0	;tblptru may be non-zero
  5095  000F6C                     	endif
  5096  000F6C  0008               	tblrd		*
  5097  000F6E  CFF5 F01C          	movff	tablat,i2printf@c
  5098  000F72  501C               	movf	i2printf@c,w,c
  5099                           
  5100                           ; Switch size 1, requested type "space"
  5101                           ; Number of cases is 4, Range of values is 0 to 120
  5102                           ; switch strategies available:
  5103                           ; Name         Instructions Cycles
  5104                           ; simple_byte           13     7 (average)
  5105                           ;	Chosen strategy is simple_byte
  5106  000F74  0A00               	xorlw	0	; case 0
  5107  000F76  B4D8               	btfsc	status,2,c
  5108  000F78  0012               	return	
  5109  000F7A  0A58               	xorlw	88	; case 88
  5110  000F7C  B4D8               	btfsc	status,2,c
  5111  000F7E  D7EB               	goto	i2l2312
  5112  000F80  0A2D               	xorlw	45	; case 117
  5113  000F82  B4D8               	btfsc	status,2,c
  5114  000F84  D7EA               	goto	i2l2314
  5115  000F86  0A0D               	xorlw	13	; case 120
  5116  000F88  B4D8               	btfsc	status,2,c
  5117  000F8A  D7E5               	goto	i2l2312
  5118  000F8C  D0CD               	goto	i2l2390
  5119  000F8E                     i2l2320:
  5120                           
  5121                           ;doprnt.c: 1273: {
  5122                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5123  000F8E  C014  FFD9         	movff	i2printf@ap,fsr2l
  5124  000F92  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  5125  000F96  CFDE F018          	movff	postinc2,i2printf@val
  5126  000F9A  CFDD F019          	movff	postdec2,i2printf@val+1
  5127  000F9E  0E02               	movlw	2
  5128  000FA0  2614               	addwf	i2printf@ap,f,c
  5129  000FA2  0E00               	movlw	0
  5130  000FA4  2215               	addwfc	i2printf@ap+1,f,c
  5131                           
  5132                           ;doprnt.c: 1287: }
  5133                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  5134  000FA6  D030               	goto	i2l2354
  5135  000FA8                     i2l2324:
  5136                           
  5137                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5138  000FA8  0E01               	movlw	1
  5139  000FAA  6E1C               	movwf	i2printf@c,c
  5140  000FAC                     i2l2326:
  5141  000FAC  0E05               	movlw	5
  5142  000FAE  181C               	xorwf	i2printf@c,w,c
  5143  000FB0  B4D8               	btfsc	status,2,c
  5144  000FB2  D032               	goto	i2l2356
  5145                           
  5146                           ;doprnt.c: 1306: if(val < dpowers[c])
  5147  000FB4  501C               	movf	i2printf@c,w,c
  5148  000FB6  0D02               	mullw	2
  5149  000FB8  0E01               	movlw	low _dpowers
  5150  000FBA  24F3               	addwf	prodl,w,c
  5151  000FBC  6EF6               	movwf	tblptrl,c
  5152  000FBE  0E08               	movlw	high _dpowers
  5153  000FC0  20F4               	addwfc	prodh,w,c
  5154  000FC2  6EF7               	movwf	tblptrh,c
  5155  000FC4                     	if	0	;There are less than 3 active tblptr bytes
  5156  000FC4                     	endif
  5157  000FC4  0009               	tblrd		*+
  5158  000FC6  50F5               	movf	tablat,w,c
  5159  000FC8  5C18               	subwf	i2printf@val,w,c
  5160  000FCA  0009               	tblrd		*+
  5161  000FCC  50F5               	movf	tablat,w,c
  5162  000FCE  5819               	subwfb	i2printf@val+1,w,c
  5163  000FD0  A0D8               	btfss	status,0,c
  5164  000FD2  D022               	goto	i2l2356
  5165                           
  5166                           ;doprnt.c: 1307: break;
  5167  000FD4  2A1C               	incf	i2printf@c,f,c
  5168  000FD6  D7EA               	goto	i2l2326
  5169  000FD8                     i2l2338:
  5170                           
  5171                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5172  000FD8  0E01               	movlw	1
  5173  000FDA  6E1C               	movwf	i2printf@c,c
  5174  000FDC                     i2l2340:
  5175  000FDC  0E04               	movlw	4
  5176  000FDE  181C               	xorwf	i2printf@c,w,c
  5177  000FE0  B4D8               	btfsc	status,2,c
  5178  000FE2  D01A               	goto	i2l2356
  5179                           
  5180                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5181  000FE4  501C               	movf	i2printf@c,w,c
  5182  000FE6  0D02               	mullw	2
  5183  000FE8  0E0B               	movlw	low _hexpowers
  5184  000FEA  24F3               	addwf	prodl,w,c
  5185  000FEC  6EF6               	movwf	tblptrl,c
  5186  000FEE  0E08               	movlw	high _hexpowers
  5187  000FF0  20F4               	addwfc	prodh,w,c
  5188  000FF2  6EF7               	movwf	tblptrh,c
  5189  000FF4                     	if	0	;There are less than 3 active tblptr bytes
  5190  000FF4                     	endif
  5191  000FF4  0009               	tblrd		*+
  5192  000FF6  50F5               	movf	tablat,w,c
  5193  000FF8  5C18               	subwf	i2printf@val,w,c
  5194  000FFA  0009               	tblrd		*+
  5195  000FFC  50F5               	movf	tablat,w,c
  5196  000FFE  5819               	subwfb	i2printf@val+1,w,c
  5197  001000  A0D8               	btfss	status,0,c
  5198  001002  D00A               	goto	i2l2356
  5199                           
  5200                           ;doprnt.c: 1318: break;
  5201  001004  2A1C               	incf	i2printf@c,f,c
  5202  001006  D7EA               	goto	i2l2340
  5203  001008                     i2l2354:
  5204  001008  5017               	movf	i2printf@flag,w,c
  5205  00100A  0BC0               	andlw	192
  5206                           
  5207                           ; Switch size 1, requested type "space"
  5208                           ; Number of cases is 2, Range of values is 128 to 192
  5209                           ; switch strategies available:
  5210                           ; Name         Instructions Cycles
  5211                           ; simple_byte            7     4 (average)
  5212                           ;	Chosen strategy is simple_byte
  5213  00100C  0A80               	xorlw	128	; case 128
  5214  00100E  B4D8               	btfsc	status,2,c
  5215  001010  D7E3               	goto	i2l2338
  5216  001012  0A40               	xorlw	64	; case 192
  5217  001014  B4D8               	btfsc	status,2,c
  5218  001016  D7C8               	goto	i2l2324
  5219  001018                     i2l2356:
  5220                           
  5221                           ;doprnt.c: 1381: if(width > c)
  5222  001018  0E80               	movlw	128
  5223  00101A  BE1C               	btfsc	i2printf@c,7,c
  5224  00101C  0E7F               	movlw	127
  5225  00101E  6E0F               	movwf	??i2_printf& (0+255),c
  5226  001020  501A               	movf	i2printf@width,w,c
  5227  001022  5C1C               	subwf	i2printf@c,w,c
  5228  001024  501B               	movf	i2printf@width+1,w,c
  5229  001026  0A80               	xorlw	128
  5230  001028  580F               	subwfb	??i2_printf& (0+255),w,c
  5231  00102A  B0D8               	btfsc	status,0,c
  5232  00102C  D007               	goto	i2l2360
  5233                           
  5234                           ;doprnt.c: 1382: width -= c;
  5235  00102E  501C               	movf	i2printf@c,w,c
  5236  001030  5E1A               	subwf	i2printf@width,f,c
  5237  001032  0E00               	movlw	0
  5238  001034  BE1C               	btfsc	i2printf@c,7,c
  5239  001036  0EFF               	movlw	255
  5240  001038  5A1B               	subwfb	i2printf@width+1,f,c
  5241  00103A  D004               	goto	i2l2362
  5242  00103C                     i2l2360:
  5243                           
  5244                           ;doprnt.c: 1383: else
  5245                           ;doprnt.c: 1384: width = 0;
  5246  00103C  0E00               	movlw	0
  5247  00103E  6E1B               	movwf	i2printf@width+1,c
  5248  001040  0E00               	movlw	0
  5249  001042  6E1A               	movwf	i2printf@width,c
  5250  001044                     i2l2362:
  5251                           
  5252                           ;doprnt.c: 1387: if(flag & 0x04) {
  5253  001044  A417               	btfss	i2printf@flag,2,c
  5254  001046  D00B               	goto	i2l2370
  5255  001048                     
  5256                           ;doprnt.c: 1415: if(width)
  5257  001048  501A               	movf	i2printf@width,w,c
  5258  00104A  101B               	iorwf	i2printf@width+1,w,c
  5259  00104C  B4D8               	btfsc	status,2,c
  5260  00104E  D015               	goto	i2l387
  5261                           
  5262                           ;doprnt.c: 1417: (putch('0') );
  5263                           
  5264                           ;doprnt.c: 1416: do
  5265  001050  0E30               	movlw	48
  5266  001052  ECCE  F00C         	call	i2_putch
  5267                           
  5268                           ;doprnt.c: 1418: while(--width);
  5269  001056  061A               	decf	i2printf@width,f,c
  5270  001058  A0D8               	btfss	status,0,c
  5271  00105A  061B               	decf	i2printf@width+1,f,c
  5272  00105C  D7F5               	goto	L7
  5273  00105E                     i2l2370:
  5274                           
  5275                           ;doprnt.c: 1422: {
  5276                           ;doprnt.c: 1424: if(width
  5277                           ;doprnt.c: 1428: )
  5278  00105E  501A               	movf	i2printf@width,w,c
  5279  001060  101B               	iorwf	i2printf@width+1,w,c
  5280  001062  B4D8               	btfsc	status,2,c
  5281  001064  D00A               	goto	i2l387
  5282  001066                     i2l2372:
  5283                           
  5284                           ;doprnt.c: 1430: (putch(' ') );
  5285  001066  0E20               	movlw	32
  5286  001068  ECCE  F00C         	call	i2_putch
  5287                           
  5288                           ;doprnt.c: 1431: while(--width);
  5289  00106C  061A               	decf	i2printf@width,f,c
  5290  00106E  A0D8               	btfss	status,0,c
  5291  001070  061B               	decf	i2printf@width+1,f,c
  5292  001072  501A               	movf	i2printf@width,w,c
  5293  001074  101B               	iorwf	i2printf@width+1,w,c
  5294  001076  A4D8               	btfss	status,2,c
  5295  001078  D7F6               	goto	i2l2372
  5296  00107A                     i2l387:
  5297                           
  5298                           ;doprnt.c: 1469: }
  5299                           ;doprnt.c: 1472: prec = c;
  5300  00107A  C01C  F016         	movff	i2printf@c,i2printf@prec
  5301                           
  5302                           ;doprnt.c: 1474: while(prec--) {
  5303  00107E  D050               	goto	i2l2388
  5304  001080                     i2l2376:
  5305                           
  5306                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5307  001080  5016               	movf	i2printf@prec,w,c
  5308  001082  0D02               	mullw	2
  5309  001084  0E01               	movlw	low _dpowers
  5310  001086  24F3               	addwf	prodl,w,c
  5311  001088  6EF6               	movwf	tblptrl,c
  5312  00108A  0E08               	movlw	high _dpowers
  5313  00108C  20F4               	addwfc	prodh,w,c
  5314  00108E  6EF7               	movwf	tblptrh,c
  5315  001090                     	if	0	;There are less than 3 active tblptr bytes
  5316  001090                     	endif
  5317  001090  0009               	tblrd		*+
  5318  001092  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  5319  001096  000A               	tblrd		*-
  5320  001098  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  5321  00109C  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  5322  0010A0  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  5323  0010A4  EC89  F00B         	call	i2___lwdiv	;wreg free
  5324  0010A8  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  5325  0010AC  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  5326  0010B0  0E00               	movlw	0
  5327  0010B2  6E0B               	movwf	i2___lwmod@divisor+1,c
  5328  0010B4  0E0A               	movlw	10
  5329  0010B6  6E0A               	movwf	i2___lwmod@divisor,c
  5330  0010B8  ECD9  F00B         	call	i2___lwmod	;wreg free
  5331  0010BC  5008               	movf	?i2___lwmod,w,c
  5332  0010BE  0F30               	addlw	48
  5333  0010C0  6E1C               	movwf	i2printf@c,c
  5334                           
  5335                           ;doprnt.c: 1491: break;
  5336  0010C2  D02B               	goto	i2l2386
  5337  0010C4                     i2l2378:
  5338                           
  5339                           ;doprnt.c: 1499: {
  5340                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5341  0010C4  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  5342  0010C8  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  5343  0010CC  5016               	movf	i2printf@prec,w,c
  5344  0010CE  0D02               	mullw	2
  5345  0010D0  0E0B               	movlw	low _hexpowers
  5346  0010D2  24F3               	addwf	prodl,w,c
  5347  0010D4  6EF6               	movwf	tblptrl,c
  5348  0010D6  0E08               	movlw	high _hexpowers
  5349  0010D8  20F4               	addwfc	prodh,w,c
  5350  0010DA  6EF7               	movwf	tblptrh,c
  5351  0010DC                     	if	0	;There are less than 3 active tblptr bytes
  5352  0010DC                     	endif
  5353  0010DC  0009               	tblrd		*+
  5354  0010DE  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  5355  0010E2  000A               	tblrd		*-
  5356  0010E4  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  5357  0010E8  EC89  F00B         	call	i2___lwdiv	;wreg free
  5358  0010EC  5001               	movf	?i2___lwdiv,w,c
  5359  0010EE  0B0F               	andlw	15
  5360  0010F0  6E13               	movwf	i2printf@idx,c
  5361                           
  5362                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  5363  0010F2  5013               	movf	i2printf@idx,w,c
  5364  0010F4  0D01               	mullw	1
  5365  0010F6  0E39               	movlw	low STR_4
  5366  0010F8  24F3               	addwf	prodl,w,c
  5367  0010FA  6EF6               	movwf	tblptrl,c
  5368  0010FC  0E08               	movlw	high STR_4
  5369  0010FE  20F4               	addwfc	prodh,w,c
  5370  001100  6EF7               	movwf	tblptrh,c
  5371  001102                     	if	0	;There are less than 3 active tblptr bytes
  5372  001102                     	endif
  5373  001102  0008               	tblrd		*
  5374  001104  CFF5 F01C          	movff	tablat,i2printf@c
  5375                           
  5376                           ;doprnt.c: 1523: }
  5377                           
  5378                           ;doprnt.c: 1508: }
  5379                           ;doprnt.c: 1510: break;
  5380  001108  D008               	goto	i2l2386
  5381  00110A                     i2l2384:
  5382  00110A  5017               	movf	i2printf@flag,w,c
  5383  00110C  0BC0               	andlw	192
  5384                           
  5385                           ; Switch size 1, requested type "space"
  5386                           ; Number of cases is 2, Range of values is 128 to 192
  5387                           ; switch strategies available:
  5388                           ; Name         Instructions Cycles
  5389                           ; simple_byte            7     4 (average)
  5390                           ;	Chosen strategy is simple_byte
  5391  00110E  0A80               	xorlw	128	; case 128
  5392  001110  B4D8               	btfsc	status,2,c
  5393  001112  D7D8               	goto	i2l2378
  5394  001114  0A40               	xorlw	64	; case 192
  5395  001116  B4D8               	btfsc	status,2,c
  5396  001118  D7B3               	goto	i2l2376
  5397  00111A                     i2l2386:
  5398                           
  5399                           ;doprnt.c: 1524: (putch(c) );
  5400  00111A  501C               	movf	i2printf@c,w,c
  5401  00111C  ECCE  F00C         	call	i2_putch
  5402  001120                     i2l2388:
  5403  001120  0616               	decf	i2printf@prec,f,c
  5404  001122  2816               	incf	i2printf@prec,w,c
  5405  001124  A4D8               	btfss	status,2,c
  5406  001126  D7F1               	goto	i2l2384
  5407  001128                     i2l2390:
  5408  001128  C00D  FFF6         	movff	i2printf@f,tblptrl
  5409  00112C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  5410  001130  4A0D               	infsnz	i2printf@f,f,c
  5411  001132  2A0E               	incf	i2printf@f+1,f,c
  5412  001134                     	if	0	;tblptru may be non-zero
  5413  001134                     	endif
  5414  001134                     	if	0	;tblptru may be non-zero
  5415  001134                     	endif
  5416  001134  0008               	tblrd		*
  5417  001136  CFF5 F01C          	movff	tablat,i2printf@c
  5418  00113A  501C               	movf	i2printf@c,w,c
  5419  00113C  B4D8               	btfsc	status,2,c
  5420  00113E  0012               	return	
  5421  001140  D6B2               	goto	i2l2288
  5422  001142                     __end_ofi2_printf:
  5423                           	opt stack 0
  5424                           pclatu	equ	0xFFB
  5425                           pclath	equ	0xFFA
  5426                           tblptru	equ	0xFF8
  5427                           tblptrh	equ	0xFF7
  5428                           tblptrl	equ	0xFF6
  5429                           tablat	equ	0xFF5
  5430                           prodh	equ	0xFF4
  5431                           prodl	equ	0xFF3
  5432                           intcon	equ	0xFF2
  5433                           intcon2	equ	0xFF1
  5434                           postinc0	equ	0xFEE
  5435                           fsr0h	equ	0xFEA
  5436                           fsr0l	equ	0xFE9
  5437                           wreg	equ	0xFE8
  5438                           postdec1	equ	0xFE5
  5439                           fsr1h	equ	0xFE2
  5440                           fsr1l	equ	0xFE1
  5441                           indf2	equ	0xFDF
  5442                           postinc2	equ	0xFDE
  5443                           postdec2	equ	0xFDD
  5444                           fsr2h	equ	0xFDA
  5445                           fsr2l	equ	0xFD9
  5446                           status	equ	0xFD8
  5447                           
  5448 ;; *************** function i2_putch *****************
  5449 ;; Defined at:
  5450 ;;		line 46 in file "usart.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;  byte            1    wreg     unsigned char 
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;  byte            1    0[COMRAM] unsigned char 
  5455 ;; Return value:  Size  Location     Type
  5456 ;;		None               void
  5457 ;; Registers used:
  5458 ;;		wreg
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5464 ;;      Params:         0       0       0       0       0       0       0       0       0
  5465 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5466 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5467 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5468 ;;Total ram usage:        1 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; This function calls:
  5471 ;;		Nothing
  5472 ;; This function is called by:
  5473 ;;		i2_printf
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           	psect	text29
  5478  00199C                     __ptext29:
  5479                           	opt stack 0
  5480  00199C                     i2_putch:
  5481                           	opt stack 26
  5482                           
  5483                           ;incstack = 0
  5484                           ;i2putch@byte stored from wreg
  5485  00199C  6E01               	movwf	i2putch@byte,c
  5486  00199E                     i2l324:
  5487  00199E  A89E               	btfss	3998,4,c	;volatile
  5488  0019A0  D7FE               	goto	i2l324
  5489                           
  5490                           ;usart.c: 50: TXREG = byte;
  5491  0019A2  C001  FFAD         	movff	i2putch@byte,4013	;volatile
  5492  0019A6  0012               	return		;funcret
  5493  0019A8                     __end_ofi2_putch:
  5494                           	opt stack 0
  5495                           pclatu	equ	0xFFB
  5496                           pclath	equ	0xFFA
  5497                           tblptru	equ	0xFF8
  5498                           tblptrh	equ	0xFF7
  5499                           tblptrl	equ	0xFF6
  5500                           tablat	equ	0xFF5
  5501                           prodh	equ	0xFF4
  5502                           prodl	equ	0xFF3
  5503                           intcon	equ	0xFF2
  5504                           intcon2	equ	0xFF1
  5505                           postinc0	equ	0xFEE
  5506                           fsr0h	equ	0xFEA
  5507                           fsr0l	equ	0xFE9
  5508                           wreg	equ	0xFE8
  5509                           postdec1	equ	0xFE5
  5510                           fsr1h	equ	0xFE2
  5511                           fsr1l	equ	0xFE1
  5512                           indf2	equ	0xFDF
  5513                           postinc2	equ	0xFDE
  5514                           postdec2	equ	0xFDD
  5515                           fsr2h	equ	0xFDA
  5516                           fsr2l	equ	0xFD9
  5517                           status	equ	0xFD8
  5518                           
  5519 ;; *************** function i2_isdigit *****************
  5520 ;; Defined at:
  5521 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  5522 ;; Parameters:    Size  Location     Type
  5523 ;;  c               1    wreg     unsigned char 
  5524 ;; Auto vars:     Size  Location     Type
  5525 ;;  c               1    2[COMRAM] unsigned char 
  5526 ;; Return value:  Size  Location     Type
  5527 ;;		None               void
  5528 ;; Registers used:
  5529 ;;		wreg, status,2, status,0
  5530 ;; Tracked objects:
  5531 ;;		On entry : 0/0
  5532 ;;		On exit  : 0/0
  5533 ;;		Unchanged: 0/0
  5534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5535 ;;      Params:         0       0       0       0       0       0       0       0       0
  5536 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5537 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5538 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5539 ;;Total ram usage:        3 bytes
  5540 ;; Hardware stack levels used:    1
  5541 ;; This function calls:
  5542 ;;		Nothing
  5543 ;; This function is called by:
  5544 ;;		i2_printf
  5545 ;; This function uses a non-reentrant model
  5546 ;;
  5547                           
  5548                           	psect	text30
  5549  0018CA                     __ptext30:
  5550                           	opt stack 0
  5551  0018CA                     i2_isdigit:
  5552                           	opt stack 26
  5553                           
  5554                           ;incstack = 0
  5555                           ;i2isdigit@c stored from wreg
  5556  0018CA  6E03               	movwf	i2isdigit@c,c
  5557  0018CC  0E00               	movlw	0
  5558  0018CE  6E02               	movwf	i2_isdigit$1394,c
  5559  0018D0  0E3A               	movlw	58
  5560  0018D2  6003               	cpfslt	i2isdigit@c,c
  5561  0018D4  D005               	goto	i2l1936
  5562  0018D6  0E2F               	movlw	47
  5563  0018D8  6403               	cpfsgt	i2isdigit@c,c
  5564  0018DA  D002               	goto	i2l1936
  5565  0018DC  0E01               	movlw	1
  5566  0018DE  6E02               	movwf	i2_isdigit$1394,c
  5567  0018E0                     i2l1936:
  5568  0018E0  C002  F001         	movff	i2_isdigit$1394,??i2_isdigit
  5569  0018E4  3001               	rrcf	??i2_isdigit,w,c
  5570  0018E6  0012               	return	
  5571  0018E8                     __end_ofi2_isdigit:
  5572                           	opt stack 0
  5573                           pclatu	equ	0xFFB
  5574                           pclath	equ	0xFFA
  5575                           tblptru	equ	0xFF8
  5576                           tblptrh	equ	0xFF7
  5577                           tblptrl	equ	0xFF6
  5578                           tablat	equ	0xFF5
  5579                           prodh	equ	0xFF4
  5580                           prodl	equ	0xFF3
  5581                           intcon	equ	0xFF2
  5582                           intcon2	equ	0xFF1
  5583                           postinc0	equ	0xFEE
  5584                           fsr0h	equ	0xFEA
  5585                           fsr0l	equ	0xFE9
  5586                           wreg	equ	0xFE8
  5587                           postdec1	equ	0xFE5
  5588                           fsr1h	equ	0xFE2
  5589                           fsr1l	equ	0xFE1
  5590                           indf2	equ	0xFDF
  5591                           postinc2	equ	0xFDE
  5592                           postdec2	equ	0xFDD
  5593                           fsr2h	equ	0xFDA
  5594                           fsr2l	equ	0xFD9
  5595                           status	equ	0xFD8
  5596                           
  5597 ;; *************** function i2___wmul *****************
  5598 ;; Defined at:
  5599 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5600 ;; Parameters:    Size  Location     Type
  5601 ;;  multiplier      2    0[COMRAM] unsigned int 
  5602 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5603 ;; Auto vars:     Size  Location     Type
  5604 ;;  __wmul          2    4[COMRAM] unsigned int 
  5605 ;; Return value:  Size  Location     Type
  5606 ;;                  2    0[COMRAM] unsigned int 
  5607 ;; Registers used:
  5608 ;;		wreg, status,2, status,0, prodl, prodh
  5609 ;; Tracked objects:
  5610 ;;		On entry : 0/0
  5611 ;;		On exit  : 0/0
  5612 ;;		Unchanged: 0/0
  5613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5614 ;;      Params:         4       0       0       0       0       0       0       0       0
  5615 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5616 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5617 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5618 ;;Total ram usage:        6 bytes
  5619 ;; Hardware stack levels used:    1
  5620 ;; This function calls:
  5621 ;;		Nothing
  5622 ;; This function is called by:
  5623 ;;		i2_printf
  5624 ;; This function uses a non-reentrant model
  5625 ;;
  5626                           
  5627                           	psect	text31
  5628  001882                     __ptext31:
  5629                           	opt stack 0
  5630  001882                     i2___wmul:
  5631                           	opt stack 26
  5632                           
  5633                           ;incstack = 0
  5634  001882  5001               	movf	i2___wmul@multiplier,w,c
  5635  001884  0203               	mulwf	i2___wmul@multiplicand,c
  5636  001886  CFF3 F005          	movff	prodl,i2___wmul@product
  5637  00188A  CFF4 F006          	movff	prodh,i2___wmul@product+1
  5638  00188E  5001               	movf	i2___wmul@multiplier,w,c
  5639  001890  0204               	mulwf	i2___wmul@multiplicand+1,c
  5640  001892  50F3               	movf	prodl,w,c
  5641  001894  2606               	addwf	i2___wmul@product+1,f,c
  5642  001896  5002               	movf	i2___wmul@multiplier+1,w,c
  5643  001898  0203               	mulwf	i2___wmul@multiplicand,c
  5644  00189A  50F3               	movf	prodl,w,c
  5645  00189C  2606               	addwf	i2___wmul@product+1,f,c
  5646  00189E  C005  F001         	movff	i2___wmul@product,?i2___wmul
  5647  0018A2  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  5648  0018A6  0012               	return	
  5649  0018A8                     __end_ofi2___wmul:
  5650                           	opt stack 0
  5651                           pclatu	equ	0xFFB
  5652                           pclath	equ	0xFFA
  5653                           tblptru	equ	0xFF8
  5654                           tblptrh	equ	0xFF7
  5655                           tblptrl	equ	0xFF6
  5656                           tablat	equ	0xFF5
  5657                           prodh	equ	0xFF4
  5658                           prodl	equ	0xFF3
  5659                           intcon	equ	0xFF2
  5660                           intcon2	equ	0xFF1
  5661                           postinc0	equ	0xFEE
  5662                           fsr0h	equ	0xFEA
  5663                           fsr0l	equ	0xFE9
  5664                           wreg	equ	0xFE8
  5665                           postdec1	equ	0xFE5
  5666                           fsr1h	equ	0xFE2
  5667                           fsr1l	equ	0xFE1
  5668                           indf2	equ	0xFDF
  5669                           postinc2	equ	0xFDE
  5670                           postdec2	equ	0xFDD
  5671                           fsr2h	equ	0xFDA
  5672                           fsr2l	equ	0xFD9
  5673                           status	equ	0xFD8
  5674                           
  5675 ;; *************** function i2___lwmod *****************
  5676 ;; Defined at:
  5677 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5678 ;; Parameters:    Size  Location     Type
  5679 ;;  dividend        2    7[COMRAM] unsigned int 
  5680 ;;  divisor         2    9[COMRAM] unsigned int 
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;  __lwmod         1   11[COMRAM] unsigned char 
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  2    7[COMRAM] unsigned int 
  5685 ;; Registers used:
  5686 ;;		wreg, status,2, status,0
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5692 ;;      Params:         4       0       0       0       0       0       0       0       0
  5693 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5694 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5695 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5696 ;;Total ram usage:        5 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; This function calls:
  5699 ;;		Nothing
  5700 ;; This function is called by:
  5701 ;;		i2_printf
  5702 ;; This function uses a non-reentrant model
  5703 ;;
  5704                           
  5705                           	psect	text32
  5706  0017B2                     __ptext32:
  5707                           	opt stack 0
  5708  0017B2                     i2___lwmod:
  5709                           	opt stack 26
  5710                           
  5711                           ;incstack = 0
  5712  0017B2  500A               	movf	i2___lwmod@divisor,w,c
  5713  0017B4  100B               	iorwf	i2___lwmod@divisor+1,w,c
  5714  0017B6  B4D8               	btfsc	status,2,c
  5715  0017B8  D018               	goto	i2l817
  5716  0017BA  0E01               	movlw	1
  5717  0017BC  6E0C               	movwf	i2___lwmod@counter,c
  5718  0017BE  D004               	goto	i2l1968
  5719  0017C0                     i2l1966:
  5720  0017C0  90D8               	bcf	status,0,c
  5721  0017C2  360A               	rlcf	i2___lwmod@divisor,f,c
  5722  0017C4  360B               	rlcf	i2___lwmod@divisor+1,f,c
  5723  0017C6  2A0C               	incf	i2___lwmod@counter,f,c
  5724  0017C8                     i2l1968:
  5725  0017C8  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  5726  0017CA  D7FA               	goto	i2l1966
  5727  0017CC                     i2l1970:
  5728  0017CC  500A               	movf	i2___lwmod@divisor,w,c
  5729  0017CE  5C08               	subwf	i2___lwmod@dividend,w,c
  5730  0017D0  500B               	movf	i2___lwmod@divisor+1,w,c
  5731  0017D2  5809               	subwfb	i2___lwmod@dividend+1,w,c
  5732  0017D4  A0D8               	btfss	status,0,c
  5733  0017D6  D004               	goto	i2l1974
  5734  0017D8  500A               	movf	i2___lwmod@divisor,w,c
  5735  0017DA  5E08               	subwf	i2___lwmod@dividend,f,c
  5736  0017DC  500B               	movf	i2___lwmod@divisor+1,w,c
  5737  0017DE  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  5738  0017E0                     i2l1974:
  5739  0017E0  90D8               	bcf	status,0,c
  5740  0017E2  320B               	rrcf	i2___lwmod@divisor+1,f,c
  5741  0017E4  320A               	rrcf	i2___lwmod@divisor,f,c
  5742  0017E6  2E0C               	decfsz	i2___lwmod@counter,f,c
  5743  0017E8  D7F1               	goto	i2l1970
  5744  0017EA                     i2l817:
  5745  0017EA  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  5746  0017EE  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  5747  0017F2  0012               	return		;funcret
  5748  0017F4                     __end_ofi2___lwmod:
  5749                           	opt stack 0
  5750                           pclatu	equ	0xFFB
  5751                           pclath	equ	0xFFA
  5752                           tblptru	equ	0xFF8
  5753                           tblptrh	equ	0xFF7
  5754                           tblptrl	equ	0xFF6
  5755                           tablat	equ	0xFF5
  5756                           prodh	equ	0xFF4
  5757                           prodl	equ	0xFF3
  5758                           intcon	equ	0xFF2
  5759                           intcon2	equ	0xFF1
  5760                           postinc0	equ	0xFEE
  5761                           fsr0h	equ	0xFEA
  5762                           fsr0l	equ	0xFE9
  5763                           wreg	equ	0xFE8
  5764                           postdec1	equ	0xFE5
  5765                           fsr1h	equ	0xFE2
  5766                           fsr1l	equ	0xFE1
  5767                           indf2	equ	0xFDF
  5768                           postinc2	equ	0xFDE
  5769                           postdec2	equ	0xFDD
  5770                           fsr2h	equ	0xFDA
  5771                           fsr2l	equ	0xFD9
  5772                           status	equ	0xFD8
  5773                           
  5774 ;; *************** function i2___lwdiv *****************
  5775 ;; Defined at:
  5776 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5777 ;; Parameters:    Size  Location     Type
  5778 ;;  dividend        2    0[COMRAM] unsigned int 
  5779 ;;  divisor         2    2[COMRAM] unsigned int 
  5780 ;; Auto vars:     Size  Location     Type
  5781 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  5782 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  5783 ;; Return value:  Size  Location     Type
  5784 ;;                  2    0[COMRAM] unsigned int 
  5785 ;; Registers used:
  5786 ;;		wreg, status,2, status,0
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : 0/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5792 ;;      Params:         4       0       0       0       0       0       0       0       0
  5793 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5794 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5795 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5796 ;;Total ram usage:        7 bytes
  5797 ;; Hardware stack levels used:    1
  5798 ;; This function calls:
  5799 ;;		Nothing
  5800 ;; This function is called by:
  5801 ;;		i2_printf
  5802 ;; This function uses a non-reentrant model
  5803 ;;
  5804                           
  5805                           	psect	text33
  5806  001712                     __ptext33:
  5807                           	opt stack 0
  5808  001712                     i2___lwdiv:
  5809                           	opt stack 26
  5810                           
  5811                           ;incstack = 0
  5812  001712  0E00               	movlw	0
  5813  001714  6E06               	movwf	i2___lwdiv@quotient+1,c
  5814  001716  0E00               	movlw	0
  5815  001718  6E05               	movwf	i2___lwdiv@quotient,c
  5816  00171A  5003               	movf	i2___lwdiv@divisor,w,c
  5817  00171C  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  5818  00171E  B4D8               	btfsc	status,2,c
  5819  001720  D01C               	goto	i2l807
  5820  001722  0E01               	movlw	1
  5821  001724  6E07               	movwf	i2___lwdiv@counter,c
  5822  001726  D004               	goto	i2l1948
  5823  001728                     i2l1946:
  5824  001728  90D8               	bcf	status,0,c
  5825  00172A  3603               	rlcf	i2___lwdiv@divisor,f,c
  5826  00172C  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  5827  00172E  2A07               	incf	i2___lwdiv@counter,f,c
  5828  001730                     i2l1948:
  5829  001730  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  5830  001732  D7FA               	goto	i2l1946
  5831  001734                     i2l1950:
  5832  001734  90D8               	bcf	status,0,c
  5833  001736  3605               	rlcf	i2___lwdiv@quotient,f,c
  5834  001738  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  5835  00173A  5003               	movf	i2___lwdiv@divisor,w,c
  5836  00173C  5C01               	subwf	i2___lwdiv@dividend,w,c
  5837  00173E  5004               	movf	i2___lwdiv@divisor+1,w,c
  5838  001740  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  5839  001742  A0D8               	btfss	status,0,c
  5840  001744  D005               	goto	i2l1958
  5841  001746  5003               	movf	i2___lwdiv@divisor,w,c
  5842  001748  5E01               	subwf	i2___lwdiv@dividend,f,c
  5843  00174A  5004               	movf	i2___lwdiv@divisor+1,w,c
  5844  00174C  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  5845  00174E  8005               	bsf	i2___lwdiv@quotient,0,c
  5846  001750                     i2l1958:
  5847  001750  90D8               	bcf	status,0,c
  5848  001752  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  5849  001754  3203               	rrcf	i2___lwdiv@divisor,f,c
  5850  001756  2E07               	decfsz	i2___lwdiv@counter,f,c
  5851  001758  D7ED               	goto	i2l1950
  5852  00175A                     i2l807:
  5853  00175A  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  5854  00175E  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  5855  001762  0012               	return		;funcret
  5856  001764                     __end_ofi2___lwdiv:
  5857                           	opt stack 0
  5858                           pclatu	equ	0xFFB
  5859                           pclath	equ	0xFFA
  5860                           tblptru	equ	0xFF8
  5861                           tblptrh	equ	0xFF7
  5862                           tblptrl	equ	0xFF6
  5863                           tablat	equ	0xFF5
  5864                           prodh	equ	0xFF4
  5865                           prodl	equ	0xFF3
  5866                           intcon	equ	0xFF2
  5867                           intcon2	equ	0xFF1
  5868                           postinc0	equ	0xFEE
  5869                           fsr0h	equ	0xFEA
  5870                           fsr0l	equ	0xFE9
  5871                           wreg	equ	0xFE8
  5872                           postdec1	equ	0xFE5
  5873                           fsr1h	equ	0xFE2
  5874                           fsr1l	equ	0xFE1
  5875                           indf2	equ	0xFDF
  5876                           postinc2	equ	0xFDE
  5877                           postdec2	equ	0xFDD
  5878                           fsr2h	equ	0xFDA
  5879                           fsr2l	equ	0xFD9
  5880                           status	equ	0xFD8
  5881                           
  5882 ;; *************** function i2___awmod *****************
  5883 ;; Defined at:
  5884 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  dividend        2    0[COMRAM] int 
  5887 ;;  divisor         2    2[COMRAM] int 
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;  __awmod         1    5[COMRAM] unsigned char 
  5890 ;;  __awmod         1    4[COMRAM] unsigned char 
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  2    0[COMRAM] int 
  5893 ;; Registers used:
  5894 ;;		wreg, status,2, status,0
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5900 ;;      Params:         4       0       0       0       0       0       0       0       0
  5901 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5902 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5903 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5904 ;;Total ram usage:        6 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; This function calls:
  5907 ;;		Nothing
  5908 ;; This function is called by:
  5909 ;;		_interruptions
  5910 ;; This function uses a non-reentrant model
  5911 ;;
  5912                           
  5913                           	psect	text34
  5914  001514                     __ptext34:
  5915                           	opt stack 0
  5916  001514                     i2___awmod:
  5917                           	opt stack 27
  5918                           
  5919                           ;incstack = 0
  5920  001514  0E00               	movlw	0
  5921  001516  6E06               	movwf	i2___awmod@sign,c
  5922  001518  AE02               	btfss	i2___awmod@dividend+1,7,c
  5923  00151A  D006               	goto	i2l2400
  5924  00151C  6C01               	negf	i2___awmod@dividend,c
  5925  00151E  1E02               	comf	i2___awmod@dividend+1,f,c
  5926  001520  B0D8               	btfsc	status,0,c
  5927  001522  2A02               	incf	i2___awmod@dividend+1,f,c
  5928  001524  0E01               	movlw	1
  5929  001526  6E06               	movwf	i2___awmod@sign,c
  5930  001528                     i2l2400:
  5931  001528  AE04               	btfss	i2___awmod@divisor+1,7,c
  5932  00152A  D004               	goto	i2l2404
  5933  00152C  6C03               	negf	i2___awmod@divisor,c
  5934  00152E  1E04               	comf	i2___awmod@divisor+1,f,c
  5935  001530  B0D8               	btfsc	status,0,c
  5936  001532  2A04               	incf	i2___awmod@divisor+1,f,c
  5937  001534                     i2l2404:
  5938  001534  5003               	movf	i2___awmod@divisor,w,c
  5939  001536  1004               	iorwf	i2___awmod@divisor+1,w,c
  5940  001538  B4D8               	btfsc	status,2,c
  5941  00153A  D018               	goto	i2l2420
  5942  00153C  0E01               	movlw	1
  5943  00153E  6E05               	movwf	i2___awmod@counter,c
  5944  001540  D004               	goto	i2l2410
  5945  001542                     i2l2408:
  5946  001542  90D8               	bcf	status,0,c
  5947  001544  3603               	rlcf	i2___awmod@divisor,f,c
  5948  001546  3604               	rlcf	i2___awmod@divisor+1,f,c
  5949  001548  2A05               	incf	i2___awmod@counter,f,c
  5950  00154A                     i2l2410:
  5951  00154A  AE04               	btfss	i2___awmod@divisor+1,7,c
  5952  00154C  D7FA               	goto	i2l2408
  5953  00154E                     i2l2412:
  5954  00154E  5003               	movf	i2___awmod@divisor,w,c
  5955  001550  5C01               	subwf	i2___awmod@dividend,w,c
  5956  001552  5004               	movf	i2___awmod@divisor+1,w,c
  5957  001554  5802               	subwfb	i2___awmod@dividend+1,w,c
  5958  001556  A0D8               	btfss	status,0,c
  5959  001558  D004               	goto	i2l2416
  5960  00155A  5003               	movf	i2___awmod@divisor,w,c
  5961  00155C  5E01               	subwf	i2___awmod@dividend,f,c
  5962  00155E  5004               	movf	i2___awmod@divisor+1,w,c
  5963  001560  5A02               	subwfb	i2___awmod@dividend+1,f,c
  5964  001562                     i2l2416:
  5965  001562  90D8               	bcf	status,0,c
  5966  001564  3204               	rrcf	i2___awmod@divisor+1,f,c
  5967  001566  3203               	rrcf	i2___awmod@divisor,f,c
  5968  001568  2E05               	decfsz	i2___awmod@counter,f,c
  5969  00156A  D7F1               	goto	i2l2412
  5970  00156C                     i2l2420:
  5971  00156C  5006               	movf	i2___awmod@sign,w,c
  5972  00156E  B4D8               	btfsc	status,2,c
  5973  001570  D004               	goto	i2l2424
  5974  001572  6C01               	negf	i2___awmod@dividend,c
  5975  001574  1E02               	comf	i2___awmod@dividend+1,f,c
  5976  001576  B0D8               	btfsc	status,0,c
  5977  001578  2A02               	incf	i2___awmod@dividend+1,f,c
  5978  00157A                     i2l2424:
  5979  00157A  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  5980  00157E  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  5981  001582  0012               	return	
  5982  001584                     __end_ofi2___awmod:
  5983                           	opt stack 0
  5984                           pclatu	equ	0xFFB
  5985                           pclath	equ	0xFFA
  5986                           tblptru	equ	0xFF8
  5987                           tblptrh	equ	0xFF7
  5988                           tblptrl	equ	0xFF6
  5989                           tablat	equ	0xFF5
  5990                           prodh	equ	0xFF4
  5991                           prodl	equ	0xFF3
  5992                           intcon	equ	0xFF2
  5993                           intcon2	equ	0xFF1
  5994                           postinc0	equ	0xFEE
  5995                           fsr0h	equ	0xFEA
  5996                           fsr0l	equ	0xFE9
  5997                           wreg	equ	0xFE8
  5998                           postdec1	equ	0xFE5
  5999                           fsr1h	equ	0xFE2
  6000                           fsr1l	equ	0xFE1
  6001                           indf2	equ	0xFDF
  6002                           postinc2	equ	0xFDE
  6003                           postdec2	equ	0xFDD
  6004                           fsr2h	equ	0xFDA
  6005                           fsr2l	equ	0xFD9
  6006                           status	equ	0xFD8
  6007                           
  6008 ;; *************** function _strcpy *****************
  6009 ;; Defined at:
  6010 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strcpy.c"
  6011 ;; Parameters:    Size  Location     Type
  6012 ;;  to              2    0[COMRAM] PTR unsigned char 
  6013 ;;		 -> string(26), 
  6014 ;;  from            2    2[COMRAM] PTR const unsigned char 
  6015 ;;		 -> string_aux(26), 
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;  cp              2    4[COMRAM] PTR unsigned char 
  6018 ;;		 -> string(26), 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  2    0[COMRAM] PTR unsigned char 
  6021 ;; Registers used:
  6022 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6028 ;;      Params:         4       0       0       0       0       0       0       0       0
  6029 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6030 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6031 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6032 ;;Total ram usage:        6 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; This function calls:
  6035 ;;		Nothing
  6036 ;; This function is called by:
  6037 ;;		_interruptions
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           	psect	text35
  6042  00182A                     __ptext35:
  6043                           	opt stack 0
  6044  00182A                     _strcpy:
  6045                           	opt stack 27
  6046                           
  6047                           ;incstack = 0
  6048  00182A  C001  F005         	movff	strcpy@to,strcpy@cp
  6049  00182E  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  6050  001832  D004               	goto	i2l2050
  6051  001834                     i2l2048:
  6052  001834  4A05               	infsnz	strcpy@cp,f,c
  6053  001836  2A06               	incf	strcpy@cp+1,f,c
  6054  001838  4A03               	infsnz	strcpy@from,f,c
  6055  00183A  2A04               	incf	strcpy@from+1,f,c
  6056  00183C                     i2l2050:
  6057  00183C  C003  FFD9         	movff	strcpy@from,fsr2l
  6058  001840  C004  FFDA         	movff	strcpy@from+1,fsr2h
  6059  001844  C005  FFE1         	movff	strcpy@cp,fsr1l
  6060  001848  C006  FFE2         	movff	strcpy@cp+1,fsr1h
  6061  00184C  CFDF FFE7          	movff	indf2,indf1
  6062  001850  50E7               	movf	indf1,w,c
  6063  001852  B4D8               	btfsc	status,2,c
  6064  001854  0012               	return	
  6065  001856  D7EE               	goto	i2l2048
  6066  001858                     __end_of_strcpy:
  6067                           	opt stack 0
  6068                           pclatu	equ	0xFFB
  6069                           pclath	equ	0xFFA
  6070                           tblptru	equ	0xFF8
  6071                           tblptrh	equ	0xFF7
  6072                           tblptrl	equ	0xFF6
  6073                           tablat	equ	0xFF5
  6074                           prodh	equ	0xFF4
  6075                           prodl	equ	0xFF3
  6076                           intcon	equ	0xFF2
  6077                           intcon2	equ	0xFF1
  6078                           postinc0	equ	0xFEE
  6079                           fsr0h	equ	0xFEA
  6080                           fsr0l	equ	0xFE9
  6081                           wreg	equ	0xFE8
  6082                           indf1	equ	0xFE7
  6083                           postdec1	equ	0xFE5
  6084                           fsr1h	equ	0xFE2
  6085                           fsr1l	equ	0xFE1
  6086                           indf2	equ	0xFDF
  6087                           postinc2	equ	0xFDE
  6088                           postdec2	equ	0xFDD
  6089                           fsr2h	equ	0xFDA
  6090                           fsr2l	equ	0xFD9
  6091                           status	equ	0xFD8
  6092                           pclatu	equ	0xFFB
  6093                           pclath	equ	0xFFA
  6094                           tblptru	equ	0xFF8
  6095                           tblptrh	equ	0xFF7
  6096                           tblptrl	equ	0xFF6
  6097                           tablat	equ	0xFF5
  6098                           prodh	equ	0xFF4
  6099                           prodl	equ	0xFF3
  6100                           intcon	equ	0xFF2
  6101                           intcon2	equ	0xFF1
  6102                           postinc0	equ	0xFEE
  6103                           fsr0h	equ	0xFEA
  6104                           fsr0l	equ	0xFE9
  6105                           wreg	equ	0xFE8
  6106                           indf1	equ	0xFE7
  6107                           postdec1	equ	0xFE5
  6108                           fsr1h	equ	0xFE2
  6109                           fsr1l	equ	0xFE1
  6110                           indf2	equ	0xFDF
  6111                           postinc2	equ	0xFDE
  6112                           postdec2	equ	0xFDD
  6113                           fsr2h	equ	0xFDA
  6114                           fsr2l	equ	0xFD9
  6115                           status	equ	0xFD8
  6116                           
  6117                           	psect	rparam
  6118  0000                     pclatu	equ	0xFFB
  6119                           pclath	equ	0xFFA
  6120                           tblptru	equ	0xFF8
  6121                           tblptrh	equ	0xFF7
  6122                           tblptrl	equ	0xFF6
  6123                           tablat	equ	0xFF5
  6124                           prodh	equ	0xFF4
  6125                           prodl	equ	0xFF3
  6126                           intcon	equ	0xFF2
  6127                           intcon2	equ	0xFF1
  6128                           postinc0	equ	0xFEE
  6129                           fsr0h	equ	0xFEA
  6130                           fsr0l	equ	0xFE9
  6131                           wreg	equ	0xFE8
  6132                           indf1	equ	0xFE7
  6133                           postdec1	equ	0xFE5
  6134                           fsr1h	equ	0xFE2
  6135                           fsr1l	equ	0xFE1
  6136                           indf2	equ	0xFDF
  6137                           postinc2	equ	0xFDE
  6138                           postdec2	equ	0xFDD
  6139                           fsr2h	equ	0xFDA
  6140                           fsr2l	equ	0xFD9
  6141                           status	equ	0xFD8
  6142                           
  6143                           	psect	temp
  6144  00004E                     btemp:
  6145                           	opt stack 0
  6146  00004E                     	ds	1
  6147  0000                     int$flags	set	btemp
  6148                           pclatu	equ	0xFFB
  6149                           pclath	equ	0xFFA
  6150                           tblptru	equ	0xFF8
  6151                           tblptrh	equ	0xFF7
  6152                           tblptrl	equ	0xFF6
  6153                           tablat	equ	0xFF5
  6154                           prodh	equ	0xFF4
  6155                           prodl	equ	0xFF3
  6156                           intcon	equ	0xFF2
  6157                           intcon2	equ	0xFF1
  6158                           postinc0	equ	0xFEE
  6159                           fsr0h	equ	0xFEA
  6160                           fsr0l	equ	0xFE9
  6161                           wreg	equ	0xFE8
  6162                           indf1	equ	0xFE7
  6163                           postdec1	equ	0xFE5
  6164                           fsr1h	equ	0xFE2
  6165                           fsr1l	equ	0xFE1
  6166                           indf2	equ	0xFDF
  6167                           postinc2	equ	0xFDE
  6168                           postdec2	equ	0xFDD
  6169                           fsr2h	equ	0xFDA
  6170                           fsr2l	equ	0xFD9
  6171                           status	equ	0xFD8


Data Sizes:
    Strings     60
    Constant    18
    Data        9
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      77
    BANK0           160     55      96
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 26
		 -> string_aux(COMRAM[26]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 26
		 -> string(BANK0[26]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 26
		 -> string(BANK0[26]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 38
		 -> STR_3(CODE[2]), STR_2(CODE[38]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 26
		 -> string(BANK0[26]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptions in COMRAM

    _interruptions->i2_printf
    i2_printf->i2___lwmod
    i2___lwmod->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_printf
    _write_RTC_I2c->_I2C_Idle
    _write_RTC_I2c->_I2C_Write_Byte
    _read_RTC_I2c->_I2C_Idle
    _read_RTC_I2c->_I2C_Write_Byte
    _rand->___lmul
    _printf->___lwmod
    ___lwmod->___lwdiv
    ___awmod->_rand

Critical Paths under _interruptions in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptions in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptions in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptions in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptions in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptions in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptions in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptions in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    5017
                                             44 BANK0     11    11      0
                     _InitI2C_Master
                            ___awmod
                           _configAD
                  _configADInterrupt
                        _configRS232
                        _configTimer
              _configUSARTInterrupts
                             _printf
                               _rand
                       _read_RTC_I2c
                       _selectChanel
                              _srand
                      _write_RTC_I2c
 ---------------------------------------------------------------------------------
 (1) _write_RTC_I2c                                        0     0      0      31
                           _I2C_Idle
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2     108
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _selectChanel                                         1     1      0     403
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_RTC_I2c                                         1     1      0      62
                                              1 BANK0      1     1      0
                           _I2C_Idle
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Byte                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Send_NACK                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Read_Byte                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Idle                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _rand                                                 2     0      2     404
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     404
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _printf                                              41    23     18    2844
                                             12 BANK0     32    14     18
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     392
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _configUSARTInterrupts                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configRS232                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configADInterrupt                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configAD                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     825
                                             14 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitI2C_Master                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _interruptions                                       16    16      0    2170
                                             28 COMRAM    16    16      0
                             _strcpy
                          i2___awmod
                           i2_printf
 ---------------------------------------------------------------------------------
 (4) i2_printf                                            25    23      2    1619
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) i2___awmod                                            6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4     203
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitI2C_Master
   ___awmod
     _rand (ARG)
       ___lmul
   _configAD
   _configADInterrupt
   _configRS232
   _configTimer
   _configUSARTInterrupts
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _rand
     ___lmul
   _read_RTC_I2c
     _I2C_Idle
     _I2C_ReStart
     _I2C_Read_Byte
     _I2C_Send_NACK
     _I2C_Start
     _I2C_Stop
     _I2C_Write_Byte
   _selectChanel
   _srand
   _write_RTC_I2c
     _I2C_Idle
     _I2C_Start
     _I2C_Stop
     _I2C_Write_Byte

 _interruptions (ROOT)
   _strcpy
   i2___awmod
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     37      60       5       60.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     2C      4D       1       81.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AD      20        0.0%
DATA                 0      0      AD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed Jun 22 10:33:57 2016

                             _i 002D              __size_of_I2C_Start 000A                     _SSPSTATbits 000FC7  
                            l83 19BE                              l77 19B4                              l89 19AA  
         __end_of_interruptions 127E                              _id 00BD             ___wmul@multiplicand 0062  
            i2___lwdiv@dividend 0001                     __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                           l101 1988                             l113 1992                             l107 1950  
                           l251 0C42                             l324 196C                             l253 0C8A  
                           l255 0CD2                             l257 0D1A                             l249 0BFA  
                           l387 0AA6                             l807 1494                             l817 16B0  
                           _GIE 007F97                    __CFG_CPB$OFF 000000                    __CFG_CPD$OFF 000000  
                           _RX9 007D5E                             _TX9 007D66                    __CFG_BOR$OFF 000000  
                           _dia 009B                             _ano 0099            __size_of_I2C_ReStart 000A  
                           _mes 009E                             _val 00A1                    ___awmod@sign 0073  
            I2C_Write_Byte@Byte 0060                             prod 000FF3                             wreg 000FE8  
                  __CFG_FOSC$HS 000000                    __CFG_LVP$OFF 000000                    __CFG_WDT$OFF 000000  
                          l3002 0BD4                            l3012 0C1C                            l3022 0C64  
                          l3032 0CAC                            l3042 0CF4                            l3052 0D50  
                          l2700 12D0                            l2622 1878                            l2606 1934  
                          l2800 09CE                            l2720 1334                            l2712 130C  
                          l2704 12E4                            l2650 1450                            l2802 09D4  
                          l2634 14B0                            l2660 1486                            l2652 1456  
                          l2732 1370                            l2724 1348                            l2716 1320  
                          l2708 12F8                            l2670 1678                            l2822 0A54  
                          l2750 085E                            l2638 14D6                            l2648 1444  
                          l2672 167E                            l2840 0AF8                            l2832 0A80  
                          l2824 0A5E                            l2816 0A0A                            l2760 088E  
                          l2728 135C                            l2850 0B60                            l2834 0A8C  
                          l2818 0A1C                            l2754 0872                            l2676 16A2  
                          l2668 166C                            l2780 0944                            l2756 0884  
                          l2852 0B6C                            l2692 12A8                            l2838 0AAC  
                          l2846 0B46                            l2782 0976                            l2774 0936  
                          l2766 08BE                            l2848 0B58                            l2776 093C  
                          l2696 12BC                            l2688 1296                            l2970 13FA  
                          l2962 13C4                            l2954 13A0                            l2786 0992  
                          l2964 13D0                            l2788 0998                            l2966 13D6  
                          l2974 1408                            l2958 13B0                            l2978 141C  
                          _ADFM 007E07                            STR_1 084A                            STR_2 0813  
                          STR_3 084D                            STR_4 0839                            _BRGH 007D62  
                          _CREN 007D5C                            _FERR 007D5A                            u2810 0C42  
                          u2830 0C8A                            u2850 0CD2                            u2907 0C24  
                          _PEIE 007F96                            u2917 0C6C                            u2870 0D1A  
                          u2790 0BFA                            u2927 0CB4                            u2937 0CFC  
                          u2947 0D6E                            _RCIE 007CED                            _RCIF 007CF5  
                          u2957 0D8A                            u2967 0DA6                            u2977 0DC2  
                          u2897 0BDC                            u2987 0DDE                            u2997 0E4A  
                          _OERR 007D59                            _SPEN 007D5F                            _TXIE 007CEC  
                          _TXIF 007CF4                            _TXEN 007D65                            _SYNC 007D64  
                          _main 0B8A                            _hora 009C                __end_of_I2C_Idle 1948  
                          _rand 16BA                            fsr0h 000FEA                            fsr1h 000FE2  
            i2___lwdiv@quotient 0005                            fsr0l 000FE9                            fsr2h 000FDA  
                          indf1 000FE7                            fsr1l 000FE1                            indf2 000FDF  
                          fsr2l 000FD9                            btemp 004E                __end_of_I2C_Stop 19B2  
                          pclat 000FFA                            prodh 000FF4                            prodl 000FF3  
                          start 0016                   __CFG_IESO$OFF 000000                 __end_ofi2_putch 19A8  
                 __CFG_MCLRE$ON 000000      __size_of_configADInterrupt 000A                    ___param_bank 000010  
                 __CFG_PLLDIV$1 000000                           ?_main 0001                           ?_rand 006C  
                         _BRG16 007DC3                 __end_of___awmod 1426                 __end_of___lwdiv 149E  
               __end_of___lwmod 16BA                           i2l230 1186                           i2l232 1180  
                         i2l324 199E                           i2l239 1242                           i2l387 107A  
                         i2l807 175A                           i2l817 17EA                           _RCREG 000FAE  
                         _SPBRG 000FAF                   __CFG_USBDIV$1 000000                           _SSPIF 007CF3  
                         _RXDTP 007DC5                           _TXREG 000FAD                   __CFG_PWRT$OFF 000000  
                 __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000  
           ___lmul@multiplicand 0064                   __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000                      i2isdigit@c 0003  
               __end_of_dpowers 080B          __size_of_I2C_Read_Byte 000C                 __end_of_isdigit 1882  
                         _randx 0048                           _srand 195A                           _putch 1968  
                         main@i 008D               __end_of_I2C_Start 19BC                  __pbitbssCOMRAM 0268  
                         tablat 000FF5                __end_ofi2___wmul 18A8          __size_of_I2C_Send_NACK 000C  
                         status 000FD8                  __CFG_ICPRT$OFF 000000              __size_ofi2___awmod 0070  
                 i2printf@width 001A                ??_InitI2C_Master 0060                __end_ofi2_printf 1142  
            __size_ofi2___lwdiv 0052              __size_ofi2___lwmod 0042                 __initialization 15F0  
                  __end_of_main 0E9C                    __end_of_rand 1712                      i2printf@ap 0014  
            __size_ofi2_isdigit 001E                   ?_read_RTC_I2c 0001                          ??_main 008C  
                        ??_rand 006E                   __activetblptr 000002           _configUSARTInterrupts 1976  
               __CFG_CCP2MX$OFF 000000                          _ADRESH 000FC4                          _ADRESL 000FC3  
                        ?_srand 0060                          ?_putch 0001                          i2l2050 183C  
                        i2l2048 1834                          i2l2400 1528                          i2l2320 0F8E  
                        i2l2312 0F56                          i2l2304 0EF8                          i2l2410 154A  
                        i2l2314 0F5A                          i2l2412 154E                          i2l2420 156C  
                        i2l2404 1534                          i2l2340 0FDC                          i2l2324 0FA8  
                        i2l2326 0FAC                          i2l2318 0F60                          i2l2424 157A  
                        i2l2416 1562                          i2l2408 1542                          i2l2360 103C  
                        i2l2370 105E                          i2l2362 1044                          i2l2338 0FD8  
                        i2l2354 1008                          i2l2372 1066                          i2l2356 1018  
                        i2l2292 0EB6                          i2l2452 11FE                          i2l2444 11CC  
                        i2l2294 0EC4                          i2l2390 1128                          i2l2470 1236  
                        i2l2376 1080                          i2l2384 110A                          i2l2288 0EA6  
                        i2l2464 1224                          i2l2456 1206                          i2l2378 10C4  
                        i2l2386 111A                          i2l2298 0ECA                          i2l2388 1120  
                        i2l1950 1734                          i2l1936 18E0                          i2l1946 1728  
                        i2l1970 17CC                          i2l1948 1730                          i2l1958 1750  
                        i2l1974 17E0                          i2l1966 17C0                          i2l1968 17C8  
                     ??i2_putch 0001                          _TMR0IP 007F8A                          _TMR0ON 007EAF  
                        _SSPADD 000FC8                          _SSPBUF 000FC9            __size_of_configRS232 0018  
                __CFG_XINST$OFF 000000                __end_of_configAD 191C            __size_of_configTimer 001A  
                 _I2C_Read_Byte 1990                          ___lmul 149E                          ___wmul 17F4  
                     ??___awmod 0072                       ??___lwdiv 0064                       ??___lwmod 006B  
                ??_read_RTC_I2c 0061                          clear_0 15F6                          clear_1 1604  
                        _minuto 009F                 ___awmod@divisor 0070                   _I2C_Send_NACK 1984  
               ___awmod@counter 0072                          _printf 0850                          _strcpy 182A  
                        _string 00A2                       ?_I2C_Idle 0001                    __pdataCOMRAM 0048  
                     ??_isdigit 0060               __end_ofi2___awmod 1584                       ?_I2C_Stop 0001  
             __end_ofi2___lwdiv 1764                    __mediumconst 0000               __end_ofi2___lwmod 17F4  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                        srand@x 0060                  i2___awmod@sign 0006          __size_of_write_RTC_I2c 006C  
             __end_ofi2_isdigit 18E8                      __accesstop 0060         __end_of__initialization 164A  
               __CFG_PBADEN$OFF 000000                   ___rparam_used 000001                  ?_I2C_Read_Byte 0001  
            i2___lwmod@dividend 0008                  __pcstackCOMRAM 0001                    __pidataBANK0 19D5  
                 __end_of_srand 1968                   __end_of_putch 1976                     i2printf@idx 0013  
                ?_I2C_Send_NACK 0001                     i2printf@val 0018          ?_configUSARTInterrupts 0001  
                     ?i2___wmul 0001                      ??_I2C_Idle 0060                     i2putch@byte 0001  
                    ??_I2C_Stop 0060                       ?i2_printf 000D                         ??_srand 0062  
                       ??_putch 0060                      __pbssBANK0 0097                      _hasAnError 0269  
                 ?_selectChanel 0001                         ?___lmul 0060                         ?___wmul 0060  
                 _write_RTC_I2c 1584         __size_of_I2C_Write_Byte 0012                  ___lmul@product 0068  
                 ??_I2C_ReStart 0060                         ?_printf 006C                         ?_strcpy 0001  
                    ??i2___wmul 0005                      ??i2_printf 000F                      _contTimer0 009A  
                     ?_configAD 0001                         _SSPCON1 000FC6                         _SSPCON2 000FC5  
                       _SSPSTAT 000FC7            __end_of_read_RTC_I2c 17B2                 __CFG_VREGEN$OFF 000000  
        __size_of_interruptions 1276                         i2_putch 199C                       _I2C_Start 19B2  
               ??_I2C_Read_Byte 0060                  ??_selectChanel 0060                         __Hparam 0000  
       read_RTC_I2c@pos_memoria 0061                         __Lparam 0000                  ?_write_RTC_I2c 0001  
               ??_I2C_Send_NACK 0060                 __size_of___lmul 0076                         ___awmod 1384  
               __size_of___wmul 0036                         ___lwdiv 1426                         ___lwmod 1658  
                  __psmallconst 0800                 __CFG_STVREN$OFF 000000                         _channel 00BC  
                       __pcinit 15F0                         __ramtop 0800                         __ptext0 0B8A  
                       __ptext1 1584                         __ptext2 195A                         __ptext3 127E  
                       __ptext4 1764                         __ptext5 1948                         __ptext6 19A8  
                       __ptext7 19B2                         __ptext8 1984                         __ptext9 1990  
               __size_of_printf 033A                       _T0CONbits 000FD5                         _maxCont 00BE  
               __size_of_strcpy 002E               __end_of_hexpowers 0813                         _minCont 00BF  
                       _dpowers 0801                         _leitura 009D                         _isdigit 1858  
              ___awmod@dividend 006E                         _segundo 00A0             __end_of_I2C_ReStart 19C6  
                    ??_configAD 0060                  __pintcode_body 1142            end_of_initialization 164A  
                 __Lmediumconst 0000                         int_func 1142             i2___wmul@multiplier 0001  
                    ?_I2C_Start 0001                         printf@c 008B                         printf@f 006C  
                       postdec1 000FE5                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE                   _interruptions 0008                       _PORTDbits 000F83  
                     _TRISBbits 000F93                       _TRISDbits 000F95               __size_of_I2C_Idle 0014  
             __size_of_I2C_Stop 000A                      main@i_1025 008F                      main@i_1026 0091  
                    main@i_1027 0093                      main@i_1028 0095                       i2___awmod 1514  
             i2___lwdiv@divisor 0003                       i2___lwdiv 1712                       i2___lwmod 17B2  
             i2___lwdiv@counter 0007                   ??_configRS232 0060                     printf@width 0089  
                 ??_configTimer 0060                       i2_isdigit 18CA                 ??_write_RTC_I2c 0061  
                    _string_aux 002E         ??_configUSARTInterrupts 0060                  _I2C_Write_Byte 1948  
                __end_of___lmul 1514                  ?_interruptions 0001                  __end_of___wmul 182A  
                 __pidataCOMRAM 19D0                     _I2C_ReStart 19BC         __size_of_InitI2C_Master 0022  
              i2___wmul@product 0005                  __end_of_printf 0B8A                    i2printf@flag 0017  
                __end_of_strcpy 1858                    i2printf@prec 0016             start_initialization 15F0  
          __end_of_selectChanel 1384               __size_ofi2___wmul 0026           __size_of_read_RTC_I2c 004E  
                     i2printf@c 001C                       i2printf@f 000D                      ?i2___awmod 0001  
                    ?i2___lwdiv 0001                      ?i2___lwmod 0008               __size_ofi2_printf 02A6  
                   ??_I2C_Start 0060                      ?i2_isdigit 0001             __end_of_configRS232 1934  
        __end_of_I2C_Write_Byte 195A                        ??___lmul 0068                        ??___wmul 0064  
                   __pdataBANK0 00BC             __end_of_configTimer 1902                __CFG_LPT1OSC$OFF 000000  
                  _read_RTC_I2c 1764                        ??_printf 007E                        ??_strcpy 0005  
                   __pbssCOMRAM 002D                   __pcstackBANK0 0060               i2___lwmod@divisor 000A  
             i2___lwmod@counter 000C                    _isdigit$1394 0061               __size_of_configAD 001A  
                      ?i2_putch 0001                ___lwdiv@dividend 0060                 ?_I2C_Write_Byte 0001  
                     __pintcode 0008                 ??_interruptions 001D                        ?___awmod 006E  
                      ?___lwdiv 0060                        ?___lwmod 0067                     __smallconst 0800  
                      _I2C_Idle 1934                        ?_isdigit 0001                        _I2C_Stop 19A8  
                     _hexpowers 080B                ___lwdiv@quotient 0065                     ??i2___awmod 0005  
                   ??i2___lwdiv 0005                     ??i2___lwmod 000C                  __size_of_srand 000E  
                __size_of_putch 000E                    _receivedData 004C                     _configRS232 191C  
                ___wmul@product 0064                        _PIE1bits 000F9D                     ??i2_isdigit 0001  
                   _configTimer 18E8                        i2u211_45 123E                        i2u211_47 1240  
                      i2u209_40 1234                        _PIR1bits 000F9E           __end_of_I2C_Read_Byte 199C  
              __CFG_WDTPS$32768 000000           __end_of_I2C_Send_NACK 1990           __size_of_selectChanel 0106  
                _InitI2C_Master 18A8                      _ADCON0bits 000FC2                      _ADCON1bits 000FC1  
                    _ADCON2bits 000FC0               ___wmul@multiplier 0060                        i2___wmul 1882  
                    printf@flag 0088                      printf@prec 0085                        i2_printf 0E9C  
           selectChanel@channel 0060               ___lmul@multiplier 0060                       copy_data0 161E  
                     copy_data1 163E              i2___awmod@dividend 0001                __size_ofi2_putch 000C  
                      __Hrparam 0000                    _selectChanel 127E                        __Lrparam 0000  
        __end_of_InitI2C_Master 18CA                __size_of___awmod 00A2           i2___wmul@multiplicand 0003  
              __size_of___lwdiv 0078  __size_of_configUSARTInterrupts 000E                __size_of___lwmod 0062  
 __end_of_configUSARTInterrupts 1984                    ?_I2C_ReStart 0001                        _data_ADC 0097  
                      _changing 0268                __size_of_isdigit 002A                 ___lwdiv@divisor 0062  
               ___lwdiv@counter 0064                        __ptext10 19BC                        __ptext11 1934  
                      __ptext20 1976                        __ptext12 16BA                        __ptext21 18E8  
                      __ptext13 149E                        __ptext30 18CA                        __ptext22 191C  
                      __ptext14 0850                        __ptext31 1882                        __ptext23 19C6  
                      __ptext15 1968                        __ptext32 17B2                        __ptext24 1902  
                      __ptext16 1858                        __ptext33 1712                        __ptext25 1384  
                      __ptext17 17F4                        __ptext34 1514                        __ptext26 18A8  
                      __ptext18 1658                        __ptext35 182A                        __ptext19 1426  
                      __ptext28 0E9C                        __ptext29 199C                        _configAD 1902  
                    strcpy@from 0003                  i2_isdigit$1394 0002                   __size_of_main 0312  
                 __size_of_rand 0058           __end_of_write_RTC_I2c 15F0                        int$flags 004E  
             _configADInterrupt 19C6                 ?_InitI2C_Master 0001                       printf@idx 0082  
                     printf@val 0086              ?_configADInterrupt 0001           __CFG_CPUDIV$OSC1_PLL2 000000  
             i2___awmod@divisor 0003               i2___awmod@counter 0005                       putch@byte 0060  
                    _INTCONbits 000FF2             ??_configADInterrupt 0060                        isdigit@c 0062  
                      intlevel2 0000                ___lwmod@dividend 0067                ??_I2C_Write_Byte 0060  
     __end_of_configADInterrupt 19D0                        printf@ap 0083                 ___lwmod@divisor 0069  
                      strcpy@cp 0005                        strcpy@to 0001                 ___lwmod@counter 006B  
                   _SSPCON1bits 000FC6                     _SSPCON2bits 000FC5                    ?_configRS232 0001  
                  ?_configTimer 0001  
