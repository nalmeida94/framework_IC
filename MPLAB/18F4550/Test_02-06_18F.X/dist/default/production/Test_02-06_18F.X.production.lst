

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Wed Jun 15 12:41:02 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           	psect	idataCOMRAM
    54  0017E2                     __pidataCOMRAM:
    55                           	opt stack 0
    56                           
    57                           ;initializer for _receivedData
    58  0017E2  58                 	db	88
    59                           
    60                           	psect	idataBANK0
    61  0017E0                     __pidataBANK0:
    62                           	opt stack 0
    63                           
    64                           ;initializer for _channel
    65  0017E0  01                 	db	1
    66                           
    67                           ;initializer for _id
    68  0017E1  1B                 	db	27
    69                           
    70                           	psect	smallconst
    71  000800                     __psmallconst:
    72                           	opt stack 0
    73  000800  00                 	db	0
    74  000801                     _dpowers:
    75                           	opt stack 0
    76  000801  0001               	dw	1
    77  000803  000A               	dw	10
    78  000805  0064               	dw	100
    79  000807  03E8               	dw	1000
    80  000809  2710               	dw	10000
    81  00080B                     __end_of_dpowers:
    82                           	opt stack 0
    83  00080B                     _hexpowers:
    84                           	opt stack 0
    85  00080B  0001               	dw	1
    86  00080D  0010               	dw	16
    87  00080F  0100               	dw	256
    88  000811  1000               	dw	4096
    89  000813                     __end_of_hexpowers:
    90                           	opt stack 0
    91  0000                     _ADCON0bits	set	4034
    92  0000                     _ADCON1bits	set	4033
    93  0000                     _ADCON2bits	set	4032
    94  0000                     _ADRESH	set	4036
    95  0000                     _ADRESL	set	4035
    96  0000                     _INTCON2bits	set	4081
    97  0000                     _INTCONbits	set	4082
    98  0000                     _PIE1bits	set	3997
    99  0000                     _PIR1bits	set	3998
   100  0000                     _PORTBbits	set	3969
   101  0000                     _PORTDbits	set	3971
   102  0000                     _RCREG	set	4014
   103  0000                     _SPBRG	set	4015
   104  0000                     _SSPADD	set	4040
   105  0000                     _SSPBUF	set	4041
   106  0000                     _SSPCON1	set	4038
   107  0000                     _SSPCON1bits	set	4038
   108  0000                     _SSPCON2	set	4037
   109  0000                     _SSPCON2bits	set	4037
   110  0000                     _SSPSTAT	set	4039
   111  0000                     _SSPSTATbits	set	4039
   112  0000                     _T0CONbits	set	4053
   113  0000                     _TRISBbits	set	3987
   114  0000                     _TRISDbits	set	3989
   115  0000                     _TXREG	set	4013
   116  0000                     _ADFM	set	32263
   117  0000                     _BRG16	set	32195
   118  0000                     _BRGH	set	32098
   119  0000                     _CREN	set	32092
   120  0000                     _FERR	set	32090
   121  0000                     _GIE	set	32663
   122  0000                     _OERR	set	32089
   123  0000                     _PEIE	set	32662
   124  0000                     _RCIE	set	31981
   125  0000                     _RCIF	set	31989
   126  0000                     _RX9	set	32094
   127  0000                     _RXDTP	set	32197
   128  0000                     _SPEN	set	32095
   129  0000                     _SSPIF	set	31987
   130  0000                     _SYNC	set	32100
   131  0000                     _TMR0IP	set	32650
   132  0000                     _TMR0ON	set	32431
   133  0000                     _TX9	set	32102
   134  0000                     _TXEN	set	32101
   135  0000                     _TXIE	set	31980
   136  0000                     _TXIF	set	31988
   137  000813                     STR_2:
   138  000813  25                 	db	37
   139  000814  75                 	db	117	;'u'
   140  000815  26                 	db	38
   141  000816  25                 	db	37
   142  000817  75                 	db	117	;'u'
   143  000818  26                 	db	38
   144  000819  32                 	db	50	;'2'
   145  00081A  30                 	db	48	;'0'
   146  00081B  25                 	db	37
   147  00081C  30                 	db	48	;'0'
   148  00081D  32                 	db	50	;'2'
   149  00081E  58                 	db	88	;'X'
   150  00081F  2D                 	db	45
   151  000820  25                 	db	37
   152  000821  30                 	db	48	;'0'
   153  000822  32                 	db	50	;'2'
   154  000823  58                 	db	88	;'X'
   155  000824  2D                 	db	45
   156  000825  25                 	db	37
   157  000826  30                 	db	48	;'0'
   158  000827  32                 	db	50	;'2'
   159  000828  58                 	db	88	;'X'
   160  000829  20                 	db	32
   161  00082A  25                 	db	37
   162  00082B  30                 	db	48	;'0'
   163  00082C  32                 	db	50	;'2'
   164  00082D  58                 	db	88	;'X'
   165  00082E  3A                 	db	58	;':'
   166  00082F  25                 	db	37
   167  000830  30                 	db	48	;'0'
   168  000831  32                 	db	50	;'2'
   169  000832  58                 	db	88	;'X'
   170  000833  3A                 	db	58	;':'
   171  000834  25                 	db	37
   172  000835  30                 	db	48	;'0'
   173  000836  32                 	db	50	;'2'
   174  000837  58                 	db	88	;'X'
   175  000838  00                 	db	0
   176  000839                     STR_4:
   177  000839  30                 	db	48	;'0'
   178  00083A  31                 	db	49	;'1'
   179  00083B  32                 	db	50	;'2'
   180  00083C  33                 	db	51	;'3'
   181  00083D  34                 	db	52	;'4'
   182  00083E  35                 	db	53	;'5'
   183  00083F  36                 	db	54	;'6'
   184  000840  37                 	db	55	;'7'
   185  000841  38                 	db	56	;'8'
   186  000842  39                 	db	57	;'9'
   187  000843  41                 	db	65	;'A'
   188  000844  42                 	db	66	;'B'
   189  000845  43                 	db	67	;'C'
   190  000846  44                 	db	68	;'D'
   191  000847  45                 	db	69	;'E'
   192  000848  46                 	db	70	;'F'
   193  000849  00                 	db	0
   194  00084A                     STR_1:
   195  00084A  0A                 	db	10
   196  00084B  0D                 	db	13
   197  00084C  00                 	db	0
   198  00084D                     STR_3:
   199  00084D  0A                 	db	10
   200  00084E  00                 	db	0
   201                           
   202                           ; #config settings
   203  00084F  00                 	db	0	; dummy byte at the end
   204  0000                     
   205                           	psect	cinit
   206  0014DE                     __pcinit:
   207                           	opt stack 0
   208  0014DE                     start_initialization:
   209                           	opt stack 0
   210  0014DE                     __initialization:
   211                           	opt stack 0
   212                           
   213                           ; Clear objects allocated to BANK0 (35 bytes)
   214  0014DE  EE00  F095         	lfsr	0,__pbssBANK0
   215  0014E2  0E23               	movlw	35
   216  0014E4                     clear_0:
   217  0014E4  6AEE               	clrf	postinc0,c
   218  0014E6  06E8               	decf	wreg,f,c
   219  0014E8  E1FD               	bnz	clear_0
   220                           
   221                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   222  0014EA  6A4A               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   223                           
   224                           ; Clear objects allocated to COMRAM (27 bytes)
   225  0014EC  EE00  F02F         	lfsr	0,__pbssCOMRAM
   226  0014F0  0E1B               	movlw	27
   227  0014F2                     clear_1:
   228  0014F2  6AEE               	clrf	postinc0,c
   229  0014F4  06E8               	decf	wreg,f,c
   230  0014F6  E1FD               	bnz	clear_1
   231                           
   232                           ; Initialize objects allocated to BANK0 (2 bytes)
   233                           ; load TBLPTR registers with __pidataBANK0
   234  0014F8  0EE0               	movlw	low __pidataBANK0
   235  0014FA  6EF6               	movwf	tblptrl,c
   236  0014FC  0E17               	movlw	high __pidataBANK0
   237  0014FE  6EF7               	movwf	tblptrh,c
   238  001500  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   239  001502  6EF8               	movwf	tblptru,c
   240  001504  0009               	tblrd		*+	;fetch initializer
   241  001506  CFF5 F0B8          	movff	tablat,__pdataBANK0
   242  00150A  0009               	tblrd		*+	;fetch initializer
   243  00150C  CFF5 F0B9          	movff	tablat,__pdataBANK0+1
   244                           
   245                           ; Initialize objects allocated to COMRAM (1 bytes)
   246                           ; load TBLPTR registers with __pidataCOMRAM
   247  001510  0EE2               	movlw	low __pidataCOMRAM
   248  001512  6EF6               	movwf	tblptrl,c
   249  001514  0E17               	movlw	high __pidataCOMRAM
   250  001516  6EF7               	movwf	tblptrh,c
   251  001518  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   252  00151A  6EF8               	movwf	tblptru,c
   253  00151C  0009               	tblrd		*+	;fetch initializer
   254  00151E  CFF5 F04B          	movff	tablat,__pdataCOMRAM
   255  001522                     end_of_initialization:
   256                           	opt stack 0
   257  001522                     __end_of__initialization:
   258                           	opt stack 0
   259  001522  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   260  001524  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   261  001526  0E00               	movlw	low (__Lmediumconst shr (0+16))
   262  001528  6EF8               	movwf	tblptru,c
   263  00152A  0100               	movlb	0
   264  00152C  EF18  F007         	goto	_main	;jump to C main() function
   265                           tblptru	equ	0xFF8
   266                           tblptrh	equ	0xFF7
   267                           tblptrl	equ	0xFF6
   268                           tablat	equ	0xFF5
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           
   272                           	psect	bitbssCOMRAM
   273  000250                     __pbitbssCOMRAM:
   274                           	opt stack 0
   275  000250                     _bottonToSend:
   276                           	opt stack 0
   277  000250                     	ds	1
   278  000251                     _changing:
   279                           	opt stack 0
   280  000251                     	ds	1
   281  000252                     _hasAnError:
   282                           	opt stack 0
   283  000252                     	ds	1
   284  000253                     _vaLedlRD4:
   285                           	opt stack 0
   286  000253                     	ds	1
   287                           tblptru	equ	0xFF8
   288                           tblptrh	equ	0xFF7
   289                           tblptrl	equ	0xFF6
   290                           tablat	equ	0xFF5
   291                           postinc0	equ	0xFEE
   292                           wreg	equ	0xFE8
   293                           
   294                           	psect	bssCOMRAM
   295  00002F                     __pbssCOMRAM:
   296                           	opt stack 0
   297  00002F                     _i:
   298                           	opt stack 0
   299  00002F                     	ds	1
   300  000030                     _string_aux:
   301                           	opt stack 0
   302  000030                     	ds	26
   303                           tblptru	equ	0xFF8
   304                           tblptrh	equ	0xFF7
   305                           tblptrl	equ	0xFF6
   306                           tablat	equ	0xFF5
   307                           postinc0	equ	0xFEE
   308                           wreg	equ	0xFE8
   309                           
   310                           	psect	dataCOMRAM
   311  00004B                     __pdataCOMRAM:
   312                           	opt stack 0
   313  00004B                     _receivedData:
   314                           	opt stack 0
   315  00004B                     	ds	1
   316                           tblptru	equ	0xFF8
   317                           tblptrh	equ	0xFF7
   318                           tblptrl	equ	0xFF6
   319                           tablat	equ	0xFF5
   320                           postinc0	equ	0xFEE
   321                           wreg	equ	0xFE8
   322                           
   323                           	psect	bssBANK0
   324  000095                     __pbssBANK0:
   325                           	opt stack 0
   326  000095                     _data_ADC:
   327                           	opt stack 0
   328  000095                     	ds	2
   329  000097                     _ano:
   330                           	opt stack 0
   331  000097                     	ds	1
   332  000098                     _dia:
   333                           	opt stack 0
   334  000098                     	ds	1
   335  000099                     _hora:
   336                           	opt stack 0
   337  000099                     	ds	1
   338  00009A                     _leitura:
   339                           	opt stack 0
   340  00009A                     	ds	1
   341  00009B                     _mes:
   342                           	opt stack 0
   343  00009B                     	ds	1
   344  00009C                     _minuto:
   345                           	opt stack 0
   346  00009C                     	ds	1
   347  00009D                     _segundo:
   348                           	opt stack 0
   349  00009D                     	ds	1
   350  00009E                     _string:
   351                           	opt stack 0
   352  00009E                     	ds	26
   353                           tblptru	equ	0xFF8
   354                           tblptrh	equ	0xFF7
   355                           tblptrl	equ	0xFF6
   356                           tablat	equ	0xFF5
   357                           postinc0	equ	0xFEE
   358                           wreg	equ	0xFE8
   359                           
   360                           	psect	dataBANK0
   361  0000B8                     __pdataBANK0:
   362                           	opt stack 0
   363  0000B8                     _channel:
   364                           	opt stack 0
   365  0000B8                     	ds	1
   366  0000B9                     _id:
   367                           	opt stack 0
   368  0000B9                     	ds	1
   369                           tblptru	equ	0xFF8
   370                           tblptrh	equ	0xFF7
   371                           tblptrl	equ	0xFF6
   372                           tablat	equ	0xFF5
   373                           postinc0	equ	0xFEE
   374                           wreg	equ	0xFE8
   375                           
   376                           	psect	cstackBANK0
   377  000060                     __pcstackBANK0:
   378                           	opt stack 0
   379  000060                     ??_isdigit:
   380  000060                     ??_I2C_Idle:
   381  000060                     ?___wmul:
   382                           	opt stack 0
   383  000060                     ?___lwdiv:
   384                           	opt stack 0
   385  000060                     selectChanel@channel:
   386                           	opt stack 0
   387  000060                     I2C_Write_Byte@Byte:
   388                           	opt stack 0
   389  000060                     putch@byte:
   390                           	opt stack 0
   391  000060                     ___wmul@multiplier:
   392                           	opt stack 0
   393  000060                     ___lwdiv@dividend:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x0
   397  000060                     	ds	1
   398  000061                     read_RTC_I2c@pos_memoria:
   399                           	opt stack 0
   400  000061                     _isdigit$1476:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x1
   404  000061                     	ds	1
   405  000062                     isdigit@c:
   406                           	opt stack 0
   407  000062                     ___wmul@multiplicand:
   408                           	opt stack 0
   409  000062                     ___lwdiv@divisor:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x2
   413  000062                     	ds	2
   414  000064                     ___lwdiv@counter:
   415                           	opt stack 0
   416  000064                     ___wmul@product:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x4
   420  000064                     	ds	1
   421  000065                     ___lwdiv@quotient:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x5
   425  000065                     	ds	2
   426  000067                     ?___lwmod:
   427                           	opt stack 0
   428  000067                     ___lwmod@dividend:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x7
   432  000067                     	ds	2
   433  000069                     ___lwmod@divisor:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x9
   437  000069                     	ds	2
   438  00006B                     ___lwmod@counter:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0xB
   442  00006B                     	ds	1
   443  00006C                     ?_printf:
   444                           	opt stack 0
   445  00006C                     printf@f:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0xC
   449  00006C                     	ds	18
   450  00007E                     ??_printf:
   451                           
   452                           ; 0 bytes @ 0x1E
   453  00007E                     	ds	4
   454  000082                     printf@idx:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x22
   458  000082                     	ds	1
   459  000083                     printf@ap:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x23
   463  000083                     	ds	2
   464  000085                     printf@prec:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0x25
   468  000085                     	ds	1
   469  000086                     printf@val:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x26
   473  000086                     	ds	2
   474  000088                     printf@flag:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x28
   478  000088                     	ds	1
   479  000089                     printf@width:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x29
   483  000089                     	ds	2
   484  00008B                     printf@c:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x2B
   488  00008B                     	ds	1
   489  00008C                     ??_main:
   490                           
   491                           ; 0 bytes @ 0x2C
   492  00008C                     	ds	1
   493  00008D                     main@cont:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x2D
   497  00008D                     	ds	2
   498  00008F                     main@cont_1220:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0x2F
   502  00008F                     	ds	2
   503  000091                     main@cont_1221:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x31
   507  000091                     	ds	2
   508  000093                     main@cont_1222:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x33
   512  000093                     	ds	2
   513                           tblptru	equ	0xFF8
   514                           tblptrh	equ	0xFF7
   515                           tblptrl	equ	0xFF6
   516                           tablat	equ	0xFF5
   517                           postinc0	equ	0xFEE
   518                           wreg	equ	0xFE8
   519                           
   520                           	psect	cstackCOMRAM
   521  000001                     __pcstackCOMRAM:
   522                           	opt stack 0
   523  000001                     ??i2_isdigit:
   524  000001                     ?___awmod:
   525                           	opt stack 0
   526  000001                     ?i2___wmul:
   527                           	opt stack 0
   528  000001                     ?i2___lwdiv:
   529                           	opt stack 0
   530  000001                     i2putch@byte:
   531                           	opt stack 0
   532  000001                     ___awmod@dividend:
   533                           	opt stack 0
   534  000001                     strcpy@to:
   535                           	opt stack 0
   536  000001                     i2___wmul@multiplier:
   537                           	opt stack 0
   538  000001                     i2___lwdiv@dividend:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x0
   542  000001                     	ds	1
   543  000002                     i2_isdigit$1476:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x1
   547  000002                     	ds	1
   548  000003                     i2isdigit@c:
   549                           	opt stack 0
   550  000003                     ___awmod@divisor:
   551                           	opt stack 0
   552  000003                     strcpy@from:
   553                           	opt stack 0
   554  000003                     i2___wmul@multiplicand:
   555                           	opt stack 0
   556  000003                     i2___lwdiv@divisor:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x2
   560  000003                     	ds	2
   561  000005                     ___awmod@counter:
   562                           	opt stack 0
   563  000005                     strcpy@cp:
   564                           	opt stack 0
   565  000005                     i2___wmul@product:
   566                           	opt stack 0
   567  000005                     i2___lwdiv@quotient:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x4
   571  000005                     	ds	1
   572  000006                     ___awmod@sign:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x5
   576  000006                     	ds	1
   577  000007                     i2___lwdiv@counter:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x6
   581  000007                     	ds	1
   582  000008                     ?i2___lwmod:
   583                           	opt stack 0
   584  000008                     i2___lwmod@dividend:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x7
   588  000008                     	ds	2
   589  00000A                     i2___lwmod@divisor:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x9
   593  00000A                     	ds	2
   594  00000C                     i2___lwmod@counter:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0xB
   598  00000C                     	ds	1
   599  00000D                     ?i2_printf:
   600                           	opt stack 0
   601  00000D                     i2printf@f:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0xC
   605  00000D                     	ds	2
   606  00000F                     ??i2_printf:
   607                           
   608                           ; 0 bytes @ 0xE
   609  00000F                     	ds	4
   610  000013                     i2printf@idx:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0x12
   614  000013                     	ds	1
   615  000014                     i2printf@ap:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x13
   619  000014                     	ds	2
   620  000016                     i2printf@prec:
   621                           	opt stack 0
   622                           
   623                           ; 1 bytes @ 0x15
   624  000016                     	ds	1
   625  000017                     i2printf@flag:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x16
   629  000017                     	ds	1
   630  000018                     i2printf@val:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x17
   634  000018                     	ds	2
   635  00001A                     i2printf@width:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x19
   639  00001A                     	ds	2
   640  00001C                     i2printf@c:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x1B
   644  00001C                     	ds	1
   645  00001D                     ??_interruptions:
   646                           
   647                           ; 0 bytes @ 0x1C
   648  00001D                     	ds	16
   649  00002D                     interruptions@cont:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x2C
   653  00002D                     	ds	2
   654                           tblptru	equ	0xFF8
   655                           tblptrh	equ	0xFF7
   656                           tblptrl	equ	0xFF6
   657                           tablat	equ	0xFF5
   658                           postinc0	equ	0xFEE
   659                           wreg	equ	0xFE8
   660                           
   661 ;;
   662 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   663 ;;
   664 ;; *************** function _main *****************
   665 ;; Defined at:
   666 ;;		line 151 in file "main.c"
   667 ;; Parameters:    Size  Location     Type
   668 ;;		None
   669 ;; Auto vars:     Size  Location     Type
   670 ;;  cont            2   51[BANK0 ] int 
   671 ;;  cont            2   49[BANK0 ] int 
   672 ;;  cont            2   47[BANK0 ] int 
   673 ;;  cont            2   45[BANK0 ] int 
   674 ;; Return value:  Size  Location     Type
   675 ;;		None               void
   676 ;; Registers used:
   677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   678 ;; Tracked objects:
   679 ;;		On entry : 0/0
   680 ;;		On exit  : 0/0
   681 ;;		Unchanged: 0/0
   682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   683 ;;      Params:         0       0       0       0       0       0       0       0       0
   684 ;;      Locals:         0       8       0       0       0       0       0       0       0
   685 ;;      Temps:          0       1       0       0       0       0       0       0       0
   686 ;;      Totals:         0       9       0       0       0       0       0       0       0
   687 ;;Total ram usage:        9 bytes
   688 ;; Hardware stack levels required when called:    5
   689 ;; This function calls:
   690 ;;		_InitI2C_Master
   691 ;;		_configAD
   692 ;;		_configADInterrupt
   693 ;;		_configRS232
   694 ;;		_configTimer
   695 ;;		_configUSARTInterrupts
   696 ;;		_printf
   697 ;;		_read_RTC_I2c
   698 ;;		_selectChanel
   699 ;;		_write_RTC_I2c
   700 ;; This function is called by:
   701 ;;		Startup code after reset
   702 ;; This function uses a non-reentrant model
   703 ;;
   704                           
   705                           	psect	text0
   706  000E30                     __ptext0:
   707                           	opt stack 0
   708  000E30                     _main:
   709                           	opt stack 26
   710                           
   711                           ;main.c: 152: TRISDbits.TRISD3 = 0;
   712                           
   713                           ;incstack = 0
   714  000E30  9695               	bcf	3989,3,c	;volatile
   715                           
   716                           ;main.c: 153: TRISDbits.TRISD4 = 0;
   717  000E32  9895               	bcf	3989,4,c	;volatile
   718                           
   719                           ;main.c: 156: PORTBbits.RB7 = 1;
   720  000E34  8E81               	bsf	3969,7,c	;volatile
   721                           
   722                           ;main.c: 157: PORTBbits.RB6 = 0;
   723  000E36  9C81               	bcf	3969,6,c	;volatile
   724                           
   725                           ;main.c: 158: PORTBbits.RB5 = 0;
   726  000E38  9A81               	bcf	3969,5,c	;volatile
   727                           
   728                           ;main.c: 159: PORTBbits.RB4 = 0;
   729  000E3A  9881               	bcf	3969,4,c	;volatile
   730                           
   731                           ;main.c: 160: INTCONbits.RBIE = 1;
   732  000E3C  86F2               	bsf	intcon,3,c	;volatile
   733                           
   734                           ;main.c: 161: INTCON2bits.RBIP = 0;
   735  000E3E  90F1               	bcf	intcon2,0,c	;volatile
   736                           
   737                           ;main.c: 163: configTimer();
   738  000E40  EC83  F00B         	call	_configTimer	;wreg free
   739                           
   740                           ;main.c: 166: configADInterrupt();
   741  000E44  ECEB  F00B         	call	_configADInterrupt	;wreg free
   742                           
   743                           ;main.c: 167: configAD();
   744  000E48  EC90  F00B         	call	_configAD	;wreg free
   745                           
   746                           ;main.c: 170: configRS232();
   747  000E4C  EC9D  F00B         	call	_configRS232	;wreg free
   748                           
   749                           ;main.c: 171: configUSARTInterrupts();
   750  000E50  ECC3  F00B         	call	_configUSARTInterrupts	;wreg free
   751                           
   752                           ;main.c: 174: InitI2C_Master();
   753  000E54  EC63  F00B         	call	_InitI2C_Master	;wreg free
   754                           
   755                           ;main.c: 177: selectChanel(channel);
   756  000E58  0100               	movlb	0	; () banked
   757  000E5A  51B8               	movf	_channel& (0+255),w,b
   758  000E5C  EC11  F009         	call	_selectChanel
   759                           
   760                           ;main.c: 181: write_RTC_I2c();
   761  000E60  EC08  F00A         	call	_write_RTC_I2c	;wreg free
   762                           
   763                           ;main.c: 184: for(int cont = 0; cont < 100; cont++)
   764  000E64  0E00               	movlw	0
   765  000E66  0100               	movlb	0	; () banked
   766  000E68  6F8E               	movwf	(main@cont+1)& (0+255),b
   767  000E6A  0E00               	movlw	0
   768  000E6C  6F8D               	movwf	main@cont& (0+255),b
   769                           
   770                           ; BSR set to: 0
   771  000E6E  0100               	movlb	0	; () banked
   772  000E70  BF8E               	btfsc	(main@cont+1)& (0+255),7,b
   773  000E72  D008               	goto	l2792
   774  000E74  0100               	movlb	0	; () banked
   775  000E76  518E               	movf	(main@cont+1)& (0+255),w,b
   776  000E78  E118               	bnz	l321
   777  000E7A  0E64               	movlw	100
   778  000E7C  0100               	movlb	0	; () banked
   779  000E7E  5D8D               	subwf	main@cont& (0+255),w,b
   780  000E80  B0D8               	btfsc	status,0,c
   781  000E82  D013               	goto	l321
   782  000E84                     l2792:
   783                           
   784                           ; BSR set to: 0
   785                           ;main.c: 185: _delay((unsigned long)((10)*(20000000/4000.0)));
   786  000E84  0E41               	movlw	65
   787  000E86  0100               	movlb	0	; () banked
   788  000E88  6F8C               	movwf	??_main& (0+255),b
   789  000E8A  0EEE               	movlw	238
   790  000E8C                     u2737:
   791  000E8C  2EE8               	decfsz	wreg,f,c
   792  000E8E  D7FE               	goto	u2737
   793  000E90  2F8C               	decfsz	??_main& (0+255),f,b
   794  000E92  D7FC               	goto	u2737
   795  000E94  D000               	nop2	
   796  000E96  0100               	movlb	0	; () banked
   797  000E98  4B8D               	infsnz	main@cont& (0+255),f,b
   798  000E9A  2B8E               	incf	(main@cont+1)& (0+255),f,b
   799  000E9C  0100               	movlb	0	; () banked
   800  000E9E  BF8E               	btfsc	(main@cont+1)& (0+255),7,b
   801  000EA0  D7F1               	goto	l2792
   802  000EA2  0100               	movlb	0	; () banked
   803  000EA4  518E               	movf	(main@cont+1)& (0+255),w,b
   804  000EA6  E101               	bnz	u2650
   805  000EA8  D7E8               	goto	L1
   806  000EAA                     u2650:
   807  000EAA                     l321:
   808                           
   809                           ; BSR set to: 0
   810                           ;main.c: 186: PORTDbits.RD3 = 1;
   811  000EAA  8683               	bsf	3971,3,c	;volatile
   812                           
   813                           ; BSR set to: 0
   814                           ;main.c: 187: for(int cont = 0; cont < 100; cont++)
   815  000EAC  0E00               	movlw	0
   816  000EAE  0100               	movlb	0	; () banked
   817  000EB0  6F90               	movwf	(main@cont_1220+1)& (0+255),b
   818  000EB2  0E00               	movlw	0
   819  000EB4  6F8F               	movwf	main@cont_1220& (0+255),b
   820                           
   821                           ; BSR set to: 0
   822  000EB6  0100               	movlb	0	; () banked
   823  000EB8  BF90               	btfsc	(main@cont_1220+1)& (0+255),7,b
   824  000EBA  D008               	goto	l2802
   825  000EBC  0100               	movlb	0	; () banked
   826  000EBE  5190               	movf	(main@cont_1220+1)& (0+255),w,b
   827  000EC0  E118               	bnz	l323
   828  000EC2  0E64               	movlw	100
   829  000EC4  0100               	movlb	0	; () banked
   830  000EC6  5D8F               	subwf	main@cont_1220& (0+255),w,b
   831  000EC8  B0D8               	btfsc	status,0,c
   832  000ECA  D013               	goto	l323
   833  000ECC                     l2802:
   834                           
   835                           ; BSR set to: 0
   836                           ;main.c: 188: _delay((unsigned long)((10)*(20000000/4000.0)));
   837  000ECC  0E41               	movlw	65
   838  000ECE  0100               	movlb	0	; () banked
   839  000ED0  6F8C               	movwf	??_main& (0+255),b
   840  000ED2  0EEE               	movlw	238
   841  000ED4                     u2747:
   842  000ED4  2EE8               	decfsz	wreg,f,c
   843  000ED6  D7FE               	goto	u2747
   844  000ED8  2F8C               	decfsz	??_main& (0+255),f,b
   845  000EDA  D7FC               	goto	u2747
   846  000EDC  D000               	nop2	
   847  000EDE  0100               	movlb	0	; () banked
   848  000EE0  4B8F               	infsnz	main@cont_1220& (0+255),f,b
   849  000EE2  2B90               	incf	(main@cont_1220+1)& (0+255),f,b
   850  000EE4  0100               	movlb	0	; () banked
   851  000EE6  BF90               	btfsc	(main@cont_1220+1)& (0+255),7,b
   852  000EE8  D7F1               	goto	l2802
   853  000EEA  0100               	movlb	0	; () banked
   854  000EEC  5190               	movf	(main@cont_1220+1)& (0+255),w,b
   855  000EEE  E101               	bnz	u2670
   856  000EF0  D7E8               	goto	L2
   857  000EF2                     u2670:
   858  000EF2                     l323:
   859                           
   860                           ; BSR set to: 0
   861                           ;main.c: 189: PORTDbits.RD3 = 0;
   862  000EF2  9683               	bcf	3971,3,c	;volatile
   863                           
   864                           ; BSR set to: 0
   865                           ;main.c: 190: for(int cont = 0; cont < 100; cont++)
   866  000EF4  0E00               	movlw	0
   867  000EF6  0100               	movlb	0	; () banked
   868  000EF8  6F92               	movwf	(main@cont_1221+1)& (0+255),b
   869  000EFA  0E00               	movlw	0
   870  000EFC  6F91               	movwf	main@cont_1221& (0+255),b
   871                           
   872                           ; BSR set to: 0
   873  000EFE  0100               	movlb	0	; () banked
   874  000F00  BF92               	btfsc	(main@cont_1221+1)& (0+255),7,b
   875  000F02  D008               	goto	l2812
   876  000F04  0100               	movlb	0	; () banked
   877  000F06  5192               	movf	(main@cont_1221+1)& (0+255),w,b
   878  000F08  E118               	bnz	l325
   879  000F0A  0E64               	movlw	100
   880  000F0C  0100               	movlb	0	; () banked
   881  000F0E  5D91               	subwf	main@cont_1221& (0+255),w,b
   882  000F10  B0D8               	btfsc	status,0,c
   883  000F12  D013               	goto	l325
   884  000F14                     l2812:
   885                           
   886                           ; BSR set to: 0
   887                           ;main.c: 191: _delay((unsigned long)((10)*(20000000/4000.0)));
   888  000F14  0E41               	movlw	65
   889  000F16  0100               	movlb	0	; () banked
   890  000F18  6F8C               	movwf	??_main& (0+255),b
   891  000F1A  0EEE               	movlw	238
   892  000F1C                     u2757:
   893  000F1C  2EE8               	decfsz	wreg,f,c
   894  000F1E  D7FE               	goto	u2757
   895  000F20  2F8C               	decfsz	??_main& (0+255),f,b
   896  000F22  D7FC               	goto	u2757
   897  000F24  D000               	nop2	
   898  000F26  0100               	movlb	0	; () banked
   899  000F28  4B91               	infsnz	main@cont_1221& (0+255),f,b
   900  000F2A  2B92               	incf	(main@cont_1221+1)& (0+255),f,b
   901  000F2C  0100               	movlb	0	; () banked
   902  000F2E  BF92               	btfsc	(main@cont_1221+1)& (0+255),7,b
   903  000F30  D7F1               	goto	l2812
   904  000F32  0100               	movlb	0	; () banked
   905  000F34  5192               	movf	(main@cont_1221+1)& (0+255),w,b
   906  000F36  E101               	bnz	u2690
   907  000F38  D7E8               	goto	L3
   908  000F3A                     u2690:
   909  000F3A                     l325:
   910                           
   911                           ; BSR set to: 0
   912                           ;main.c: 192: PORTDbits.RD3 = 1;
   913  000F3A  8683               	bsf	3971,3,c	;volatile
   914                           
   915                           ; BSR set to: 0
   916                           ;main.c: 193: for(int cont = 0; cont < 100; cont++)
   917  000F3C  0E00               	movlw	0
   918  000F3E  0100               	movlb	0	; () banked
   919  000F40  6F94               	movwf	(main@cont_1222+1)& (0+255),b
   920  000F42  0E00               	movlw	0
   921  000F44  6F93               	movwf	main@cont_1222& (0+255),b
   922                           
   923                           ; BSR set to: 0
   924  000F46  0100               	movlb	0	; () banked
   925  000F48  BF94               	btfsc	(main@cont_1222+1)& (0+255),7,b
   926  000F4A  D008               	goto	l2822
   927  000F4C  0100               	movlb	0	; () banked
   928  000F4E  5194               	movf	(main@cont_1222+1)& (0+255),w,b
   929  000F50  E118               	bnz	l327
   930  000F52  0E64               	movlw	100
   931  000F54  0100               	movlb	0	; () banked
   932  000F56  5D93               	subwf	main@cont_1222& (0+255),w,b
   933  000F58  B0D8               	btfsc	status,0,c
   934  000F5A  D013               	goto	l327
   935  000F5C                     l2822:
   936                           
   937                           ; BSR set to: 0
   938                           ;main.c: 194: _delay((unsigned long)((10)*(20000000/4000.0)));
   939  000F5C  0E41               	movlw	65
   940  000F5E  0100               	movlb	0	; () banked
   941  000F60  6F8C               	movwf	??_main& (0+255),b
   942  000F62  0EEE               	movlw	238
   943  000F64                     u2767:
   944  000F64  2EE8               	decfsz	wreg,f,c
   945  000F66  D7FE               	goto	u2767
   946  000F68  2F8C               	decfsz	??_main& (0+255),f,b
   947  000F6A  D7FC               	goto	u2767
   948  000F6C  D000               	nop2	
   949  000F6E  0100               	movlb	0	; () banked
   950  000F70  4B93               	infsnz	main@cont_1222& (0+255),f,b
   951  000F72  2B94               	incf	(main@cont_1222+1)& (0+255),f,b
   952  000F74  0100               	movlb	0	; () banked
   953  000F76  BF94               	btfsc	(main@cont_1222+1)& (0+255),7,b
   954  000F78  D7F1               	goto	l2822
   955  000F7A  0100               	movlb	0	; () banked
   956  000F7C  5194               	movf	(main@cont_1222+1)& (0+255),w,b
   957  000F7E  E101               	bnz	u2710
   958  000F80  D7E8               	goto	L4
   959  000F82                     u2710:
   960  000F82                     l327:
   961                           
   962                           ; BSR set to: 0
   963                           ;main.c: 195: PORTDbits.RD3 = 0;
   964  000F82  9683               	bcf	3971,3,c	;volatile
   965  000F84                     l328:
   966                           
   967                           ;main.c: 198: if(bottonToSend == 1){
   968  000F84  A04A               	btfss	_bottonToSend/(0+8),_bottonToSend& (0+7),c
   969  000F86  D7FE               	goto	l328
   970                           
   971                           ;main.c: 199: ADCON0bits.GODONE = 1;
   972  000F88  82C2               	bsf	4034,1,c	;volatile
   973                           
   974                           ;main.c: 201: read_RTC_I2c(0x04);
   975  000F8A  0E04               	movlw	4
   976  000F8C  ECC1  F00A         	call	_read_RTC_I2c
   977                           
   978                           ;main.c: 202: dia = leitura;
   979  000F90  C09A  F098         	movff	_leitura,_dia
   980                           
   981                           ;main.c: 203: _delay((unsigned long)((10)*(20000000/4000.0)));
   982  000F94  0E41               	movlw	65
   983  000F96  0100               	movlb	0	; () banked
   984  000F98  6F8C               	movwf	??_main& (0+255),b
   985  000F9A  0EEE               	movlw	238
   986  000F9C                     u2777:
   987  000F9C  2EE8               	decfsz	wreg,f,c
   988  000F9E  D7FE               	goto	u2777
   989  000FA0  2F8C               	decfsz	??_main& (0+255),f,b
   990  000FA2  D7FC               	goto	u2777
   991  000FA4  D000               	nop2	
   992                           
   993                           ;main.c: 206: read_RTC_I2c(0x05);
   994  000FA6  0E05               	movlw	5
   995  000FA8  ECC1  F00A         	call	_read_RTC_I2c
   996                           
   997                           ;main.c: 207: mes = leitura;
   998  000FAC  C09A  F09B         	movff	_leitura,_mes
   999                           
  1000                           ;main.c: 208: _delay((unsigned long)((10)*(20000000/4000.0)));
  1001  000FB0  0E41               	movlw	65
  1002  000FB2  0100               	movlb	0	; () banked
  1003  000FB4  6F8C               	movwf	??_main& (0+255),b
  1004  000FB6  0EEE               	movlw	238
  1005  000FB8                     u2787:
  1006  000FB8  2EE8               	decfsz	wreg,f,c
  1007  000FBA  D7FE               	goto	u2787
  1008  000FBC  2F8C               	decfsz	??_main& (0+255),f,b
  1009  000FBE  D7FC               	goto	u2787
  1010  000FC0  D000               	nop2	
  1011                           
  1012                           ;main.c: 211: read_RTC_I2c(0x06);
  1013  000FC2  0E06               	movlw	6
  1014  000FC4  ECC1  F00A         	call	_read_RTC_I2c
  1015                           
  1016                           ;main.c: 212: ano = leitura;
  1017  000FC8  C09A  F097         	movff	_leitura,_ano
  1018                           
  1019                           ;main.c: 213: _delay((unsigned long)((10)*(20000000/4000.0)));
  1020  000FCC  0E41               	movlw	65
  1021  000FCE  0100               	movlb	0	; () banked
  1022  000FD0  6F8C               	movwf	??_main& (0+255),b
  1023  000FD2  0EEE               	movlw	238
  1024  000FD4                     u2797:
  1025  000FD4  2EE8               	decfsz	wreg,f,c
  1026  000FD6  D7FE               	goto	u2797
  1027  000FD8  2F8C               	decfsz	??_main& (0+255),f,b
  1028  000FDA  D7FC               	goto	u2797
  1029  000FDC  D000               	nop2	
  1030                           
  1031                           ;main.c: 216: read_RTC_I2c(0x02);
  1032  000FDE  0E02               	movlw	2
  1033  000FE0  ECC1  F00A         	call	_read_RTC_I2c
  1034                           
  1035                           ;main.c: 217: hora = leitura;
  1036  000FE4  C09A  F099         	movff	_leitura,_hora
  1037                           
  1038                           ;main.c: 218: _delay((unsigned long)((10)*(20000000/4000.0)));
  1039  000FE8  0E41               	movlw	65
  1040  000FEA  0100               	movlb	0	; () banked
  1041  000FEC  6F8C               	movwf	??_main& (0+255),b
  1042  000FEE  0EEE               	movlw	238
  1043  000FF0                     u2807:
  1044  000FF0  2EE8               	decfsz	wreg,f,c
  1045  000FF2  D7FE               	goto	u2807
  1046  000FF4  2F8C               	decfsz	??_main& (0+255),f,b
  1047  000FF6  D7FC               	goto	u2807
  1048  000FF8  D000               	nop2	
  1049                           
  1050                           ;main.c: 221: read_RTC_I2c(0x01);
  1051  000FFA  0E01               	movlw	1
  1052  000FFC  ECC1  F00A         	call	_read_RTC_I2c
  1053                           
  1054                           ;main.c: 222: minuto = leitura;
  1055  001000  C09A  F09C         	movff	_leitura,_minuto
  1056                           
  1057                           ;main.c: 223: _delay((unsigned long)((10)*(20000000/4000.0)));
  1058  001004  0E41               	movlw	65
  1059  001006  0100               	movlb	0	; () banked
  1060  001008  6F8C               	movwf	??_main& (0+255),b
  1061  00100A  0EEE               	movlw	238
  1062  00100C                     u2817:
  1063  00100C  2EE8               	decfsz	wreg,f,c
  1064  00100E  D7FE               	goto	u2817
  1065  001010  2F8C               	decfsz	??_main& (0+255),f,b
  1066  001012  D7FC               	goto	u2817
  1067  001014  D000               	nop2	
  1068                           
  1069                           ;main.c: 226: read_RTC_I2c(0x00);
  1070  001016  0E00               	movlw	0
  1071  001018  ECC1  F00A         	call	_read_RTC_I2c
  1072                           
  1073                           ;main.c: 227: segundo = leitura;
  1074  00101C  C09A  F09D         	movff	_leitura,_segundo
  1075                           
  1076                           ;main.c: 231: printf("%u&%u&20%02X-%02X-%02X %02X:%02X:%02X", id, data_ADC, ano, mes, di
      +                          a, hora, minuto, segundo);
  1077  001020  0E13               	movlw	low STR_2
  1078  001022  0100               	movlb	0	; () banked
  1079  001024  6F6C               	movwf	printf@f& (0+255),b
  1080  001026  0E08               	movlw	high STR_2
  1081  001028  0100               	movlb	0	; () banked
  1082  00102A  6F6D               	movwf	(printf@f+1)& (0+255),b
  1083  00102C  C0B9  F06E         	movff	_id,?_printf+2
  1084  001030  0100               	movlb	0	; () banked
  1085  001032  6B6F               	clrf	(?_printf+3)& (0+255),b
  1086  001034  C095  F070         	movff	_data_ADC,?_printf+4
  1087  001038  C096  F071         	movff	_data_ADC+1,?_printf+5
  1088  00103C  C097  F072         	movff	_ano,?_printf+6
  1089  001040  0100               	movlb	0	; () banked
  1090  001042  6B73               	clrf	(?_printf+7)& (0+255),b
  1091  001044  C09B  F074         	movff	_mes,?_printf+8
  1092  001048  0100               	movlb	0	; () banked
  1093  00104A  6B75               	clrf	(?_printf+9)& (0+255),b
  1094  00104C  C098  F076         	movff	_dia,?_printf+10
  1095  001050  0100               	movlb	0	; () banked
  1096  001052  6B77               	clrf	(?_printf+11)& (0+255),b
  1097  001054  C099  F078         	movff	_hora,?_printf+12
  1098  001058  0100               	movlb	0	; () banked
  1099  00105A  6B79               	clrf	(?_printf+13)& (0+255),b
  1100  00105C  C09C  F07A         	movff	_minuto,?_printf+14
  1101  001060  0100               	movlb	0	; () banked
  1102  001062  6B7B               	clrf	(?_printf+15)& (0+255),b
  1103  001064  C09D  F07C         	movff	_segundo,?_printf+16
  1104  001068  0100               	movlb	0	; () banked
  1105  00106A  6B7D               	clrf	(?_printf+17)& (0+255),b
  1106  00106C  EC28  F004         	call	_printf	;wreg free
  1107                           
  1108                           ;main.c: 233: _delay((unsigned long)((10)*(20000000/4000.0)));
  1109  001070  0E41               	movlw	65
  1110  001072  0100               	movlb	0	; () banked
  1111  001074  6F8C               	movwf	??_main& (0+255),b
  1112  001076  0EEE               	movlw	238
  1113  001078                     u2827:
  1114  001078  2EE8               	decfsz	wreg,f,c
  1115  00107A  D7FE               	goto	u2827
  1116  00107C  2F8C               	decfsz	??_main& (0+255),f,b
  1117  00107E  D7FC               	goto	u2827
  1118  001080  D000               	nop2	
  1119                           
  1120                           ;main.c: 235: printf("\n");
  1121  001082  0E4D               	movlw	low STR_3
  1122  001084  0100               	movlb	0	; () banked
  1123  001086  6F6C               	movwf	printf@f& (0+255),b
  1124  001088  0E08               	movlw	high STR_3
  1125  00108A  0100               	movlb	0	; () banked
  1126  00108C  6F6D               	movwf	(printf@f+1)& (0+255),b
  1127  00108E  EC28  F004         	call	_printf	;wreg free
  1128                           
  1129                           ;main.c: 236: bottonToSend = 0;
  1130  001092  904A               	bcf	_bottonToSend/(0+8),_bottonToSend& (0+7),c
  1131  001094  D777               	goto	l328
  1132  001096                     __end_of_main:
  1133                           	opt stack 0
  1134                           tblptru	equ	0xFF8
  1135                           tblptrh	equ	0xFF7
  1136                           tblptrl	equ	0xFF6
  1137                           tablat	equ	0xFF5
  1138                           intcon	equ	0xFF2
  1139                           intcon2	equ	0xFF1
  1140                           postinc0	equ	0xFEE
  1141                           wreg	equ	0xFE8
  1142                           status	equ	0xFD8
  1143                           
  1144 ;; *************** function _write_RTC_I2c *****************
  1145 ;; Defined at:
  1146 ;;		line 97 in file "main.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;		None
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;		None
  1151 ;; Return value:  Size  Location     Type
  1152 ;;		None               void
  1153 ;; Registers used:
  1154 ;;		wreg, status,2, status,0, cstack
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1160 ;;      Params:         0       0       0       0       0       0       0       0       0
  1161 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1162 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1163 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1164 ;;Total ram usage:        0 bytes
  1165 ;; Hardware stack levels used:    1
  1166 ;; Hardware stack levels required when called:    4
  1167 ;; This function calls:
  1168 ;;		_I2C_Idle
  1169 ;;		_I2C_Start
  1170 ;;		_I2C_Stop
  1171 ;;		_I2C_Write_Byte
  1172 ;; This function is called by:
  1173 ;;		_main
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177                           	psect	text1
  1178  001410                     __ptext1:
  1179                           	opt stack 0
  1180  001410                     _write_RTC_I2c:
  1181                           	opt stack 26
  1182                           
  1183                           ;main.c: 99: I2C_Idle();
  1184                           
  1185                           ;incstack = 0
  1186  001410  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1187                           
  1188                           ;main.c: 100: I2C_Start();
  1189  001414  ECE1  F00B         	call	_I2C_Start	;wreg free
  1190                           
  1191                           ;main.c: 101: I2C_Idle();
  1192  001418  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1193                           
  1194                           ;main.c: 102: I2C_Write_Byte(0xD0);
  1195  00141C  0ED0               	movlw	208
  1196  00141E  ECB3  F00B         	call	_I2C_Write_Byte
  1197                           
  1198                           ;main.c: 103: I2C_Idle();
  1199  001422  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1200                           
  1201                           ;main.c: 104: I2C_Write_Byte(0x00);
  1202  001426  0E00               	movlw	0
  1203  001428  ECB3  F00B         	call	_I2C_Write_Byte
  1204                           
  1205                           ;main.c: 105: I2C_Idle();
  1206  00142C  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1207                           
  1208                           ;main.c: 108: I2C_Write_Byte(0x00);
  1209  001430  0E00               	movlw	0
  1210  001432  ECB3  F00B         	call	_I2C_Write_Byte
  1211                           
  1212                           ;main.c: 109: I2C_Idle();
  1213  001436  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1214                           
  1215                           ;main.c: 111: I2C_Write_Byte(0x30);
  1216  00143A  0E30               	movlw	48
  1217  00143C  ECB3  F00B         	call	_I2C_Write_Byte
  1218                           
  1219                           ;main.c: 112: I2C_Idle();
  1220  001440  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1221                           
  1222                           ;main.c: 114: I2C_Write_Byte(0x14);
  1223  001444  0E14               	movlw	20
  1224  001446  ECB3  F00B         	call	_I2C_Write_Byte
  1225                           
  1226                           ;main.c: 115: I2C_Idle();
  1227  00144A  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1228                           
  1229                           ;main.c: 117: I2C_Write_Byte(0x04);
  1230  00144E  0E04               	movlw	4
  1231  001450  ECB3  F00B         	call	_I2C_Write_Byte
  1232                           
  1233                           ;main.c: 118: I2C_Idle();
  1234  001454  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1235                           
  1236                           ;main.c: 120: I2C_Write_Byte(0x22);
  1237  001458  0E22               	movlw	34
  1238  00145A  ECB3  F00B         	call	_I2C_Write_Byte
  1239                           
  1240                           ;main.c: 121: I2C_Idle();
  1241  00145E  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1242                           
  1243                           ;main.c: 123: I2C_Write_Byte(0x01);
  1244  001462  0E01               	movlw	1
  1245  001464  ECB3  F00B         	call	_I2C_Write_Byte
  1246                           
  1247                           ;main.c: 124: I2C_Idle();
  1248  001468  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1249                           
  1250                           ;main.c: 126: I2C_Write_Byte(0x16);
  1251  00146C  0E16               	movlw	22
  1252  00146E  ECB3  F00B         	call	_I2C_Write_Byte
  1253                           
  1254                           ;main.c: 127: I2C_Idle();
  1255  001472  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1256                           
  1257                           ;main.c: 128: I2C_Stop();
  1258  001476  ECDC  F00B         	call	_I2C_Stop	;wreg free
  1259  00147A  0012               	return		;funcret
  1260  00147C                     __end_of_write_RTC_I2c:
  1261                           	opt stack 0
  1262                           tblptru	equ	0xFF8
  1263                           tblptrh	equ	0xFF7
  1264                           tblptrl	equ	0xFF6
  1265                           tablat	equ	0xFF5
  1266                           intcon	equ	0xFF2
  1267                           intcon2	equ	0xFF1
  1268                           postinc0	equ	0xFEE
  1269                           wreg	equ	0xFE8
  1270                           status	equ	0xFD8
  1271                           
  1272 ;; *************** function _selectChanel *****************
  1273 ;; Defined at:
  1274 ;;		line 44 in file "ad.c"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;  channel         1    wreg     unsigned char 
  1277 ;; Auto vars:     Size  Location     Type
  1278 ;;  channel         1    0[BANK0 ] unsigned char 
  1279 ;; Return value:  Size  Location     Type
  1280 ;;		None               void
  1281 ;; Registers used:
  1282 ;;		wreg, status,2, status,0
  1283 ;; Tracked objects:
  1284 ;;		On entry : 0/0
  1285 ;;		On exit  : 0/0
  1286 ;;		Unchanged: 0/0
  1287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1288 ;;      Params:         0       0       0       0       0       0       0       0       0
  1289 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1290 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1291 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1292 ;;Total ram usage:        1 bytes
  1293 ;; Hardware stack levels used:    1
  1294 ;; Hardware stack levels required when called:    3
  1295 ;; This function calls:
  1296 ;;		Nothing
  1297 ;; This function is called by:
  1298 ;;		_main
  1299 ;; This function uses a non-reentrant model
  1300 ;;
  1301                           
  1302                           	psect	text2
  1303  001222                     __ptext2:
  1304                           	opt stack 0
  1305  001222                     _selectChanel:
  1306                           	opt stack 27
  1307                           
  1308                           ;incstack = 0
  1309                           ;selectChanel@channel stored from wreg
  1310  001222  0100               	movlb	0	; () banked
  1311  001224  6F60               	movwf	selectChanel@channel& (0+255),b
  1312                           
  1313                           ;ad.c: 45: if(channel == 0){
  1314  001226  0100               	movlb	0	; () banked
  1315  001228  5160               	movf	selectChanel@channel& (0+255),w,b
  1316  00122A  0100               	movlb	0	; () banked
  1317  00122C  A4D8               	btfss	status,2,c
  1318  00122E  D005               	goto	l2522
  1319                           
  1320                           ; BSR set to: 0
  1321                           ;ad.c: 46: ADCON0bits.CHS3 = 0;
  1322  001230  9AC2               	bcf	4034,5,c	;volatile
  1323                           
  1324                           ;ad.c: 47: ADCON0bits.CHS2 = 0;
  1325  001232  98C2               	bcf	4034,4,c	;volatile
  1326                           
  1327                           ;ad.c: 48: ADCON0bits.CHS1 = 0;
  1328  001234  96C2               	bcf	4034,3,c	;volatile
  1329                           
  1330                           ;ad.c: 49: ADCON0bits.CHS0 = 0;
  1331  001236  94C2               	bcf	4034,2,c	;volatile
  1332                           
  1333                           ;ad.c: 50: }
  1334  001238  0012               	return	
  1335  00123A                     l2522:
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;ad.c: 51: else if(channel == 1){
  1339  00123A  0100               	movlb	0	; () banked
  1340  00123C  0560               	decf	selectChanel@channel& (0+255),w,b
  1341  00123E  A4D8               	btfss	status,2,c
  1342  001240  D005               	goto	l2526
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;ad.c: 52: ADCON0bits.CHS3 = 0;
  1346  001242  9AC2               	bcf	4034,5,c	;volatile
  1347                           
  1348                           ;ad.c: 53: ADCON0bits.CHS2 = 0;
  1349  001244  98C2               	bcf	4034,4,c	;volatile
  1350                           
  1351                           ;ad.c: 54: ADCON0bits.CHS1 = 0;
  1352  001246  96C2               	bcf	4034,3,c	;volatile
  1353                           
  1354                           ;ad.c: 55: ADCON0bits.CHS0 = 1;
  1355  001248  84C2               	bsf	4034,2,c	;volatile
  1356                           
  1357                           ;ad.c: 56: }
  1358  00124A  0012               	return	
  1359  00124C                     l2526:
  1360                           
  1361                           ; BSR set to: 0
  1362                           ;ad.c: 57: else if(channel == 2){
  1363  00124C  0E02               	movlw	2
  1364  00124E  0100               	movlb	0	; () banked
  1365  001250  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1366  001252  A4D8               	btfss	status,2,c
  1367  001254  D005               	goto	l2530
  1368                           
  1369                           ; BSR set to: 0
  1370                           ;ad.c: 58: ADCON0bits.CHS3 = 0;
  1371  001256  9AC2               	bcf	4034,5,c	;volatile
  1372                           
  1373                           ;ad.c: 59: ADCON0bits.CHS2 = 0;
  1374  001258  98C2               	bcf	4034,4,c	;volatile
  1375                           
  1376                           ;ad.c: 60: ADCON0bits.CHS1 = 1;
  1377  00125A  86C2               	bsf	4034,3,c	;volatile
  1378                           
  1379                           ;ad.c: 61: ADCON0bits.CHS0 = 0;
  1380  00125C  94C2               	bcf	4034,2,c	;volatile
  1381                           
  1382                           ;ad.c: 62: }
  1383  00125E  0012               	return	
  1384  001260                     l2530:
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;ad.c: 63: else if(channel == 3){
  1388  001260  0E03               	movlw	3
  1389  001262  0100               	movlb	0	; () banked
  1390  001264  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1391  001266  A4D8               	btfss	status,2,c
  1392  001268  D005               	goto	l2534
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;ad.c: 64: ADCON0bits.CHS3 = 0;
  1396  00126A  9AC2               	bcf	4034,5,c	;volatile
  1397                           
  1398                           ;ad.c: 65: ADCON0bits.CHS2 = 0;
  1399  00126C  98C2               	bcf	4034,4,c	;volatile
  1400                           
  1401                           ;ad.c: 66: ADCON0bits.CHS1 = 1;
  1402  00126E  86C2               	bsf	4034,3,c	;volatile
  1403                           
  1404                           ;ad.c: 67: ADCON0bits.CHS0 = 1;
  1405  001270  84C2               	bsf	4034,2,c	;volatile
  1406                           
  1407                           ;ad.c: 68: }
  1408  001272  0012               	return	
  1409  001274                     l2534:
  1410                           
  1411                           ; BSR set to: 0
  1412                           ;ad.c: 69: else if(channel == 4){
  1413  001274  0E04               	movlw	4
  1414  001276  0100               	movlb	0	; () banked
  1415  001278  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1416  00127A  A4D8               	btfss	status,2,c
  1417  00127C  D005               	goto	l2538
  1418                           
  1419                           ; BSR set to: 0
  1420                           ;ad.c: 70: ADCON0bits.CHS3 = 0;
  1421  00127E  9AC2               	bcf	4034,5,c	;volatile
  1422                           
  1423                           ;ad.c: 71: ADCON0bits.CHS2 = 1;
  1424  001280  88C2               	bsf	4034,4,c	;volatile
  1425                           
  1426                           ;ad.c: 72: ADCON0bits.CHS1 = 0;
  1427  001282  96C2               	bcf	4034,3,c	;volatile
  1428                           
  1429                           ;ad.c: 73: ADCON0bits.CHS0 = 0;
  1430  001284  94C2               	bcf	4034,2,c	;volatile
  1431                           
  1432                           ;ad.c: 74: }
  1433  001286  0012               	return	
  1434  001288                     l2538:
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;ad.c: 75: else if(channel == 5){
  1438  001288  0E05               	movlw	5
  1439  00128A  0100               	movlb	0	; () banked
  1440  00128C  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1441  00128E  A4D8               	btfss	status,2,c
  1442  001290  D005               	goto	l2542
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;ad.c: 76: ADCON0bits.CHS3 = 0;
  1446  001292  9AC2               	bcf	4034,5,c	;volatile
  1447                           
  1448                           ;ad.c: 77: ADCON0bits.CHS2 = 1;
  1449  001294  88C2               	bsf	4034,4,c	;volatile
  1450                           
  1451                           ;ad.c: 78: ADCON0bits.CHS1 = 0;
  1452  001296  96C2               	bcf	4034,3,c	;volatile
  1453                           
  1454                           ;ad.c: 79: ADCON0bits.CHS0 = 1;
  1455  001298  84C2               	bsf	4034,2,c	;volatile
  1456                           
  1457                           ;ad.c: 80: }
  1458  00129A  0012               	return	
  1459  00129C                     l2542:
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;ad.c: 81: else if(channel == 6){
  1463  00129C  0E06               	movlw	6
  1464  00129E  0100               	movlb	0	; () banked
  1465  0012A0  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1466  0012A2  A4D8               	btfss	status,2,c
  1467  0012A4  D005               	goto	l2546
  1468                           
  1469                           ; BSR set to: 0
  1470                           ;ad.c: 82: ADCON0bits.CHS3 = 0;
  1471  0012A6  9AC2               	bcf	4034,5,c	;volatile
  1472                           
  1473                           ;ad.c: 83: ADCON0bits.CHS2 = 1;
  1474  0012A8  88C2               	bsf	4034,4,c	;volatile
  1475                           
  1476                           ;ad.c: 84: ADCON0bits.CHS1 = 1;
  1477  0012AA  86C2               	bsf	4034,3,c	;volatile
  1478                           
  1479                           ;ad.c: 85: ADCON0bits.CHS0 = 0;
  1480  0012AC  94C2               	bcf	4034,2,c	;volatile
  1481                           
  1482                           ;ad.c: 86: }
  1483  0012AE  0012               	return	
  1484  0012B0                     l2546:
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;ad.c: 87: else if(channel == 7){
  1488  0012B0  0E07               	movlw	7
  1489  0012B2  0100               	movlb	0	; () banked
  1490  0012B4  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1491  0012B6  A4D8               	btfss	status,2,c
  1492  0012B8  D005               	goto	l2550
  1493                           
  1494                           ; BSR set to: 0
  1495                           ;ad.c: 88: ADCON0bits.CHS3 = 0;
  1496  0012BA  9AC2               	bcf	4034,5,c	;volatile
  1497                           
  1498                           ;ad.c: 89: ADCON0bits.CHS2 = 1;
  1499  0012BC  88C2               	bsf	4034,4,c	;volatile
  1500                           
  1501                           ;ad.c: 90: ADCON0bits.CHS1 = 1;
  1502  0012BE  86C2               	bsf	4034,3,c	;volatile
  1503                           
  1504                           ;ad.c: 91: ADCON0bits.CHS0 = 1;
  1505  0012C0  84C2               	bsf	4034,2,c	;volatile
  1506                           
  1507                           ;ad.c: 92: }
  1508  0012C2  0012               	return	
  1509  0012C4                     l2550:
  1510                           
  1511                           ; BSR set to: 0
  1512                           ;ad.c: 93: else if(channel == 8){
  1513  0012C4  0E08               	movlw	8
  1514  0012C6  0100               	movlb	0	; () banked
  1515  0012C8  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1516  0012CA  A4D8               	btfss	status,2,c
  1517  0012CC  D005               	goto	l2554
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;ad.c: 94: ADCON0bits.CHS3 = 1;
  1521  0012CE  8AC2               	bsf	4034,5,c	;volatile
  1522                           
  1523                           ;ad.c: 95: ADCON0bits.CHS2 = 0;
  1524  0012D0  98C2               	bcf	4034,4,c	;volatile
  1525                           
  1526                           ;ad.c: 96: ADCON0bits.CHS1 = 0;
  1527  0012D2  96C2               	bcf	4034,3,c	;volatile
  1528                           
  1529                           ;ad.c: 97: ADCON0bits.CHS0 = 0;
  1530  0012D4  94C2               	bcf	4034,2,c	;volatile
  1531                           
  1532                           ;ad.c: 98: }
  1533  0012D6  0012               	return	
  1534  0012D8                     l2554:
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;ad.c: 99: else if(channel == 9){
  1538  0012D8  0E09               	movlw	9
  1539  0012DA  0100               	movlb	0	; () banked
  1540  0012DC  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1541  0012DE  A4D8               	btfss	status,2,c
  1542  0012E0  D005               	goto	l2558
  1543                           
  1544                           ; BSR set to: 0
  1545                           ;ad.c: 100: ADCON0bits.CHS3 = 1;
  1546  0012E2  8AC2               	bsf	4034,5,c	;volatile
  1547                           
  1548                           ;ad.c: 101: ADCON0bits.CHS2 = 0;
  1549  0012E4  98C2               	bcf	4034,4,c	;volatile
  1550                           
  1551                           ;ad.c: 102: ADCON0bits.CHS1 = 0;
  1552  0012E6  96C2               	bcf	4034,3,c	;volatile
  1553                           
  1554                           ;ad.c: 103: ADCON0bits.CHS0 = 1;
  1555  0012E8  84C2               	bsf	4034,2,c	;volatile
  1556                           
  1557                           ;ad.c: 104: }
  1558  0012EA  0012               	return	
  1559  0012EC                     l2558:
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;ad.c: 105: else if(channel == 10){
  1563  0012EC  0E0A               	movlw	10
  1564  0012EE  0100               	movlb	0	; () banked
  1565  0012F0  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1566  0012F2  A4D8               	btfss	status,2,c
  1567  0012F4  D005               	goto	l2562
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;ad.c: 106: ADCON0bits.CHS3 = 1;
  1571  0012F6  8AC2               	bsf	4034,5,c	;volatile
  1572                           
  1573                           ;ad.c: 107: ADCON0bits.CHS2 = 0;
  1574  0012F8  98C2               	bcf	4034,4,c	;volatile
  1575                           
  1576                           ;ad.c: 108: ADCON0bits.CHS1 = 1;
  1577  0012FA  86C2               	bsf	4034,3,c	;volatile
  1578                           
  1579                           ;ad.c: 109: ADCON0bits.CHS0 = 0;
  1580  0012FC  94C2               	bcf	4034,2,c	;volatile
  1581                           
  1582                           ;ad.c: 110: }
  1583  0012FE  0012               	return	
  1584  001300                     l2562:
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;ad.c: 111: else if(channel == 11){
  1588  001300  0E0B               	movlw	11
  1589  001302  0100               	movlb	0	; () banked
  1590  001304  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1591  001306  A4D8               	btfss	status,2,c
  1592  001308  D005               	goto	l2566
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;ad.c: 112: ADCON0bits.CHS3 = 1;
  1596  00130A  8AC2               	bsf	4034,5,c	;volatile
  1597                           
  1598                           ;ad.c: 113: ADCON0bits.CHS2 = 0;
  1599  00130C  98C2               	bcf	4034,4,c	;volatile
  1600                           
  1601                           ;ad.c: 114: ADCON0bits.CHS1 = 1;
  1602  00130E  86C2               	bsf	4034,3,c	;volatile
  1603                           
  1604                           ;ad.c: 115: ADCON0bits.CHS0 = 1;
  1605  001310  84C2               	bsf	4034,2,c	;volatile
  1606                           
  1607                           ;ad.c: 116: }
  1608  001312  0012               	return	
  1609  001314                     l2566:
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;ad.c: 117: else if(channel == 12){
  1613  001314  0E0C               	movlw	12
  1614  001316  0100               	movlb	0	; () banked
  1615  001318  1960               	xorwf	selectChanel@channel& (0+255),w,b
  1616  00131A  A4D8               	btfss	status,2,c
  1617  00131C  0012               	return	
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;ad.c: 118: ADCON0bits.CHS3 = 1;
  1621  00131E  8AC2               	bsf	4034,5,c	;volatile
  1622                           
  1623                           ;ad.c: 119: ADCON0bits.CHS2 = 1;
  1624  001320  88C2               	bsf	4034,4,c	;volatile
  1625                           
  1626                           ;ad.c: 120: ADCON0bits.CHS1 = 0;
  1627  001322  96C2               	bcf	4034,3,c	;volatile
  1628                           
  1629                           ;ad.c: 121: ADCON0bits.CHS0 = 0;
  1630  001324  94C2               	bcf	4034,2,c	;volatile
  1631                           
  1632                           ; BSR set to: 0
  1633                           
  1634                           ; BSR set to: 0
  1635                           
  1636                           ; BSR set to: 0
  1637                           
  1638                           ; BSR set to: 0
  1639                           
  1640                           ; BSR set to: 0
  1641                           
  1642                           ; BSR set to: 0
  1643                           
  1644                           ; BSR set to: 0
  1645                           
  1646                           ; BSR set to: 0
  1647                           
  1648                           ; BSR set to: 0
  1649                           
  1650                           ; BSR set to: 0
  1651                           
  1652                           ; BSR set to: 0
  1653                           
  1654                           ; BSR set to: 0
  1655  001326  0012               	return	
  1656  001328                     __end_of_selectChanel:
  1657                           	opt stack 0
  1658                           tblptru	equ	0xFF8
  1659                           tblptrh	equ	0xFF7
  1660                           tblptrl	equ	0xFF6
  1661                           tablat	equ	0xFF5
  1662                           intcon	equ	0xFF2
  1663                           intcon2	equ	0xFF1
  1664                           postinc0	equ	0xFEE
  1665                           wreg	equ	0xFE8
  1666                           status	equ	0xFD8
  1667                           
  1668 ;; *************** function _read_RTC_I2c *****************
  1669 ;; Defined at:
  1670 ;;		line 131 in file "main.c"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;  pos_memoria     1    wreg     unsigned char 
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;  pos_memoria     1    1[BANK0 ] unsigned char 
  1675 ;; Return value:  Size  Location     Type
  1676 ;;		None               void
  1677 ;; Registers used:
  1678 ;;		wreg, status,2, status,0, cstack
  1679 ;; Tracked objects:
  1680 ;;		On entry : 0/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1684 ;;      Params:         0       0       0       0       0       0       0       0       0
  1685 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1686 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1687 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1688 ;;Total ram usage:        1 bytes
  1689 ;; Hardware stack levels used:    1
  1690 ;; Hardware stack levels required when called:    4
  1691 ;; This function calls:
  1692 ;;		_I2C_Idle
  1693 ;;		_I2C_ReStart
  1694 ;;		_I2C_Read_Byte
  1695 ;;		_I2C_Send_NACK
  1696 ;;		_I2C_Start
  1697 ;;		_I2C_Stop
  1698 ;;		_I2C_Write_Byte
  1699 ;; This function is called by:
  1700 ;;		_main
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text3
  1705  001582                     __ptext3:
  1706                           	opt stack 0
  1707  001582                     _read_RTC_I2c:
  1708                           	opt stack 26
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;incstack = 0
  1712                           ;read_RTC_I2c@pos_memoria stored from wreg
  1713  001582  0100               	movlb	0	; () banked
  1714  001584  6F61               	movwf	read_RTC_I2c@pos_memoria& (0+255),b
  1715                           
  1716                           ;main.c: 133: I2C_Idle();
  1717  001586  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1718                           
  1719                           ;main.c: 134: I2C_Start();
  1720  00158A  ECE1  F00B         	call	_I2C_Start	;wreg free
  1721                           
  1722                           ;main.c: 135: I2C_Idle();
  1723  00158E  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1724                           
  1725                           ;main.c: 136: I2C_Write_Byte(0xD0);
  1726  001592  0ED0               	movlw	208
  1727  001594  ECB3  F00B         	call	_I2C_Write_Byte
  1728                           
  1729                           ;main.c: 137: I2C_Idle();
  1730  001598  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1731                           
  1732                           ;main.c: 138: I2C_Write_Byte(pos_memoria);
  1733  00159C  0100               	movlb	0	; () banked
  1734  00159E  5161               	movf	read_RTC_I2c@pos_memoria& (0+255),w,b
  1735  0015A0  ECB3  F00B         	call	_I2C_Write_Byte
  1736                           
  1737                           ;main.c: 139: I2C_Idle();
  1738  0015A4  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1739                           
  1740                           ;main.c: 140: I2C_ReStart();
  1741  0015A8  ECE6  F00B         	call	_I2C_ReStart	;wreg free
  1742                           
  1743                           ;main.c: 141: I2C_Idle();
  1744  0015AC  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1745                           
  1746                           ;main.c: 142: I2C_Write_Byte(0xD1);
  1747  0015B0  0ED1               	movlw	209
  1748  0015B2  ECB3  F00B         	call	_I2C_Write_Byte
  1749                           
  1750                           ;main.c: 143: I2C_Idle();
  1751  0015B6  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1752                           
  1753                           ;main.c: 144: leitura = I2C_Read_Byte();
  1754  0015BA  ECD0  F00B         	call	_I2C_Read_Byte	;wreg free
  1755  0015BE  0100               	movlb	0	; () banked
  1756  0015C0  6F9A               	movwf	_leitura& (0+255),b
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;main.c: 145: I2C_Idle();
  1760  0015C2  ECA9  F00B         	call	_I2C_Idle	;wreg free
  1761                           
  1762                           ;main.c: 146: I2C_Send_NACK();
  1763  0015C6  ECCA  F00B         	call	_I2C_Send_NACK	;wreg free
  1764                           
  1765                           ;main.c: 147: I2C_Stop();
  1766  0015CA  ECDC  F00B         	call	_I2C_Stop	;wreg free
  1767  0015CE  0012               	return		;funcret
  1768  0015D0                     __end_of_read_RTC_I2c:
  1769                           	opt stack 0
  1770                           tblptru	equ	0xFF8
  1771                           tblptrh	equ	0xFF7
  1772                           tblptrl	equ	0xFF6
  1773                           tablat	equ	0xFF5
  1774                           intcon	equ	0xFF2
  1775                           intcon2	equ	0xFF1
  1776                           postinc0	equ	0xFEE
  1777                           wreg	equ	0xFE8
  1778                           status	equ	0xFD8
  1779                           
  1780 ;; *************** function _I2C_Write_Byte *****************
  1781 ;; Defined at:
  1782 ;;		line 82 in file "i2c.c"
  1783 ;; Parameters:    Size  Location     Type
  1784 ;;  Byte            1    wreg     unsigned char 
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;  Byte            1    0[BANK0 ] unsigned char 
  1787 ;; Return value:  Size  Location     Type
  1788 ;;		None               void
  1789 ;; Registers used:
  1790 ;;		wreg
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1796 ;;      Params:         0       0       0       0       0       0       0       0       0
  1797 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1798 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1799 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1800 ;;Total ram usage:        1 bytes
  1801 ;; Hardware stack levels used:    1
  1802 ;; Hardware stack levels required when called:    3
  1803 ;; This function calls:
  1804 ;;		Nothing
  1805 ;; This function is called by:
  1806 ;;		_write_RTC_I2c
  1807 ;;		_read_RTC_I2c
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           	psect	text4
  1812  001766                     __ptext4:
  1813                           	opt stack 0
  1814  001766                     _I2C_Write_Byte:
  1815                           	opt stack 26
  1816                           
  1817                           ;incstack = 0
  1818                           ;I2C_Write_Byte@Byte stored from wreg
  1819  001766  0100               	movlb	0	; () banked
  1820  001768  6F60               	movwf	I2C_Write_Byte@Byte& (0+255),b
  1821                           
  1822                           ;i2c.c: 84: SSPBUF = Byte;
  1823  00176A  C060  FFC9         	movff	I2C_Write_Byte@Byte,4041	;volatile
  1824  00176E                     l107:
  1825  00176E  A69E               	btfss	3998,3,c	;volatile
  1826  001770  D7FE               	goto	l107
  1827                           
  1828                           ;i2c.c: 86: SSPIF = 0;
  1829  001772  969E               	bcf	3998,3,c	;volatile
  1830                           
  1831                           ;i2c.c: 87: return SSPCON2bits.ACKSTAT;
  1832                           ;	Return value of _I2C_Write_Byte is never used
  1833  001774  50C5               	movf	4037,w,c	;volatile
  1834  001776  0012               	return		;funcret
  1835  001778                     __end_of_I2C_Write_Byte:
  1836                           	opt stack 0
  1837                           tblptru	equ	0xFF8
  1838                           tblptrh	equ	0xFF7
  1839                           tblptrl	equ	0xFF6
  1840                           tablat	equ	0xFF5
  1841                           intcon	equ	0xFF2
  1842                           intcon2	equ	0xFF1
  1843                           postinc0	equ	0xFEE
  1844                           wreg	equ	0xFE8
  1845                           status	equ	0xFD8
  1846                           
  1847 ;; *************** function _I2C_Stop *****************
  1848 ;; Defined at:
  1849 ;;		line 62 in file "i2c.c"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;		None
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;		None
  1854 ;; Return value:  Size  Location     Type
  1855 ;;		None               void
  1856 ;; Registers used:
  1857 ;;		None
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1863 ;;      Params:         0       0       0       0       0       0       0       0       0
  1864 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1865 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1866 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1867 ;;Total ram usage:        0 bytes
  1868 ;; Hardware stack levels used:    1
  1869 ;; Hardware stack levels required when called:    3
  1870 ;; This function calls:
  1871 ;;		Nothing
  1872 ;; This function is called by:
  1873 ;;		_write_RTC_I2c
  1874 ;;		_read_RTC_I2c
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           	psect	text5
  1879  0017B8                     __ptext5:
  1880                           	opt stack 0
  1881  0017B8                     _I2C_Stop:
  1882                           	opt stack 26
  1883                           
  1884                           ;i2c.c: 63: SSPCON2bits.PEN = 1;
  1885                           
  1886                           ;incstack = 0
  1887  0017B8  84C5               	bsf	4037,2,c	;volatile
  1888  0017BA                     l89:
  1889  0017BA  A69E               	btfss	3998,3,c	;volatile
  1890  0017BC  D7FE               	goto	l89
  1891                           
  1892                           ;i2c.c: 65: SSPIF = 0;
  1893  0017BE  969E               	bcf	3998,3,c	;volatile
  1894  0017C0  0012               	return		;funcret
  1895  0017C2                     __end_of_I2C_Stop:
  1896                           	opt stack 0
  1897                           tblptru	equ	0xFF8
  1898                           tblptrh	equ	0xFF7
  1899                           tblptrl	equ	0xFF6
  1900                           tablat	equ	0xFF5
  1901                           intcon	equ	0xFF2
  1902                           intcon2	equ	0xFF1
  1903                           postinc0	equ	0xFEE
  1904                           wreg	equ	0xFE8
  1905                           status	equ	0xFD8
  1906                           
  1907 ;; *************** function _I2C_Start *****************
  1908 ;; Defined at:
  1909 ;;		line 48 in file "i2c.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;		None
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;		None
  1914 ;; Return value:  Size  Location     Type
  1915 ;;		None               void
  1916 ;; Registers used:
  1917 ;;		None
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1923 ;;      Params:         0       0       0       0       0       0       0       0       0
  1924 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1926 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1927 ;;Total ram usage:        0 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    3
  1930 ;; This function calls:
  1931 ;;		Nothing
  1932 ;; This function is called by:
  1933 ;;		_write_RTC_I2c
  1934 ;;		_read_RTC_I2c
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938                           	psect	text6
  1939  0017C2                     __ptext6:
  1940                           	opt stack 0
  1941  0017C2                     _I2C_Start:
  1942                           	opt stack 26
  1943                           
  1944                           ;i2c.c: 50: SSPCON2bits.SEN = 1;
  1945                           
  1946                           ;incstack = 0
  1947  0017C2  80C5               	bsf	4037,0,c	;volatile
  1948  0017C4                     l77:
  1949  0017C4  A69E               	btfss	3998,3,c	;volatile
  1950  0017C6  D7FE               	goto	l77
  1951                           
  1952                           ;i2c.c: 52: SSPIF = 0;
  1953  0017C8  969E               	bcf	3998,3,c	;volatile
  1954  0017CA  0012               	return		;funcret
  1955  0017CC                     __end_of_I2C_Start:
  1956                           	opt stack 0
  1957                           tblptru	equ	0xFF8
  1958                           tblptrh	equ	0xFF7
  1959                           tblptrl	equ	0xFF6
  1960                           tablat	equ	0xFF5
  1961                           intcon	equ	0xFF2
  1962                           intcon2	equ	0xFF1
  1963                           postinc0	equ	0xFEE
  1964                           wreg	equ	0xFE8
  1965                           status	equ	0xFD8
  1966                           
  1967 ;; *************** function _I2C_Send_NACK *****************
  1968 ;; Defined at:
  1969 ;;		line 75 in file "i2c.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;		None
  1972 ;; Auto vars:     Size  Location     Type
  1973 ;;		None
  1974 ;; Return value:  Size  Location     Type
  1975 ;;		None               void
  1976 ;; Registers used:
  1977 ;;		None
  1978 ;; Tracked objects:
  1979 ;;		On entry : 0/0
  1980 ;;		On exit  : 0/0
  1981 ;;		Unchanged: 0/0
  1982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1983 ;;      Params:         0       0       0       0       0       0       0       0       0
  1984 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1985 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1986 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1987 ;;Total ram usage:        0 bytes
  1988 ;; Hardware stack levels used:    1
  1989 ;; Hardware stack levels required when called:    3
  1990 ;; This function calls:
  1991 ;;		Nothing
  1992 ;; This function is called by:
  1993 ;;		_read_RTC_I2c
  1994 ;; This function uses a non-reentrant model
  1995 ;;
  1996                           
  1997                           	psect	text7
  1998  001794                     __ptext7:
  1999                           	opt stack 0
  2000  001794                     _I2C_Send_NACK:
  2001                           	opt stack 26
  2002                           
  2003                           ;i2c.c: 76: SSPCON2bits.ACKDT = 1;
  2004                           
  2005                           ;incstack = 0
  2006  001794  8AC5               	bsf	4037,5,c	;volatile
  2007                           
  2008                           ;i2c.c: 77: SSPCON2bits.ACKEN = 1;
  2009  001796  88C5               	bsf	4037,4,c	;volatile
  2010  001798                     l101:
  2011  001798  A69E               	btfss	3998,3,c	;volatile
  2012  00179A  D7FE               	goto	l101
  2013                           
  2014                           ;i2c.c: 79: SSPIF = 0;
  2015  00179C  969E               	bcf	3998,3,c	;volatile
  2016  00179E  0012               	return		;funcret
  2017  0017A0                     __end_of_I2C_Send_NACK:
  2018                           	opt stack 0
  2019                           tblptru	equ	0xFF8
  2020                           tblptrh	equ	0xFF7
  2021                           tblptrl	equ	0xFF6
  2022                           tablat	equ	0xFF5
  2023                           intcon	equ	0xFF2
  2024                           intcon2	equ	0xFF1
  2025                           postinc0	equ	0xFEE
  2026                           wreg	equ	0xFE8
  2027                           status	equ	0xFD8
  2028                           
  2029 ;; *************** function _I2C_Read_Byte *****************
  2030 ;; Defined at:
  2031 ;;		line 90 in file "i2c.c"
  2032 ;; Parameters:    Size  Location     Type
  2033 ;;		None
  2034 ;; Auto vars:     Size  Location     Type
  2035 ;;		None
  2036 ;; Return value:  Size  Location     Type
  2037 ;;                  1    wreg      unsigned char 
  2038 ;; Registers used:
  2039 ;;		wreg, status,2
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2045 ;;      Params:         0       0       0       0       0       0       0       0       0
  2046 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2047 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2048 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2049 ;;Total ram usage:        0 bytes
  2050 ;; Hardware stack levels used:    1
  2051 ;; Hardware stack levels required when called:    3
  2052 ;; This function calls:
  2053 ;;		Nothing
  2054 ;; This function is called by:
  2055 ;;		_read_RTC_I2c
  2056 ;; This function uses a non-reentrant model
  2057 ;;
  2058                           
  2059                           	psect	text8
  2060  0017A0                     __ptext8:
  2061                           	opt stack 0
  2062  0017A0                     _I2C_Read_Byte:
  2063                           	opt stack 26
  2064                           
  2065                           ;i2c.c: 92: SSPCON2bits.RCEN = 1;
  2066                           
  2067                           ;incstack = 0
  2068  0017A0  86C5               	bsf	4037,3,c	;volatile
  2069  0017A2                     l113:
  2070  0017A2  A69E               	btfss	3998,3,c	;volatile
  2071  0017A4  D7FE               	goto	l113
  2072                           
  2073                           ;i2c.c: 94: SSPIF = 0;
  2074  0017A6  969E               	bcf	3998,3,c	;volatile
  2075                           
  2076                           ;i2c.c: 96: return SSPBUF;
  2077  0017A8  50C9               	movf	4041,w,c	;volatile
  2078  0017AA  0012               	return	
  2079  0017AC                     __end_of_I2C_Read_Byte:
  2080                           	opt stack 0
  2081                           tblptru	equ	0xFF8
  2082                           tblptrh	equ	0xFF7
  2083                           tblptrl	equ	0xFF6
  2084                           tablat	equ	0xFF5
  2085                           intcon	equ	0xFF2
  2086                           intcon2	equ	0xFF1
  2087                           postinc0	equ	0xFEE
  2088                           wreg	equ	0xFE8
  2089                           status	equ	0xFD8
  2090                           
  2091 ;; *************** function _I2C_ReStart *****************
  2092 ;; Defined at:
  2093 ;;		line 55 in file "i2c.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;		None
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;		None
  2098 ;; Return value:  Size  Location     Type
  2099 ;;		None               void
  2100 ;; Registers used:
  2101 ;;		None
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2107 ;;      Params:         0       0       0       0       0       0       0       0       0
  2108 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2109 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2110 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2111 ;;Total ram usage:        0 bytes
  2112 ;; Hardware stack levels used:    1
  2113 ;; Hardware stack levels required when called:    3
  2114 ;; This function calls:
  2115 ;;		Nothing
  2116 ;; This function is called by:
  2117 ;;		_read_RTC_I2c
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           	psect	text9
  2122  0017CC                     __ptext9:
  2123                           	opt stack 0
  2124  0017CC                     _I2C_ReStart:
  2125                           	opt stack 26
  2126                           
  2127                           ;i2c.c: 57: SSPCON2bits.RSEN = 1;
  2128                           
  2129                           ;incstack = 0
  2130  0017CC  82C5               	bsf	4037,1,c	;volatile
  2131  0017CE                     l83:
  2132  0017CE  A69E               	btfss	3998,3,c	;volatile
  2133  0017D0  D7FE               	goto	l83
  2134                           
  2135                           ;i2c.c: 59: SSPIF = 0;
  2136  0017D2  969E               	bcf	3998,3,c	;volatile
  2137  0017D4  0012               	return		;funcret
  2138  0017D6                     __end_of_I2C_ReStart:
  2139                           	opt stack 0
  2140                           tblptru	equ	0xFF8
  2141                           tblptrh	equ	0xFF7
  2142                           tblptrl	equ	0xFF6
  2143                           tablat	equ	0xFF5
  2144                           intcon	equ	0xFF2
  2145                           intcon2	equ	0xFF1
  2146                           postinc0	equ	0xFEE
  2147                           wreg	equ	0xFE8
  2148                           status	equ	0xFD8
  2149                           
  2150 ;; *************** function _I2C_Idle *****************
  2151 ;; Defined at:
  2152 ;;		line 99 in file "i2c.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;		None
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;		None
  2157 ;; Return value:  Size  Location     Type
  2158 ;;		None               void
  2159 ;; Registers used:
  2160 ;;		wreg, status,2, status,0
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2166 ;;      Params:         0       0       0       0       0       0       0       0       0
  2167 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2168 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2169 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2170 ;;Total ram usage:        1 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    3
  2173 ;; This function calls:
  2174 ;;		Nothing
  2175 ;; This function is called by:
  2176 ;;		_write_RTC_I2c
  2177 ;;		_read_RTC_I2c
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181                           	psect	text10
  2182  001752                     __ptext10:
  2183                           	opt stack 0
  2184  001752                     _I2C_Idle:
  2185                           	opt stack 26
  2186  001752                     l2450:
  2187  001752  CFC5 F060          	movff	4037,??_I2C_Idle	;volatile
  2188  001756  0E1F               	movlw	31
  2189  001758  0100               	movlb	0	; () banked
  2190  00175A  1760               	andwf	??_I2C_Idle& (0+255),f,b
  2191  00175C  A4D8               	btfss	status,2,c
  2192  00175E  D7F9               	goto	l2450
  2193                           
  2194                           ; BSR set to: 0
  2195  001760  A4C7               	btfss	4039,2,c	;volatile
  2196  001762  0012               	return	
  2197  001764  D7F6               	goto	l2450
  2198  001766                     __end_of_I2C_Idle:
  2199                           	opt stack 0
  2200                           tblptru	equ	0xFF8
  2201                           tblptrh	equ	0xFF7
  2202                           tblptrl	equ	0xFF6
  2203                           tablat	equ	0xFF5
  2204                           intcon	equ	0xFF2
  2205                           intcon2	equ	0xFF1
  2206                           postinc0	equ	0xFEE
  2207                           wreg	equ	0xFE8
  2208                           status	equ	0xFD8
  2209                           
  2210 ;; *************** function _printf *****************
  2211 ;; Defined at:
  2212 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  2215 ;;		 -> STR_3(2), STR_2(38), STR_1(3), 
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;  idx             1   34[BANK0 ] unsigned char 
  2218 ;;  tmpval          4    0        struct .
  2219 ;;  cp              3    0        PTR const unsigned char 
  2220 ;;  width           2   41[BANK0 ] int 
  2221 ;;  val             2   38[BANK0 ] unsigned int 
  2222 ;;  ap              2   35[BANK0 ] PTR void [1]
  2223 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2224 ;;  len             2    0        unsigned int 
  2225 ;;  c               1   43[BANK0 ] char 
  2226 ;;  flag            1   40[BANK0 ] unsigned char 
  2227 ;;  prec            1   37[BANK0 ] char 
  2228 ;; Return value:  Size  Location     Type
  2229 ;;                  2   12[BANK0 ] int 
  2230 ;; Registers used:
  2231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2237 ;;      Params:         0      18       0       0       0       0       0       0       0
  2238 ;;      Locals:         0      10       0       0       0       0       0       0       0
  2239 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2240 ;;      Totals:         0      32       0       0       0       0       0       0       0
  2241 ;;Total ram usage:       32 bytes
  2242 ;; Hardware stack levels used:    1
  2243 ;; Hardware stack levels required when called:    4
  2244 ;; This function calls:
  2245 ;;		___lwdiv
  2246 ;;		___lwmod
  2247 ;;		___wmul
  2248 ;;		_isdigit
  2249 ;;		_putch
  2250 ;; This function is called by:
  2251 ;;		_main
  2252 ;; This function uses a non-reentrant model
  2253 ;;
  2254                           
  2255                           	psect	text11
  2256  000850                     __ptext11:
  2257                           	opt stack 0
  2258  000850                     _printf:
  2259                           	opt stack 26
  2260                           
  2261                           ;doprnt.c: 466: va_list ap;
  2262                           ;doprnt.c: 499: signed char c;
  2263                           ;doprnt.c: 501: int width;
  2264                           ;doprnt.c: 506: signed char prec;
  2265                           ;doprnt.c: 508: unsigned char flag;
  2266                           ;doprnt.c: 523: union {
  2267                           ;doprnt.c: 524: unsigned long vd;
  2268                           ;doprnt.c: 525: double integ;
  2269                           ;doprnt.c: 526: } tmpval;
  2270                           ;doprnt.c: 528: unsigned int val;
  2271                           ;doprnt.c: 529: unsigned len;
  2272                           ;doprnt.c: 530: const char * cp;
  2273                           ;doprnt.c: 533: *ap = __va_start();
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;incstack = 0
  2277  000850  0E6E               	movlw	low (?_printf+2)
  2278  000852  0100               	movlb	0	; () banked
  2279  000854  6F83               	movwf	printf@ap& (0+255),b
  2280  000856  0E00               	movlw	high (?_printf+2)
  2281  000858  0100               	movlb	0	; () banked
  2282  00085A  6F84               	movwf	(printf@ap+1)& (0+255),b
  2283                           
  2284                           ;doprnt.c: 536: while(c = *f++) {
  2285  00085C  D187               	goto	l2696
  2286  00085E                     l2594:
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;doprnt.c: 538: if(c != '%')
  2290  00085E  0E25               	movlw	37
  2291  000860  0100               	movlb	0	; () banked
  2292  000862  198B               	xorwf	printf@c& (0+255),w,b
  2293  000864  B4D8               	btfsc	status,2,c
  2294  000866  D005               	goto	l2598
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;doprnt.c: 540: {
  2298                           ;doprnt.c: 541: (putch(c) );
  2299  000868  0100               	movlb	0	; () banked
  2300  00086A  518B               	movf	printf@c& (0+255),w,b
  2301  00086C  ECBC  F00B         	call	_putch
  2302                           
  2303                           ;doprnt.c: 542: continue;
  2304  000870  D17D               	goto	l2696
  2305  000872                     l2598:
  2306                           
  2307                           ;doprnt.c: 543: }
  2308                           ;doprnt.c: 546: width = 0;
  2309  000872  0E00               	movlw	0
  2310  000874  0100               	movlb	0	; () banked
  2311  000876  6F8A               	movwf	(printf@width+1)& (0+255),b
  2312  000878  0E00               	movlw	0
  2313  00087A  6F89               	movwf	printf@width& (0+255),b
  2314                           
  2315                           ;doprnt.c: 548: flag = 0;
  2316  00087C  0E00               	movlw	0
  2317  00087E  0100               	movlb	0	; () banked
  2318  000880  6F88               	movwf	printf@flag& (0+255),b
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;doprnt.c: 551: switch(*f) {
  2322                           
  2323                           ;doprnt.c: 550: for(;;) {
  2324  000882  D005               	goto	l2604
  2325  000884                     l2600:
  2326                           
  2327                           ;doprnt.c: 580: flag |= 0x04;
  2328  000884  0100               	movlb	0	; () banked
  2329  000886  8588               	bsf	printf@flag& (0+255),2,b
  2330                           
  2331                           ;doprnt.c: 581: f++;
  2332  000888  0100               	movlb	0	; () banked
  2333  00088A  4B6C               	infsnz	printf@f& (0+255),f,b
  2334  00088C  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2335  00088E                     l2604:
  2336  00088E  C06C  FFF6         	movff	printf@f,tblptrl
  2337  000892  C06D  FFF7         	movff	printf@f+1,tblptrh
  2338  000896                     	if	0	;tblptru may be non-zero
  2339  000896                     	endif
  2340  000896                     	if	0	;tblptru may be non-zero
  2341  000896                     	endif
  2342  000896  0008               	tblrd		*
  2343  000898  50F5               	movf	tablat,w,c
  2344                           
  2345                           ; Switch size 1, requested type "space"
  2346                           ; Number of cases is 1, Range of values is 48 to 48
  2347                           ; switch strategies available:
  2348                           ; Name         Instructions Cycles
  2349                           ; simple_byte            4     3 (average)
  2350                           ;	Chosen strategy is simple_byte
  2351  00089A  0A30               	xorlw	48	; case 48
  2352  00089C  B4D8               	btfsc	status,2,c
  2353  00089E  D7F2               	goto	l2600
  2354                           
  2355                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2356                           
  2357                           ;doprnt.c: 586: }
  2358                           
  2359                           ;doprnt.c: 585: break;
  2360  0008A0  C06C  FFF6         	movff	printf@f,tblptrl
  2361  0008A4  C06D  FFF7         	movff	printf@f+1,tblptrh
  2362  0008A8                     	if	0	;tblptru may be non-zero
  2363  0008A8                     	endif
  2364  0008A8                     	if	0	;tblptru may be non-zero
  2365  0008A8                     	endif
  2366  0008A8  0008               	tblrd		*
  2367  0008AA  50F5               	movf	tablat,w,c
  2368  0008AC  EC3B  F00B         	call	_isdigit
  2369  0008B0  A0D8               	btfss	status,0,c
  2370  0008B2  D048               	goto	l2624
  2371                           
  2372                           ;doprnt.c: 598: width = 0;
  2373  0008B4  0E00               	movlw	0
  2374  0008B6  0100               	movlb	0	; () banked
  2375  0008B8  6F8A               	movwf	(printf@width+1)& (0+255),b
  2376  0008BA  0E00               	movlw	0
  2377  0008BC  6F89               	movwf	printf@width& (0+255),b
  2378  0008BE                     l2610:
  2379                           
  2380                           ;doprnt.c: 600: width *= 10;
  2381  0008BE  C089  F060         	movff	printf@width,___wmul@multiplier
  2382  0008C2  C08A  F061         	movff	printf@width+1,___wmul@multiplier+1
  2383  0008C6  0E00               	movlw	0
  2384  0008C8  0100               	movlb	0	; () banked
  2385  0008CA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2386  0008CC  0E0A               	movlw	10
  2387  0008CE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2388  0008D0  EC09  F00B         	call	___wmul	;wreg free
  2389  0008D4  C060  F089         	movff	?___wmul,printf@width
  2390  0008D8  C061  F08A         	movff	?___wmul+1,printf@width+1
  2391                           
  2392                           ;doprnt.c: 601: width += *f++ - '0';
  2393  0008DC  0ED0               	movlw	208
  2394  0008DE  0100               	movlb	0	; () banked
  2395  0008E0  6F7E               	movwf	??_printf& (0+255),b
  2396  0008E2  0EFF               	movlw	255
  2397  0008E4  0100               	movlb	0	; () banked
  2398  0008E6  6F7F               	movwf	(??_printf+1)& (0+255),b
  2399  0008E8  C06C  FFF6         	movff	printf@f,tblptrl
  2400  0008EC  C06D  FFF7         	movff	printf@f+1,tblptrh
  2401  0008F0                     	if	0	;tblptru may be non-zero
  2402  0008F0                     	endif
  2403  0008F0                     	if	0	;tblptru may be non-zero
  2404  0008F0                     	endif
  2405  0008F0  0008               	tblrd		*
  2406  0008F2  50F5               	movf	tablat,w,c
  2407  0008F4  0100               	movlb	0	; () banked
  2408  0008F6  6F80               	movwf	(??_printf+2)& (0+255),b
  2409  0008F8  6B81               	clrf	(??_printf+3)& (0+255),b
  2410  0008FA  0100               	movlb	0	; () banked
  2411  0008FC  517E               	movf	??_printf& (0+255),w,b
  2412  0008FE  0100               	movlb	0	; () banked
  2413  000900  2780               	addwf	(??_printf+2)& (0+255),f,b
  2414  000902  0100               	movlb	0	; () banked
  2415  000904  517F               	movf	(??_printf+1)& (0+255),w,b
  2416  000906  0100               	movlb	0	; () banked
  2417  000908  2381               	addwfc	(??_printf+3)& (0+255),f,b
  2418  00090A  0100               	movlb	0	; () banked
  2419  00090C  5180               	movf	(??_printf+2)& (0+255),w,b
  2420  00090E  0100               	movlb	0	; () banked
  2421  000910  2789               	addwf	printf@width& (0+255),f,b
  2422  000912  0100               	movlb	0	; () banked
  2423  000914  5181               	movf	(??_printf+3)& (0+255),w,b
  2424  000916  0100               	movlb	0	; () banked
  2425  000918  238A               	addwfc	(printf@width+1)& (0+255),f,b
  2426                           
  2427                           ; BSR set to: 0
  2428  00091A  0100               	movlb	0	; () banked
  2429  00091C  4B6C               	infsnz	printf@f& (0+255),f,b
  2430  00091E  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2434  000920  C06C  FFF6         	movff	printf@f,tblptrl
  2435  000924  C06D  FFF7         	movff	printf@f+1,tblptrh
  2436  000928                     	if	0	;tblptru may be non-zero
  2437  000928                     	endif
  2438  000928                     	if	0	;tblptru may be non-zero
  2439  000928                     	endif
  2440  000928  0008               	tblrd		*
  2441  00092A  50F5               	movf	tablat,w,c
  2442  00092C  EC3B  F00B         	call	_isdigit
  2443  000930  A0D8               	btfss	status,0,c
  2444  000932  D008               	goto	l2624
  2445  000934  D7C4               	goto	l2610
  2446  000936                     l2618:
  2447                           
  2448                           ;doprnt.c: 718: case 'x':
  2449                           ;doprnt.c: 721: flag |= 0x80;
  2450  000936  0100               	movlb	0	; () banked
  2451  000938  8F88               	bsf	printf@flag& (0+255),7,b
  2452                           
  2453                           ;doprnt.c: 723: break;
  2454  00093A  D01D               	goto	l2626
  2455  00093C                     l2620:
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;doprnt.c: 818: flag |= 0xC0;
  2459  00093C  0EC0               	movlw	192
  2460  00093E  0100               	movlb	0	; () banked
  2461  000940  1388               	iorwf	printf@flag& (0+255),f,b
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;doprnt.c: 822: }
  2465                           
  2466                           ;doprnt.c: 819: break;
  2467  000942  D019               	goto	l2626
  2468  000944                     l2624:
  2469  000944  C06C  FFF6         	movff	printf@f,tblptrl
  2470  000948  C06D  FFF7         	movff	printf@f+1,tblptrh
  2471  00094C  0100               	movlb	0	; () banked
  2472  00094E  4B6C               	infsnz	printf@f& (0+255),f,b
  2473  000950  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2474  000952                     	if	0	;tblptru may be non-zero
  2475  000952                     	endif
  2476  000952                     	if	0	;tblptru may be non-zero
  2477  000952                     	endif
  2478  000952  0008               	tblrd		*
  2479  000954  CFF5 F08B          	movff	tablat,printf@c
  2480  000958  0100               	movlb	0	; () banked
  2481  00095A  518B               	movf	printf@c& (0+255),w,b
  2482                           
  2483                           ; Switch size 1, requested type "space"
  2484                           ; Number of cases is 4, Range of values is 0 to 120
  2485                           ; switch strategies available:
  2486                           ; Name         Instructions Cycles
  2487                           ; simple_byte           13     7 (average)
  2488                           ;	Chosen strategy is simple_byte
  2489  00095C  0A00               	xorlw	0	; case 0
  2490  00095E  B4D8               	btfsc	status,2,c
  2491  000960  0012               	return	
  2492  000962  0A58               	xorlw	88	; case 88
  2493  000964  B4D8               	btfsc	status,2,c
  2494  000966  D7E7               	goto	l2618
  2495  000968  0A2D               	xorlw	45	; case 117
  2496  00096A  B4D8               	btfsc	status,2,c
  2497  00096C  D7E7               	goto	l2620
  2498  00096E  0A0D               	xorlw	13	; case 120
  2499  000970  B4D8               	btfsc	status,2,c
  2500  000972  D7E1               	goto	l2618
  2501  000974  D0FB               	goto	l2696
  2502  000976                     l2626:
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;doprnt.c: 1273: {
  2506                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2507  000976  C083  FFD9         	movff	printf@ap,fsr2l
  2508  00097A  C084  FFDA         	movff	printf@ap+1,fsr2h
  2509  00097E  CFDE F086          	movff	postinc2,printf@val
  2510  000982  CFDD F087          	movff	postdec2,printf@val+1
  2511                           
  2512                           ; BSR set to: 0
  2513  000986  0E02               	movlw	2
  2514  000988  0100               	movlb	0	; () banked
  2515  00098A  2783               	addwf	printf@ap& (0+255),f,b
  2516  00098C  0E00               	movlw	0
  2517  00098E  2384               	addwfc	(printf@ap+1)& (0+255),f,b
  2518                           
  2519                           ;doprnt.c: 1287: }
  2520                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2521  000990  D03C               	goto	l2660
  2522  000992                     l2630:
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2526  000992  0E01               	movlw	1
  2527  000994  0100               	movlb	0	; () banked
  2528  000996  6F8B               	movwf	printf@c& (0+255),b
  2529  000998                     l2632:
  2530                           
  2531                           ; BSR set to: 0
  2532  000998  0E05               	movlw	5
  2533  00099A  0100               	movlb	0	; () banked
  2534  00099C  198B               	xorwf	printf@c& (0+255),w,b
  2535  00099E  B4D8               	btfsc	status,2,c
  2536  0009A0  D03D               	goto	l2662
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;doprnt.c: 1306: if(val < dpowers[c])
  2540                           
  2541                           ; BSR set to: 0
  2542                           
  2543                           ; BSR set to: 0
  2544  0009A2  0100               	movlb	0	; () banked
  2545  0009A4  518B               	movf	printf@c& (0+255),w,b
  2546  0009A6  0D02               	mullw	2
  2547  0009A8  0E01               	movlw	low _dpowers
  2548  0009AA  24F3               	addwf	prodl,w,c
  2549  0009AC  6EF6               	movwf	tblptrl,c
  2550  0009AE  0E08               	movlw	high _dpowers
  2551  0009B0  20F4               	addwfc	prodh,w,c
  2552  0009B2  6EF7               	movwf	tblptrh,c
  2553  0009B4                     	if	0	;There are less than 3 active tblptr bytes
  2554  0009B4                     	endif
  2555  0009B4  0009               	tblrd		*+
  2556  0009B6  50F5               	movf	tablat,w,c
  2557  0009B8  0100               	movlb	0	; () banked
  2558  0009BA  5D86               	subwf	printf@val& (0+255),w,b
  2559  0009BC  0009               	tblrd		*+
  2560  0009BE  50F5               	movf	tablat,w,c
  2561  0009C0  0100               	movlb	0	; () banked
  2562  0009C2  5987               	subwfb	(printf@val+1)& (0+255),w,b
  2563  0009C4  A0D8               	btfss	status,0,c
  2564  0009C6  D02A               	goto	l2662
  2565                           
  2566                           ; BSR set to: 0
  2567                           
  2568                           ; BSR set to: 0
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;doprnt.c: 1307: break;
  2572  0009C8  0100               	movlb	0	; () banked
  2573  0009CA  2B8B               	incf	printf@c& (0+255),f,b
  2574  0009CC  D7E5               	goto	l2632
  2575  0009CE                     l2644:
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2579  0009CE  0E01               	movlw	1
  2580  0009D0  0100               	movlb	0	; () banked
  2581  0009D2  6F8B               	movwf	printf@c& (0+255),b
  2582  0009D4                     l2646:
  2583                           
  2584                           ; BSR set to: 0
  2585  0009D4  0E04               	movlw	4
  2586  0009D6  0100               	movlb	0	; () banked
  2587  0009D8  198B               	xorwf	printf@c& (0+255),w,b
  2588  0009DA  B4D8               	btfsc	status,2,c
  2589  0009DC  D01F               	goto	l2662
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2593                           
  2594                           ; BSR set to: 0
  2595                           
  2596                           ; BSR set to: 0
  2597  0009DE  0100               	movlb	0	; () banked
  2598  0009E0  518B               	movf	printf@c& (0+255),w,b
  2599  0009E2  0D02               	mullw	2
  2600  0009E4  0E0B               	movlw	low _hexpowers
  2601  0009E6  24F3               	addwf	prodl,w,c
  2602  0009E8  6EF6               	movwf	tblptrl,c
  2603  0009EA  0E08               	movlw	high _hexpowers
  2604  0009EC  20F4               	addwfc	prodh,w,c
  2605  0009EE  6EF7               	movwf	tblptrh,c
  2606  0009F0                     	if	0	;There are less than 3 active tblptr bytes
  2607  0009F0                     	endif
  2608  0009F0  0009               	tblrd		*+
  2609  0009F2  50F5               	movf	tablat,w,c
  2610  0009F4  0100               	movlb	0	; () banked
  2611  0009F6  5D86               	subwf	printf@val& (0+255),w,b
  2612  0009F8  0009               	tblrd		*+
  2613  0009FA  50F5               	movf	tablat,w,c
  2614  0009FC  0100               	movlb	0	; () banked
  2615  0009FE  5987               	subwfb	(printf@val+1)& (0+255),w,b
  2616  000A00  A0D8               	btfss	status,0,c
  2617  000A02  D00C               	goto	l2662
  2618                           
  2619                           ; BSR set to: 0
  2620                           
  2621                           ; BSR set to: 0
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;doprnt.c: 1318: break;
  2625  000A04  0100               	movlb	0	; () banked
  2626  000A06  2B8B               	incf	printf@c& (0+255),f,b
  2627  000A08  D7E5               	goto	l2646
  2628  000A0A                     l2660:
  2629                           
  2630                           ; BSR set to: 0
  2631  000A0A  0100               	movlb	0	; () banked
  2632  000A0C  5188               	movf	printf@flag& (0+255),w,b
  2633  000A0E  0BC0               	andlw	192
  2634                           
  2635                           ; Switch size 1, requested type "space"
  2636                           ; Number of cases is 2, Range of values is 128 to 192
  2637                           ; switch strategies available:
  2638                           ; Name         Instructions Cycles
  2639                           ; simple_byte            7     4 (average)
  2640                           ;	Chosen strategy is simple_byte
  2641  000A10  0A80               	xorlw	128	; case 128
  2642  000A12  B4D8               	btfsc	status,2,c
  2643  000A14  D7DC               	goto	l2644
  2644  000A16  0A40               	xorlw	64	; case 192
  2645  000A18  B4D8               	btfsc	status,2,c
  2646  000A1A  D7BB               	goto	l2630
  2647  000A1C                     l2662:
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;doprnt.c: 1381: if(width > c)
  2651  000A1C  0E80               	movlw	128
  2652  000A1E  0100               	movlb	0	; () banked
  2653  000A20  BF8B               	btfsc	printf@c& (0+255),7,b
  2654  000A22  0E7F               	movlw	127
  2655  000A24  0100               	movlb	0	; () banked
  2656  000A26  6F7E               	movwf	??_printf& (0+255),b
  2657  000A28  0100               	movlb	0	; () banked
  2658  000A2A  5189               	movf	printf@width& (0+255),w,b
  2659  000A2C  0100               	movlb	0	; () banked
  2660  000A2E  5D8B               	subwf	printf@c& (0+255),w,b
  2661  000A30  0100               	movlb	0	; () banked
  2662  000A32  518A               	movf	(printf@width+1)& (0+255),w,b
  2663  000A34  0A80               	xorlw	128
  2664  000A36  0100               	movlb	0	; () banked
  2665  000A38  597E               	subwfb	??_printf& (0+255),w,b
  2666  000A3A  B0D8               	btfsc	status,0,c
  2667  000A3C  D00B               	goto	l2666
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;doprnt.c: 1382: width -= c;
  2671  000A3E  0100               	movlb	0	; () banked
  2672  000A40  518B               	movf	printf@c& (0+255),w,b
  2673  000A42  0100               	movlb	0	; () banked
  2674  000A44  5F89               	subwf	printf@width& (0+255),f,b
  2675  000A46  0E00               	movlw	0
  2676  000A48  0100               	movlb	0	; () banked
  2677  000A4A  BF8B               	btfsc	printf@c& (0+255),7,b
  2678  000A4C  0EFF               	movlw	255
  2679  000A4E  0100               	movlb	0	; () banked
  2680  000A50  5B8A               	subwfb	(printf@width+1)& (0+255),f,b
  2681  000A52  D005               	goto	l2668
  2682  000A54                     l2666:
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;doprnt.c: 1383: else
  2686                           ;doprnt.c: 1384: width = 0;
  2687  000A54  0E00               	movlw	0
  2688  000A56  0100               	movlb	0	; () banked
  2689  000A58  6F8A               	movwf	(printf@width+1)& (0+255),b
  2690  000A5A  0E00               	movlw	0
  2691  000A5C  6F89               	movwf	printf@width& (0+255),b
  2692  000A5E                     l2668:
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;doprnt.c: 1387: if(flag & 0x04) {
  2696  000A5E  0100               	movlb	0	; () banked
  2697  000A60  A588               	btfss	printf@flag& (0+255),2,b
  2698  000A62  D00E               	goto	l2676
  2699  000A64                     
  2700                           ; BSR set to: 0
  2701                           ;doprnt.c: 1415: if(width)
  2702  000A64  0100               	movlb	0	; () banked
  2703  000A66  5189               	movf	printf@width& (0+255),w,b
  2704  000A68  0100               	movlb	0	; () banked
  2705  000A6A  118A               	iorwf	(printf@width+1)& (0+255),w,b
  2706  000A6C  B4D8               	btfsc	status,2,c
  2707  000A6E  D01B               	goto	l383
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;doprnt.c: 1417: (putch('0') );
  2711                           
  2712                           ; BSR set to: 0
  2713                           
  2714                           ;doprnt.c: 1416: do
  2715  000A70  0E30               	movlw	48
  2716  000A72  ECBC  F00B         	call	_putch
  2717                           
  2718                           ;doprnt.c: 1418: while(--width);
  2719  000A76  0100               	movlb	0	; () banked
  2720  000A78  0789               	decf	printf@width& (0+255),f,b
  2721  000A7A  A0D8               	btfss	status,0,c
  2722  000A7C  078A               	decf	(printf@width+1)& (0+255),f,b
  2723  000A7E  D7F2               	goto	L6
  2724  000A80                     l2676:
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;doprnt.c: 1422: {
  2728                           ;doprnt.c: 1424: if(width
  2729                           ;doprnt.c: 1428: )
  2730  000A80  0100               	movlb	0	; () banked
  2731  000A82  5189               	movf	printf@width& (0+255),w,b
  2732  000A84  0100               	movlb	0	; () banked
  2733  000A86  118A               	iorwf	(printf@width+1)& (0+255),w,b
  2734  000A88  B4D8               	btfsc	status,2,c
  2735  000A8A  D00D               	goto	l383
  2736  000A8C                     l2678:
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;doprnt.c: 1430: (putch(' ') );
  2740  000A8C  0E20               	movlw	32
  2741  000A8E  ECBC  F00B         	call	_putch
  2742                           
  2743                           ;doprnt.c: 1431: while(--width);
  2744  000A92  0100               	movlb	0	; () banked
  2745  000A94  0789               	decf	printf@width& (0+255),f,b
  2746  000A96  A0D8               	btfss	status,0,c
  2747  000A98  078A               	decf	(printf@width+1)& (0+255),f,b
  2748  000A9A  0100               	movlb	0	; () banked
  2749  000A9C  5189               	movf	printf@width& (0+255),w,b
  2750  000A9E  0100               	movlb	0	; () banked
  2751  000AA0  118A               	iorwf	(printf@width+1)& (0+255),w,b
  2752  000AA2  A4D8               	btfss	status,2,c
  2753  000AA4  D7F3               	goto	l2678
  2754  000AA6                     l383:
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;doprnt.c: 1469: }
  2758                           ;doprnt.c: 1472: prec = c;
  2759  000AA6  C08B  F085         	movff	printf@c,printf@prec
  2760                           
  2761                           ;doprnt.c: 1474: while(prec--) {
  2762  000AAA  D05A               	goto	l2694
  2763  000AAC                     l2682:
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2767  000AAC  0100               	movlb	0	; () banked
  2768  000AAE  5185               	movf	printf@prec& (0+255),w,b
  2769  000AB0  0D02               	mullw	2
  2770  000AB2  0E01               	movlw	low _dpowers
  2771  000AB4  24F3               	addwf	prodl,w,c
  2772  000AB6  6EF6               	movwf	tblptrl,c
  2773  000AB8  0E08               	movlw	high _dpowers
  2774  000ABA  20F4               	addwfc	prodh,w,c
  2775  000ABC  6EF7               	movwf	tblptrh,c
  2776  000ABE                     	if	0	;There are less than 3 active tblptr bytes
  2777  000ABE                     	endif
  2778  000ABE  0009               	tblrd		*+
  2779  000AC0  CFF5 F062          	movff	tablat,___lwdiv@divisor
  2780  000AC4  000A               	tblrd		*-
  2781  000AC6  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  2782  000ACA  C086  F060         	movff	printf@val,___lwdiv@dividend
  2783  000ACE  C087  F061         	movff	printf@val+1,___lwdiv@dividend+1
  2784  000AD2  EC94  F009         	call	___lwdiv	;wreg free
  2785  000AD6  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  2786  000ADA  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  2787  000ADE  0E00               	movlw	0
  2788  000AE0  0100               	movlb	0	; () banked
  2789  000AE2  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  2790  000AE4  0E0A               	movlw	10
  2791  000AE6  6F69               	movwf	___lwmod@divisor& (0+255),b
  2792  000AE8  EC3E  F00A         	call	___lwmod	;wreg free
  2793  000AEC  0100               	movlb	0	; () banked
  2794  000AEE  5167               	movf	?___lwmod& (0+255),w,b
  2795  000AF0  0F30               	addlw	48
  2796  000AF2  0100               	movlb	0	; () banked
  2797  000AF4  6F8B               	movwf	printf@c& (0+255),b
  2798                           
  2799                           ;doprnt.c: 1491: break;
  2800  000AF6  D030               	goto	l2692
  2801  000AF8                     l2684:
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;doprnt.c: 1499: {
  2805                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2806  000AF8  C086  F060         	movff	printf@val,___lwdiv@dividend
  2807  000AFC  C087  F061         	movff	printf@val+1,___lwdiv@dividend+1
  2808  000B00  0100               	movlb	0	; () banked
  2809  000B02  5185               	movf	printf@prec& (0+255),w,b
  2810  000B04  0D02               	mullw	2
  2811  000B06  0E0B               	movlw	low _hexpowers
  2812  000B08  24F3               	addwf	prodl,w,c
  2813  000B0A  6EF6               	movwf	tblptrl,c
  2814  000B0C  0E08               	movlw	high _hexpowers
  2815  000B0E  20F4               	addwfc	prodh,w,c
  2816  000B10  6EF7               	movwf	tblptrh,c
  2817  000B12                     	if	0	;There are less than 3 active tblptr bytes
  2818  000B12                     	endif
  2819  000B12  0009               	tblrd		*+
  2820  000B14  CFF5 F062          	movff	tablat,___lwdiv@divisor
  2821  000B18  000A               	tblrd		*-
  2822  000B1A  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  2823  000B1E  EC94  F009         	call	___lwdiv	;wreg free
  2824  000B22  0100               	movlb	0	; () banked
  2825  000B24  5160               	movf	?___lwdiv& (0+255),w,b
  2826  000B26  0B0F               	andlw	15
  2827  000B28  0100               	movlb	0	; () banked
  2828  000B2A  6F82               	movwf	printf@idx& (0+255),b
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  2832  000B2C  0100               	movlb	0	; () banked
  2833  000B2E  5182               	movf	printf@idx& (0+255),w,b
  2834  000B30  0D01               	mullw	1
  2835  000B32  0E39               	movlw	low STR_4
  2836  000B34  24F3               	addwf	prodl,w,c
  2837  000B36  6EF6               	movwf	tblptrl,c
  2838  000B38  0E08               	movlw	high STR_4
  2839  000B3A  20F4               	addwfc	prodh,w,c
  2840  000B3C  6EF7               	movwf	tblptrh,c
  2841  000B3E                     	if	0	;There are less than 3 active tblptr bytes
  2842  000B3E                     	endif
  2843  000B3E  0008               	tblrd		*
  2844  000B40  CFF5 F08B          	movff	tablat,printf@c
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;doprnt.c: 1523: }
  2848                           
  2849                           ;doprnt.c: 1508: }
  2850                           ;doprnt.c: 1510: break;
  2851  000B44  D009               	goto	l2692
  2852  000B46                     l2690:
  2853                           
  2854                           ; BSR set to: 0
  2855  000B46  0100               	movlb	0	; () banked
  2856  000B48  5188               	movf	printf@flag& (0+255),w,b
  2857  000B4A  0BC0               	andlw	192
  2858                           
  2859                           ; Switch size 1, requested type "space"
  2860                           ; Number of cases is 2, Range of values is 128 to 192
  2861                           ; switch strategies available:
  2862                           ; Name         Instructions Cycles
  2863                           ; simple_byte            7     4 (average)
  2864                           ;	Chosen strategy is simple_byte
  2865  000B4C  0A80               	xorlw	128	; case 128
  2866  000B4E  B4D8               	btfsc	status,2,c
  2867  000B50  D7D3               	goto	l2684
  2868  000B52  0A40               	xorlw	64	; case 192
  2869  000B54  B4D8               	btfsc	status,2,c
  2870  000B56  D7AA               	goto	l2682
  2871  000B58                     l2692:
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;doprnt.c: 1524: (putch(c) );
  2875  000B58  0100               	movlb	0	; () banked
  2876  000B5A  518B               	movf	printf@c& (0+255),w,b
  2877  000B5C  ECBC  F00B         	call	_putch
  2878  000B60                     l2694:
  2879  000B60  0100               	movlb	0	; () banked
  2880  000B62  0785               	decf	printf@prec& (0+255),f,b
  2881  000B64  0100               	movlb	0	; () banked
  2882  000B66  2985               	incf	printf@prec& (0+255),w,b
  2883  000B68  A4D8               	btfss	status,2,c
  2884  000B6A  D7ED               	goto	l2690
  2885  000B6C                     l2696:
  2886  000B6C  C06C  FFF6         	movff	printf@f,tblptrl
  2887  000B70  C06D  FFF7         	movff	printf@f+1,tblptrh
  2888  000B74  0100               	movlb	0	; () banked
  2889  000B76  4B6C               	infsnz	printf@f& (0+255),f,b
  2890  000B78  2B6D               	incf	(printf@f+1)& (0+255),f,b
  2891  000B7A                     	if	0	;tblptru may be non-zero
  2892  000B7A                     	endif
  2893  000B7A                     	if	0	;tblptru may be non-zero
  2894  000B7A                     	endif
  2895  000B7A  0008               	tblrd		*
  2896  000B7C  CFF5 F08B          	movff	tablat,printf@c
  2897  000B80  0100               	movlb	0	; () banked
  2898  000B82  518B               	movf	printf@c& (0+255),w,b
  2899  000B84  B4D8               	btfsc	status,2,c
  2900  000B86  0012               	return	
  2901  000B88  D66A               	goto	l2594
  2902  000B8A                     __end_of_printf:
  2903                           	opt stack 0
  2904                           tblptru	equ	0xFF8
  2905                           tblptrh	equ	0xFF7
  2906                           tblptrl	equ	0xFF6
  2907                           tablat	equ	0xFF5
  2908                           prodh	equ	0xFF4
  2909                           prodl	equ	0xFF3
  2910                           intcon	equ	0xFF2
  2911                           intcon2	equ	0xFF1
  2912                           postinc0	equ	0xFEE
  2913                           wreg	equ	0xFE8
  2914                           postinc2	equ	0xFDE
  2915                           postdec2	equ	0xFDD
  2916                           fsr2h	equ	0xFDA
  2917                           fsr2l	equ	0xFD9
  2918                           status	equ	0xFD8
  2919                           
  2920 ;; *************** function _putch *****************
  2921 ;; Defined at:
  2922 ;;		line 46 in file "usart.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;  byte            1    wreg     unsigned char 
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;  byte            1    0[BANK0 ] unsigned char 
  2927 ;; Return value:  Size  Location     Type
  2928 ;;		None               void
  2929 ;; Registers used:
  2930 ;;		wreg
  2931 ;; Tracked objects:
  2932 ;;		On entry : 0/0
  2933 ;;		On exit  : 0/0
  2934 ;;		Unchanged: 0/0
  2935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2936 ;;      Params:         0       0       0       0       0       0       0       0       0
  2937 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2938 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2939 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2940 ;;Total ram usage:        1 bytes
  2941 ;; Hardware stack levels used:    1
  2942 ;; Hardware stack levels required when called:    3
  2943 ;; This function calls:
  2944 ;;		Nothing
  2945 ;; This function is called by:
  2946 ;;		_printf
  2947 ;;		_getche
  2948 ;; This function uses a non-reentrant model
  2949 ;;
  2950                           
  2951                           	psect	text12
  2952  001778                     __ptext12:
  2953                           	opt stack 0
  2954  001778                     _putch:
  2955                           	opt stack 26
  2956                           
  2957                           ;incstack = 0
  2958                           ;putch@byte stored from wreg
  2959  001778  0100               	movlb	0	; () banked
  2960  00177A  6F60               	movwf	putch@byte& (0+255),b
  2961  00177C                     l184:
  2962  00177C  A89E               	btfss	3998,4,c	;volatile
  2963  00177E  D7FE               	goto	l184
  2964                           
  2965                           ;usart.c: 50: TXREG = byte;
  2966  001780  C060  FFAD         	movff	putch@byte,4013	;volatile
  2967  001784  0012               	return		;funcret
  2968  001786                     __end_of_putch:
  2969                           	opt stack 0
  2970                           tblptru	equ	0xFF8
  2971                           tblptrh	equ	0xFF7
  2972                           tblptrl	equ	0xFF6
  2973                           tablat	equ	0xFF5
  2974                           prodh	equ	0xFF4
  2975                           prodl	equ	0xFF3
  2976                           intcon	equ	0xFF2
  2977                           intcon2	equ	0xFF1
  2978                           postinc0	equ	0xFEE
  2979                           wreg	equ	0xFE8
  2980                           postinc2	equ	0xFDE
  2981                           postdec2	equ	0xFDD
  2982                           fsr2h	equ	0xFDA
  2983                           fsr2l	equ	0xFD9
  2984                           status	equ	0xFD8
  2985                           
  2986 ;; *************** function _isdigit *****************
  2987 ;; Defined at:
  2988 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  2989 ;; Parameters:    Size  Location     Type
  2990 ;;  c               1    wreg     unsigned char 
  2991 ;; Auto vars:     Size  Location     Type
  2992 ;;  c               1    2[BANK0 ] unsigned char 
  2993 ;; Return value:  Size  Location     Type
  2994 ;;		None               void
  2995 ;; Registers used:
  2996 ;;		wreg, status,2, status,0
  2997 ;; Tracked objects:
  2998 ;;		On entry : 0/0
  2999 ;;		On exit  : 0/0
  3000 ;;		Unchanged: 0/0
  3001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3002 ;;      Params:         0       0       0       0       0       0       0       0       0
  3003 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3004 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3005 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3006 ;;Total ram usage:        3 bytes
  3007 ;; Hardware stack levels used:    1
  3008 ;; Hardware stack levels required when called:    3
  3009 ;; This function calls:
  3010 ;;		Nothing
  3011 ;; This function is called by:
  3012 ;;		_printf
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016                           	psect	text13
  3017  001676                     __ptext13:
  3018                           	opt stack 0
  3019  001676                     _isdigit:
  3020                           	opt stack 26
  3021                           
  3022                           ;incstack = 0
  3023                           ;isdigit@c stored from wreg
  3024  001676  0100               	movlb	0	; () banked
  3025  001678  6F62               	movwf	isdigit@c& (0+255),b
  3026  00167A  0E00               	movlw	0
  3027  00167C  0100               	movlb	0	; () banked
  3028  00167E  6F61               	movwf	_isdigit$1476& (0+255),b
  3029                           
  3030                           ; BSR set to: 0
  3031  001680  0E3A               	movlw	58
  3032  001682  0100               	movlb	0	; () banked
  3033  001684  6162               	cpfslt	isdigit@c& (0+255),b
  3034  001686  D007               	goto	l2466
  3035                           
  3036                           ; BSR set to: 0
  3037  001688  0E2F               	movlw	47
  3038  00168A  0100               	movlb	0	; () banked
  3039  00168C  6562               	cpfsgt	isdigit@c& (0+255),b
  3040  00168E  D003               	goto	l2466
  3041                           
  3042                           ; BSR set to: 0
  3043  001690  0E01               	movlw	1
  3044  001692  0100               	movlb	0	; () banked
  3045  001694  6F61               	movwf	_isdigit$1476& (0+255),b
  3046  001696                     l2466:
  3047                           
  3048                           ; BSR set to: 0
  3049  001696  C061  F060         	movff	_isdigit$1476,??_isdigit
  3050  00169A  0100               	movlb	0	; () banked
  3051  00169C  3160               	rrcf	??_isdigit& (0+255),w,b
  3052  00169E  0012               	return	
  3053  0016A0                     __end_of_isdigit:
  3054                           	opt stack 0
  3055                           tblptru	equ	0xFF8
  3056                           tblptrh	equ	0xFF7
  3057                           tblptrl	equ	0xFF6
  3058                           tablat	equ	0xFF5
  3059                           prodh	equ	0xFF4
  3060                           prodl	equ	0xFF3
  3061                           intcon	equ	0xFF2
  3062                           intcon2	equ	0xFF1
  3063                           postinc0	equ	0xFEE
  3064                           wreg	equ	0xFE8
  3065                           postinc2	equ	0xFDE
  3066                           postdec2	equ	0xFDD
  3067                           fsr2h	equ	0xFDA
  3068                           fsr2l	equ	0xFD9
  3069                           status	equ	0xFD8
  3070                           
  3071 ;; *************** function ___wmul *****************
  3072 ;; Defined at:
  3073 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3076 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3077 ;; Auto vars:     Size  Location     Type
  3078 ;;  product         2    4[BANK0 ] unsigned int 
  3079 ;; Return value:  Size  Location     Type
  3080 ;;                  2    0[BANK0 ] unsigned int 
  3081 ;; Registers used:
  3082 ;;		wreg, status,2, status,0, prodl, prodh
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3088 ;;      Params:         0       4       0       0       0       0       0       0       0
  3089 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3090 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3091 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3092 ;;Total ram usage:        6 bytes
  3093 ;; Hardware stack levels used:    1
  3094 ;; Hardware stack levels required when called:    3
  3095 ;; This function calls:
  3096 ;;		Nothing
  3097 ;; This function is called by:
  3098 ;;		_printf
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           	psect	text14
  3103  001612                     __ptext14:
  3104                           	opt stack 0
  3105  001612                     ___wmul:
  3106                           	opt stack 26
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;incstack = 0
  3110  001612  0100               	movlb	0	; () banked
  3111  001614  5160               	movf	___wmul@multiplier& (0+255),w,b
  3112  001616  0100               	movlb	0	; () banked
  3113  001618  0362               	mulwf	___wmul@multiplicand& (0+255),b
  3114  00161A  CFF3 F064          	movff	prodl,___wmul@product
  3115  00161E  CFF4 F065          	movff	prodh,___wmul@product+1
  3116  001622  0100               	movlb	0	; () banked
  3117  001624  5160               	movf	___wmul@multiplier& (0+255),w,b
  3118  001626  0100               	movlb	0	; () banked
  3119  001628  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3120  00162A  50F3               	movf	prodl,w,c
  3121  00162C  0100               	movlb	0	; () banked
  3122  00162E  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  3123  001630  0100               	movlb	0	; () banked
  3124  001632  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3125  001634  0100               	movlb	0	; () banked
  3126  001636  0362               	mulwf	___wmul@multiplicand& (0+255),b
  3127  001638  50F3               	movf	prodl,w,c
  3128  00163A  0100               	movlb	0	; () banked
  3129  00163C  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  3130                           
  3131                           ; BSR set to: 0
  3132  00163E  C064  F060         	movff	___wmul@product,?___wmul
  3133  001642  C065  F061         	movff	___wmul@product+1,?___wmul+1
  3134  001646  0012               	return	
  3135  001648                     __end_of___wmul:
  3136                           	opt stack 0
  3137                           tblptru	equ	0xFF8
  3138                           tblptrh	equ	0xFF7
  3139                           tblptrl	equ	0xFF6
  3140                           tablat	equ	0xFF5
  3141                           prodh	equ	0xFF4
  3142                           prodl	equ	0xFF3
  3143                           intcon	equ	0xFF2
  3144                           intcon2	equ	0xFF1
  3145                           postinc0	equ	0xFEE
  3146                           wreg	equ	0xFE8
  3147                           postinc2	equ	0xFDE
  3148                           postdec2	equ	0xFDD
  3149                           fsr2h	equ	0xFDA
  3150                           fsr2l	equ	0xFD9
  3151                           status	equ	0xFD8
  3152                           
  3153 ;; *************** function ___lwmod *****************
  3154 ;; Defined at:
  3155 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  3156 ;; Parameters:    Size  Location     Type
  3157 ;;  dividend        2    7[BANK0 ] unsigned int 
  3158 ;;  divisor         2    9[BANK0 ] unsigned int 
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  counter         1   11[BANK0 ] unsigned char 
  3161 ;; Return value:  Size  Location     Type
  3162 ;;                  2    7[BANK0 ] unsigned int 
  3163 ;; Registers used:
  3164 ;;		wreg, status,2, status,0
  3165 ;; Tracked objects:
  3166 ;;		On entry : 0/0
  3167 ;;		On exit  : 0/0
  3168 ;;		Unchanged: 0/0
  3169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3170 ;;      Params:         0       4       0       0       0       0       0       0       0
  3171 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3172 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3173 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3174 ;;Total ram usage:        5 bytes
  3175 ;; Hardware stack levels used:    1
  3176 ;; Hardware stack levels required when called:    3
  3177 ;; This function calls:
  3178 ;;		Nothing
  3179 ;; This function is called by:
  3180 ;;		_printf
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           	psect	text15
  3185  00147C                     __ptext15:
  3186                           	opt stack 0
  3187  00147C                     ___lwmod:
  3188                           	opt stack 26
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;incstack = 0
  3192  00147C  0100               	movlb	0	; () banked
  3193  00147E  5169               	movf	___lwmod@divisor& (0+255),w,b
  3194  001480  0100               	movlb	0	; () banked
  3195  001482  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3196  001484  B4D8               	btfsc	status,2,c
  3197  001486  D026               	goto	l813
  3198                           
  3199                           ; BSR set to: 0
  3200  001488  0E01               	movlw	1
  3201  00148A  0100               	movlb	0	; () banked
  3202  00148C  6F6B               	movwf	___lwmod@counter& (0+255),b
  3203  00148E  D006               	goto	l2504
  3204  001490                     l2502:
  3205                           
  3206                           ; BSR set to: 0
  3207  001490  0100               	movlb	0	; () banked
  3208  001492  90D8               	bcf	status,0,c
  3209  001494  3769               	rlcf	___lwmod@divisor& (0+255),f,b
  3210  001496  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3211  001498  0100               	movlb	0	; () banked
  3212  00149A  2B6B               	incf	___lwmod@counter& (0+255),f,b
  3213  00149C                     l2504:
  3214                           
  3215                           ; BSR set to: 0
  3216  00149C  0100               	movlb	0	; () banked
  3217  00149E  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3218  0014A0  D7F7               	goto	l2502
  3219  0014A2                     l2506:
  3220                           
  3221                           ; BSR set to: 0
  3222  0014A2  0100               	movlb	0	; () banked
  3223  0014A4  5169               	movf	___lwmod@divisor& (0+255),w,b
  3224  0014A6  0100               	movlb	0	; () banked
  3225  0014A8  5D67               	subwf	___lwmod@dividend& (0+255),w,b
  3226  0014AA  0100               	movlb	0	; () banked
  3227  0014AC  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3228  0014AE  0100               	movlb	0	; () banked
  3229  0014B0  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3230  0014B2  A0D8               	btfss	status,0,c
  3231  0014B4  D008               	goto	l2510
  3232                           
  3233                           ; BSR set to: 0
  3234  0014B6  0100               	movlb	0	; () banked
  3235  0014B8  5169               	movf	___lwmod@divisor& (0+255),w,b
  3236  0014BA  0100               	movlb	0	; () banked
  3237  0014BC  5F67               	subwf	___lwmod@dividend& (0+255),f,b
  3238  0014BE  0100               	movlb	0	; () banked
  3239  0014C0  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3240  0014C2  0100               	movlb	0	; () banked
  3241  0014C4  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3242  0014C6                     l2510:
  3243                           
  3244                           ; BSR set to: 0
  3245  0014C6  0100               	movlb	0	; () banked
  3246  0014C8  90D8               	bcf	status,0,c
  3247  0014CA  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3248  0014CC  3369               	rrcf	___lwmod@divisor& (0+255),f,b
  3249                           
  3250                           ; BSR set to: 0
  3251  0014CE  0100               	movlb	0	; () banked
  3252  0014D0  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
  3253  0014D2  D7E7               	goto	l2506
  3254  0014D4                     l813:
  3255                           
  3256                           ; BSR set to: 0
  3257  0014D4  C067  F067         	movff	___lwmod@dividend,?___lwmod
  3258  0014D8  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
  3259                           
  3260                           ; BSR set to: 0
  3261  0014DC  0012               	return		;funcret
  3262  0014DE                     __end_of___lwmod:
  3263                           	opt stack 0
  3264                           tblptru	equ	0xFF8
  3265                           tblptrh	equ	0xFF7
  3266                           tblptrl	equ	0xFF6
  3267                           tablat	equ	0xFF5
  3268                           prodh	equ	0xFF4
  3269                           prodl	equ	0xFF3
  3270                           intcon	equ	0xFF2
  3271                           intcon2	equ	0xFF1
  3272                           postinc0	equ	0xFEE
  3273                           wreg	equ	0xFE8
  3274                           postinc2	equ	0xFDE
  3275                           postdec2	equ	0xFDD
  3276                           fsr2h	equ	0xFDA
  3277                           fsr2l	equ	0xFD9
  3278                           status	equ	0xFD8
  3279                           
  3280 ;; *************** function ___lwdiv *****************
  3281 ;; Defined at:
  3282 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;  dividend        2    0[BANK0 ] unsigned int 
  3285 ;;  divisor         2    2[BANK0 ] unsigned int 
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;  quotient        2    5[BANK0 ] unsigned int 
  3288 ;;  counter         1    4[BANK0 ] unsigned char 
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  2    0[BANK0 ] unsigned int 
  3291 ;; Registers used:
  3292 ;;		wreg, status,2, status,0
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3298 ;;      Params:         0       4       0       0       0       0       0       0       0
  3299 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3300 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3301 ;;      Totals:         0       7       0       0       0       0       0       0       0
  3302 ;;Total ram usage:        7 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    3
  3305 ;; This function calls:
  3306 ;;		Nothing
  3307 ;; This function is called by:
  3308 ;;		_printf
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           	psect	text16
  3313  001328                     __ptext16:
  3314                           	opt stack 0
  3315  001328                     ___lwdiv:
  3316                           	opt stack 26
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;incstack = 0
  3320  001328  0E00               	movlw	0
  3321  00132A  0100               	movlb	0	; () banked
  3322  00132C  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3323  00132E  0E00               	movlw	0
  3324  001330  6F65               	movwf	___lwdiv@quotient& (0+255),b
  3325                           
  3326                           ; BSR set to: 0
  3327  001332  0100               	movlb	0	; () banked
  3328  001334  5162               	movf	___lwdiv@divisor& (0+255),w,b
  3329  001336  0100               	movlb	0	; () banked
  3330  001338  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3331  00133A  B4D8               	btfsc	status,2,c
  3332  00133C  D02C               	goto	l803
  3333                           
  3334                           ; BSR set to: 0
  3335  00133E  0E01               	movlw	1
  3336  001340  0100               	movlb	0	; () banked
  3337  001342  6F64               	movwf	___lwdiv@counter& (0+255),b
  3338  001344  D006               	goto	l2484
  3339  001346                     l2482:
  3340                           
  3341                           ; BSR set to: 0
  3342  001346  0100               	movlb	0	; () banked
  3343  001348  90D8               	bcf	status,0,c
  3344  00134A  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  3345  00134C  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3346  00134E  0100               	movlb	0	; () banked
  3347  001350  2B64               	incf	___lwdiv@counter& (0+255),f,b
  3348  001352                     l2484:
  3349                           
  3350                           ; BSR set to: 0
  3351  001352  0100               	movlb	0	; () banked
  3352  001354  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3353  001356  D7F7               	goto	l2482
  3354  001358                     l2486:
  3355                           
  3356                           ; BSR set to: 0
  3357  001358  0100               	movlb	0	; () banked
  3358  00135A  90D8               	bcf	status,0,c
  3359  00135C  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  3360  00135E  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3361                           
  3362                           ; BSR set to: 0
  3363  001360  0100               	movlb	0	; () banked
  3364  001362  5162               	movf	___lwdiv@divisor& (0+255),w,b
  3365  001364  0100               	movlb	0	; () banked
  3366  001366  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  3367  001368  0100               	movlb	0	; () banked
  3368  00136A  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3369  00136C  0100               	movlb	0	; () banked
  3370  00136E  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3371  001370  A0D8               	btfss	status,0,c
  3372  001372  D00A               	goto	l2494
  3373                           
  3374                           ; BSR set to: 0
  3375  001374  0100               	movlb	0	; () banked
  3376  001376  5162               	movf	___lwdiv@divisor& (0+255),w,b
  3377  001378  0100               	movlb	0	; () banked
  3378  00137A  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  3379  00137C  0100               	movlb	0	; () banked
  3380  00137E  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3381  001380  0100               	movlb	0	; () banked
  3382  001382  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3383                           
  3384                           ; BSR set to: 0
  3385  001384  0100               	movlb	0	; () banked
  3386  001386  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  3387  001388                     l2494:
  3388                           
  3389                           ; BSR set to: 0
  3390  001388  0100               	movlb	0	; () banked
  3391  00138A  90D8               	bcf	status,0,c
  3392  00138C  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3393  00138E  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  3394                           
  3395                           ; BSR set to: 0
  3396  001390  0100               	movlb	0	; () banked
  3397  001392  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  3398  001394  D7E1               	goto	l2486
  3399  001396                     l803:
  3400                           
  3401                           ; BSR set to: 0
  3402  001396  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  3403  00139A  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3404                           
  3405                           ; BSR set to: 0
  3406  00139E  0012               	return		;funcret
  3407  0013A0                     __end_of___lwdiv:
  3408                           	opt stack 0
  3409                           tblptru	equ	0xFF8
  3410                           tblptrh	equ	0xFF7
  3411                           tblptrl	equ	0xFF6
  3412                           tablat	equ	0xFF5
  3413                           prodh	equ	0xFF4
  3414                           prodl	equ	0xFF3
  3415                           intcon	equ	0xFF2
  3416                           intcon2	equ	0xFF1
  3417                           postinc0	equ	0xFEE
  3418                           wreg	equ	0xFE8
  3419                           postinc2	equ	0xFDE
  3420                           postdec2	equ	0xFDD
  3421                           fsr2h	equ	0xFDA
  3422                           fsr2l	equ	0xFD9
  3423                           status	equ	0xFD8
  3424                           
  3425 ;; *************** function _configUSARTInterrupts *****************
  3426 ;; Defined at:
  3427 ;;		line 32 in file "usart.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;		None
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;		None
  3432 ;; Return value:  Size  Location     Type
  3433 ;;		None               void
  3434 ;; Registers used:
  3435 ;;		None
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3441 ;;      Params:         0       0       0       0       0       0       0       0       0
  3442 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3443 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3444 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3445 ;;Total ram usage:        0 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    3
  3448 ;; This function calls:
  3449 ;;		Nothing
  3450 ;; This function is called by:
  3451 ;;		_main
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           	psect	text17
  3456  001786                     __ptext17:
  3457                           	opt stack 0
  3458  001786                     _configUSARTInterrupts:
  3459                           	opt stack 27
  3460                           
  3461                           ;usart.c: 35: TXIE = 0;
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;incstack = 0
  3465  001786  989D               	bcf	3997,4,c	;volatile
  3466                           
  3467                           ;usart.c: 36: TXIF = 0;
  3468  001788  989E               	bcf	3998,4,c	;volatile
  3469                           
  3470                           ;usart.c: 39: RCIE = 1;
  3471  00178A  8A9D               	bsf	3997,5,c	;volatile
  3472                           
  3473                           ;usart.c: 40: RCIF = 0;
  3474  00178C  9A9E               	bcf	3998,5,c	;volatile
  3475                           
  3476                           ;usart.c: 42: PEIE = 1;
  3477  00178E  8CF2               	bsf	intcon,6,c	;volatile
  3478                           
  3479                           ;usart.c: 43: GIE = 1;
  3480  001790  8EF2               	bsf	intcon,7,c	;volatile
  3481  001792  0012               	return		;funcret
  3482  001794                     __end_of_configUSARTInterrupts:
  3483                           	opt stack 0
  3484                           tblptru	equ	0xFF8
  3485                           tblptrh	equ	0xFF7
  3486                           tblptrl	equ	0xFF6
  3487                           tablat	equ	0xFF5
  3488                           prodh	equ	0xFF4
  3489                           prodl	equ	0xFF3
  3490                           intcon	equ	0xFF2
  3491                           intcon2	equ	0xFF1
  3492                           postinc0	equ	0xFEE
  3493                           wreg	equ	0xFE8
  3494                           postinc2	equ	0xFDE
  3495                           postdec2	equ	0xFDD
  3496                           fsr2h	equ	0xFDA
  3497                           fsr2l	equ	0xFD9
  3498                           status	equ	0xFD8
  3499                           
  3500 ;; *************** function _configTimer *****************
  3501 ;; Defined at:
  3502 ;;		line 17 in file "timer0.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;		None
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;		None
  3507 ;; Return value:  Size  Location     Type
  3508 ;;		None               void
  3509 ;; Registers used:
  3510 ;;		None
  3511 ;; Tracked objects:
  3512 ;;		On entry : 0/0
  3513 ;;		On exit  : 0/0
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3516 ;;      Params:         0       0       0       0       0       0       0       0       0
  3517 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3518 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3519 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3520 ;;Total ram usage:        0 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; Hardware stack levels required when called:    3
  3523 ;; This function calls:
  3524 ;;		Nothing
  3525 ;; This function is called by:
  3526 ;;		_main
  3527 ;; This function uses a non-reentrant model
  3528 ;;
  3529                           
  3530                           	psect	text18
  3531  001706                     __ptext18:
  3532                           	opt stack 0
  3533  001706                     _configTimer:
  3534                           	opt stack 27
  3535                           
  3536                           ;timer0.c: 18: T0CONbits.T0CS = 0;
  3537                           
  3538                           ;incstack = 0
  3539  001706  9AD5               	bcf	4053,5,c	;volatile
  3540                           
  3541                           ;timer0.c: 19: T0CONbits.T0SE = 0;
  3542  001708  98D5               	bcf	4053,4,c	;volatile
  3543                           
  3544                           ;timer0.c: 20: T0CONbits.PSA = 0;
  3545  00170A  96D5               	bcf	4053,3,c	;volatile
  3546                           
  3547                           ;timer0.c: 21: T0CONbits.T08BIT = 0;
  3548  00170C  9CD5               	bcf	4053,6,c	;volatile
  3549                           
  3550                           ;timer0.c: 24: T0CONbits.T0PS2 = 1;
  3551  00170E  84D5               	bsf	4053,2,c	;volatile
  3552                           
  3553                           ;timer0.c: 25: T0CONbits.T0PS1 = 0;
  3554  001710  92D5               	bcf	4053,1,c	;volatile
  3555                           
  3556                           ;timer0.c: 26: T0CONbits.T0PS0 = 1;
  3557  001712  80D5               	bsf	4053,0,c	;volatile
  3558                           
  3559                           ;timer0.c: 28: TMR0IP = 1;
  3560  001714  84F1               	bsf	intcon2,2,c	;volatile
  3561                           
  3562                           ;timer0.c: 30: INTCONbits.TMR0IF = 0;
  3563  001716  94F2               	bcf	intcon,2,c	;volatile
  3564                           
  3565                           ;timer0.c: 31: INTCONbits.TMR0IE = 1;
  3566  001718  8AF2               	bsf	intcon,5,c	;volatile
  3567                           
  3568                           ;timer0.c: 32: INTCONbits.GIE = 1;
  3569  00171A  8EF2               	bsf	intcon,7,c	;volatile
  3570                           
  3571                           ;timer0.c: 33: INTCONbits.PEIE = 1;
  3572  00171C  8CF2               	bsf	intcon,6,c	;volatile
  3573  00171E  0012               	return		;funcret
  3574  001720                     __end_of_configTimer:
  3575                           	opt stack 0
  3576                           tblptru	equ	0xFF8
  3577                           tblptrh	equ	0xFF7
  3578                           tblptrl	equ	0xFF6
  3579                           tablat	equ	0xFF5
  3580                           prodh	equ	0xFF4
  3581                           prodl	equ	0xFF3
  3582                           intcon	equ	0xFF2
  3583                           intcon2	equ	0xFF1
  3584                           postinc0	equ	0xFEE
  3585                           wreg	equ	0xFE8
  3586                           postinc2	equ	0xFDE
  3587                           postdec2	equ	0xFDD
  3588                           fsr2h	equ	0xFDA
  3589                           fsr2l	equ	0xFD9
  3590                           status	equ	0xFD8
  3591                           
  3592 ;; *************** function _configRS232 *****************
  3593 ;; Defined at:
  3594 ;;		line 9 in file "usart.c"
  3595 ;; Parameters:    Size  Location     Type
  3596 ;;		None
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;		None
  3599 ;; Return value:  Size  Location     Type
  3600 ;;		None               void
  3601 ;; Registers used:
  3602 ;;		wreg, status,2
  3603 ;; Tracked objects:
  3604 ;;		On entry : 0/0
  3605 ;;		On exit  : 0/0
  3606 ;;		Unchanged: 0/0
  3607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3608 ;;      Params:         0       0       0       0       0       0       0       0       0
  3609 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3610 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3611 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3612 ;;Total ram usage:        0 bytes
  3613 ;; Hardware stack levels used:    1
  3614 ;; Hardware stack levels required when called:    3
  3615 ;; This function calls:
  3616 ;;		Nothing
  3617 ;; This function is called by:
  3618 ;;		_main
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           	psect	text19
  3623  00173A                     __ptext19:
  3624                           	opt stack 0
  3625  00173A                     _configRS232:
  3626                           	opt stack 27
  3627                           
  3628                           ;usart.c: 13: TX9 = 0;
  3629                           
  3630                           ;incstack = 0
  3631  00173A  9CAC               	bcf	4012,6,c	;volatile
  3632                           
  3633                           ;usart.c: 14: TXEN = 1;
  3634  00173C  8AAC               	bsf	4012,5,c	;volatile
  3635                           
  3636                           ;usart.c: 15: SYNC = 0;
  3637  00173E  98AC               	bcf	4012,4,c	;volatile
  3638                           
  3639                           ;usart.c: 16: BRGH = 1;
  3640  001740  84AC               	bsf	4012,2,c	;volatile
  3641                           
  3642                           ;usart.c: 19: SPEN = 1;
  3643  001742  8EAB               	bsf	4011,7,c	;volatile
  3644                           
  3645                           ;usart.c: 20: RX9 = 0;
  3646  001744  9CAB               	bcf	4011,6,c	;volatile
  3647                           
  3648                           ;usart.c: 21: CREN = 1;
  3649  001746  88AB               	bsf	4011,4,c	;volatile
  3650                           
  3651                           ;usart.c: 26: BRG16 = 0;
  3652  001748  96B8               	bcf	4024,3,c	;volatile
  3653                           
  3654                           ;usart.c: 27: SPBRG = 129;
  3655  00174A  0E81               	movlw	129
  3656  00174C  6EAF               	movwf	4015,c	;volatile
  3657                           
  3658                           ;usart.c: 29: RXDTP = 0;
  3659  00174E  9AB8               	bcf	4024,5,c	;volatile
  3660  001750  0012               	return		;funcret
  3661  001752                     __end_of_configRS232:
  3662                           	opt stack 0
  3663                           tblptru	equ	0xFF8
  3664                           tblptrh	equ	0xFF7
  3665                           tblptrl	equ	0xFF6
  3666                           tablat	equ	0xFF5
  3667                           prodh	equ	0xFF4
  3668                           prodl	equ	0xFF3
  3669                           intcon	equ	0xFF2
  3670                           intcon2	equ	0xFF1
  3671                           postinc0	equ	0xFEE
  3672                           wreg	equ	0xFE8
  3673                           postinc2	equ	0xFDE
  3674                           postdec2	equ	0xFDD
  3675                           fsr2h	equ	0xFDA
  3676                           fsr2l	equ	0xFD9
  3677                           status	equ	0xFD8
  3678                           
  3679 ;; *************** function _configADInterrupt *****************
  3680 ;; Defined at:
  3681 ;;		line 11 in file "ad.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;		None
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;		None
  3686 ;; Return value:  Size  Location     Type
  3687 ;;		None               void
  3688 ;; Registers used:
  3689 ;;		None
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3695 ;;      Params:         0       0       0       0       0       0       0       0       0
  3696 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3697 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3698 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3699 ;;Total ram usage:        0 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    3
  3702 ;; This function calls:
  3703 ;;		Nothing
  3704 ;; This function is called by:
  3705 ;;		_main
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           	psect	text20
  3710  0017D6                     __ptext20:
  3711                           	opt stack 0
  3712  0017D6                     _configADInterrupt:
  3713                           	opt stack 27
  3714                           
  3715                           ;ad.c: 12: PIR1bits.ADIF = 0;
  3716                           
  3717                           ;incstack = 0
  3718  0017D6  9C9E               	bcf	3998,6,c	;volatile
  3719                           
  3720                           ;ad.c: 13: PIE1bits.ADIE = 1;
  3721  0017D8  8C9D               	bsf	3997,6,c	;volatile
  3722                           
  3723                           ;ad.c: 15: INTCONbits.GIE = 1;
  3724  0017DA  8EF2               	bsf	intcon,7,c	;volatile
  3725                           
  3726                           ;ad.c: 16: INTCONbits.PEIE = 1;
  3727  0017DC  8CF2               	bsf	intcon,6,c	;volatile
  3728  0017DE  0012               	return		;funcret
  3729  0017E0                     __end_of_configADInterrupt:
  3730                           	opt stack 0
  3731                           tblptru	equ	0xFF8
  3732                           tblptrh	equ	0xFF7
  3733                           tblptrl	equ	0xFF6
  3734                           tablat	equ	0xFF5
  3735                           prodh	equ	0xFF4
  3736                           prodl	equ	0xFF3
  3737                           intcon	equ	0xFF2
  3738                           intcon2	equ	0xFF1
  3739                           postinc0	equ	0xFEE
  3740                           wreg	equ	0xFE8
  3741                           postinc2	equ	0xFDE
  3742                           postdec2	equ	0xFDD
  3743                           fsr2h	equ	0xFDA
  3744                           fsr2l	equ	0xFD9
  3745                           status	equ	0xFD8
  3746                           
  3747 ;; *************** function _configAD *****************
  3748 ;; Defined at:
  3749 ;;		line 19 in file "ad.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;		None
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;		None
  3754 ;; Return value:  Size  Location     Type
  3755 ;;		None               void
  3756 ;; Registers used:
  3757 ;;		None
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3763 ;;      Params:         0       0       0       0       0       0       0       0       0
  3764 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3765 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3766 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3767 ;;Total ram usage:        0 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    3
  3770 ;; This function calls:
  3771 ;;		Nothing
  3772 ;; This function is called by:
  3773 ;;		_main
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           	psect	text21
  3778  001720                     __ptext21:
  3779                           	opt stack 0
  3780  001720                     _configAD:
  3781                           	opt stack 27
  3782                           
  3783                           ;ad.c: 20: ADCON0bits.ADON = 1;
  3784                           
  3785                           ;incstack = 0
  3786  001720  80C2               	bsf	4034,0,c	;volatile
  3787                           
  3788                           ;ad.c: 24: ADFM = 1;
  3789  001722  8EC0               	bsf	4032,7,c	;volatile
  3790                           
  3791                           ;ad.c: 27: ADCON1bits.PCFG3 = 0;
  3792  001724  96C1               	bcf	4033,3,c	;volatile
  3793                           
  3794                           ;ad.c: 28: ADCON1bits.PCFG2 = 1;
  3795  001726  84C1               	bsf	4033,2,c	;volatile
  3796                           
  3797                           ;ad.c: 29: ADCON1bits.PCFG1 = 0;
  3798  001728  92C1               	bcf	4033,1,c	;volatile
  3799                           
  3800                           ;ad.c: 30: ADCON1bits.PCFG0 = 1;
  3801  00172A  80C1               	bsf	4033,0,c	;volatile
  3802                           
  3803                           ;ad.c: 33: ADCON2bits.ACQT2 = 0;
  3804  00172C  9AC0               	bcf	4032,5,c	;volatile
  3805                           
  3806                           ;ad.c: 34: ADCON2bits.ACQT1 = 0;
  3807  00172E  98C0               	bcf	4032,4,c	;volatile
  3808                           
  3809                           ;ad.c: 35: ADCON2bits.ACQT0 = 1;
  3810  001730  86C0               	bsf	4032,3,c	;volatile
  3811                           
  3812                           ;ad.c: 38: ADCON2bits.ADCS2 = 1;
  3813  001732  84C0               	bsf	4032,2,c	;volatile
  3814                           
  3815                           ;ad.c: 39: ADCON2bits.ADCS1 = 0;
  3816  001734  92C0               	bcf	4032,1,c	;volatile
  3817                           
  3818                           ;ad.c: 40: ADCON2bits.ADCS0 = 1;
  3819  001736  80C0               	bsf	4032,0,c	;volatile
  3820  001738  0012               	return		;funcret
  3821  00173A                     __end_of_configAD:
  3822                           	opt stack 0
  3823                           tblptru	equ	0xFF8
  3824                           tblptrh	equ	0xFF7
  3825                           tblptrl	equ	0xFF6
  3826                           tablat	equ	0xFF5
  3827                           prodh	equ	0xFF4
  3828                           prodl	equ	0xFF3
  3829                           intcon	equ	0xFF2
  3830                           intcon2	equ	0xFF1
  3831                           postinc0	equ	0xFEE
  3832                           wreg	equ	0xFE8
  3833                           postinc2	equ	0xFDE
  3834                           postdec2	equ	0xFDD
  3835                           fsr2h	equ	0xFDA
  3836                           fsr2l	equ	0xFD9
  3837                           status	equ	0xFD8
  3838                           
  3839 ;; *************** function _InitI2C_Master *****************
  3840 ;; Defined at:
  3841 ;;		line 4 in file "i2c.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;		None
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;		None
  3846 ;; Return value:  Size  Location     Type
  3847 ;;		None               void
  3848 ;; Registers used:
  3849 ;;		wreg, status,2
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3855 ;;      Params:         0       0       0       0       0       0       0       0       0
  3856 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3857 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3858 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3859 ;;Total ram usage:        0 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    3
  3862 ;; This function calls:
  3863 ;;		Nothing
  3864 ;; This function is called by:
  3865 ;;		_main
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           	psect	text22
  3870  0016C6                     __ptext22:
  3871                           	opt stack 0
  3872  0016C6                     _InitI2C_Master:
  3873                           	opt stack 27
  3874                           
  3875                           ;i2c.c: 6: TRISBbits.RB0 = 1;
  3876                           
  3877                           ;incstack = 0
  3878  0016C6  8093               	bsf	3987,0,c	;volatile
  3879                           
  3880                           ;i2c.c: 7: TRISBbits.RB1 = 1;
  3881  0016C8  8293               	bsf	3987,1,c	;volatile
  3882                           
  3883                           ;i2c.c: 9: SSPADD = ( 20000000 / (4*100000) ) - 1;
  3884  0016CA  0E31               	movlw	49
  3885  0016CC  6EC8               	movwf	4040,c	;volatile
  3886                           
  3887                           ;i2c.c: 12: SSPIF = 0;
  3888  0016CE  969E               	bcf	3998,3,c	;volatile
  3889                           
  3890                           ;i2c.c: 15: SSPSTAT = 0;
  3891  0016D0  0E00               	movlw	0
  3892  0016D2  6EC7               	movwf	4039,c	;volatile
  3893                           
  3894                           ;i2c.c: 16: SSPSTATbits.SMP = 1;
  3895  0016D4  8EC7               	bsf	4039,7,c	;volatile
  3896                           
  3897                           ;i2c.c: 17: SSPSTATbits.CKE = 0;
  3898  0016D6  9CC7               	bcf	4039,6,c	;volatile
  3899                           
  3900                           ;i2c.c: 20: SSPCON1 = 0;
  3901  0016D8  0E00               	movlw	0
  3902  0016DA  6EC6               	movwf	4038,c	;volatile
  3903                           
  3904                           ;i2c.c: 21: SSPCON1bits.SSPM = 0b1000;
  3905  0016DC  50C6               	movf	4038,w,c	;volatile
  3906  0016DE  0BF0               	andlw	-16
  3907  0016E0  0908               	iorlw	8
  3908  0016E2  6EC6               	movwf	4038,c	;volatile
  3909                           
  3910                           ;i2c.c: 22: SSPCON1bits.SSPEN = 1;
  3911  0016E4  8AC6               	bsf	4038,5,c	;volatile
  3912  0016E6  0012               	return		;funcret
  3913  0016E8                     __end_of_InitI2C_Master:
  3914                           	opt stack 0
  3915                           tblptru	equ	0xFF8
  3916                           tblptrh	equ	0xFF7
  3917                           tblptrl	equ	0xFF6
  3918                           tablat	equ	0xFF5
  3919                           prodh	equ	0xFF4
  3920                           prodl	equ	0xFF3
  3921                           intcon	equ	0xFF2
  3922                           intcon2	equ	0xFF1
  3923                           postinc0	equ	0xFEE
  3924                           wreg	equ	0xFE8
  3925                           postinc2	equ	0xFDE
  3926                           postdec2	equ	0xFDD
  3927                           fsr2h	equ	0xFDA
  3928                           fsr2l	equ	0xFD9
  3929                           status	equ	0xFD8
  3930                           
  3931 ;; *************** function _interruptions *****************
  3932 ;; Defined at:
  3933 ;;		line 41 in file "main.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;		None
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;  cont            2   44[COMRAM] int 
  3938 ;; Return value:  Size  Location     Type
  3939 ;;		None               void
  3940 ;; Registers used:
  3941 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3942 ;; Tracked objects:
  3943 ;;		On entry : 0/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3947 ;;      Params:         0       0       0       0       0       0       0       0       0
  3948 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3949 ;;      Temps:         16       0       0       0       0       0       0       0       0
  3950 ;;      Totals:        18       0       0       0       0       0       0       0       0
  3951 ;;Total ram usage:       18 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; Hardware stack levels required when called:    2
  3954 ;; This function calls:
  3955 ;;		___awmod
  3956 ;;		_strcpy
  3957 ;;		i2_printf
  3958 ;; This function is called by:
  3959 ;;		Interrupt level 2
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           	psect	intcode
  3964  000008                     __pintcode:
  3965                           	opt stack 0
  3966  000008                     _interruptions:
  3967                           	opt stack 26
  3968                           
  3969                           ;incstack = 0
  3970  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3971  00000A  CFFA F01F          	movff	pclath,??_interruptions+2
  3972  00000E  CFFB F020          	movff	pclatu,??_interruptions+3
  3973  000012  ED4B  F008         	call	int_func,f	;refresh shadow registers
  3974                           pclatu	equ	0xFFB
  3975                           pclath	equ	0xFFA
  3976                           tblptru	equ	0xFF8
  3977                           tblptrh	equ	0xFF7
  3978                           tblptrl	equ	0xFF6
  3979                           tablat	equ	0xFF5
  3980                           prodh	equ	0xFF4
  3981                           prodl	equ	0xFF3
  3982                           intcon	equ	0xFF2
  3983                           intcon2	equ	0xFF1
  3984                           postinc0	equ	0xFEE
  3985                           wreg	equ	0xFE8
  3986                           postinc2	equ	0xFDE
  3987                           postdec2	equ	0xFDD
  3988                           fsr2h	equ	0xFDA
  3989                           fsr2l	equ	0xFD9
  3990                           status	equ	0xFD8
  3991                           
  3992                           	psect	intcode_body
  3993  001096                     __pintcode_body:
  3994                           	opt stack 26
  3995  001096                     int_func:
  3996                           	opt stack 26
  3997  001096  0006               	pop		; remove dummy address from shadow register refresh
  3998  001098  CFE9 F021          	movff	fsr0l,??_interruptions+4
  3999  00109C  CFEA F022          	movff	fsr0h,??_interruptions+5
  4000  0010A0  CFE1 F023          	movff	fsr1l,??_interruptions+6
  4001  0010A4  CFE2 F024          	movff	fsr1h,??_interruptions+7
  4002  0010A8  CFD9 F025          	movff	fsr2l,??_interruptions+8
  4003  0010AC  CFDA F026          	movff	fsr2h,??_interruptions+9
  4004  0010B0  CFF3 F027          	movff	prodl,??_interruptions+10
  4005  0010B4  CFF4 F028          	movff	prodh,??_interruptions+11
  4006  0010B8  CFF6 F029          	movff	tblptrl,??_interruptions+12
  4007  0010BC  CFF7 F02A          	movff	tblptrh,??_interruptions+13
  4008  0010C0  CFF8 F02B          	movff	tblptru,??_interruptions+14
  4009  0010C4  CFF5 F02C          	movff	tablat,??_interruptions+15
  4010                           
  4011                           ;main.c: 43: if (RCIF){
  4012  0010C8  AA9E               	btfss	3998,5,c	;volatile
  4013  0010CA  D047               	goto	i2l2320
  4014                           
  4015                           ;main.c: 44: if (FERR || OERR)
  4016  0010CC  B4AB               	btfsc	4011,2,c	;volatile
  4017  0010CE  D002               	goto	i2l300
  4018  0010D0  A2AB               	btfss	4011,1,c	;volatile
  4019  0010D2  D003               	goto	i2l298
  4020  0010D4                     i2l300:
  4021                           
  4022                           ;main.c: 45: {
  4023                           ;main.c: 46: CREN = 0;
  4024  0010D4  98AB               	bcf	4011,4,c	;volatile
  4025                           
  4026                           ;main.c: 47: hasAnError = 1;
  4027  0010D6  844A               	bsf	_hasAnError/(0+8),_hasAnError& (0+7),c
  4028                           
  4029                           ;main.c: 48: CREN = 1;
  4030  0010D8  88AB               	bsf	4011,4,c	;volatile
  4031  0010DA                     i2l298:
  4032                           
  4033                           ;main.c: 49: }
  4034                           ;main.c: 51: receivedData = RCREG;
  4035  0010DA  CFAE F04B          	movff	4014,_receivedData	;volatile
  4036                           
  4037                           ;main.c: 53: if(receivedData == '\r')
  4038  0010DE  0E0D               	movlw	13
  4039  0010E0  184B               	xorwf	_receivedData,w,c
  4040  0010E2  A4D8               	btfss	status,2,c
  4041  0010E4  D01D               	goto	i2l2308
  4042                           
  4043                           ;main.c: 54: {
  4044                           ;main.c: 55: string_aux[i] = '\0';
  4045  0010E6  502F               	movf	_i,w,c
  4046  0010E8  0D01               	mullw	1
  4047  0010EA  0E30               	movlw	low _string_aux
  4048  0010EC  24F3               	addwf	prodl,w,c
  4049  0010EE  6ED9               	movwf	fsr2l,c
  4050  0010F0  0E00               	movlw	high _string_aux
  4051  0010F2  20F4               	addwfc	prodh,w,c
  4052  0010F4  6EDA               	movwf	fsr2h,c
  4053  0010F6  0E00               	movlw	0
  4054  0010F8  6EDF               	movwf	indf2,c
  4055                           
  4056                           ;main.c: 56: strcpy(string,string_aux);
  4057  0010FA  0E9E               	movlw	low _string
  4058  0010FC  6E01               	movwf	strcpy@to,c
  4059  0010FE  0E00               	movlw	high _string
  4060  001100  6E02               	movwf	strcpy@to+1,c
  4061  001102  0E30               	movlw	low _string_aux
  4062  001104  6E03               	movwf	strcpy@from,c
  4063  001106  0E00               	movlw	high _string_aux
  4064  001108  6E04               	movwf	strcpy@from+1,c
  4065  00110A  EC24  F00B         	call	_strcpy	;wreg free
  4066                           
  4067                           ;main.c: 57: printf("\n\r");
  4068  00110E  0E4A               	movlw	low STR_1
  4069  001110  6E0D               	movwf	i2printf@f,c
  4070  001112  0E08               	movlw	high STR_1
  4071  001114  6E0E               	movwf	i2printf@f+1,c
  4072  001116  ECC5  F005         	call	i2_printf	;wreg free
  4073                           
  4074                           ;main.c: 58: i = 0;
  4075  00111A  0E00               	movlw	0
  4076  00111C  6E2F               	movwf	_i,c
  4077                           
  4078                           ;main.c: 59: }else
  4079  00111E  D01D               	goto	i2l2320
  4080  001120                     i2l2308:
  4081                           
  4082                           ;main.c: 60: {
  4083                           ;main.c: 61: if(i < 25)
  4084  001120  0E19               	movlw	25
  4085  001122  602F               	cpfslt	_i,c
  4086  001124  D016               	goto	i2l2316
  4087                           
  4088                           ;main.c: 62: {
  4089                           ;main.c: 63: i = i%25;
  4090  001126  C02F  F001         	movff	_i,___awmod@dividend
  4091  00112A  6A02               	clrf	___awmod@dividend+1,c
  4092  00112C  0E00               	movlw	0
  4093  00112E  6E04               	movwf	___awmod@divisor+1,c
  4094  001130  0E19               	movlw	25
  4095  001132  6E03               	movwf	___awmod@divisor,c
  4096  001134  ECD0  F009         	call	___awmod	;wreg free
  4097  001138  5001               	movf	?___awmod,w,c
  4098  00113A  6E2F               	movwf	_i,c
  4099                           
  4100                           ;main.c: 64: string_aux[i] = receivedData;
  4101  00113C  502F               	movf	_i,w,c
  4102  00113E  0D01               	mullw	1
  4103  001140  0E30               	movlw	low _string_aux
  4104  001142  24F3               	addwf	prodl,w,c
  4105  001144  6ED9               	movwf	fsr2l,c
  4106  001146  0E00               	movlw	high _string_aux
  4107  001148  20F4               	addwfc	prodh,w,c
  4108  00114A  6EDA               	movwf	fsr2h,c
  4109  00114C  C04B  FFDF         	movff	_receivedData,indf2
  4110                           
  4111                           ;main.c: 65: i++;
  4112  001150  2A2F               	incf	_i,f,c
  4113  001152                     i2l2316:
  4114                           
  4115                           ;main.c: 66: }
  4116                           ;main.c: 67: if(i == 25)
  4117  001152  0E19               	movlw	25
  4118  001154  182F               	xorwf	_i,w,c
  4119  001156  B4D8               	btfsc	status,2,c
  4120                           
  4121                           ;main.c: 68: i++;
  4122  001158  2A2F               	incf	_i,f,c
  4123  00115A                     i2l2320:
  4124                           
  4125                           ;main.c: 69: }
  4126                           ;main.c: 70: }
  4127                           ;main.c: 72: if(PIR1bits.ADIF){
  4128  00115A  AC9E               	btfss	3998,6,c	;volatile
  4129  00115C  D00C               	goto	i2l2326
  4130                           
  4131                           ;main.c: 73: data_ADC = ((ADRESH<<8) + ADRESL);
  4132  00115E  50C4               	movf	4036,w,c	;volatile
  4133  001160  6E1E               	movwf	(??_interruptions+1)& (0+255),c
  4134  001162  6A1D               	clrf	??_interruptions& (0+255),c
  4135  001164  50C3               	movf	4035,w,c	;volatile
  4136  001166  241D               	addwf	??_interruptions,w,c
  4137  001168  0100               	movlb	0	; () banked
  4138  00116A  6F95               	movwf	_data_ADC& (0+255),b
  4139  00116C  0E00               	movlw	0
  4140  00116E  201E               	addwfc	??_interruptions+1,w,c
  4141  001170  0100               	movlb	0	; () banked
  4142  001172  6F96               	movwf	(_data_ADC+1)& (0+255),b
  4143                           
  4144                           ; BSR set to: 0
  4145                           ;main.c: 75: PIR1bits.ADIF = 0;
  4146  001174  9C9E               	bcf	3998,6,c	;volatile
  4147  001176                     i2l2326:
  4148                           
  4149                           ;main.c: 76: }
  4150                           ;main.c: 78: if(INTCONbits.TMR0IF){
  4151  001176  A4F2               	btfss	intcon,2,c	;volatile
  4152  001178  D00B               	goto	i2l306
  4153                           
  4154                           ;main.c: 79: changing = ~changing;
  4155  00117A  B24A               	btfsc	_changing/(0+8),_changing& (0+7),c
  4156  00117C  D002               	goto	i2u198_40
  4157  00117E  824A               	bsf	_changing/(0+8),_changing& (0+7),c
  4158  001180  D001               	goto	i2u199_45
  4159  001182                     i2u198_40:
  4160  001182  924A               	bcf	_changing/(0+8),_changing& (0+7),c
  4161  001184                     i2u199_45:
  4162                           
  4163                           ;main.c: 80: PORTDbits.RD3 = changing;
  4164  001184  A24A               	btfss	_changing/(0+8),_changing& (0+7),c
  4165  001186  D002               	bra	i2u200_45
  4166  001188  8683               	bsf	3971,3,c	;volatile
  4167  00118A  D001               	bra	i2u200_47
  4168  00118C                     i2u200_45:
  4169  00118C  9683               	bcf	3971,3,c	;volatile
  4170  00118E                     i2u200_47:
  4171                           
  4172                           ;main.c: 81: INTCONbits.TMR0IF = 0;
  4173  00118E  94F2               	bcf	intcon,2,c	;volatile
  4174  001190                     i2l306:
  4175                           
  4176                           ;main.c: 82: }
  4177                           ;main.c: 84: if(INTCONbits.RBIF){
  4178  001190  A0F2               	btfss	intcon,0,c	;volatile
  4179  001192  D029               	goto	i2l311
  4180                           
  4181                           ;main.c: 85: for(int cont = 0; cont < 10; cont++)
  4182  001194  0E00               	movlw	0
  4183  001196  6E2E               	movwf	interruptions@cont+1,c
  4184  001198  0E00               	movlw	0
  4185  00119A  6E2D               	movwf	interruptions@cont,c
  4186  00119C  BE2E               	btfsc	interruptions@cont+1,7,c
  4187  00119E  D006               	goto	i2l2336
  4188  0011A0  502E               	movf	interruptions@cont+1,w,c
  4189  0011A2  E113               	bnz	i2l309
  4190  0011A4  0E0A               	movlw	10
  4191  0011A6  5C2D               	subwf	interruptions@cont,w,c
  4192  0011A8  B0D8               	btfsc	status,0,c
  4193  0011AA  D00F               	goto	i2l309
  4194  0011AC                     i2l2336:
  4195                           
  4196                           ;main.c: 86: _delay((unsigned long)((10)*(20000000/4000.0)));
  4197  0011AC  0E41               	movlw	65
  4198  0011AE  6E1D               	movwf	??_interruptions& (0+255),c
  4199  0011B0  0EEE               	movlw	238
  4200  0011B2                     i2u283_47:
  4201  0011B2  2EE8               	decfsz	wreg,f,c
  4202  0011B4  D7FE               	goto	i2u283_47
  4203  0011B6  2E1D               	decfsz	??_interruptions& (0+255),f,c
  4204  0011B8  D7FC               	goto	i2u283_47
  4205  0011BA  D000               	nop2	
  4206  0011BC  4A2D               	infsnz	interruptions@cont,f,c
  4207  0011BE  2A2E               	incf	interruptions@cont+1,f,c
  4208  0011C0  BE2E               	btfsc	interruptions@cont+1,7,c
  4209  0011C2  D7F4               	goto	i2l2336
  4210  0011C4  502E               	movf	interruptions@cont+1,w,c
  4211  0011C6  E101               	bnz	i2u203_40
  4212  0011C8  D7ED               	goto	L5
  4213  0011CA                     i2u203_40:
  4214  0011CA                     i2l309:
  4215                           
  4216                           ;main.c: 87: if(PORTBbits.RB7 == 1){
  4217  0011CA  AE81               	btfss	3969,7,c	;volatile
  4218  0011CC  D00B               	goto	i2l310
  4219                           
  4220                           ;main.c: 88: bottonToSend = 1;
  4221  0011CE  804A               	bsf	_bottonToSend/(0+8),_bottonToSend& (0+7),c
  4222                           
  4223                           ;main.c: 89: vaLedlRD4 = ~vaLedlRD4;
  4224  0011D0  B64A               	btfsc	_vaLedlRD4/(0+8),_vaLedlRD4& (0+7),c
  4225  0011D2  D002               	goto	i2u205_40
  4226  0011D4  864A               	bsf	_vaLedlRD4/(0+8),_vaLedlRD4& (0+7),c
  4227  0011D6  D001               	goto	i2u206_45
  4228  0011D8                     i2u205_40:
  4229  0011D8  964A               	bcf	_vaLedlRD4/(0+8),_vaLedlRD4& (0+7),c
  4230  0011DA                     i2u206_45:
  4231                           
  4232                           ;main.c: 90: PORTDbits.RD4 = vaLedlRD4;
  4233  0011DA  A64A               	btfss	_vaLedlRD4/(0+8),_vaLedlRD4& (0+7),c
  4234  0011DC  D002               	bra	i2u207_45
  4235  0011DE  8883               	bsf	3971,4,c	;volatile
  4236  0011E0  D001               	bra	i2u207_47
  4237  0011E2                     i2u207_45:
  4238  0011E2  9883               	bcf	3971,4,c	;volatile
  4239  0011E4                     i2u207_47:
  4240  0011E4                     i2l310:
  4241                           
  4242                           ;main.c: 91: }
  4243                           ;main.c: 92: INTCONbits.RBIF = 0;
  4244  0011E4  90F2               	bcf	intcon,0,c	;volatile
  4245  0011E6                     i2l311:
  4246  0011E6  C02C  FFF5         	movff	??_interruptions+15,tablat
  4247  0011EA  C02B  FFF8         	movff	??_interruptions+14,tblptru
  4248  0011EE  C02A  FFF7         	movff	??_interruptions+13,tblptrh
  4249  0011F2  C029  FFF6         	movff	??_interruptions+12,tblptrl
  4250  0011F6  C028  FFF4         	movff	??_interruptions+11,prodh
  4251  0011FA  C027  FFF3         	movff	??_interruptions+10,prodl
  4252  0011FE  C026  FFDA         	movff	??_interruptions+9,fsr2h
  4253  001202  C025  FFD9         	movff	??_interruptions+8,fsr2l
  4254  001206  C024  FFE2         	movff	??_interruptions+7,fsr1h
  4255  00120A  C023  FFE1         	movff	??_interruptions+6,fsr1l
  4256  00120E  C022  FFEA         	movff	??_interruptions+5,fsr0h
  4257  001212  C021  FFE9         	movff	??_interruptions+4,fsr0l
  4258  001216  C020  FFFB         	movff	??_interruptions+3,pclatu
  4259  00121A  C01F  FFFA         	movff	??_interruptions+2,pclath
  4260  00121E  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4261  001220  0011               	retfie		f
  4262  001222                     __end_of_interruptions:
  4263                           	opt stack 0
  4264                           pclatu	equ	0xFFB
  4265                           pclath	equ	0xFFA
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           intcon	equ	0xFF2
  4273                           intcon2	equ	0xFF1
  4274                           postinc0	equ	0xFEE
  4275                           fsr0h	equ	0xFEA
  4276                           fsr0l	equ	0xFE9
  4277                           wreg	equ	0xFE8
  4278                           fsr1h	equ	0xFE2
  4279                           fsr1l	equ	0xFE1
  4280                           indf2	equ	0xFDF
  4281                           postinc2	equ	0xFDE
  4282                           postdec2	equ	0xFDD
  4283                           fsr2h	equ	0xFDA
  4284                           fsr2l	equ	0xFD9
  4285                           status	equ	0xFD8
  4286                           
  4287 ;; *************** function i2_printf *****************
  4288 ;; Defined at:
  4289 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;  f               2   12[COMRAM] PTR const unsigned char 
  4292 ;;		 -> STR_3(2), STR_2(38), STR_1(3), 
  4293 ;; Auto vars:     Size  Location     Type
  4294 ;;  printf          4    0        struct .
  4295 ;;  printf          3    0        PTR const unsigned char 
  4296 ;;  printf          2   25[COMRAM] int 
  4297 ;;  printf          2   23[COMRAM] unsigned int 
  4298 ;;  printf          2   19[COMRAM] PTR void [1]
  4299 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4300 ;;  printf          2    0        unsigned int 
  4301 ;;  printf          1   27[COMRAM] char 
  4302 ;;  printf          1   22[COMRAM] unsigned char 
  4303 ;;  printf          1   21[COMRAM] char 
  4304 ;;  printf          1   18[COMRAM] unsigned char 
  4305 ;; Return value:  Size  Location     Type
  4306 ;;                  2   12[COMRAM] int 
  4307 ;; Registers used:
  4308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4309 ;; Tracked objects:
  4310 ;;		On entry : 0/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4314 ;;      Params:         2       0       0       0       0       0       0       0       0
  4315 ;;      Locals:        10       0       0       0       0       0       0       0       0
  4316 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4317 ;;      Totals:        16       0       0       0       0       0       0       0       0
  4318 ;;Total ram usage:       16 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; Hardware stack levels required when called:    1
  4321 ;; This function calls:
  4322 ;;		i2___lwdiv
  4323 ;;		i2___lwmod
  4324 ;;		i2___wmul
  4325 ;;		i2_isdigit
  4326 ;;		i2_putch
  4327 ;; This function is called by:
  4328 ;;		_interruptions
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           	psect	text24
  4333  000B8A                     __ptext24:
  4334                           	opt stack 0
  4335  000B8A                     i2_printf:
  4336                           	opt stack 26
  4337                           
  4338                           ;doprnt.c: 466: va_list ap;
  4339                           ;doprnt.c: 499: signed char c;
  4340                           ;doprnt.c: 501: int width;
  4341                           ;doprnt.c: 506: signed char prec;
  4342                           ;doprnt.c: 508: unsigned char flag;
  4343                           ;doprnt.c: 523: union {
  4344                           ;doprnt.c: 524: unsigned long vd;
  4345                           ;doprnt.c: 525: double integ;
  4346                           ;doprnt.c: 526: } tmpval;
  4347                           ;doprnt.c: 528: unsigned int val;
  4348                           ;doprnt.c: 529: unsigned len;
  4349                           ;doprnt.c: 530: const char * cp;
  4350                           ;doprnt.c: 533: *ap = __va_start();
  4351                           
  4352                           ;incstack = 0
  4353  000B8A  0E0F               	movlw	low (?i2_printf+2)
  4354  000B8C  6E14               	movwf	i2printf@ap,c
  4355  000B8E  0E00               	movlw	high (?i2_printf+2)
  4356  000B90  6E15               	movwf	i2printf@ap+1,c
  4357                           
  4358                           ;doprnt.c: 536: while(c = *f++) {
  4359  000B92  D141               	goto	i2l2286
  4360  000B94                     i2l2184:
  4361                           
  4362                           ;doprnt.c: 538: if(c != '%')
  4363  000B94  0E25               	movlw	37
  4364  000B96  181C               	xorwf	i2printf@c,w,c
  4365  000B98  B4D8               	btfsc	status,2,c
  4366  000B9A  D004               	goto	i2l2188
  4367                           
  4368                           ;doprnt.c: 540: {
  4369                           ;doprnt.c: 541: (putch(c) );
  4370  000B9C  501C               	movf	i2printf@c,w,c
  4371  000B9E  ECD6  F00B         	call	i2_putch
  4372                           
  4373                           ;doprnt.c: 542: continue;
  4374  000BA2  D139               	goto	i2l2286
  4375  000BA4                     i2l2188:
  4376                           
  4377                           ;doprnt.c: 543: }
  4378                           ;doprnt.c: 546: width = 0;
  4379  000BA4  0E00               	movlw	0
  4380  000BA6  6E1B               	movwf	i2printf@width+1,c
  4381  000BA8  0E00               	movlw	0
  4382  000BAA  6E1A               	movwf	i2printf@width,c
  4383                           
  4384                           ;doprnt.c: 548: flag = 0;
  4385  000BAC  0E00               	movlw	0
  4386  000BAE  6E17               	movwf	i2printf@flag,c
  4387                           
  4388                           ;doprnt.c: 551: switch(*f) {
  4389                           
  4390                           ;doprnt.c: 550: for(;;) {
  4391  000BB0  D003               	goto	i2l2194
  4392  000BB2                     i2l2190:
  4393                           
  4394                           ;doprnt.c: 580: flag |= 0x04;
  4395  000BB2  8417               	bsf	i2printf@flag,2,c
  4396                           
  4397                           ;doprnt.c: 581: f++;
  4398  000BB4  4A0D               	infsnz	i2printf@f,f,c
  4399  000BB6  2A0E               	incf	i2printf@f+1,f,c
  4400  000BB8                     i2l2194:
  4401  000BB8  C00D  FFF6         	movff	i2printf@f,tblptrl
  4402  000BBC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4403  000BC0                     	if	0	;tblptru may be non-zero
  4404  000BC0                     	endif
  4405  000BC0                     	if	0	;tblptru may be non-zero
  4406  000BC0                     	endif
  4407  000BC0  0008               	tblrd		*
  4408  000BC2  50F5               	movf	tablat,w,c
  4409                           
  4410                           ; Switch size 1, requested type "space"
  4411                           ; Number of cases is 1, Range of values is 48 to 48
  4412                           ; switch strategies available:
  4413                           ; Name         Instructions Cycles
  4414                           ; simple_byte            4     3 (average)
  4415                           ;	Chosen strategy is simple_byte
  4416  000BC4  0A30               	xorlw	48	; case 48
  4417  000BC6  B4D8               	btfsc	status,2,c
  4418  000BC8  D7F4               	goto	i2l2190
  4419                           
  4420                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4421                           
  4422                           ;doprnt.c: 586: }
  4423                           
  4424                           ;doprnt.c: 585: break;
  4425  000BCA  C00D  FFF6         	movff	i2printf@f,tblptrl
  4426  000BCE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4427  000BD2                     	if	0	;tblptru may be non-zero
  4428  000BD2                     	endif
  4429  000BD2                     	if	0	;tblptru may be non-zero
  4430  000BD2                     	endif
  4431  000BD2  0008               	tblrd		*
  4432  000BD4  50F5               	movf	tablat,w,c
  4433  000BD6  EC74  F00B         	call	i2_isdigit
  4434  000BDA  A0D8               	btfss	status,0,c
  4435  000BDC  D038               	goto	i2l2214
  4436                           
  4437                           ;doprnt.c: 598: width = 0;
  4438  000BDE  0E00               	movlw	0
  4439  000BE0  6E1B               	movwf	i2printf@width+1,c
  4440  000BE2  0E00               	movlw	0
  4441  000BE4  6E1A               	movwf	i2printf@width,c
  4442  000BE6                     i2l2200:
  4443                           
  4444                           ;doprnt.c: 600: width *= 10;
  4445  000BE6  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
  4446  000BEA  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  4447  000BEE  0E00               	movlw	0
  4448  000BF0  6E04               	movwf	i2___wmul@multiplicand+1,c
  4449  000BF2  0E0A               	movlw	10
  4450  000BF4  6E03               	movwf	i2___wmul@multiplicand,c
  4451  000BF6  EC50  F00B         	call	i2___wmul	;wreg free
  4452  000BFA  C001  F01A         	movff	?i2___wmul,i2printf@width
  4453  000BFE  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
  4454                           
  4455                           ;doprnt.c: 601: width += *f++ - '0';
  4456  000C02  0ED0               	movlw	208
  4457  000C04  6E0F               	movwf	??i2_printf& (0+255),c
  4458  000C06  0EFF               	movlw	255
  4459  000C08  6E10               	movwf	(??i2_printf+1)& (0+255),c
  4460  000C0A  C00D  FFF6         	movff	i2printf@f,tblptrl
  4461  000C0E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4462  000C12                     	if	0	;tblptru may be non-zero
  4463  000C12                     	endif
  4464  000C12                     	if	0	;tblptru may be non-zero
  4465  000C12                     	endif
  4466  000C12  0008               	tblrd		*
  4467  000C14  50F5               	movf	tablat,w,c
  4468  000C16  6E11               	movwf	(??i2_printf+2)& (0+255),c
  4469  000C18  6A12               	clrf	(??i2_printf+3)& (0+255),c
  4470  000C1A  500F               	movf	??i2_printf,w,c
  4471  000C1C  2611               	addwf	??i2_printf+2,f,c
  4472  000C1E  5010               	movf	??i2_printf+1,w,c
  4473  000C20  2212               	addwfc	??i2_printf+3,f,c
  4474  000C22  5011               	movf	??i2_printf+2,w,c
  4475  000C24  261A               	addwf	i2printf@width,f,c
  4476  000C26  5012               	movf	??i2_printf+3,w,c
  4477  000C28  221B               	addwfc	i2printf@width+1,f,c
  4478  000C2A  4A0D               	infsnz	i2printf@f,f,c
  4479  000C2C  2A0E               	incf	i2printf@f+1,f,c
  4480                           
  4481                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4482  000C2E  C00D  FFF6         	movff	i2printf@f,tblptrl
  4483  000C32  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4484  000C36                     	if	0	;tblptru may be non-zero
  4485  000C36                     	endif
  4486  000C36                     	if	0	;tblptru may be non-zero
  4487  000C36                     	endif
  4488  000C36  0008               	tblrd		*
  4489  000C38  50F5               	movf	tablat,w,c
  4490  000C3A  EC74  F00B         	call	i2_isdigit
  4491  000C3E  A0D8               	btfss	status,0,c
  4492  000C40  D006               	goto	i2l2214
  4493  000C42  D7D1               	goto	i2l2200
  4494  000C44                     i2l2208:
  4495                           
  4496                           ;doprnt.c: 718: case 'x':
  4497                           ;doprnt.c: 721: flag |= 0x80;
  4498  000C44  8E17               	bsf	i2printf@flag,7,c
  4499                           
  4500                           ;doprnt.c: 723: break;
  4501  000C46  D01A               	goto	i2l2216
  4502  000C48                     i2l2210:
  4503                           
  4504                           ;doprnt.c: 818: flag |= 0xC0;
  4505  000C48  0EC0               	movlw	192
  4506  000C4A  1217               	iorwf	i2printf@flag,f,c
  4507                           
  4508                           ;doprnt.c: 822: }
  4509                           
  4510                           ;doprnt.c: 819: break;
  4511  000C4C  D017               	goto	i2l2216
  4512  000C4E                     i2l2214:
  4513  000C4E  C00D  FFF6         	movff	i2printf@f,tblptrl
  4514  000C52  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4515  000C56  4A0D               	infsnz	i2printf@f,f,c
  4516  000C58  2A0E               	incf	i2printf@f+1,f,c
  4517  000C5A                     	if	0	;tblptru may be non-zero
  4518  000C5A                     	endif
  4519  000C5A                     	if	0	;tblptru may be non-zero
  4520  000C5A                     	endif
  4521  000C5A  0008               	tblrd		*
  4522  000C5C  CFF5 F01C          	movff	tablat,i2printf@c
  4523  000C60  501C               	movf	i2printf@c,w,c
  4524                           
  4525                           ; Switch size 1, requested type "space"
  4526                           ; Number of cases is 4, Range of values is 0 to 120
  4527                           ; switch strategies available:
  4528                           ; Name         Instructions Cycles
  4529                           ; simple_byte           13     7 (average)
  4530                           ;	Chosen strategy is simple_byte
  4531  000C62  0A00               	xorlw	0	; case 0
  4532  000C64  B4D8               	btfsc	status,2,c
  4533  000C66  0012               	return	
  4534  000C68  0A58               	xorlw	88	; case 88
  4535  000C6A  B4D8               	btfsc	status,2,c
  4536  000C6C  D7EB               	goto	i2l2208
  4537  000C6E  0A2D               	xorlw	45	; case 117
  4538  000C70  B4D8               	btfsc	status,2,c
  4539  000C72  D7EA               	goto	i2l2210
  4540  000C74  0A0D               	xorlw	13	; case 120
  4541  000C76  B4D8               	btfsc	status,2,c
  4542  000C78  D7E5               	goto	i2l2208
  4543  000C7A  D0CD               	goto	i2l2286
  4544  000C7C                     i2l2216:
  4545                           
  4546                           ;doprnt.c: 1273: {
  4547                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4548  000C7C  C014  FFD9         	movff	i2printf@ap,fsr2l
  4549  000C80  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  4550  000C84  CFDE F018          	movff	postinc2,i2printf@val
  4551  000C88  CFDD F019          	movff	postdec2,i2printf@val+1
  4552  000C8C  0E02               	movlw	2
  4553  000C8E  2614               	addwf	i2printf@ap,f,c
  4554  000C90  0E00               	movlw	0
  4555  000C92  2215               	addwfc	i2printf@ap+1,f,c
  4556                           
  4557                           ;doprnt.c: 1287: }
  4558                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  4559  000C94  D030               	goto	i2l2250
  4560  000C96                     i2l2220:
  4561                           
  4562                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4563  000C96  0E01               	movlw	1
  4564  000C98  6E1C               	movwf	i2printf@c,c
  4565  000C9A                     i2l2222:
  4566  000C9A  0E05               	movlw	5
  4567  000C9C  181C               	xorwf	i2printf@c,w,c
  4568  000C9E  B4D8               	btfsc	status,2,c
  4569  000CA0  D032               	goto	i2l2252
  4570                           
  4571                           ;doprnt.c: 1306: if(val < dpowers[c])
  4572  000CA2  501C               	movf	i2printf@c,w,c
  4573  000CA4  0D02               	mullw	2
  4574  000CA6  0E01               	movlw	low _dpowers
  4575  000CA8  24F3               	addwf	prodl,w,c
  4576  000CAA  6EF6               	movwf	tblptrl,c
  4577  000CAC  0E08               	movlw	high _dpowers
  4578  000CAE  20F4               	addwfc	prodh,w,c
  4579  000CB0  6EF7               	movwf	tblptrh,c
  4580  000CB2                     	if	0	;There are less than 3 active tblptr bytes
  4581  000CB2                     	endif
  4582  000CB2  0009               	tblrd		*+
  4583  000CB4  50F5               	movf	tablat,w,c
  4584  000CB6  5C18               	subwf	i2printf@val,w,c
  4585  000CB8  0009               	tblrd		*+
  4586  000CBA  50F5               	movf	tablat,w,c
  4587  000CBC  5819               	subwfb	i2printf@val+1,w,c
  4588  000CBE  A0D8               	btfss	status,0,c
  4589  000CC0  D022               	goto	i2l2252
  4590                           
  4591                           ;doprnt.c: 1307: break;
  4592  000CC2  2A1C               	incf	i2printf@c,f,c
  4593  000CC4  D7EA               	goto	i2l2222
  4594  000CC6                     i2l2234:
  4595                           
  4596                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4597  000CC6  0E01               	movlw	1
  4598  000CC8  6E1C               	movwf	i2printf@c,c
  4599  000CCA                     i2l2236:
  4600  000CCA  0E04               	movlw	4
  4601  000CCC  181C               	xorwf	i2printf@c,w,c
  4602  000CCE  B4D8               	btfsc	status,2,c
  4603  000CD0  D01A               	goto	i2l2252
  4604                           
  4605                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4606  000CD2  501C               	movf	i2printf@c,w,c
  4607  000CD4  0D02               	mullw	2
  4608  000CD6  0E0B               	movlw	low _hexpowers
  4609  000CD8  24F3               	addwf	prodl,w,c
  4610  000CDA  6EF6               	movwf	tblptrl,c
  4611  000CDC  0E08               	movlw	high _hexpowers
  4612  000CDE  20F4               	addwfc	prodh,w,c
  4613  000CE0  6EF7               	movwf	tblptrh,c
  4614  000CE2                     	if	0	;There are less than 3 active tblptr bytes
  4615  000CE2                     	endif
  4616  000CE2  0009               	tblrd		*+
  4617  000CE4  50F5               	movf	tablat,w,c
  4618  000CE6  5C18               	subwf	i2printf@val,w,c
  4619  000CE8  0009               	tblrd		*+
  4620  000CEA  50F5               	movf	tablat,w,c
  4621  000CEC  5819               	subwfb	i2printf@val+1,w,c
  4622  000CEE  A0D8               	btfss	status,0,c
  4623  000CF0  D00A               	goto	i2l2252
  4624                           
  4625                           ;doprnt.c: 1318: break;
  4626  000CF2  2A1C               	incf	i2printf@c,f,c
  4627  000CF4  D7EA               	goto	i2l2236
  4628  000CF6                     i2l2250:
  4629  000CF6  5017               	movf	i2printf@flag,w,c
  4630  000CF8  0BC0               	andlw	192
  4631                           
  4632                           ; Switch size 1, requested type "space"
  4633                           ; Number of cases is 2, Range of values is 128 to 192
  4634                           ; switch strategies available:
  4635                           ; Name         Instructions Cycles
  4636                           ; simple_byte            7     4 (average)
  4637                           ;	Chosen strategy is simple_byte
  4638  000CFA  0A80               	xorlw	128	; case 128
  4639  000CFC  B4D8               	btfsc	status,2,c
  4640  000CFE  D7E3               	goto	i2l2234
  4641  000D00  0A40               	xorlw	64	; case 192
  4642  000D02  B4D8               	btfsc	status,2,c
  4643  000D04  D7C8               	goto	i2l2220
  4644  000D06                     i2l2252:
  4645                           
  4646                           ;doprnt.c: 1381: if(width > c)
  4647  000D06  0E80               	movlw	128
  4648  000D08  BE1C               	btfsc	i2printf@c,7,c
  4649  000D0A  0E7F               	movlw	127
  4650  000D0C  6E0F               	movwf	??i2_printf& (0+255),c
  4651  000D0E  501A               	movf	i2printf@width,w,c
  4652  000D10  5C1C               	subwf	i2printf@c,w,c
  4653  000D12  501B               	movf	i2printf@width+1,w,c
  4654  000D14  0A80               	xorlw	128
  4655  000D16  580F               	subwfb	??i2_printf& (0+255),w,c
  4656  000D18  B0D8               	btfsc	status,0,c
  4657  000D1A  D007               	goto	i2l2256
  4658                           
  4659                           ;doprnt.c: 1382: width -= c;
  4660  000D1C  501C               	movf	i2printf@c,w,c
  4661  000D1E  5E1A               	subwf	i2printf@width,f,c
  4662  000D20  0E00               	movlw	0
  4663  000D22  BE1C               	btfsc	i2printf@c,7,c
  4664  000D24  0EFF               	movlw	255
  4665  000D26  5A1B               	subwfb	i2printf@width+1,f,c
  4666  000D28  D004               	goto	i2l2258
  4667  000D2A                     i2l2256:
  4668                           
  4669                           ;doprnt.c: 1383: else
  4670                           ;doprnt.c: 1384: width = 0;
  4671  000D2A  0E00               	movlw	0
  4672  000D2C  6E1B               	movwf	i2printf@width+1,c
  4673  000D2E  0E00               	movlw	0
  4674  000D30  6E1A               	movwf	i2printf@width,c
  4675  000D32                     i2l2258:
  4676                           
  4677                           ;doprnt.c: 1387: if(flag & 0x04) {
  4678  000D32  A417               	btfss	i2printf@flag,2,c
  4679  000D34  D00B               	goto	i2l2266
  4680  000D36                     
  4681                           ;doprnt.c: 1415: if(width)
  4682  000D36  501A               	movf	i2printf@width,w,c
  4683  000D38  101B               	iorwf	i2printf@width+1,w,c
  4684  000D3A  B4D8               	btfsc	status,2,c
  4685  000D3C  D015               	goto	i2l383
  4686                           
  4687                           ;doprnt.c: 1417: (putch('0') );
  4688                           
  4689                           ;doprnt.c: 1416: do
  4690  000D3E  0E30               	movlw	48
  4691  000D40  ECD6  F00B         	call	i2_putch
  4692                           
  4693                           ;doprnt.c: 1418: while(--width);
  4694  000D44  061A               	decf	i2printf@width,f,c
  4695  000D46  A0D8               	btfss	status,0,c
  4696  000D48  061B               	decf	i2printf@width+1,f,c
  4697  000D4A  D7F5               	goto	L7
  4698  000D4C                     i2l2266:
  4699                           
  4700                           ;doprnt.c: 1422: {
  4701                           ;doprnt.c: 1424: if(width
  4702                           ;doprnt.c: 1428: )
  4703  000D4C  501A               	movf	i2printf@width,w,c
  4704  000D4E  101B               	iorwf	i2printf@width+1,w,c
  4705  000D50  B4D8               	btfsc	status,2,c
  4706  000D52  D00A               	goto	i2l383
  4707  000D54                     i2l2268:
  4708                           
  4709                           ;doprnt.c: 1430: (putch(' ') );
  4710  000D54  0E20               	movlw	32
  4711  000D56  ECD6  F00B         	call	i2_putch
  4712                           
  4713                           ;doprnt.c: 1431: while(--width);
  4714  000D5A  061A               	decf	i2printf@width,f,c
  4715  000D5C  A0D8               	btfss	status,0,c
  4716  000D5E  061B               	decf	i2printf@width+1,f,c
  4717  000D60  501A               	movf	i2printf@width,w,c
  4718  000D62  101B               	iorwf	i2printf@width+1,w,c
  4719  000D64  A4D8               	btfss	status,2,c
  4720  000D66  D7F6               	goto	i2l2268
  4721  000D68                     i2l383:
  4722                           
  4723                           ;doprnt.c: 1469: }
  4724                           ;doprnt.c: 1472: prec = c;
  4725  000D68  C01C  F016         	movff	i2printf@c,i2printf@prec
  4726                           
  4727                           ;doprnt.c: 1474: while(prec--) {
  4728  000D6C  D050               	goto	i2l2284
  4729  000D6E                     i2l2272:
  4730                           
  4731                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4732  000D6E  5016               	movf	i2printf@prec,w,c
  4733  000D70  0D02               	mullw	2
  4734  000D72  0E01               	movlw	low _dpowers
  4735  000D74  24F3               	addwf	prodl,w,c
  4736  000D76  6EF6               	movwf	tblptrl,c
  4737  000D78  0E08               	movlw	high _dpowers
  4738  000D7A  20F4               	addwfc	prodh,w,c
  4739  000D7C  6EF7               	movwf	tblptrh,c
  4740  000D7E                     	if	0	;There are less than 3 active tblptr bytes
  4741  000D7E                     	endif
  4742  000D7E  0009               	tblrd		*+
  4743  000D80  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4744  000D84  000A               	tblrd		*-
  4745  000D86  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4746  000D8A  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4747  000D8E  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4748  000D92  EC98  F00A         	call	i2___lwdiv	;wreg free
  4749  000D96  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  4750  000D9A  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  4751  000D9E  0E00               	movlw	0
  4752  000DA0  6E0B               	movwf	i2___lwmod@divisor+1,c
  4753  000DA2  0E0A               	movlw	10
  4754  000DA4  6E0A               	movwf	i2___lwmod@divisor,c
  4755  000DA6  ECE8  F00A         	call	i2___lwmod	;wreg free
  4756  000DAA  5008               	movf	?i2___lwmod,w,c
  4757  000DAC  0F30               	addlw	48
  4758  000DAE  6E1C               	movwf	i2printf@c,c
  4759                           
  4760                           ;doprnt.c: 1491: break;
  4761  000DB0  D02B               	goto	i2l2282
  4762  000DB2                     i2l2274:
  4763                           
  4764                           ;doprnt.c: 1499: {
  4765                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4766  000DB2  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4767  000DB6  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4768  000DBA  5016               	movf	i2printf@prec,w,c
  4769  000DBC  0D02               	mullw	2
  4770  000DBE  0E0B               	movlw	low _hexpowers
  4771  000DC0  24F3               	addwf	prodl,w,c
  4772  000DC2  6EF6               	movwf	tblptrl,c
  4773  000DC4  0E08               	movlw	high _hexpowers
  4774  000DC6  20F4               	addwfc	prodh,w,c
  4775  000DC8  6EF7               	movwf	tblptrh,c
  4776  000DCA                     	if	0	;There are less than 3 active tblptr bytes
  4777  000DCA                     	endif
  4778  000DCA  0009               	tblrd		*+
  4779  000DCC  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4780  000DD0  000A               	tblrd		*-
  4781  000DD2  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4782  000DD6  EC98  F00A         	call	i2___lwdiv	;wreg free
  4783  000DDA  5001               	movf	?i2___lwdiv,w,c
  4784  000DDC  0B0F               	andlw	15
  4785  000DDE  6E13               	movwf	i2printf@idx,c
  4786                           
  4787                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  4788  000DE0  5013               	movf	i2printf@idx,w,c
  4789  000DE2  0D01               	mullw	1
  4790  000DE4  0E39               	movlw	low STR_4
  4791  000DE6  24F3               	addwf	prodl,w,c
  4792  000DE8  6EF6               	movwf	tblptrl,c
  4793  000DEA  0E08               	movlw	high STR_4
  4794  000DEC  20F4               	addwfc	prodh,w,c
  4795  000DEE  6EF7               	movwf	tblptrh,c
  4796  000DF0                     	if	0	;There are less than 3 active tblptr bytes
  4797  000DF0                     	endif
  4798  000DF0  0008               	tblrd		*
  4799  000DF2  CFF5 F01C          	movff	tablat,i2printf@c
  4800                           
  4801                           ;doprnt.c: 1523: }
  4802                           
  4803                           ;doprnt.c: 1508: }
  4804                           ;doprnt.c: 1510: break;
  4805  000DF6  D008               	goto	i2l2282
  4806  000DF8                     i2l2280:
  4807  000DF8  5017               	movf	i2printf@flag,w,c
  4808  000DFA  0BC0               	andlw	192
  4809                           
  4810                           ; Switch size 1, requested type "space"
  4811                           ; Number of cases is 2, Range of values is 128 to 192
  4812                           ; switch strategies available:
  4813                           ; Name         Instructions Cycles
  4814                           ; simple_byte            7     4 (average)
  4815                           ;	Chosen strategy is simple_byte
  4816  000DFC  0A80               	xorlw	128	; case 128
  4817  000DFE  B4D8               	btfsc	status,2,c
  4818  000E00  D7D8               	goto	i2l2274
  4819  000E02  0A40               	xorlw	64	; case 192
  4820  000E04  B4D8               	btfsc	status,2,c
  4821  000E06  D7B3               	goto	i2l2272
  4822  000E08                     i2l2282:
  4823                           
  4824                           ;doprnt.c: 1524: (putch(c) );
  4825  000E08  501C               	movf	i2printf@c,w,c
  4826  000E0A  ECD6  F00B         	call	i2_putch
  4827  000E0E                     i2l2284:
  4828  000E0E  0616               	decf	i2printf@prec,f,c
  4829  000E10  2816               	incf	i2printf@prec,w,c
  4830  000E12  A4D8               	btfss	status,2,c
  4831  000E14  D7F1               	goto	i2l2280
  4832  000E16                     i2l2286:
  4833  000E16  C00D  FFF6         	movff	i2printf@f,tblptrl
  4834  000E1A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4835  000E1E  4A0D               	infsnz	i2printf@f,f,c
  4836  000E20  2A0E               	incf	i2printf@f+1,f,c
  4837  000E22                     	if	0	;tblptru may be non-zero
  4838  000E22                     	endif
  4839  000E22                     	if	0	;tblptru may be non-zero
  4840  000E22                     	endif
  4841  000E22  0008               	tblrd		*
  4842  000E24  CFF5 F01C          	movff	tablat,i2printf@c
  4843  000E28  501C               	movf	i2printf@c,w,c
  4844  000E2A  B4D8               	btfsc	status,2,c
  4845  000E2C  0012               	return	
  4846  000E2E  D6B2               	goto	i2l2184
  4847  000E30                     __end_ofi2_printf:
  4848                           	opt stack 0
  4849                           pclatu	equ	0xFFB
  4850                           pclath	equ	0xFFA
  4851                           tblptru	equ	0xFF8
  4852                           tblptrh	equ	0xFF7
  4853                           tblptrl	equ	0xFF6
  4854                           tablat	equ	0xFF5
  4855                           prodh	equ	0xFF4
  4856                           prodl	equ	0xFF3
  4857                           intcon	equ	0xFF2
  4858                           intcon2	equ	0xFF1
  4859                           postinc0	equ	0xFEE
  4860                           fsr0h	equ	0xFEA
  4861                           fsr0l	equ	0xFE9
  4862                           wreg	equ	0xFE8
  4863                           fsr1h	equ	0xFE2
  4864                           fsr1l	equ	0xFE1
  4865                           indf2	equ	0xFDF
  4866                           postinc2	equ	0xFDE
  4867                           postdec2	equ	0xFDD
  4868                           fsr2h	equ	0xFDA
  4869                           fsr2l	equ	0xFD9
  4870                           status	equ	0xFD8
  4871                           
  4872 ;; *************** function i2_putch *****************
  4873 ;; Defined at:
  4874 ;;		line 46 in file "usart.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;  byte            1    wreg     unsigned char 
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;  byte            1    0[COMRAM] unsigned char 
  4879 ;; Return value:  Size  Location     Type
  4880 ;;		None               void
  4881 ;; Registers used:
  4882 ;;		wreg
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4888 ;;      Params:         0       0       0       0       0       0       0       0       0
  4889 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4890 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4891 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4892 ;;Total ram usage:        1 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; This function calls:
  4895 ;;		Nothing
  4896 ;; This function is called by:
  4897 ;;		i2_printf
  4898 ;; This function uses a non-reentrant model
  4899 ;;
  4900                           
  4901                           	psect	text25
  4902  0017AC                     __ptext25:
  4903                           	opt stack 0
  4904  0017AC                     i2_putch:
  4905                           	opt stack 26
  4906                           
  4907                           ;incstack = 0
  4908                           ;i2putch@byte stored from wreg
  4909  0017AC  6E01               	movwf	i2putch@byte,c
  4910  0017AE                     i2l184:
  4911  0017AE  A89E               	btfss	3998,4,c	;volatile
  4912  0017B0  D7FE               	goto	i2l184
  4913                           
  4914                           ;usart.c: 50: TXREG = byte;
  4915  0017B2  C001  FFAD         	movff	i2putch@byte,4013	;volatile
  4916  0017B6  0012               	return		;funcret
  4917  0017B8                     __end_ofi2_putch:
  4918                           	opt stack 0
  4919                           pclatu	equ	0xFFB
  4920                           pclath	equ	0xFFA
  4921                           tblptru	equ	0xFF8
  4922                           tblptrh	equ	0xFF7
  4923                           tblptrl	equ	0xFF6
  4924                           tablat	equ	0xFF5
  4925                           prodh	equ	0xFF4
  4926                           prodl	equ	0xFF3
  4927                           intcon	equ	0xFF2
  4928                           intcon2	equ	0xFF1
  4929                           postinc0	equ	0xFEE
  4930                           fsr0h	equ	0xFEA
  4931                           fsr0l	equ	0xFE9
  4932                           wreg	equ	0xFE8
  4933                           fsr1h	equ	0xFE2
  4934                           fsr1l	equ	0xFE1
  4935                           indf2	equ	0xFDF
  4936                           postinc2	equ	0xFDE
  4937                           postdec2	equ	0xFDD
  4938                           fsr2h	equ	0xFDA
  4939                           fsr2l	equ	0xFD9
  4940                           status	equ	0xFD8
  4941                           
  4942 ;; *************** function i2_isdigit *****************
  4943 ;; Defined at:
  4944 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4945 ;; Parameters:    Size  Location     Type
  4946 ;;  c               1    wreg     unsigned char 
  4947 ;; Auto vars:     Size  Location     Type
  4948 ;;  c               1    2[COMRAM] unsigned char 
  4949 ;; Return value:  Size  Location     Type
  4950 ;;		None               void
  4951 ;; Registers used:
  4952 ;;		wreg, status,2, status,0
  4953 ;; Tracked objects:
  4954 ;;		On entry : 0/0
  4955 ;;		On exit  : 0/0
  4956 ;;		Unchanged: 0/0
  4957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4958 ;;      Params:         0       0       0       0       0       0       0       0       0
  4959 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4960 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4961 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4962 ;;Total ram usage:        3 bytes
  4963 ;; Hardware stack levels used:    1
  4964 ;; This function calls:
  4965 ;;		Nothing
  4966 ;; This function is called by:
  4967 ;;		i2_printf
  4968 ;; This function uses a non-reentrant model
  4969 ;;
  4970                           
  4971                           	psect	text26
  4972  0016E8                     __ptext26:
  4973                           	opt stack 0
  4974  0016E8                     i2_isdigit:
  4975                           	opt stack 26
  4976                           
  4977                           ;incstack = 0
  4978                           ;i2isdigit@c stored from wreg
  4979  0016E8  6E03               	movwf	i2isdigit@c,c
  4980  0016EA  0E00               	movlw	0
  4981  0016EC  6E02               	movwf	i2_isdigit$1476,c
  4982  0016EE  0E3A               	movlw	58
  4983  0016F0  6003               	cpfslt	i2isdigit@c,c
  4984  0016F2  D005               	goto	i2l1842
  4985  0016F4  0E2F               	movlw	47
  4986  0016F6  6403               	cpfsgt	i2isdigit@c,c
  4987  0016F8  D002               	goto	i2l1842
  4988  0016FA  0E01               	movlw	1
  4989  0016FC  6E02               	movwf	i2_isdigit$1476,c
  4990  0016FE                     i2l1842:
  4991  0016FE  C002  F001         	movff	i2_isdigit$1476,??i2_isdigit
  4992  001702  3001               	rrcf	??i2_isdigit,w,c
  4993  001704  0012               	return	
  4994  001706                     __end_ofi2_isdigit:
  4995                           	opt stack 0
  4996                           pclatu	equ	0xFFB
  4997                           pclath	equ	0xFFA
  4998                           tblptru	equ	0xFF8
  4999                           tblptrh	equ	0xFF7
  5000                           tblptrl	equ	0xFF6
  5001                           tablat	equ	0xFF5
  5002                           prodh	equ	0xFF4
  5003                           prodl	equ	0xFF3
  5004                           intcon	equ	0xFF2
  5005                           intcon2	equ	0xFF1
  5006                           postinc0	equ	0xFEE
  5007                           fsr0h	equ	0xFEA
  5008                           fsr0l	equ	0xFE9
  5009                           wreg	equ	0xFE8
  5010                           fsr1h	equ	0xFE2
  5011                           fsr1l	equ	0xFE1
  5012                           indf2	equ	0xFDF
  5013                           postinc2	equ	0xFDE
  5014                           postdec2	equ	0xFDD
  5015                           fsr2h	equ	0xFDA
  5016                           fsr2l	equ	0xFD9
  5017                           status	equ	0xFD8
  5018                           
  5019 ;; *************** function i2___wmul *****************
  5020 ;; Defined at:
  5021 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;  multiplier      2    0[COMRAM] unsigned int 
  5024 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;  __wmul          2    4[COMRAM] unsigned int 
  5027 ;; Return value:  Size  Location     Type
  5028 ;;                  2    0[COMRAM] unsigned int 
  5029 ;; Registers used:
  5030 ;;		wreg, status,2, status,0, prodl, prodh
  5031 ;; Tracked objects:
  5032 ;;		On entry : 0/0
  5033 ;;		On exit  : 0/0
  5034 ;;		Unchanged: 0/0
  5035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5036 ;;      Params:         4       0       0       0       0       0       0       0       0
  5037 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5038 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5039 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5040 ;;Total ram usage:        6 bytes
  5041 ;; Hardware stack levels used:    1
  5042 ;; This function calls:
  5043 ;;		Nothing
  5044 ;; This function is called by:
  5045 ;;		i2_printf
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           	psect	text27
  5050  0016A0                     __ptext27:
  5051                           	opt stack 0
  5052  0016A0                     i2___wmul:
  5053                           	opt stack 26
  5054                           
  5055                           ;incstack = 0
  5056  0016A0  5001               	movf	i2___wmul@multiplier,w,c
  5057  0016A2  0203               	mulwf	i2___wmul@multiplicand,c
  5058  0016A4  CFF3 F005          	movff	prodl,i2___wmul@product
  5059  0016A8  CFF4 F006          	movff	prodh,i2___wmul@product+1
  5060  0016AC  5001               	movf	i2___wmul@multiplier,w,c
  5061  0016AE  0204               	mulwf	i2___wmul@multiplicand+1,c
  5062  0016B0  50F3               	movf	prodl,w,c
  5063  0016B2  2606               	addwf	i2___wmul@product+1,f,c
  5064  0016B4  5002               	movf	i2___wmul@multiplier+1,w,c
  5065  0016B6  0203               	mulwf	i2___wmul@multiplicand,c
  5066  0016B8  50F3               	movf	prodl,w,c
  5067  0016BA  2606               	addwf	i2___wmul@product+1,f,c
  5068  0016BC  C005  F001         	movff	i2___wmul@product,?i2___wmul
  5069  0016C0  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  5070  0016C4  0012               	return	
  5071  0016C6                     __end_ofi2___wmul:
  5072                           	opt stack 0
  5073                           pclatu	equ	0xFFB
  5074                           pclath	equ	0xFFA
  5075                           tblptru	equ	0xFF8
  5076                           tblptrh	equ	0xFF7
  5077                           tblptrl	equ	0xFF6
  5078                           tablat	equ	0xFF5
  5079                           prodh	equ	0xFF4
  5080                           prodl	equ	0xFF3
  5081                           intcon	equ	0xFF2
  5082                           intcon2	equ	0xFF1
  5083                           postinc0	equ	0xFEE
  5084                           fsr0h	equ	0xFEA
  5085                           fsr0l	equ	0xFE9
  5086                           wreg	equ	0xFE8
  5087                           fsr1h	equ	0xFE2
  5088                           fsr1l	equ	0xFE1
  5089                           indf2	equ	0xFDF
  5090                           postinc2	equ	0xFDE
  5091                           postdec2	equ	0xFDD
  5092                           fsr2h	equ	0xFDA
  5093                           fsr2l	equ	0xFD9
  5094                           status	equ	0xFD8
  5095                           
  5096 ;; *************** function i2___lwmod *****************
  5097 ;; Defined at:
  5098 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5099 ;; Parameters:    Size  Location     Type
  5100 ;;  dividend        2    7[COMRAM] unsigned int 
  5101 ;;  divisor         2    9[COMRAM] unsigned int 
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;  __lwmod         1   11[COMRAM] unsigned char 
  5104 ;; Return value:  Size  Location     Type
  5105 ;;                  2    7[COMRAM] unsigned int 
  5106 ;; Registers used:
  5107 ;;		wreg, status,2, status,0
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5113 ;;      Params:         4       0       0       0       0       0       0       0       0
  5114 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5115 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5116 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5117 ;;Total ram usage:        5 bytes
  5118 ;; Hardware stack levels used:    1
  5119 ;; This function calls:
  5120 ;;		Nothing
  5121 ;; This function is called by:
  5122 ;;		i2_printf
  5123 ;; This function uses a non-reentrant model
  5124 ;;
  5125                           
  5126                           	psect	text28
  5127  0015D0                     __ptext28:
  5128                           	opt stack 0
  5129  0015D0                     i2___lwmod:
  5130                           	opt stack 26
  5131                           
  5132                           ;incstack = 0
  5133  0015D0  500A               	movf	i2___lwmod@divisor,w,c
  5134  0015D2  100B               	iorwf	i2___lwmod@divisor+1,w,c
  5135  0015D4  B4D8               	btfsc	status,2,c
  5136  0015D6  D018               	goto	i2l813
  5137  0015D8  0E01               	movlw	1
  5138  0015DA  6E0C               	movwf	i2___lwmod@counter,c
  5139  0015DC  D004               	goto	i2l1874
  5140  0015DE                     i2l1872:
  5141  0015DE  90D8               	bcf	status,0,c
  5142  0015E0  360A               	rlcf	i2___lwmod@divisor,f,c
  5143  0015E2  360B               	rlcf	i2___lwmod@divisor+1,f,c
  5144  0015E4  2A0C               	incf	i2___lwmod@counter,f,c
  5145  0015E6                     i2l1874:
  5146  0015E6  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  5147  0015E8  D7FA               	goto	i2l1872
  5148  0015EA                     i2l1876:
  5149  0015EA  500A               	movf	i2___lwmod@divisor,w,c
  5150  0015EC  5C08               	subwf	i2___lwmod@dividend,w,c
  5151  0015EE  500B               	movf	i2___lwmod@divisor+1,w,c
  5152  0015F0  5809               	subwfb	i2___lwmod@dividend+1,w,c
  5153  0015F2  A0D8               	btfss	status,0,c
  5154  0015F4  D004               	goto	i2l1880
  5155  0015F6  500A               	movf	i2___lwmod@divisor,w,c
  5156  0015F8  5E08               	subwf	i2___lwmod@dividend,f,c
  5157  0015FA  500B               	movf	i2___lwmod@divisor+1,w,c
  5158  0015FC  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  5159  0015FE                     i2l1880:
  5160  0015FE  90D8               	bcf	status,0,c
  5161  001600  320B               	rrcf	i2___lwmod@divisor+1,f,c
  5162  001602  320A               	rrcf	i2___lwmod@divisor,f,c
  5163  001604  2E0C               	decfsz	i2___lwmod@counter,f,c
  5164  001606  D7F1               	goto	i2l1876
  5165  001608                     i2l813:
  5166  001608  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  5167  00160C  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  5168  001610  0012               	return		;funcret
  5169  001612                     __end_ofi2___lwmod:
  5170                           	opt stack 0
  5171                           pclatu	equ	0xFFB
  5172                           pclath	equ	0xFFA
  5173                           tblptru	equ	0xFF8
  5174                           tblptrh	equ	0xFF7
  5175                           tblptrl	equ	0xFF6
  5176                           tablat	equ	0xFF5
  5177                           prodh	equ	0xFF4
  5178                           prodl	equ	0xFF3
  5179                           intcon	equ	0xFF2
  5180                           intcon2	equ	0xFF1
  5181                           postinc0	equ	0xFEE
  5182                           fsr0h	equ	0xFEA
  5183                           fsr0l	equ	0xFE9
  5184                           wreg	equ	0xFE8
  5185                           fsr1h	equ	0xFE2
  5186                           fsr1l	equ	0xFE1
  5187                           indf2	equ	0xFDF
  5188                           postinc2	equ	0xFDE
  5189                           postdec2	equ	0xFDD
  5190                           fsr2h	equ	0xFDA
  5191                           fsr2l	equ	0xFD9
  5192                           status	equ	0xFD8
  5193                           
  5194 ;; *************** function i2___lwdiv *****************
  5195 ;; Defined at:
  5196 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5197 ;; Parameters:    Size  Location     Type
  5198 ;;  dividend        2    0[COMRAM] unsigned int 
  5199 ;;  divisor         2    2[COMRAM] unsigned int 
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  5202 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  5203 ;; Return value:  Size  Location     Type
  5204 ;;                  2    0[COMRAM] unsigned int 
  5205 ;; Registers used:
  5206 ;;		wreg, status,2, status,0
  5207 ;; Tracked objects:
  5208 ;;		On entry : 0/0
  5209 ;;		On exit  : 0/0
  5210 ;;		Unchanged: 0/0
  5211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5212 ;;      Params:         4       0       0       0       0       0       0       0       0
  5213 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5214 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5215 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5216 ;;Total ram usage:        7 bytes
  5217 ;; Hardware stack levels used:    1
  5218 ;; This function calls:
  5219 ;;		Nothing
  5220 ;; This function is called by:
  5221 ;;		i2_printf
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           	psect	text29
  5226  001530                     __ptext29:
  5227                           	opt stack 0
  5228  001530                     i2___lwdiv:
  5229                           	opt stack 26
  5230                           
  5231                           ;incstack = 0
  5232  001530  0E00               	movlw	0
  5233  001532  6E06               	movwf	i2___lwdiv@quotient+1,c
  5234  001534  0E00               	movlw	0
  5235  001536  6E05               	movwf	i2___lwdiv@quotient,c
  5236  001538  5003               	movf	i2___lwdiv@divisor,w,c
  5237  00153A  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  5238  00153C  B4D8               	btfsc	status,2,c
  5239  00153E  D01C               	goto	i2l803
  5240  001540  0E01               	movlw	1
  5241  001542  6E07               	movwf	i2___lwdiv@counter,c
  5242  001544  D004               	goto	i2l1854
  5243  001546                     i2l1852:
  5244  001546  90D8               	bcf	status,0,c
  5245  001548  3603               	rlcf	i2___lwdiv@divisor,f,c
  5246  00154A  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  5247  00154C  2A07               	incf	i2___lwdiv@counter,f,c
  5248  00154E                     i2l1854:
  5249  00154E  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  5250  001550  D7FA               	goto	i2l1852
  5251  001552                     i2l1856:
  5252  001552  90D8               	bcf	status,0,c
  5253  001554  3605               	rlcf	i2___lwdiv@quotient,f,c
  5254  001556  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  5255  001558  5003               	movf	i2___lwdiv@divisor,w,c
  5256  00155A  5C01               	subwf	i2___lwdiv@dividend,w,c
  5257  00155C  5004               	movf	i2___lwdiv@divisor+1,w,c
  5258  00155E  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  5259  001560  A0D8               	btfss	status,0,c
  5260  001562  D005               	goto	i2l1864
  5261  001564  5003               	movf	i2___lwdiv@divisor,w,c
  5262  001566  5E01               	subwf	i2___lwdiv@dividend,f,c
  5263  001568  5004               	movf	i2___lwdiv@divisor+1,w,c
  5264  00156A  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  5265  00156C  8005               	bsf	i2___lwdiv@quotient,0,c
  5266  00156E                     i2l1864:
  5267  00156E  90D8               	bcf	status,0,c
  5268  001570  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  5269  001572  3203               	rrcf	i2___lwdiv@divisor,f,c
  5270  001574  2E07               	decfsz	i2___lwdiv@counter,f,c
  5271  001576  D7ED               	goto	i2l1856
  5272  001578                     i2l803:
  5273  001578  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  5274  00157C  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  5275  001580  0012               	return		;funcret
  5276  001582                     __end_ofi2___lwdiv:
  5277                           	opt stack 0
  5278                           pclatu	equ	0xFFB
  5279                           pclath	equ	0xFFA
  5280                           tblptru	equ	0xFF8
  5281                           tblptrh	equ	0xFF7
  5282                           tblptrl	equ	0xFF6
  5283                           tablat	equ	0xFF5
  5284                           prodh	equ	0xFF4
  5285                           prodl	equ	0xFF3
  5286                           intcon	equ	0xFF2
  5287                           intcon2	equ	0xFF1
  5288                           postinc0	equ	0xFEE
  5289                           fsr0h	equ	0xFEA
  5290                           fsr0l	equ	0xFE9
  5291                           wreg	equ	0xFE8
  5292                           fsr1h	equ	0xFE2
  5293                           fsr1l	equ	0xFE1
  5294                           indf2	equ	0xFDF
  5295                           postinc2	equ	0xFDE
  5296                           postdec2	equ	0xFDD
  5297                           fsr2h	equ	0xFDA
  5298                           fsr2l	equ	0xFD9
  5299                           status	equ	0xFD8
  5300                           
  5301 ;; *************** function _strcpy *****************
  5302 ;; Defined at:
  5303 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strcpy.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;  to              2    0[COMRAM] PTR unsigned char 
  5306 ;;		 -> string(26), 
  5307 ;;  from            2    2[COMRAM] PTR const unsigned char 
  5308 ;;		 -> string_aux(26), 
  5309 ;; Auto vars:     Size  Location     Type
  5310 ;;  cp              2    4[COMRAM] PTR unsigned char 
  5311 ;;		 -> string(26), 
  5312 ;; Return value:  Size  Location     Type
  5313 ;;                  2    0[COMRAM] PTR unsigned char 
  5314 ;; Registers used:
  5315 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5316 ;; Tracked objects:
  5317 ;;		On entry : 0/0
  5318 ;;		On exit  : 0/0
  5319 ;;		Unchanged: 0/0
  5320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5321 ;;      Params:         4       0       0       0       0       0       0       0       0
  5322 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5323 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5324 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5325 ;;Total ram usage:        6 bytes
  5326 ;; Hardware stack levels used:    1
  5327 ;; This function calls:
  5328 ;;		Nothing
  5329 ;; This function is called by:
  5330 ;;		_interruptions
  5331 ;; This function uses a non-reentrant model
  5332 ;;
  5333                           
  5334                           	psect	text30
  5335  001648                     __ptext30:
  5336                           	opt stack 0
  5337  001648                     _strcpy:
  5338                           	opt stack 27
  5339                           
  5340                           ;incstack = 0
  5341  001648  C001  F005         	movff	strcpy@to,strcpy@cp
  5342  00164C  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  5343  001650  D004               	goto	i2l1966
  5344  001652                     i2l1964:
  5345  001652  4A05               	infsnz	strcpy@cp,f,c
  5346  001654  2A06               	incf	strcpy@cp+1,f,c
  5347  001656  4A03               	infsnz	strcpy@from,f,c
  5348  001658  2A04               	incf	strcpy@from+1,f,c
  5349  00165A                     i2l1966:
  5350  00165A  C003  FFD9         	movff	strcpy@from,fsr2l
  5351  00165E  C004  FFDA         	movff	strcpy@from+1,fsr2h
  5352  001662  C005  FFE1         	movff	strcpy@cp,fsr1l
  5353  001666  C006  FFE2         	movff	strcpy@cp+1,fsr1h
  5354  00166A  CFDF FFE7          	movff	indf2,indf1
  5355  00166E  50E7               	movf	indf1,w,c
  5356  001670  B4D8               	btfsc	status,2,c
  5357  001672  0012               	return	
  5358  001674  D7EE               	goto	i2l1964
  5359  001676                     __end_of_strcpy:
  5360                           	opt stack 0
  5361                           pclatu	equ	0xFFB
  5362                           pclath	equ	0xFFA
  5363                           tblptru	equ	0xFF8
  5364                           tblptrh	equ	0xFF7
  5365                           tblptrl	equ	0xFF6
  5366                           tablat	equ	0xFF5
  5367                           prodh	equ	0xFF4
  5368                           prodl	equ	0xFF3
  5369                           intcon	equ	0xFF2
  5370                           intcon2	equ	0xFF1
  5371                           postinc0	equ	0xFEE
  5372                           fsr0h	equ	0xFEA
  5373                           fsr0l	equ	0xFE9
  5374                           wreg	equ	0xFE8
  5375                           indf1	equ	0xFE7
  5376                           fsr1h	equ	0xFE2
  5377                           fsr1l	equ	0xFE1
  5378                           indf2	equ	0xFDF
  5379                           postinc2	equ	0xFDE
  5380                           postdec2	equ	0xFDD
  5381                           fsr2h	equ	0xFDA
  5382                           fsr2l	equ	0xFD9
  5383                           status	equ	0xFD8
  5384                           
  5385 ;; *************** function ___awmod *****************
  5386 ;; Defined at:
  5387 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  5388 ;; Parameters:    Size  Location     Type
  5389 ;;  dividend        2    0[COMRAM] int 
  5390 ;;  divisor         2    2[COMRAM] int 
  5391 ;; Auto vars:     Size  Location     Type
  5392 ;;  sign            1    5[COMRAM] unsigned char 
  5393 ;;  counter         1    4[COMRAM] unsigned char 
  5394 ;; Return value:  Size  Location     Type
  5395 ;;                  2    0[COMRAM] int 
  5396 ;; Registers used:
  5397 ;;		wreg, status,2, status,0
  5398 ;; Tracked objects:
  5399 ;;		On entry : 0/0
  5400 ;;		On exit  : 0/0
  5401 ;;		Unchanged: 0/0
  5402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5403 ;;      Params:         4       0       0       0       0       0       0       0       0
  5404 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5405 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5406 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5407 ;;Total ram usage:        6 bytes
  5408 ;; Hardware stack levels used:    1
  5409 ;; This function calls:
  5410 ;;		Nothing
  5411 ;; This function is called by:
  5412 ;;		_interruptions
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           	psect	text31
  5417  0013A0                     __ptext31:
  5418                           	opt stack 0
  5419  0013A0                     ___awmod:
  5420                           	opt stack 27
  5421                           
  5422                           ;incstack = 0
  5423  0013A0  0E00               	movlw	0
  5424  0013A2  6E06               	movwf	___awmod@sign,c
  5425  0013A4  AE02               	btfss	___awmod@dividend+1,7,c
  5426  0013A6  D006               	goto	i2l2154
  5427  0013A8  6C01               	negf	___awmod@dividend,c
  5428  0013AA  1E02               	comf	___awmod@dividend+1,f,c
  5429  0013AC  B0D8               	btfsc	status,0,c
  5430  0013AE  2A02               	incf	___awmod@dividend+1,f,c
  5431  0013B0  0E01               	movlw	1
  5432  0013B2  6E06               	movwf	___awmod@sign,c
  5433  0013B4                     i2l2154:
  5434  0013B4  AE04               	btfss	___awmod@divisor+1,7,c
  5435  0013B6  D004               	goto	i2l2158
  5436  0013B8  6C03               	negf	___awmod@divisor,c
  5437  0013BA  1E04               	comf	___awmod@divisor+1,f,c
  5438  0013BC  B0D8               	btfsc	status,0,c
  5439  0013BE  2A04               	incf	___awmod@divisor+1,f,c
  5440  0013C0                     i2l2158:
  5441  0013C0  5003               	movf	___awmod@divisor,w,c
  5442  0013C2  1004               	iorwf	___awmod@divisor+1,w,c
  5443  0013C4  B4D8               	btfsc	status,2,c
  5444  0013C6  D018               	goto	i2l2174
  5445  0013C8  0E01               	movlw	1
  5446  0013CA  6E05               	movwf	___awmod@counter,c
  5447  0013CC  D004               	goto	i2l2164
  5448  0013CE                     i2l2162:
  5449  0013CE  90D8               	bcf	status,0,c
  5450  0013D0  3603               	rlcf	___awmod@divisor,f,c
  5451  0013D2  3604               	rlcf	___awmod@divisor+1,f,c
  5452  0013D4  2A05               	incf	___awmod@counter,f,c
  5453  0013D6                     i2l2164:
  5454  0013D6  AE04               	btfss	___awmod@divisor+1,7,c
  5455  0013D8  D7FA               	goto	i2l2162
  5456  0013DA                     i2l2166:
  5457  0013DA  5003               	movf	___awmod@divisor,w,c
  5458  0013DC  5C01               	subwf	___awmod@dividend,w,c
  5459  0013DE  5004               	movf	___awmod@divisor+1,w,c
  5460  0013E0  5802               	subwfb	___awmod@dividend+1,w,c
  5461  0013E2  A0D8               	btfss	status,0,c
  5462  0013E4  D004               	goto	i2l2170
  5463  0013E6  5003               	movf	___awmod@divisor,w,c
  5464  0013E8  5E01               	subwf	___awmod@dividend,f,c
  5465  0013EA  5004               	movf	___awmod@divisor+1,w,c
  5466  0013EC  5A02               	subwfb	___awmod@dividend+1,f,c
  5467  0013EE                     i2l2170:
  5468  0013EE  90D8               	bcf	status,0,c
  5469  0013F0  3204               	rrcf	___awmod@divisor+1,f,c
  5470  0013F2  3203               	rrcf	___awmod@divisor,f,c
  5471  0013F4  2E05               	decfsz	___awmod@counter,f,c
  5472  0013F6  D7F1               	goto	i2l2166
  5473  0013F8                     i2l2174:
  5474  0013F8  5006               	movf	___awmod@sign,w,c
  5475  0013FA  B4D8               	btfsc	status,2,c
  5476  0013FC  D004               	goto	i2l2178
  5477  0013FE  6C01               	negf	___awmod@dividend,c
  5478  001400  1E02               	comf	___awmod@dividend+1,f,c
  5479  001402  B0D8               	btfsc	status,0,c
  5480  001404  2A02               	incf	___awmod@dividend+1,f,c
  5481  001406                     i2l2178:
  5482  001406  C001  F001         	movff	___awmod@dividend,?___awmod
  5483  00140A  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5484  00140E  0012               	return	
  5485  001410                     __end_of___awmod:
  5486                           	opt stack 0
  5487                           pclatu	equ	0xFFB
  5488                           pclath	equ	0xFFA
  5489                           tblptru	equ	0xFF8
  5490                           tblptrh	equ	0xFF7
  5491                           tblptrl	equ	0xFF6
  5492                           tablat	equ	0xFF5
  5493                           prodh	equ	0xFF4
  5494                           prodl	equ	0xFF3
  5495                           intcon	equ	0xFF2
  5496                           intcon2	equ	0xFF1
  5497                           postinc0	equ	0xFEE
  5498                           fsr0h	equ	0xFEA
  5499                           fsr0l	equ	0xFE9
  5500                           wreg	equ	0xFE8
  5501                           indf1	equ	0xFE7
  5502                           fsr1h	equ	0xFE2
  5503                           fsr1l	equ	0xFE1
  5504                           indf2	equ	0xFDF
  5505                           postinc2	equ	0xFDE
  5506                           postdec2	equ	0xFDD
  5507                           fsr2h	equ	0xFDA
  5508                           fsr2l	equ	0xFD9
  5509                           status	equ	0xFD8
  5510                           pclatu	equ	0xFFB
  5511                           pclath	equ	0xFFA
  5512                           tblptru	equ	0xFF8
  5513                           tblptrh	equ	0xFF7
  5514                           tblptrl	equ	0xFF6
  5515                           tablat	equ	0xFF5
  5516                           prodh	equ	0xFF4
  5517                           prodl	equ	0xFF3
  5518                           intcon	equ	0xFF2
  5519                           intcon2	equ	0xFF1
  5520                           postinc0	equ	0xFEE
  5521                           fsr0h	equ	0xFEA
  5522                           fsr0l	equ	0xFE9
  5523                           wreg	equ	0xFE8
  5524                           indf1	equ	0xFE7
  5525                           fsr1h	equ	0xFE2
  5526                           fsr1l	equ	0xFE1
  5527                           indf2	equ	0xFDF
  5528                           postinc2	equ	0xFDE
  5529                           postdec2	equ	0xFDD
  5530                           fsr2h	equ	0xFDA
  5531                           fsr2l	equ	0xFD9
  5532                           status	equ	0xFD8
  5533                           
  5534                           	psect	rparam
  5535  0000                     pclatu	equ	0xFFB
  5536                           pclath	equ	0xFFA
  5537                           tblptru	equ	0xFF8
  5538                           tblptrh	equ	0xFF7
  5539                           tblptrl	equ	0xFF6
  5540                           tablat	equ	0xFF5
  5541                           prodh	equ	0xFF4
  5542                           prodl	equ	0xFF3
  5543                           intcon	equ	0xFF2
  5544                           intcon2	equ	0xFF1
  5545                           postinc0	equ	0xFEE
  5546                           fsr0h	equ	0xFEA
  5547                           fsr0l	equ	0xFE9
  5548                           wreg	equ	0xFE8
  5549                           indf1	equ	0xFE7
  5550                           fsr1h	equ	0xFE2
  5551                           fsr1l	equ	0xFE1
  5552                           indf2	equ	0xFDF
  5553                           postinc2	equ	0xFDE
  5554                           postdec2	equ	0xFDD
  5555                           fsr2h	equ	0xFDA
  5556                           fsr2l	equ	0xFD9
  5557                           status	equ	0xFD8
  5558                           
  5559                           	psect	temp
  5560  00004C                     btemp:
  5561                           	opt stack 0
  5562  00004C                     	ds	1
  5563  0000                     int$flags	set	btemp
  5564                           pclatu	equ	0xFFB
  5565                           pclath	equ	0xFFA
  5566                           tblptru	equ	0xFF8
  5567                           tblptrh	equ	0xFF7
  5568                           tblptrl	equ	0xFF6
  5569                           tablat	equ	0xFF5
  5570                           prodh	equ	0xFF4
  5571                           prodl	equ	0xFF3
  5572                           intcon	equ	0xFF2
  5573                           intcon2	equ	0xFF1
  5574                           postinc0	equ	0xFEE
  5575                           fsr0h	equ	0xFEA
  5576                           fsr0l	equ	0xFE9
  5577                           wreg	equ	0xFE8
  5578                           indf1	equ	0xFE7
  5579                           fsr1h	equ	0xFE2
  5580                           fsr1l	equ	0xFE1
  5581                           indf2	equ	0xFDF
  5582                           postinc2	equ	0xFDE
  5583                           postdec2	equ	0xFDD
  5584                           fsr2h	equ	0xFDA
  5585                           fsr2l	equ	0xFD9
  5586                           status	equ	0xFD8


Data Sizes:
    Strings     60
    Constant    18
    Data        3
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     46      75
    BANK0           160     53      90
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 26
		 -> string_aux(COMRAM[26]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 26
		 -> string(BANK0[26]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 26
		 -> string(BANK0[26]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 38
		 -> STR_3(CODE[2]), STR_2(CODE[38]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 26
		 -> string(BANK0[26]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptions in COMRAM

    _interruptions->i2_printf
    i2_printf->i2___lwmod
    i2___lwmod->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_printf
    _write_RTC_I2c->_I2C_Idle
    _write_RTC_I2c->_I2C_Write_Byte
    _read_RTC_I2c->_I2C_Idle
    _read_RTC_I2c->_I2C_Write_Byte
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _interruptions in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptions in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptions in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptions in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptions in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptions in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptions in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptions in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    3612
                                             44 BANK0      9     9      0
                     _InitI2C_Master
                           _configAD
                  _configADInterrupt
                        _configRS232
                        _configTimer
              _configUSARTInterrupts
                             _printf
                       _read_RTC_I2c
                       _selectChanel
                      _write_RTC_I2c
 ---------------------------------------------------------------------------------
 (1) _write_RTC_I2c                                        0     0      0      31
                           _I2C_Idle
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (1) _selectChanel                                         1     1      0     403
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_RTC_I2c                                         1     1      0      62
                                              1 BANK0      1     1      0
                           _I2C_Idle
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Byte                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Send_NACK                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Read_Byte                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Idle                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              41    23     18    2844
                                             12 BANK0     32    14     18
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     392
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _configUSARTInterrupts                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configRS232                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configADInterrupt                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configAD                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitI2C_Master                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _interruptions                                       18    18      0    2292
                                             28 COMRAM    18    18      0
                            ___awmod
                             _strcpy
                           i2_printf
 ---------------------------------------------------------------------------------
 (4) i2_printf                                            25    23      2    1619
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4     203
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     424
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitI2C_Master
   _configAD
   _configADInterrupt
   _configRS232
   _configTimer
   _configUSARTInterrupts
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _read_RTC_I2c
     _I2C_Idle
     _I2C_ReStart
     _I2C_Read_Byte
     _I2C_Send_NACK
     _I2C_Start
     _I2C_Stop
     _I2C_Write_Byte
   _selectChanel
   _write_RTC_I2c
     _I2C_Idle
     _I2C_Start
     _I2C_Stop
     _I2C_Write_Byte

 _interruptions (ROOT)
   ___awmod
   _strcpy
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     35      5A       5       56.3%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     2E      4B       1       79.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A5      20        0.0%
DATA                 0      0      A5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed Jun 15 12:41:02 2016

                             _i 002F              __size_of_I2C_Start 000A                     _SSPSTATbits 000FC7  
                            l83 17CE                              l77 17C4                              l89 17BA  
         __end_of_interruptions 1222                              _id 00B9             ___wmul@multiplicand 0062  
            i2___lwdiv@dividend 0001                     __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                           l101 1798                             l113 17A2                             l107 176E  
                           l321 0EAA                             l323 0EF2                             l325 0F3A  
                           l327 0F82                             l184 177C                             l328 0F84  
                           l383 0AA6                             l803 1396                             l813 14D4  
                           _GIE 007F97                    __CFG_CPB$OFF 000000                    __CFG_CPD$OFF 000000  
                           _RX9 007D5E                             _TX9 007D66                    __CFG_BOR$OFF 000000  
                           _dia 0098                             _ano 0097            __size_of_I2C_ReStart 000A  
                           _mes 009B                    ___awmod@sign 0006              I2C_Write_Byte@Byte 0060  
                           prod 000FF3                             wreg 000FE8                    __CFG_FOSC$HS 000000  
                  __CFG_LVP$OFF 000000                    __CFG_WDT$OFF 000000                            l2510 14C6  
                          l2502 1490                            l2504 149C                            l2600 0884  
                          l2506 14A2                            l2610 08BE                            l2450 1752  
                          l2530 1260                            l2522 123A                            l2620 093C  
                          l2604 088E                            l2630 0992                            l2550 12C4  
                          l2542 129C                            l2534 1274                            l2526 124C  
                          l2632 0998                            l2624 0944                            l2482 1346  
                          l2466 1696                            l2626 0976                            l2618 0936  
                          l2562 1300                            l2554 12D8                            l2546 12B0  
                          l2538 1288                            l2802 0ECC                            l2484 1352  
                          l2644 09CE                            l2660 0A0A                            l2812 0F14  
                          l2494 1388                            l2486 1358                            l2646 09D4  
                          l2662 0A1C                            l2566 1314                            l2558 12EC  
                          l2822 0F5C                            l2682 0AAC                            l2690 0B46  
                          l2666 0A54                            l2594 085E                            l2684 0AF8  
                          l2692 0B58                            l2676 0A80                            l2668 0A5E  
                          l2694 0B60                            l2678 0A8C                            l2598 0872  
                          l2696 0B6C                            l2792 0E84                            _ADFM 007E07  
                          STR_1 084A                            STR_2 0813                            STR_3 084D  
                          STR_4 0839                            _BRGH 007D62                            _CREN 007D5C  
                          _FERR 007D5A                            u2710 0F82                            u2650 0EAA  
                          u2670 0EF2                            u2807 0FF0                            u2817 100C  
                          u2737 0E8C                            u2690 0F3A                            u2827 1078  
                          u2747 0ED4                            _PEIE 007F96                            u2757 0F1C  
                          u2767 0F64                            u2777 0F9C                            u2787 0FB8  
                          _RCIE 007CED                            _RCIF 007CF5                            u2797 0FD4  
                          _OERR 007D59                            _SPEN 007D5F                            _TXIE 007CEC  
                          _TXIF 007CF4                            _TXEN 007D65                            _SYNC 007D64  
                          _main 0E30                            _hora 0099                __end_of_I2C_Idle 1766  
                          fsr0h 000FEA                            fsr1h 000FE2              i2___lwdiv@quotient 0005  
                          fsr0l 000FE9                            fsr2h 000FDA                            indf1 000FE7  
                          fsr1l 000FE1                            indf2 000FDF                            fsr2l 000FD9  
                          btemp 004C                __end_of_I2C_Stop 17C2                            pclat 000FFA  
                          prodh 000FF4                            prodl 000FF3                            start 0016  
                 __CFG_IESO$OFF 000000                 __end_ofi2_putch 17B8                   __CFG_MCLRE$ON 000000  
    __size_of_configADInterrupt 000A                    ___param_bank 000010                   __CFG_PLLDIV$1 000000  
                         ?_main 0001                           _BRG16 007DC3                 __end_of___awmod 1410  
               __end_of___lwdiv 13A0                 __end_of___lwmod 14DE                           i2l300 10D4  
                         i2l310 11E4                           i2l311 11E6                           i2l306 1190  
                         i2l309 11CA                           i2l184 17AE                           i2l383 0D68  
                         i2l298 10DA                           i2l803 1578                           i2l813 1608  
                         _RCREG 000FAE                           _SPBRG 000FAF                   __CFG_USBDIV$1 000000  
                         _SSPIF 007CF3                           _RXDTP 007DC5                           _TXREG 000FAD  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000                      i2isdigit@c 0003  
               __end_of_dpowers 080B          __size_of_I2C_Read_Byte 000C                 __end_of_isdigit 16A0  
                         _putch 1778               __end_of_I2C_Start 17CC                  __pbitbssCOMRAM 0250  
                         tablat 000FF5                __end_ofi2___wmul 16C6          __size_of_I2C_Send_NACK 000C  
                         status 000FD8                  __CFG_ICPRT$OFF 000000                   i2printf@width 001A  
              ??_InitI2C_Master 0060                __end_ofi2_printf 0E30              __size_ofi2___lwdiv 0052  
            __size_ofi2___lwmod 0042                 __initialization 14DE                    __end_of_main 1096  
                    i2printf@ap 0014              __size_ofi2_isdigit 001E                   ?_read_RTC_I2c 0001  
                        ??_main 008C                   __activetblptr 000002                   main@cont_1220 008F  
                 main@cont_1221 0091                   main@cont_1222 0093           _configUSARTInterrupts 1786  
               __CFG_CCP2MX$OFF 000000                          _ADRESH 000FC4                          _ADRESL 000FC3  
                        ?_putch 0001                          i2l2200 0BE6                          i2l2210 0C48  
                        i2l2220 0C96                          i2l2222 0C9A                          i2l2214 0C4E  
                        i2l2216 0C7C                          i2l2208 0C44                          i2l2320 115A  
                        i2l2170 13EE                          i2l2162 13CE                          i2l2154 13B4  
                        i2l2234 0CC6                          i2l2250 0CF6                          i2l2164 13D6  
                        i2l2236 0CCA                          i2l2252 0D06                          i2l2316 1152  
                        i2l2308 1120                          i2l2166 13DA                          i2l2174 13F8  
                        i2l2158 13C0                          i2l2190 0BB2                          i2l2326 1176  
                        i2l2272 0D6E                          i2l2280 0DF8                          i2l2256 0D2A  
                        i2l2184 0B94                          i2l2336 11AC                          i2l2178 1406  
                        i2l2274 0DB2                          i2l2282 0E08                          i2l2266 0D4C  
                        i2l2258 0D32                          i2l2194 0BB8                          i2l2284 0E0E  
                        i2l2268 0D54                          i2l2188 0BA4                          i2l2286 0E16  
                        i2l1842 16FE                          i2l1852 1546                          i2l1854 154E  
                        i2l1864 156E                          i2l1856 1552                          i2l1880 15FE  
                        i2l1872 15DE                          i2l1874 15E6                          i2l1964 1652  
                        i2l1876 15EA                          i2l1966 165A                       ??i2_putch 0001  
                        _TMR0IP 007F8A                          _TMR0ON 007EAF                          _SSPADD 000FC8  
                        _SSPBUF 000FC9            __size_of_configRS232 0018                  __CFG_XINST$OFF 000000  
              __end_of_configAD 173A            __size_of_configTimer 001A                   _I2C_Read_Byte 17A0  
                        ___wmul 1612                       ??___awmod 0005                       ??___lwdiv 0064  
                     ??___lwmod 006B                  ??_read_RTC_I2c 0061                          clear_0 14E4  
                        clear_1 14F2                          _minuto 009C                 ___awmod@divisor 0003  
                 _I2C_Send_NACK 1794                 ___awmod@counter 0005                          _printf 0850  
                        _strcpy 1648                          _string 009E                       ?_I2C_Idle 0001  
                  __pdataCOMRAM 004B                       ??_isdigit 0060                       ?_I2C_Stop 0001  
             __end_ofi2___lwdiv 1582                    __mediumconst 0000               __end_ofi2___lwmod 1612  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
        __size_of_write_RTC_I2c 006C               __end_ofi2_isdigit 1706                      __accesstop 0060  
       __end_of__initialization 1522                 __CFG_PBADEN$OFF 000000                   ___rparam_used 000001  
                ?_I2C_Read_Byte 0001              i2___lwmod@dividend 0008                  __pcstackCOMRAM 0001  
                  __pidataBANK0 17E0                   __end_of_putch 1786                     i2printf@idx 0013  
                ?_I2C_Send_NACK 0001                     i2printf@val 0018          ?_configUSARTInterrupts 0001  
                     ?i2___wmul 0001                      ??_I2C_Idle 0060                     i2putch@byte 0001  
                    ??_I2C_Stop 0060                       ?i2_printf 000D                         ??_putch 0060  
                    __pbssBANK0 0095                      _hasAnError 0252                   ?_selectChanel 0001  
                       ?___wmul 0060                   _write_RTC_I2c 1410         __size_of_I2C_Write_Byte 0012  
                 ??_I2C_ReStart 0060                         ?_printf 006C                         ?_strcpy 0001  
                    ??i2___wmul 0005                      ??i2_printf 000F                       ?_configAD 0001  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
          __end_of_read_RTC_I2c 15D0                 __CFG_VREGEN$OFF 000000          __size_of_interruptions 121A  
                       i2_putch 17AC                       _I2C_Start 17C2                 ??_I2C_Read_Byte 0060  
                ??_selectChanel 0060                         __Hparam 0000         read_RTC_I2c@pos_memoria 0061  
                       __Lparam 0000                  ?_write_RTC_I2c 0001                 ??_I2C_Send_NACK 0060  
                       ___awmod 13A0                 __size_of___wmul 0036                         ___lwdiv 1328  
                       ___lwmod 147C                    __psmallconst 0800                 __CFG_STVREN$OFF 000000  
                       _channel 00B8                         __pcinit 14DE                         __ramtop 0800  
                       __ptext0 0E30                         __ptext1 1410                         __ptext2 1222  
                       __ptext3 1582                         __ptext4 1766                         __ptext5 17B8  
                       __ptext6 17C2                         __ptext7 1794                         __ptext8 17A0  
                       __ptext9 17CC                 __size_of_printf 033A                       _T0CONbits 000FD5  
               __size_of_strcpy 002E               __end_of_hexpowers 0813                         _dpowers 0801  
                       _leitura 009A                         _isdigit 1676                ___awmod@dividend 0001  
                       _segundo 009D             __end_of_I2C_ReStart 17D6                      ??_configAD 0060  
                __pintcode_body 1096            end_of_initialization 1522                   __Lmediumconst 0000  
                       int_func 1096             i2___wmul@multiplier 0001                      ?_I2C_Start 0001  
                       printf@c 008B                         printf@f 006C                         postdec2 000FDD  
                       postinc0 000FEE                         postinc2 000FDE                   _interruptions 0008  
                     _PORTBbits 000F81                       _PORTDbits 000F83                       _TRISBbits 000F93  
                     _TRISDbits 000F95               __size_of_I2C_Idle 0014               __size_of_I2C_Stop 000A  
             i2___lwdiv@divisor 0003                       i2___lwdiv 1530                       i2___lwmod 15D0  
             i2___lwdiv@counter 0007                   ??_configRS232 0060                     printf@width 0089  
                 ??_configTimer 0060                       i2_isdigit 16E8                 ??_write_RTC_I2c 0061  
                    _string_aux 0030         ??_configUSARTInterrupts 0060                  _I2C_Write_Byte 1766  
                ?_interruptions 0001                  __end_of___wmul 1648                   __pidataCOMRAM 17E2  
                   _I2C_ReStart 17CC                    _bottonToSend 0250         __size_of_InitI2C_Master 0022  
              i2___wmul@product 0005                  __end_of_printf 0B8A                    i2printf@flag 0017  
                __end_of_strcpy 1676                    i2printf@prec 0016             start_initialization 14DE  
          __end_of_selectChanel 1328               __size_ofi2___wmul 0026           __size_of_read_RTC_I2c 004E  
                     i2printf@c 001C                       i2printf@f 000D                      ?i2___lwdiv 0001  
                    ?i2___lwmod 0008               __size_ofi2_printf 02A6                     ??_I2C_Start 0060  
                    ?i2_isdigit 0001             __end_of_configRS232 1752          __end_of_I2C_Write_Byte 1778  
                      ??___wmul 0064                     __pdataBANK0 00B8             __end_of_configTimer 1720  
              __CFG_LPT1OSC$OFF 000000                    _read_RTC_I2c 1582                        ??_printf 007E  
                      ??_strcpy 0005                     __pbssCOMRAM 002F                   __pcstackBANK0 0060  
             i2___lwmod@divisor 000A               i2___lwmod@counter 000C                    _isdigit$1476 0061  
             __size_of_configAD 001A                        ?i2_putch 0001                ___lwdiv@dividend 0060  
               ?_I2C_Write_Byte 0001                       __pintcode 0008                 ??_interruptions 001D  
                      ?___awmod 0001                        ?___lwdiv 0060                        ?___lwmod 0067  
                   __smallconst 0800                        _I2C_Idle 1752                       _vaLedlRD4 0253  
                      ?_isdigit 0001                        _I2C_Stop 17B8                       _hexpowers 080B  
              ___lwdiv@quotient 0065                     ??i2___lwdiv 0005                     ??i2___lwmod 000C  
                __size_of_putch 000E                    _receivedData 004B                     _configRS232 173A  
                ___wmul@product 0064                        _PIE1bits 000F9D                     ??i2_isdigit 0001  
                   _configTimer 1706                        i2u200_45 118C                        i2u200_47 118E  
                      i2u203_40 11CA                        i2u205_40 11D8                        i2u206_45 11DA  
                      i2u207_45 11E2                        i2u207_47 11E4                        _PIR1bits 000F9E  
                      i2u283_47 11B2                        i2u198_40 1182                        i2u199_45 1184  
         __end_of_I2C_Read_Byte 17AC                __CFG_WDTPS$32768 000000           __end_of_I2C_Send_NACK 17A0  
         __size_of_selectChanel 0106                  _InitI2C_Master 16C6                      _ADCON0bits 000FC2  
                    _ADCON1bits 000FC1                      _ADCON2bits 000FC0               ___wmul@multiplier 0060  
                      i2___wmul 16A0                      printf@flag 0088                      printf@prec 0085  
             interruptions@cont 002D                        i2_printf 0B8A             selectChanel@channel 0060  
                   _INTCON2bits 000FF1                __size_ofi2_putch 000C                        __Hrparam 0000  
                  _selectChanel 1222                        __Lrparam 0000          __end_of_InitI2C_Master 16E8  
              __size_of___awmod 0070           i2___wmul@multiplicand 0003                __size_of___lwdiv 0078  
__size_of_configUSARTInterrupts 000E                __size_of___lwmod 0062   __end_of_configUSARTInterrupts 1794  
                  ?_I2C_ReStart 0001                        _data_ADC 0095                        _changing 0251  
              __size_of_isdigit 002A                 ___lwdiv@divisor 0062                 ___lwdiv@counter 0064  
                      __ptext10 1752                        __ptext11 0850                        __ptext20 17D6  
                      __ptext12 1778                        __ptext21 1720                        __ptext13 1676  
                      __ptext30 1648                        __ptext22 16C6                        __ptext14 1612  
                      __ptext31 13A0                        __ptext15 147C                        __ptext24 0B8A  
                      __ptext16 1328                        __ptext25 17AC                        __ptext17 1786  
                      __ptext26 16E8                        __ptext18 1706                        __ptext27 16A0  
                      __ptext19 173A                        __ptext28 15D0                        __ptext29 1530  
                      _configAD 1720                      strcpy@from 0003                  i2_isdigit$1476 0002  
                 __size_of_main 0266           __end_of_write_RTC_I2c 147C                        int$flags 004C  
             _configADInterrupt 17D6                 ?_InitI2C_Master 0001                       printf@idx 0082  
                     printf@val 0086                        main@cont 008D              ?_configADInterrupt 0001  
         __CFG_CPUDIV$OSC1_PLL2 000000                       putch@byte 0060                      _INTCONbits 000FF2  
           ??_configADInterrupt 0060                        isdigit@c 0062                        intlevel2 0000  
              ___lwmod@dividend 0067                ??_I2C_Write_Byte 0060       __end_of_configADInterrupt 17E0  
                      printf@ap 0083                 ___lwmod@divisor 0069                        strcpy@cp 0005  
                      strcpy@to 0001                 ___lwmod@counter 006B                     _SSPCON1bits 000FC6  
                   _SSPCON2bits 000FC5                    ?_configRS232 0001                    ?_configTimer 0001  
